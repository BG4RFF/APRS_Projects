   1               		.file	"hw_afsk.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text.hw_afsk_adcInit,"ax",@progbits
  14               	.global	hw_afsk_adcInit
  16               	hw_afsk_adcInit:
  17               	.LFB28:
  18               		.file 1 "aprs/hw/hw_afsk.c"
   1:aprs/hw/hw_afsk.c **** /**
   2:aprs/hw/hw_afsk.c ****  * \file
   3:aprs/hw/hw_afsk.c ****  * <!--
   4:aprs/hw/hw_afsk.c ****  * This file is part of BeRTOS.
   5:aprs/hw/hw_afsk.c ****  *
   6:aprs/hw/hw_afsk.c ****  * Bertos is free software; you can redistribute it and/or modify
   7:aprs/hw/hw_afsk.c ****  * it under the terms of the GNU General Public License as published by
   8:aprs/hw/hw_afsk.c ****  * the Free Software Foundation; either version 2 of the License, or
   9:aprs/hw/hw_afsk.c ****  * (at your option) any later version.
  10:aprs/hw/hw_afsk.c ****  *
  11:aprs/hw/hw_afsk.c ****  * This program is distributed in the hope that it will be useful,
  12:aprs/hw/hw_afsk.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:aprs/hw/hw_afsk.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:aprs/hw/hw_afsk.c ****  * GNU General Public License for more details.
  15:aprs/hw/hw_afsk.c ****  *
  16:aprs/hw/hw_afsk.c ****  * You should have received a copy of the GNU General Public License
  17:aprs/hw/hw_afsk.c ****  * along with this program; if not, write to the Free Software
  18:aprs/hw/hw_afsk.c ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:aprs/hw/hw_afsk.c ****  *
  20:aprs/hw/hw_afsk.c ****  * As a special exception, you may use this file as part of a free software
  21:aprs/hw/hw_afsk.c ****  * library without restriction.  Specifically, if other files instantiate
  22:aprs/hw/hw_afsk.c ****  * templates or use macros or inline functions from this file, or you compile
  23:aprs/hw/hw_afsk.c ****  * this file and link it with other files to produce an executable, this
  24:aprs/hw/hw_afsk.c ****  * file does not by itself cause the resulting executable to be covered by
  25:aprs/hw/hw_afsk.c ****  * the GNU General Public License.  This exception does not however
  26:aprs/hw/hw_afsk.c ****  * invalidate any other reasons why the executable file might be covered by
  27:aprs/hw/hw_afsk.c ****  * the GNU General Public License.
  28:aprs/hw/hw_afsk.c ****  *
  29:aprs/hw/hw_afsk.c ****  * Copyright 2010 Develer S.r.l. (http://www.develer.com/)
  30:aprs/hw/hw_afsk.c ****  * All Rights Reserved.
  31:aprs/hw/hw_afsk.c ****  * -->
  32:aprs/hw/hw_afsk.c ****  *
  33:aprs/hw/hw_afsk.c ****  * \brief AFSK modem hardware-specific definitions.
  34:aprs/hw/hw_afsk.c ****  *
  35:aprs/hw/hw_afsk.c ****  *
  36:aprs/hw/hw_afsk.c ****  * \author Francesco Sacchi <batt@develer.com>
  37:aprs/hw/hw_afsk.c ****  */
  38:aprs/hw/hw_afsk.c **** 
  39:aprs/hw/hw_afsk.c **** 
  40:aprs/hw/hw_afsk.c **** #include "hw_afsk.h"
  41:aprs/hw/hw_afsk.c **** 
  42:aprs/hw/hw_afsk.c **** #include <net/afsk.h>
  43:aprs/hw/hw_afsk.c **** #include <cpu/irq.h>
  44:aprs/hw/hw_afsk.c **** 
  45:aprs/hw/hw_afsk.c **** #include <avr/io.h>
  46:aprs/hw/hw_afsk.c **** #include <avr/interrupt.h>
  47:aprs/hw/hw_afsk.c **** 
  48:aprs/hw/hw_afsk.c **** 
  49:aprs/hw/hw_afsk.c **** /*
  50:aprs/hw/hw_afsk.c ****  * Here we are using only one modem. If you need to receive
  51:aprs/hw/hw_afsk.c ****  * from multiple modems, you need to define an array of contexts.
  52:aprs/hw/hw_afsk.c ****  */
  53:aprs/hw/hw_afsk.c **** static Afsk *ctx;
  54:aprs/hw/hw_afsk.c **** 
  55:aprs/hw/hw_afsk.c **** void hw_afsk_adcInit(int ch, Afsk *_ctx)
  56:aprs/hw/hw_afsk.c **** {
  19               		.loc 1 56 0
  20               		.cfi_startproc
  21               	.LVL0:
  22 0000 CF93      		push r28	 ;  74	*pushqi/1	[length = 1]
  23               	.LCFI0:
  24               		.cfi_def_cfa_offset 3
  25               		.cfi_offset 28, -2
  26 0002 DF93      		push r29	 ;  75	*pushqi/1	[length = 1]
  27               	.LCFI1:
  28               		.cfi_def_cfa_offset 4
  29               		.cfi_offset 29, -3
  30               	/* prologue: function */
  31               	/* frame size = 0 */
  32               	/* stack size = 2 */
  33               	.L__stack_usage = 2
  34 0004 EC01      		movw r28,r24	 ;  2	*movhi/1	[length = 1]
  57:aprs/hw/hw_afsk.c **** 	ctx = _ctx;
  35               		.loc 1 57 0
  36 0006 7093 0000 		sts ctx+1,r23	 ;  7	*movhi/3	[length = 4]
  37 000a 6093 0000 		sts ctx,r22
  58:aprs/hw/hw_afsk.c **** 	ASSERT(ch <= 5);
  38               		.loc 1 58 0
  39 000e 8630      		cpi r24,6	 ;  8	*cmphi/4	[length = 2]
  40 0010 9105      		cpc r25,__zero_reg__
  41 0012 04F0      		brlt .L2	 ;  9	branch	[length = 1]
  42               		.loc 1 58 0 is_stmt 0 discriminator 1
  43 0014 80E0      		ldi r24,lo8(__c.1697)	 ;  14	*movhi/4	[length = 2]
  44 0016 90E0      		ldi r25,hi8(__c.1697)
  45               	.LVL1:
  46 0018 60E0      		ldi r22,lo8(__c.1699)	 ;  15	*movhi/4	[length = 2]
  47 001a 70E0      		ldi r23,hi8(__c.1699)
  48               	.LVL2:
  49 001c 4AE3      		ldi r20,lo8(58)	 ;  16	*movhi/4	[length = 2]
  50 001e 50E0      		ldi r21,hi8(58)
  51 0020 0E94 0000 		call __bassert_P	 ;  17	call_value_insn/3	[length = 2]
  52               	.LVL3:
  53               	.L2:
  59:aprs/hw/hw_afsk.c **** 
  60:aprs/hw/hw_afsk.c **** 	AFSK_STROBE_INIT();
  54               		.loc 1 60 0 is_stmt 1
  55 0024 259A      		sbi 36-32,5	 ;  24	*sbi	[length = 1]
  61:aprs/hw/hw_afsk.c **** 	AFSK_STROBE_OFF();
  56               		.loc 1 61 0
  57 0026 2D98      		cbi 37-32,5	 ;  29	*cbi	[length = 1]
  62:aprs/hw/hw_afsk.c **** 	/* Set prescaler to clk/8 (2 MHz), CTC, top = ICR1 */
  63:aprs/hw/hw_afsk.c **** 	TCCR1A = 0;
  58               		.loc 1 63 0
  59 0028 1092 8000 		sts 128,__zero_reg__	 ;  31	*movqi/3	[length = 2]
  64:aprs/hw/hw_afsk.c **** 	TCCR1B = BV(CS11) | BV(WGM13) | BV(WGM12);
  60               		.loc 1 64 0
  61 002c 8AE1      		ldi r24,lo8(26)	 ;  33	*movqi/2	[length = 1]
  62 002e 8093 8100 		sts 129,r24	 ;  34	*movqi/3	[length = 2]
  65:aprs/hw/hw_afsk.c **** 	/* Set max value to obtain a 9600Hz freq */
  66:aprs/hw/hw_afsk.c **** 	ICR1 = ((CPU_FREQ / 8) / 9600) - 1;
  63               		.loc 1 66 0
  64 0032 87E6      		ldi r24,lo8(103)	 ;  36	*movhi/4	[length = 2]
  65 0034 90E0      		ldi r25,hi8(103)
  66 0036 9093 8700 		sts 134+1,r25	 ;  37	*movhi/3	[length = 4]
  67 003a 8093 8600 		sts 134,r24
  67:aprs/hw/hw_afsk.c **** 
  68:aprs/hw/hw_afsk.c **** 	/* Set reference to AVCC (5V), select CH */
  69:aprs/hw/hw_afsk.c **** 	ADMUX = BV(REFS0) | ch;
  68               		.loc 1 69 0
  69 003e 8C2F      		mov r24,r28	 ;  71	*movqi/1	[length = 1]
  70 0040 8064      		ori r24,lo8(64)	 ;  38	iorqi3/2	[length = 1]
  71 0042 8093 7C00 		sts 124,r24	 ;  40	*movqi/3	[length = 2]
  70:aprs/hw/hw_afsk.c **** 
  71:aprs/hw/hw_afsk.c **** 	DDRC &= ~BV(ch);
  72               		.loc 1 71 0
  73 0046 27B1      		in r18,39-32	 ;  42	*movqi/4	[length = 1]
  74 0048 81E0      		ldi r24,lo8(1)	 ;  43	*movhi/4	[length = 2]
  75 004a 90E0      		ldi r25,hi8(1)
  76 004c 00C0      		rjmp 2f	 ;  44	ashlhi3/1	[length = 6]
  77 004e 880F      	1:	lsl r24
  78 0050 991F      		rol r25
  79 0052 CA95      	2:	dec r28
  80 0054 02F4      		brpl 1b
  81 0056 382F      		mov r19,r24	 ;  73	*movqi/1	[length = 1]
  82 0058 3095      		com r19	 ;  45	one_cmplqi2	[length = 1]
  83 005a 2323      		and r18,r19	 ;  46	andqi3/1	[length = 1]
  84 005c 27B9      		out 39-32,r18	 ;  48	*movqi/3	[length = 1]
  72:aprs/hw/hw_afsk.c **** 	PORTC &= ~BV(ch);
  85               		.loc 1 72 0
  86 005e 98B1      		in r25,40-32	 ;  50	*movqi/4	[length = 1]
  87 0060 9323      		and r25,r19	 ;  51	andqi3/1	[length = 1]
  88 0062 98B9      		out 40-32,r25	 ;  53	*movqi/3	[length = 1]
  73:aprs/hw/hw_afsk.c **** 	DIDR0 |= BV(ch);
  89               		.loc 1 73 0
  90 0064 9091 7E00 		lds r25,126	 ;  55	*movqi/4	[length = 2]
  91 0068 982B      		or r25,r24	 ;  56	iorqi3/1	[length = 1]
  92 006a 9093 7E00 		sts 126,r25	 ;  58	*movqi/3	[length = 2]
  74:aprs/hw/hw_afsk.c **** 
  75:aprs/hw/hw_afsk.c **** 	/* Set autotrigger on Timer1 Input capture flag */
  76:aprs/hw/hw_afsk.c **** 	ADCSRB = BV(ADTS2) | BV(ADTS1) | BV(ADTS0);
  93               		.loc 1 76 0
  94 006e 87E0      		ldi r24,lo8(7)	 ;  60	*movqi/2	[length = 1]
  95 0070 8093 7B00 		sts 123,r24	 ;  61	*movqi/3	[length = 2]
  77:aprs/hw/hw_afsk.c **** 	/* Enable ADC, autotrigger, 1MHz, IRQ enabled */
  78:aprs/hw/hw_afsk.c **** 	/* We are using the ADC a bit out of specifications otherwise it's not fast enough for our
  79:aprs/hw/hw_afsk.c **** 	 * purposes */
  80:aprs/hw/hw_afsk.c **** 	ADCSRA = BV(ADEN) | BV(ADSC) | BV(ADATE) | BV(ADIE) | BV(ADPS2);
  96               		.loc 1 80 0
  97 0074 8CEE      		ldi r24,lo8(-20)	 ;  63	*movqi/2	[length = 1]
  98 0076 8093 7A00 		sts 122,r24	 ;  64	*movqi/3	[length = 2]
  99               	/* epilogue start */
  81:aprs/hw/hw_afsk.c **** }
 100               		.loc 1 81 0
 101 007a DF91      		pop r29	 ;  78	popqi	[length = 1]
 102 007c CF91      		pop r28	 ;  79	popqi	[length = 1]
 103               	.LVL4:
 104 007e 0895      		ret	 ;  80	return_from_epilogue	[length = 1]
 105               		.cfi_endproc
 106               	.LFE28:
 108               		.section	.text.__vector_21,"ax",@progbits
 109               	.global	__vector_21
 111               	__vector_21:
 112               	.LFB29:
  82:aprs/hw/hw_afsk.c **** 
  83:aprs/hw/hw_afsk.c **** 
  84:aprs/hw/hw_afsk.c **** bool hw_afsk_dac_isr;
  85:aprs/hw/hw_afsk.c **** 
  86:aprs/hw/hw_afsk.c **** /*
  87:aprs/hw/hw_afsk.c ****  * This is how you declare an ISR.
  88:aprs/hw/hw_afsk.c ****  */
  89:aprs/hw/hw_afsk.c **** DECLARE_ISR(ADC_vect)
  90:aprs/hw/hw_afsk.c **** {
 113               		.loc 1 90 0
 114               		.cfi_startproc
 115 0000 1F92      		push r1	 ;  45	*pushqi/1	[length = 1]
 116               	.LCFI2:
 117               		.cfi_def_cfa_offset 3
 118               		.cfi_offset 1, -2
 119 0002 0F92      		push r0	 ;  46	*pushqi/1	[length = 1]
 120               	.LCFI3:
 121               		.cfi_def_cfa_offset 4
 122               		.cfi_offset 0, -3
 123 0004 0FB6      		in r0,__SREG__	 ;  47	*movqi/4	[length = 1]
 124 0006 0F92      		push r0	 ;  48	*pushqi/1	[length = 1]
 125 0008 1124      		clr __zero_reg__	 ;  49	*movqi/7	[length = 1]
 126 000a 2F93      		push r18	 ;  51	*pushqi/1	[length = 1]
 127               	.LCFI4:
 128               		.cfi_def_cfa_offset 5
 129               		.cfi_offset 18, -4
 130 000c 3F93      		push r19	 ;  52	*pushqi/1	[length = 1]
 131               	.LCFI5:
 132               		.cfi_def_cfa_offset 6
 133               		.cfi_offset 19, -5
 134 000e 4F93      		push r20	 ;  53	*pushqi/1	[length = 1]
 135               	.LCFI6:
 136               		.cfi_def_cfa_offset 7
 137               		.cfi_offset 20, -6
 138 0010 5F93      		push r21	 ;  54	*pushqi/1	[length = 1]
 139               	.LCFI7:
 140               		.cfi_def_cfa_offset 8
 141               		.cfi_offset 21, -7
 142 0012 6F93      		push r22	 ;  55	*pushqi/1	[length = 1]
 143               	.LCFI8:
 144               		.cfi_def_cfa_offset 9
 145               		.cfi_offset 22, -8
 146 0014 7F93      		push r23	 ;  56	*pushqi/1	[length = 1]
 147               	.LCFI9:
 148               		.cfi_def_cfa_offset 10
 149               		.cfi_offset 23, -9
 150 0016 8F93      		push r24	 ;  57	*pushqi/1	[length = 1]
 151               	.LCFI10:
 152               		.cfi_def_cfa_offset 11
 153               		.cfi_offset 24, -10
 154 0018 9F93      		push r25	 ;  58	*pushqi/1	[length = 1]
 155               	.LCFI11:
 156               		.cfi_def_cfa_offset 12
 157               		.cfi_offset 25, -11
 158 001a AF93      		push r26	 ;  59	*pushqi/1	[length = 1]
 159               	.LCFI12:
 160               		.cfi_def_cfa_offset 13
 161               		.cfi_offset 26, -12
 162 001c BF93      		push r27	 ;  60	*pushqi/1	[length = 1]
 163               	.LCFI13:
 164               		.cfi_def_cfa_offset 14
 165               		.cfi_offset 27, -13
 166 001e EF93      		push r30	 ;  61	*pushqi/1	[length = 1]
 167               	.LCFI14:
 168               		.cfi_def_cfa_offset 15
 169               		.cfi_offset 30, -14
 170 0020 FF93      		push r31	 ;  62	*pushqi/1	[length = 1]
 171               	.LCFI15:
 172               		.cfi_def_cfa_offset 16
 173               		.cfi_offset 31, -15
 174               	/* prologue: Signal */
 175               	/* frame size = 0 */
 176               	/* stack size = 15 */
 177               	.L__stack_usage = 15
  91:aprs/hw/hw_afsk.c **** 	TIFR1 = BV(ICF1);
 178               		.loc 1 91 0
 179 0022 80E2      		ldi r24,lo8(32)	 ;  6	*movqi/2	[length = 1]
 180 0024 86BB      		out 54-32,r24	 ;  7	*movqi/3	[length = 1]
  92:aprs/hw/hw_afsk.c **** 	afsk_adc_isr(ctx, ((int16_t)((ADC) >> 2) - 128));
 181               		.loc 1 92 0
 182 0026 6091 7800 		lds r22,120	 ;  9	*movhi/2	[length = 4]
 183 002a 7091 7900 		lds r23,120+1
 184 002e 7695      		lsr r23	 ;  88	*lshrhi3_const/4	[length = 4]
 185 0030 6795      		ror r22
 186 0032 7695      		lsr r23
 187 0034 6795      		ror r22
 188 0036 6058      		subi r22,lo8(-(-128))	 ;  13	addqi3/2	[length = 1]
 189 0038 8091 0000 		lds r24,ctx	 ;  14	*movhi/2	[length = 4]
 190 003c 9091 0000 		lds r25,ctx+1
 191 0040 0E94 0000 		call afsk_adc_isr	 ;  16	call_insn/3	[length = 2]
  93:aprs/hw/hw_afsk.c **** 	if (hw_afsk_dac_isr)
 192               		.loc 1 93 0
 193 0044 8091 0000 		lds r24,hw_afsk_dac_isr	 ;  17	*movqi/4	[length = 2]
 194 0048 8823      		tst r24	 ;  18	*cmpqi/1	[length = 1]
 195 004a 01F0      		breq .L4	 ;  19	branch	[length = 1]
  94:aprs/hw/hw_afsk.c **** 		PORTD = afsk_dac_isr(ctx) & 0xF0;
 196               		.loc 1 94 0
 197 004c 8091 0000 		lds r24,ctx	 ;  23	*movhi/2	[length = 4]
 198 0050 9091 0000 		lds r25,ctx+1
 199 0054 0E94 0000 		call afsk_dac_isr	 ;  24	call_value_insn/3	[length = 2]
 200 0058 807F      		andi r24,lo8(-16)	 ;  26	andqi3/2	[length = 1]
 201 005a 00C0      		rjmp .L6	 ;  89	jump	[length = 1]
 202               	.L4:
  95:aprs/hw/hw_afsk.c **** 	else
  96:aprs/hw/hw_afsk.c **** 		PORTD = 128;
 203               		.loc 1 96 0
 204 005c 80E8      		ldi r24,lo8(-128)	 ;  34	*movqi/2	[length = 1]
 205               	.L6:
 206 005e 8BB9      		out 43-32,r24	 ;  35	*movqi/3	[length = 1]
 207               	/* epilogue start */
  97:aprs/hw/hw_afsk.c **** }
 208               		.loc 1 97 0
 209 0060 FF91      		pop r31	 ;  65	popqi	[length = 1]
 210 0062 EF91      		pop r30	 ;  66	popqi	[length = 1]
 211 0064 BF91      		pop r27	 ;  67	popqi	[length = 1]
 212 0066 AF91      		pop r26	 ;  68	popqi	[length = 1]
 213 0068 9F91      		pop r25	 ;  69	popqi	[length = 1]
 214 006a 8F91      		pop r24	 ;  70	popqi	[length = 1]
 215 006c 7F91      		pop r23	 ;  71	popqi	[length = 1]
 216 006e 6F91      		pop r22	 ;  72	popqi	[length = 1]
 217 0070 5F91      		pop r21	 ;  73	popqi	[length = 1]
 218 0072 4F91      		pop r20	 ;  74	popqi	[length = 1]
 219 0074 3F91      		pop r19	 ;  75	popqi	[length = 1]
 220 0076 2F91      		pop r18	 ;  76	popqi	[length = 1]
 221 0078 0F90      		pop r0	 ;  77	popqi	[length = 1]
 222 007a 0FBE      		out __SREG__,r0	 ;  78	*movqi/3	[length = 1]
 223 007c 0F90      		pop r0	 ;  79	popqi	[length = 1]
 224 007e 1F90      		pop r1	 ;  80	popqi	[length = 1]
 225 0080 1895      		reti	 ;  81	return_from_interrupt_epilogue	[length = 1]
 226               		.cfi_endproc
 227               	.LFE29:
 229               		.comm hw_afsk_dac_isr,1,1
 230               		.section	.bss.ctx,"aw",@nobits
 233               	ctx:
 234 0000 0000      		.skip 2,0
 235               		.section	.progmem.data,"a",@progbits
 238               	__c.1697:
 239 0000 6368 203C 		.string	"ch <= 5"
 239      3D20 3500 
 242               	__c.1699:
 243 0008 6170 7273 		.string	"aprs/hw/hw_afsk.c"
 243      2F68 772F 
 243      6877 5F61 
 243      6673 6B2E 
 243      6300 
 244               		.text
 245               	.Letext0:
 246               		.file 2 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h"
 247               		.file 3 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/include/stddef.h"
 248               		.file 4 "bertos/cfg/compiler.h"
 249               		.file 5 "bertos/cpu/types.h"
 250               		.file 6 "bertos/cfg/macros.h"
 251               		.file 7 "bertos/kern/kfile.h"
 252               		.file 8 "bertos/struct/list.h"
 253               		.file 9 "bertos/kern/proc.h"
 254               		.file 10 "bertos/struct/fifobuf.h"
 255               		.file 11 "bertos/net/afsk.h"
DEFINED SYMBOLS
                            *ABS*:00000000 hw_afsk.c
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccixTzl9.s:2      *ABS*:0000003f __SREG__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccixTzl9.s:3      *ABS*:0000003e __SP_H__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccixTzl9.s:4      *ABS*:0000003d __SP_L__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccixTzl9.s:5      *ABS*:00000034 __CCP__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccixTzl9.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccixTzl9.s:7      *ABS*:00000001 __zero_reg__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccixTzl9.s:16     .text.hw_afsk_adcInit:00000000 hw_afsk_adcInit
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccixTzl9.s:233    .bss.ctx:00000000 ctx
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccixTzl9.s:238    .progmem.data:00000000 __c.1697
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccixTzl9.s:242    .progmem.data:00000008 __c.1699
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccixTzl9.s:111    .text.__vector_21:00000000 __vector_21
                            *COM*:00000001 hw_afsk_dac_isr

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__bassert_P
afsk_adc_isr
afsk_dac_isr
