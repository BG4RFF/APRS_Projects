   1               		.file	"formatwr.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text._formatted_write,"ax",@progbits
  14               	.global	_formatted_write
  16               	_formatted_write:
  17               	.LFB1:
  18               		.file 1 "bertos/mware/formatwr.c"
   1:bertos/mware/formatwr.c **** /**
   2:bertos/mware/formatwr.c ****  * \file
   3:bertos/mware/formatwr.c ****  * <!--
   4:bertos/mware/formatwr.c ****  * This file is part of BeRTOS.
   5:bertos/mware/formatwr.c ****  *
   6:bertos/mware/formatwr.c ****  * Bertos is free software; you can redistribute it and/or modify
   7:bertos/mware/formatwr.c ****  * it under the terms of the GNU General Public License as published by
   8:bertos/mware/formatwr.c ****  * the Free Software Foundation; either version 2 of the License, or
   9:bertos/mware/formatwr.c ****  * (at your option) any later version.
  10:bertos/mware/formatwr.c ****  *
  11:bertos/mware/formatwr.c ****  * This program is distributed in the hope that it will be useful,
  12:bertos/mware/formatwr.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bertos/mware/formatwr.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bertos/mware/formatwr.c ****  * GNU General Public License for more details.
  15:bertos/mware/formatwr.c ****  *
  16:bertos/mware/formatwr.c ****  * You should have received a copy of the GNU General Public License
  17:bertos/mware/formatwr.c ****  * along with this program; if not, write to the Free Software
  18:bertos/mware/formatwr.c ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:bertos/mware/formatwr.c ****  *
  20:bertos/mware/formatwr.c ****  * As a special exception, you may use this file as part of a free software
  21:bertos/mware/formatwr.c ****  * library without restriction.  Specifically, if other files instantiate
  22:bertos/mware/formatwr.c ****  * templates or use macros or inline functions from this file, or you compile
  23:bertos/mware/formatwr.c ****  * this file and link it with other files to produce an executable, this
  24:bertos/mware/formatwr.c ****  * file does not by itself cause the resulting executable to be covered by
  25:bertos/mware/formatwr.c ****  * the GNU General Public License.  This exception does not however
  26:bertos/mware/formatwr.c ****  * invalidate any other reasons why the executable file might be covered by
  27:bertos/mware/formatwr.c ****  * the GNU General Public License.
  28:bertos/mware/formatwr.c ****  *
  29:bertos/mware/formatwr.c ****  * Copyright 2003, 2004, 2005, 2008 Develer S.r.l. (http://www.develer.com/)
  30:bertos/mware/formatwr.c ****  *
  31:bertos/mware/formatwr.c ****  * -->
  32:bertos/mware/formatwr.c ****  *
  33:bertos/mware/formatwr.c ****  * \version $Id: formatwr.c 3160 2010-01-20 16:38:52Z batt $
  34:bertos/mware/formatwr.c ****  *
  35:bertos/mware/formatwr.c ****  * \brief Basic "printf", "sprintf" and "fprintf" formatter.
  36:bertos/mware/formatwr.c ****  *
  37:bertos/mware/formatwr.c ****  * This module is 100% reentrant and can be adapted to user-defined routines
  38:bertos/mware/formatwr.c ****  * that needs formatters with special properties like different output
  39:bertos/mware/formatwr.c ****  * channels or new format specifiers.
  40:bertos/mware/formatwr.c ****  *
  41:bertos/mware/formatwr.c ****  * To reduce size in applications not using real numbers or long integers
  42:bertos/mware/formatwr.c ****  * the formatter may be compiled to exclude certain parts.  This is
  43:bertos/mware/formatwr.c ****  * controlled by giving a -D option a compilation time:
  44:bertos/mware/formatwr.c ****  *
  45:bertos/mware/formatwr.c ****  * \code
  46:bertos/mware/formatwr.c ****  *  -D CONFIG_PRINTF=PRINTF_FULL         Full ANSI printf formatter, with some C99 extensions
  47:bertos/mware/formatwr.c ****  *  -D CONFIG_PRINTF=PRINTF_NOFLOAT      Exclude support for floats
  48:bertos/mware/formatwr.c ****  *  -D CONFIG_PRINTF=PRINTF_REDUCED      Simplified formatter (see below)
  49:bertos/mware/formatwr.c ****  *  -D CONFIG_PRINTF=PRINTF_NOMODIFIERS  Exclude "l", "z" and "h" modifiers in reduced version
  50:bertos/mware/formatwr.c ****  *  -D CONFIG_PRINTF=PRINTF_DISABLED     No formatter at all
  51:bertos/mware/formatwr.c ****  * \endcode
  52:bertos/mware/formatwr.c ****  *
  53:bertos/mware/formatwr.c ****  * Code size on AVR4 with GCC 3.4.1 (-O2):
  54:bertos/mware/formatwr.c ****  * \li  PRINTF_FULL        2912byte (0xB60)
  55:bertos/mware/formatwr.c ****  * \li  PRINTF_NOFLOAT     1684byte (0x694)
  56:bertos/mware/formatwr.c ****  * \li  PRINTF_REDUCED      924byte (0x39C)
  57:bertos/mware/formatwr.c ****  * \li  PRINTF_NOMODIFIERS  416byte (0x1A0)
  58:bertos/mware/formatwr.c ****  *
  59:bertos/mware/formatwr.c ****  * Code/data size in words on DSP56K with CodeWarrior 6.0:
  60:bertos/mware/formatwr.c ****  * \li  PRINTF_FULL         1493/45
  61:bertos/mware/formatwr.c ****  * \li  PRINTF_NOFLOAT      795/45
  62:bertos/mware/formatwr.c ****  * \li  PRINTF_REDUCED      482/0
  63:bertos/mware/formatwr.c ****  * \li  PRINTF_NOMODIFIERS  301/0
  64:bertos/mware/formatwr.c ****  *
  65:bertos/mware/formatwr.c ****  * The reduced version of formatter is suitable when program size is critical
  66:bertos/mware/formatwr.c ****  * rather than formatting power.  This routine uses less than 20 bytes of
  67:bertos/mware/formatwr.c ****  * stack space which makes it practical even in systems with less than 256
  68:bertos/mware/formatwr.c ****  * bytes of user RAM.
  69:bertos/mware/formatwr.c ****  *
  70:bertos/mware/formatwr.c ****  * The only formatting specifiers supported by the reduced formatter are:
  71:bertos/mware/formatwr.c ****  * \code
  72:bertos/mware/formatwr.c ****  *    %% %c %s %d %o %x %X and %hd %ho %hx %hX %ld %lo %lx %lX
  73:bertos/mware/formatwr.c ****  * \endcode
  74:bertos/mware/formatwr.c ****  *
  75:bertos/mware/formatwr.c ****  * It means that real variables are not supported as well as field
  76:bertos/mware/formatwr.c ****  * width and precision arguments.
  77:bertos/mware/formatwr.c ****  */
  78:bertos/mware/formatwr.c **** 
  79:bertos/mware/formatwr.c **** 
  80:bertos/mware/formatwr.c **** #include "formatwr.h"
  81:bertos/mware/formatwr.c **** 
  82:bertos/mware/formatwr.c **** #include "cfg/cfg_formatwr.h"  /* CONFIG_ macros */
  83:bertos/mware/formatwr.c **** #include <cfg/debug.h>         /* ASSERT */
  84:bertos/mware/formatwr.c **** 
  85:bertos/mware/formatwr.c **** #include <cpu/pgm.h>
  86:bertos/mware/formatwr.c **** #include <mware/hex.h>
  87:bertos/mware/formatwr.c **** 
  88:bertos/mware/formatwr.c **** #ifndef CONFIG_PRINTF_N_FORMATTER
  89:bertos/mware/formatwr.c **** 	/** Disable the arcane %n formatter. */
  90:bertos/mware/formatwr.c **** 	#define CONFIG_PRINTF_N_FORMATTER 0
  91:bertos/mware/formatwr.c **** #endif
  92:bertos/mware/formatwr.c **** 
  93:bertos/mware/formatwr.c **** #ifndef CONFIG_PRINTF_OCTAL_FORMATTER
  94:bertos/mware/formatwr.c **** 	/** Disable the %o formatter. */
  95:bertos/mware/formatwr.c **** 	#define CONFIG_PRINTF_OCTAL_FORMATTER 0
  96:bertos/mware/formatwr.c **** #endif
  97:bertos/mware/formatwr.c **** 
  98:bertos/mware/formatwr.c **** /* True if we must keep a count of the number of characters we print. */
  99:bertos/mware/formatwr.c **** #define CONFIG_PRINTF_COUNT_CHARS (CONFIG_PRINTF_RETURN_COUNT || CONFIG_PRINTF_N_FORMATTER)
 100:bertos/mware/formatwr.c **** 
 101:bertos/mware/formatwr.c **** #if CONFIG_PRINTF
 102:bertos/mware/formatwr.c **** 
 103:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_NOFLOAT
 104:bertos/mware/formatwr.c **** 	#include <float.h>
 105:bertos/mware/formatwr.c **** 
 106:bertos/mware/formatwr.c **** 	/* Maximum precision for floating point values */
 107:bertos/mware/formatwr.c **** 	typedef long double max_float_t;
 108:bertos/mware/formatwr.c **** 
 109:bertos/mware/formatwr.c **** 	#if CONFIG_FRMWRI_BUFSIZE
 110:bertos/mware/formatwr.c **** 		#define FRMWRI_BUFSIZE CONFIG_FRMWRI_BUFSIZE
 111:bertos/mware/formatwr.c **** 	#else
 112:bertos/mware/formatwr.c **** 		/* Conservative estimate. Max float is 3.40282e+038, so %f (but not %e or %g) must have
 113:bertos/mware/formatwr.c **** 		 * space for: sign + all 38 digits + '.' + 6 decimal digits (default)
 114:bertos/mware/formatwr.c **** 		 * Use a high value to avoid unexpected buffer overflows.
 115:bertos/mware/formatwr.c **** 		 */
 116:bertos/mware/formatwr.c **** 		#define FRMWRI_BUFSIZE 134
 117:bertos/mware/formatwr.c **** 	#endif
 118:bertos/mware/formatwr.c **** #else
 119:bertos/mware/formatwr.c **** 	#if CONFIG_FRMWRI_BUFSIZE
 120:bertos/mware/formatwr.c **** 		#define FRMWRI_BUFSIZE CONFIG_FRMWRI_BUFSIZE
 121:bertos/mware/formatwr.c **** 	#else
 122:bertos/mware/formatwr.c **** 		/*
 123:bertos/mware/formatwr.c **** 		 * Conservative estimate. Should be (probably) 12 (which is the size necessary
 124:bertos/mware/formatwr.c **** 		 * to represent (2^32-1) in octal plus the sign bit.
 125:bertos/mware/formatwr.c **** 		 */
 126:bertos/mware/formatwr.c **** 		#define FRMWRI_BUFSIZE 16
 127:bertos/mware/formatwr.c **** 	#endif
 128:bertos/mware/formatwr.c **** #endif
 129:bertos/mware/formatwr.c **** 
 130:bertos/mware/formatwr.c **** /* Probably useful for fancy microcontrollers such as the PIC, nobody knows. */
 131:bertos/mware/formatwr.c **** #ifndef MEM_ATTRIBUTE
 132:bertos/mware/formatwr.c **** #define MEM_ATTRIBUTE
 133:bertos/mware/formatwr.c **** #endif
 134:bertos/mware/formatwr.c **** 
 135:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_NOMODIFIERS
 136:bertos/mware/formatwr.c **** 	#define IS_SHORT (h_modifier || (sizeof(int) == 2 && !l_modifier))
 137:bertos/mware/formatwr.c **** #else
 138:bertos/mware/formatwr.c **** 	#define IS_SHORT (sizeof(int) == 2)
 139:bertos/mware/formatwr.c **** #endif /* CONFIG_PRINTF > PRINTF_NOMODIFIERS */
 140:bertos/mware/formatwr.c **** 
 141:bertos/mware/formatwr.c **** 
 142:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_NOFLOAT
 143:bertos/mware/formatwr.c **** 
 144:bertos/mware/formatwr.c **** static char *float_conversion(MEM_ATTRIBUTE max_float_t value,
 145:bertos/mware/formatwr.c **** 		MEM_ATTRIBUTE short nr_of_digits,
 146:bertos/mware/formatwr.c **** 		MEM_ATTRIBUTE char *buf,
 147:bertos/mware/formatwr.c **** 		MEM_ATTRIBUTE char format_flag,
 148:bertos/mware/formatwr.c **** 		MEM_ATTRIBUTE char g_flag,
 149:bertos/mware/formatwr.c **** 		MEM_ATTRIBUTE bool alternate_flag)
 150:bertos/mware/formatwr.c **** {
 151:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE char *cp;
 152:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE char *buf_pointer;
 153:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE short n, i, dec_point_pos, integral_10_log;
 154:bertos/mware/formatwr.c **** 
 155:bertos/mware/formatwr.c **** 	buf_pointer = buf;
 156:bertos/mware/formatwr.c **** 	integral_10_log = 0;
 157:bertos/mware/formatwr.c **** 
 158:bertos/mware/formatwr.c **** 	if (value >= 1)
 159:bertos/mware/formatwr.c **** 	{
 160:bertos/mware/formatwr.c **** 		while (value >= 1e11) /* To speed up things a bit */
 161:bertos/mware/formatwr.c **** 		{
 162:bertos/mware/formatwr.c **** 			value /= 1e10;
 163:bertos/mware/formatwr.c **** 			integral_10_log += 10;
 164:bertos/mware/formatwr.c **** 		}
 165:bertos/mware/formatwr.c **** 		while (value >= 10)
 166:bertos/mware/formatwr.c **** 		{
 167:bertos/mware/formatwr.c **** 			value /= 10;
 168:bertos/mware/formatwr.c **** 			integral_10_log++;
 169:bertos/mware/formatwr.c **** 		}
 170:bertos/mware/formatwr.c **** 	}
 171:bertos/mware/formatwr.c **** 	else if (value) /* Not just 0.0 */
 172:bertos/mware/formatwr.c **** 	{
 173:bertos/mware/formatwr.c **** 		while (value <= 1e-10) /* To speed up things a bit */
 174:bertos/mware/formatwr.c **** 		{
 175:bertos/mware/formatwr.c **** 			value *= 1e10;
 176:bertos/mware/formatwr.c **** 			integral_10_log -= 10;
 177:bertos/mware/formatwr.c **** 		}
 178:bertos/mware/formatwr.c **** 		while (value < 1)
 179:bertos/mware/formatwr.c **** 		{
 180:bertos/mware/formatwr.c **** 			value *= 10;
 181:bertos/mware/formatwr.c **** 			integral_10_log--;
 182:bertos/mware/formatwr.c **** 		}
 183:bertos/mware/formatwr.c **** 	}
 184:bertos/mware/formatwr.c **** 	if (g_flag)
 185:bertos/mware/formatwr.c **** 	{
 186:bertos/mware/formatwr.c **** 		if (integral_10_log < nr_of_digits && integral_10_log >= -4)
 187:bertos/mware/formatwr.c **** 		{
 188:bertos/mware/formatwr.c **** 			format_flag = 0;
 189:bertos/mware/formatwr.c **** 			nr_of_digits -= integral_10_log;
 190:bertos/mware/formatwr.c **** 		}
 191:bertos/mware/formatwr.c **** 		nr_of_digits--;
 192:bertos/mware/formatwr.c **** 		if (alternate_flag)
 193:bertos/mware/formatwr.c **** 			/* %#G - No removal of trailing zeros */
 194:bertos/mware/formatwr.c **** 			g_flag = 0;
 195:bertos/mware/formatwr.c **** 		else
 196:bertos/mware/formatwr.c **** 			/* %G - Removal of trailing zeros */
 197:bertos/mware/formatwr.c **** 			alternate_flag = true;
 198:bertos/mware/formatwr.c **** 	}
 199:bertos/mware/formatwr.c **** 
 200:bertos/mware/formatwr.c **** 	/* %e or %E */
 201:bertos/mware/formatwr.c **** 	if (format_flag)
 202:bertos/mware/formatwr.c **** 	{
 203:bertos/mware/formatwr.c **** 		dec_point_pos = 0;
 204:bertos/mware/formatwr.c **** 	}
 205:bertos/mware/formatwr.c **** 	else
 206:bertos/mware/formatwr.c **** 	{
 207:bertos/mware/formatwr.c **** 		/* Less than one... */
 208:bertos/mware/formatwr.c **** 		if (integral_10_log < 0)
 209:bertos/mware/formatwr.c **** 		{
 210:bertos/mware/formatwr.c **** 			*buf_pointer++ = '0';
 211:bertos/mware/formatwr.c **** 			if ((n = nr_of_digits) || alternate_flag)
 212:bertos/mware/formatwr.c **** 				*buf_pointer++ = '.';
 213:bertos/mware/formatwr.c **** 			i = 0;
 214:bertos/mware/formatwr.c **** 			while (--i > integral_10_log && nr_of_digits)
 215:bertos/mware/formatwr.c **** 			{
 216:bertos/mware/formatwr.c **** 				*buf_pointer++ = '0';
 217:bertos/mware/formatwr.c **** 				nr_of_digits--;
 218:bertos/mware/formatwr.c **** 			}
 219:bertos/mware/formatwr.c **** 			if (integral_10_log < (-n - 1))
 220:bertos/mware/formatwr.c **** 				/* Nothing more to do */
 221:bertos/mware/formatwr.c **** 				goto CLEAN_UP;
 222:bertos/mware/formatwr.c **** 			dec_point_pos = 1;
 223:bertos/mware/formatwr.c **** 		}
 224:bertos/mware/formatwr.c **** 		else
 225:bertos/mware/formatwr.c **** 		{
 226:bertos/mware/formatwr.c **** 			dec_point_pos = - integral_10_log;
 227:bertos/mware/formatwr.c **** 		}
 228:bertos/mware/formatwr.c **** 	}
 229:bertos/mware/formatwr.c **** 
 230:bertos/mware/formatwr.c **** 	i = dec_point_pos;
 231:bertos/mware/formatwr.c **** 	while (i <= nr_of_digits )
 232:bertos/mware/formatwr.c **** 	{
 233:bertos/mware/formatwr.c **** 		value -= (max_float_t)(n = (short)value); /* n=Digit value=Remainder */
 234:bertos/mware/formatwr.c **** 		value *= 10; /* Prepare for next shot */
 235:bertos/mware/formatwr.c **** 		*buf_pointer++ = n + '0';
 236:bertos/mware/formatwr.c **** 		if ( ! i++ && (nr_of_digits || alternate_flag))
 237:bertos/mware/formatwr.c **** 			*buf_pointer++ = '.';
 238:bertos/mware/formatwr.c **** 	}
 239:bertos/mware/formatwr.c **** 
 240:bertos/mware/formatwr.c **** 	/* Rounding possible */
 241:bertos/mware/formatwr.c **** 	if (value >= 5)
 242:bertos/mware/formatwr.c **** 	{
 243:bertos/mware/formatwr.c **** 		n = 1; /* Carry */
 244:bertos/mware/formatwr.c **** 		cp = buf_pointer - 1;
 245:bertos/mware/formatwr.c **** 		do
 246:bertos/mware/formatwr.c **** 		{
 247:bertos/mware/formatwr.c **** 			if (*cp != '.')
 248:bertos/mware/formatwr.c **** 			{
 249:bertos/mware/formatwr.c **** 				if ( (*cp += n) == ('9' + 1) )
 250:bertos/mware/formatwr.c **** 				{
 251:bertos/mware/formatwr.c **** 					*cp = '0';
 252:bertos/mware/formatwr.c **** 					n = 1;
 253:bertos/mware/formatwr.c **** 				}
 254:bertos/mware/formatwr.c **** 				else
 255:bertos/mware/formatwr.c **** 					n = 0;
 256:bertos/mware/formatwr.c **** 			}
 257:bertos/mware/formatwr.c **** 		} while (cp-- > buf);
 258:bertos/mware/formatwr.c **** 		if (n)
 259:bertos/mware/formatwr.c **** 		{
 260:bertos/mware/formatwr.c **** 			/* %e or %E */
 261:bertos/mware/formatwr.c **** 			if (format_flag)
 262:bertos/mware/formatwr.c **** 			{
 263:bertos/mware/formatwr.c **** 				cp = buf_pointer;
 264:bertos/mware/formatwr.c **** 				while (cp > buf)
 265:bertos/mware/formatwr.c **** 				{
 266:bertos/mware/formatwr.c **** 					if (*(cp - 1) == '.')
 267:bertos/mware/formatwr.c **** 					{
 268:bertos/mware/formatwr.c **** 						*cp = *(cp - 2);
 269:bertos/mware/formatwr.c **** 						cp--;
 270:bertos/mware/formatwr.c **** 					}
 271:bertos/mware/formatwr.c **** 					else
 272:bertos/mware/formatwr.c **** 						*cp = *(cp - 1);
 273:bertos/mware/formatwr.c **** 					cp--;
 274:bertos/mware/formatwr.c **** 				}
 275:bertos/mware/formatwr.c **** 				integral_10_log++;
 276:bertos/mware/formatwr.c **** 			}
 277:bertos/mware/formatwr.c **** 			else
 278:bertos/mware/formatwr.c **** 			{
 279:bertos/mware/formatwr.c **** 				cp = ++buf_pointer;
 280:bertos/mware/formatwr.c **** 				while (cp > buf)
 281:bertos/mware/formatwr.c **** 				{
 282:bertos/mware/formatwr.c **** 					*cp = *(cp - 1);
 283:bertos/mware/formatwr.c **** 					cp--;
 284:bertos/mware/formatwr.c **** 				}
 285:bertos/mware/formatwr.c **** 			}
 286:bertos/mware/formatwr.c **** 			*buf = '1';
 287:bertos/mware/formatwr.c **** 		}
 288:bertos/mware/formatwr.c **** 	}
 289:bertos/mware/formatwr.c **** 
 290:bertos/mware/formatwr.c **** CLEAN_UP:
 291:bertos/mware/formatwr.c **** 	/* %G - Remove trailing zeros */
 292:bertos/mware/formatwr.c **** 	if (g_flag)
 293:bertos/mware/formatwr.c **** 	{
 294:bertos/mware/formatwr.c **** 		while (*(buf_pointer - 1) == '0')
 295:bertos/mware/formatwr.c **** 			buf_pointer--;
 296:bertos/mware/formatwr.c **** 		if (*(buf_pointer - 1) == '.')
 297:bertos/mware/formatwr.c **** 			buf_pointer--;
 298:bertos/mware/formatwr.c **** 	}
 299:bertos/mware/formatwr.c **** 
 300:bertos/mware/formatwr.c **** 	/* %e or %E */
 301:bertos/mware/formatwr.c **** 	if (format_flag)
 302:bertos/mware/formatwr.c **** 	{
 303:bertos/mware/formatwr.c **** 		*buf_pointer++ = format_flag;
 304:bertos/mware/formatwr.c **** 		if (integral_10_log < 0)
 305:bertos/mware/formatwr.c **** 		{
 306:bertos/mware/formatwr.c **** 			*buf_pointer++ = '-';
 307:bertos/mware/formatwr.c **** 			integral_10_log = -integral_10_log;
 308:bertos/mware/formatwr.c **** 		}
 309:bertos/mware/formatwr.c **** 		else
 310:bertos/mware/formatwr.c **** 			*buf_pointer++ = '+';
 311:bertos/mware/formatwr.c **** 		n = 0;
 312:bertos/mware/formatwr.c **** 		buf_pointer +=10;
 313:bertos/mware/formatwr.c **** 		do
 314:bertos/mware/formatwr.c **** 		{
 315:bertos/mware/formatwr.c **** 			n++;
 316:bertos/mware/formatwr.c **** 			*buf_pointer++ = (integral_10_log % 10) + '0';
 317:bertos/mware/formatwr.c **** 			integral_10_log /= 10;
 318:bertos/mware/formatwr.c **** 		} while ( integral_10_log || n < 2 );
 319:bertos/mware/formatwr.c **** 		for ( i = n ; n > 0 ; n-- )
 320:bertos/mware/formatwr.c **** 			*(buf_pointer - 11 - i + n) = *(buf_pointer - n);
 321:bertos/mware/formatwr.c **** 		buf_pointer -= 10;
 322:bertos/mware/formatwr.c **** 	}
 323:bertos/mware/formatwr.c **** 	return (buf_pointer);
 324:bertos/mware/formatwr.c **** }
 325:bertos/mware/formatwr.c **** 
 326:bertos/mware/formatwr.c **** #endif /* CONFIG_PRINTF > PRINTF_NOFLOAT */
 327:bertos/mware/formatwr.c **** 
 328:bertos/mware/formatwr.c **** /**
 329:bertos/mware/formatwr.c ****  * This routine forms the core and entry of the formatter.
 330:bertos/mware/formatwr.c ****  *
 331:bertos/mware/formatwr.c ****  * The conversion performed conforms to the ANSI specification for "printf".
 332:bertos/mware/formatwr.c ****  */
 333:bertos/mware/formatwr.c **** int
 334:bertos/mware/formatwr.c **** PGM_FUNC(_formatted_write)(const char * PGM_ATTR format,
 335:bertos/mware/formatwr.c **** 		void put_one_char(char, void *),
 336:bertos/mware/formatwr.c **** 		void *secret_pointer,
 337:bertos/mware/formatwr.c **** 		va_list ap)
 338:bertos/mware/formatwr.c **** {
  19               		.loc 1 338 0
  20               		.cfi_startproc
  21               	.LVL0:
  22 0000 2F92      		push r2	 ;  2969	*pushqi/1	[length = 1]
  23               	.LCFI0:
  24               		.cfi_def_cfa_offset 3
  25               		.cfi_offset 2, -2
  26 0002 3F92      		push r3	 ;  2970	*pushqi/1	[length = 1]
  27               	.LCFI1:
  28               		.cfi_def_cfa_offset 4
  29               		.cfi_offset 3, -3
  30 0004 4F92      		push r4	 ;  2971	*pushqi/1	[length = 1]
  31               	.LCFI2:
  32               		.cfi_def_cfa_offset 5
  33               		.cfi_offset 4, -4
  34 0006 5F92      		push r5	 ;  2972	*pushqi/1	[length = 1]
  35               	.LCFI3:
  36               		.cfi_def_cfa_offset 6
  37               		.cfi_offset 5, -5
  38 0008 6F92      		push r6	 ;  2973	*pushqi/1	[length = 1]
  39               	.LCFI4:
  40               		.cfi_def_cfa_offset 7
  41               		.cfi_offset 6, -6
  42 000a 7F92      		push r7	 ;  2974	*pushqi/1	[length = 1]
  43               	.LCFI5:
  44               		.cfi_def_cfa_offset 8
  45               		.cfi_offset 7, -7
  46 000c 8F92      		push r8	 ;  2975	*pushqi/1	[length = 1]
  47               	.LCFI6:
  48               		.cfi_def_cfa_offset 9
  49               		.cfi_offset 8, -8
  50 000e 9F92      		push r9	 ;  2976	*pushqi/1	[length = 1]
  51               	.LCFI7:
  52               		.cfi_def_cfa_offset 10
  53               		.cfi_offset 9, -9
  54 0010 AF92      		push r10	 ;  2977	*pushqi/1	[length = 1]
  55               	.LCFI8:
  56               		.cfi_def_cfa_offset 11
  57               		.cfi_offset 10, -10
  58 0012 BF92      		push r11	 ;  2978	*pushqi/1	[length = 1]
  59               	.LCFI9:
  60               		.cfi_def_cfa_offset 12
  61               		.cfi_offset 11, -11
  62 0014 CF92      		push r12	 ;  2979	*pushqi/1	[length = 1]
  63               	.LCFI10:
  64               		.cfi_def_cfa_offset 13
  65               		.cfi_offset 12, -12
  66 0016 DF92      		push r13	 ;  2980	*pushqi/1	[length = 1]
  67               	.LCFI11:
  68               		.cfi_def_cfa_offset 14
  69               		.cfi_offset 13, -13
  70 0018 EF92      		push r14	 ;  2981	*pushqi/1	[length = 1]
  71               	.LCFI12:
  72               		.cfi_def_cfa_offset 15
  73               		.cfi_offset 14, -14
  74 001a FF92      		push r15	 ;  2982	*pushqi/1	[length = 1]
  75               	.LCFI13:
  76               		.cfi_def_cfa_offset 16
  77               		.cfi_offset 15, -15
  78 001c 0F93      		push r16	 ;  2983	*pushqi/1	[length = 1]
  79               	.LCFI14:
  80               		.cfi_def_cfa_offset 17
  81               		.cfi_offset 16, -16
  82 001e 1F93      		push r17	 ;  2984	*pushqi/1	[length = 1]
  83               	.LCFI15:
  84               		.cfi_def_cfa_offset 18
  85               		.cfi_offset 17, -17
  86 0020 CF93      		push r28	 ;  2985	*pushqi/1	[length = 1]
  87               	.LCFI16:
  88               		.cfi_def_cfa_offset 19
  89               		.cfi_offset 28, -18
  90 0022 DF93      		push r29	 ;  2986	*pushqi/1	[length = 1]
  91               	.LCFI17:
  92               		.cfi_def_cfa_offset 20
  93               		.cfi_offset 29, -19
  94 0024 CDB7      		in r28,__SP_L__	 ;  2987	*movhi_sp/2	[length = 2]
  95 0026 DEB7      		in r29,__SP_H__
  96 0028 C45A      		subi r28,lo8(-(-164))	 ;  2988	*addhi3/4	[length = 2]
  97 002a D040      		sbci r29,hi8(-(-164))
  98               	.LCFI18:
  99               		.cfi_def_cfa 28, 184
 100 002c 0FB6      		in __tmp_reg__,__SREG__	 ;  2989	*movhi_sp/1	[length = 5]
 101 002e F894      		cli
 102 0030 DEBF      		out __SP_H__,r29
 103 0032 0FBE      		out __SREG__,__tmp_reg__
 104 0034 CDBF      		out __SP_L__,r28
 105               	/* prologue: function */
 106               	/* frame size = 164 */
 107               	/* stack size = 182 */
 108               	.L__stack_usage = 182
 109 0036 FC01      		movw r30,r24	 ;  30	*movhi/1	[length = 1]
 110 0038 C856      		subi r28,lo8(-152)	 ;  31	*movhi/3	[length = 6]
 111 003a DF4F      		sbci r29,hi8(-152)
 112 003c 7983      		std Y+1,r23
 113 003e 6883      		st Y,r22
 114 0040 C859      		subi r28,lo8(152)
 115 0042 D040      		sbci r29,hi8(152)
 116 0044 C656      		subi r28,lo8(-154)	 ;  32	*movhi/3	[length = 6]
 117 0046 DF4F      		sbci r29,hi8(-154)
 118 0048 5983      		std Y+1,r21
 119 004a 4883      		st Y,r20
 120 004c CA59      		subi r28,lo8(154)
 121 004e D040      		sbci r29,hi8(154)
 122 0050 A901      		movw r20,r18	 ;  33	*movhi/1	[length = 1]
 123               	.LVL1:
 339:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_REDUCED
 340:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE static char bad_conversion[] = "???";
 341:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE static char null_pointer[] = "<NULL>";
 342:bertos/mware/formatwr.c **** 
 343:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE int precision;
 344:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE int n;
 345:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 346:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE int nr_of_chars;
 347:bertos/mware/formatwr.c **** #endif
 348:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE int field_width;
 349:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE char format_flag;
 350:bertos/mware/formatwr.c **** 	enum PLUS_SPACE_FLAGS {
 351:bertos/mware/formatwr.c **** 		PSF_NONE, PSF_PLUS, PSF_MINUS
 352:bertos/mware/formatwr.c **** 	};
 353:bertos/mware/formatwr.c **** 	enum DIV_FACTOR {
 354:bertos/mware/formatwr.c **** 		DIV_DEC, DIV_HEX,
 355:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_OCTAL_FORMATTER
 356:bertos/mware/formatwr.c **** 		DIV_OCT,
 357:bertos/mware/formatwr.c **** #endif
 358:bertos/mware/formatwr.c **** 	};
 359:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE struct {
 360:bertos/mware/formatwr.c **** 		enum PLUS_SPACE_FLAGS plus_space_flag : 2;
 361:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_OCTAL_FORMATTER
 362:bertos/mware/formatwr.c **** 		enum DIV_FACTOR div_factor : 2;
 363:bertos/mware/formatwr.c **** #else
 364:bertos/mware/formatwr.c **** 		enum DIV_FACTOR div_factor : 1;
 365:bertos/mware/formatwr.c **** #endif
 366:bertos/mware/formatwr.c **** 		bool left_adjust : 1;
 367:bertos/mware/formatwr.c **** 		bool l_L_modifier : 1;
 368:bertos/mware/formatwr.c **** 		bool h_modifier : 1;
 369:bertos/mware/formatwr.c **** 		bool alternate_flag : 1;
 370:bertos/mware/formatwr.c **** 		bool nonzero_value : 1;
 371:bertos/mware/formatwr.c **** 		bool zeropad : 1;
 372:bertos/mware/formatwr.c **** #if CPU_HARVARD
 373:bertos/mware/formatwr.c **** 		bool progmem : 1;
 374:bertos/mware/formatwr.c **** #endif
 375:bertos/mware/formatwr.c **** 	} flags;
 376:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE unsigned long ulong;
 377:bertos/mware/formatwr.c **** 
 378:bertos/mware/formatwr.c **** #if CONFIG_PRINTF >  PRINTF_NOFLOAT
 379:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE max_float_t fvalue;
 380:bertos/mware/formatwr.c **** #endif
 381:bertos/mware/formatwr.c **** 
 382:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE char *buf_pointer;
 383:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE char *ptr;
 384:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE const char *hex;
 385:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE char buf[FRMWRI_BUFSIZE];
 386:bertos/mware/formatwr.c **** 
 387:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 388:bertos/mware/formatwr.c **** 	nr_of_chars = 0;
 124               		.loc 1 388 0
 125 0052 C557      		subi r28,lo8(-139)	 ;  39	*movhi/3	[length = 6]
 126 0054 DF4F      		sbci r29,hi8(-139)
 127 0056 1982      		std Y+1,__zero_reg__
 128 0058 1882      		st Y,__zero_reg__
 129 005a CB58      		subi r28,lo8(139)
 130 005c D040      		sbci r29,hi8(139)
 389:bertos/mware/formatwr.c **** #endif
 390:bertos/mware/formatwr.c **** 	for (;;)    /* Until full format string read */
 391:bertos/mware/formatwr.c **** 	{
 392:bertos/mware/formatwr.c **** 		while ((format_flag = PGM_READ_CHAR(format++)) != '%')    /* Until '%' or '\0' */
 393:bertos/mware/formatwr.c **** 		{
 394:bertos/mware/formatwr.c **** 			if (!format_flag)
 395:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_RETURN_COUNT
 396:bertos/mware/formatwr.c **** 				return (nr_of_chars);
 397:bertos/mware/formatwr.c **** #else
 398:bertos/mware/formatwr.c **** 				return 0;
 399:bertos/mware/formatwr.c **** #endif
 400:bertos/mware/formatwr.c **** 			put_one_char(format_flag, secret_pointer);
 401:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 402:bertos/mware/formatwr.c **** 			nr_of_chars++;
 403:bertos/mware/formatwr.c **** #endif
 404:bertos/mware/formatwr.c **** 		}
 405:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '%')    /* %% prints as % */
 406:bertos/mware/formatwr.c **** 		{
 407:bertos/mware/formatwr.c **** 			format++;
 408:bertos/mware/formatwr.c **** 			put_one_char('%', secret_pointer);
 409:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 410:bertos/mware/formatwr.c **** 			nr_of_chars++;
 411:bertos/mware/formatwr.c **** #endif
 412:bertos/mware/formatwr.c **** 			continue;
 413:bertos/mware/formatwr.c **** 		}
 414:bertos/mware/formatwr.c **** 
 415:bertos/mware/formatwr.c **** 		flags.left_adjust = false;
 416:bertos/mware/formatwr.c **** 		flags.alternate_flag = false;
 417:bertos/mware/formatwr.c **** 		flags.plus_space_flag = PSF_NONE;
 418:bertos/mware/formatwr.c **** 		flags.zeropad = false;
 419:bertos/mware/formatwr.c **** #if CPU_HARVARD
 420:bertos/mware/formatwr.c **** 		flags.progmem = false;
 421:bertos/mware/formatwr.c **** #endif
 422:bertos/mware/formatwr.c **** 		ptr = buf_pointer = &buf[0];
 423:bertos/mware/formatwr.c **** 		hex = HEX_tab;
 424:bertos/mware/formatwr.c **** 
 425:bertos/mware/formatwr.c **** 		/* check for leading '-', '+', ' ','#' or '0' flags  */
 426:bertos/mware/formatwr.c **** 		for (;;)
 427:bertos/mware/formatwr.c **** 		{
 428:bertos/mware/formatwr.c **** 			switch (PGM_READ_CHAR(format))
 429:bertos/mware/formatwr.c **** 			{
 430:bertos/mware/formatwr.c **** 				case ' ':
 431:bertos/mware/formatwr.c **** 					if (flags.plus_space_flag)
 432:bertos/mware/formatwr.c **** 						goto NEXT_FLAG;
 433:bertos/mware/formatwr.c **** 				case '+':
 434:bertos/mware/formatwr.c **** 					flags.plus_space_flag = PSF_PLUS;
 435:bertos/mware/formatwr.c **** 					goto NEXT_FLAG;
 436:bertos/mware/formatwr.c **** 				case '-':
 437:bertos/mware/formatwr.c **** 					flags.left_adjust = true;
 438:bertos/mware/formatwr.c **** 					goto NEXT_FLAG;
 439:bertos/mware/formatwr.c **** 				case '#':
 440:bertos/mware/formatwr.c **** 					flags.alternate_flag = true;
 441:bertos/mware/formatwr.c **** 					goto NEXT_FLAG;
 442:bertos/mware/formatwr.c **** 				case '0':
 443:bertos/mware/formatwr.c **** 					flags.zeropad = true;
 444:bertos/mware/formatwr.c **** 					goto NEXT_FLAG;
 445:bertos/mware/formatwr.c **** 			}
 446:bertos/mware/formatwr.c **** 			break;
 447:bertos/mware/formatwr.c **** NEXT_FLAG:
 448:bertos/mware/formatwr.c **** 			format++;
 449:bertos/mware/formatwr.c **** 		}
 450:bertos/mware/formatwr.c **** 
 451:bertos/mware/formatwr.c **** 		/* Optional field width (may be '*') */
 452:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '*')
 453:bertos/mware/formatwr.c **** 		{
 454:bertos/mware/formatwr.c **** 			field_width = va_arg(ap, int);
 455:bertos/mware/formatwr.c **** 			if (field_width < 0)
 456:bertos/mware/formatwr.c **** 			{
 457:bertos/mware/formatwr.c **** 				field_width = -field_width;
 458:bertos/mware/formatwr.c **** 				flags.left_adjust = true;
 459:bertos/mware/formatwr.c **** 			}
 460:bertos/mware/formatwr.c **** 			format++;
 461:bertos/mware/formatwr.c **** 		}
 462:bertos/mware/formatwr.c **** 		else
 463:bertos/mware/formatwr.c **** 		{
 464:bertos/mware/formatwr.c **** 			field_width = 0;
 465:bertos/mware/formatwr.c **** 			while (PGM_READ_CHAR(format) >= '0' && PGM_READ_CHAR(format) <= '9')
 466:bertos/mware/formatwr.c **** 				field_width = field_width * 10 + (PGM_READ_CHAR(format++) - '0');
 467:bertos/mware/formatwr.c **** 		}
 468:bertos/mware/formatwr.c **** 
 469:bertos/mware/formatwr.c **** 		if (flags.left_adjust)
 470:bertos/mware/formatwr.c **** 			flags.zeropad = false;
 471:bertos/mware/formatwr.c **** 
 472:bertos/mware/formatwr.c **** 		/* Optional precision (or '*') */
 473:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '.')
 474:bertos/mware/formatwr.c **** 		{
 475:bertos/mware/formatwr.c **** 			if (PGM_READ_CHAR(++format) == '*')
 476:bertos/mware/formatwr.c **** 			{
 477:bertos/mware/formatwr.c **** 				precision = va_arg(ap, int);
 478:bertos/mware/formatwr.c **** 				format++;
 479:bertos/mware/formatwr.c **** 			}
 480:bertos/mware/formatwr.c **** 			else
 481:bertos/mware/formatwr.c **** 			{
 482:bertos/mware/formatwr.c **** 				precision = 0;
 483:bertos/mware/formatwr.c **** 				while (PGM_READ_CHAR(format) >= '0' && PGM_READ_CHAR(format) <= '9')
 484:bertos/mware/formatwr.c **** 					precision = precision * 10 + (PGM_READ_CHAR(format++) - '0');
 485:bertos/mware/formatwr.c **** 			}
 486:bertos/mware/formatwr.c **** 		}
 487:bertos/mware/formatwr.c **** 		else
 488:bertos/mware/formatwr.c **** 			precision = -1;
 489:bertos/mware/formatwr.c **** 
 490:bertos/mware/formatwr.c **** 		/* At this point, "left_adjust" is nonzero if there was
 491:bertos/mware/formatwr.c **** 		 * a sign, "zeropad" is 1 if there was a leading zero
 492:bertos/mware/formatwr.c **** 		 * and 0 otherwise, "field_width" and "precision"
 493:bertos/mware/formatwr.c **** 		 * contain numbers corresponding to the digit strings
 494:bertos/mware/formatwr.c **** 		 * before and after the decimal point, respectively,
 495:bertos/mware/formatwr.c **** 		 * and "plus_space_flag" is either 0 (no flag) or
 496:bertos/mware/formatwr.c **** 		 * contains a plus or space character. If there was no
 497:bertos/mware/formatwr.c **** 		 * decimal point, "precision" will be -1.
 498:bertos/mware/formatwr.c **** 		 */
 499:bertos/mware/formatwr.c **** 
 500:bertos/mware/formatwr.c **** 		flags.l_L_modifier = false;
 501:bertos/mware/formatwr.c **** 		flags.h_modifier = false;
 502:bertos/mware/formatwr.c **** 
 503:bertos/mware/formatwr.c **** 		/* Optional 'l','L','z' or 'h' modifier? */
 504:bertos/mware/formatwr.c **** 		switch (PGM_READ_CHAR(format))
 505:bertos/mware/formatwr.c **** 		{
 506:bertos/mware/formatwr.c **** 			case 'l':
 507:bertos/mware/formatwr.c **** 			case 'L':
 508:bertos/mware/formatwr.c **** 		#if SIZEOF_SIZE_T == SIZEOF_LONG
 509:bertos/mware/formatwr.c **** 			case 'z':
 510:bertos/mware/formatwr.c **** 				flags.l_L_modifier = true;
 511:bertos/mware/formatwr.c **** 		#elif SIZEOF_SIZE_T == SIZEOF_INT
 512:bertos/mware/formatwr.c **** 				flags.l_L_modifier = true;
 513:bertos/mware/formatwr.c **** 			case 'z':
 514:bertos/mware/formatwr.c **** 		#endif
 515:bertos/mware/formatwr.c **** 				format++;
 516:bertos/mware/formatwr.c **** 				break;
 517:bertos/mware/formatwr.c **** 
 518:bertos/mware/formatwr.c **** 			case 'h':
 519:bertos/mware/formatwr.c **** 				flags.h_modifier = true;
 520:bertos/mware/formatwr.c **** 				format++;
 521:bertos/mware/formatwr.c **** 				break;
 522:bertos/mware/formatwr.c **** 
 523:bertos/mware/formatwr.c **** 		}
 524:bertos/mware/formatwr.c **** 
 525:bertos/mware/formatwr.c **** 		/*
 526:bertos/mware/formatwr.c **** 		 * At exit from the following switch, we will emit
 527:bertos/mware/formatwr.c **** 		 * the characters starting at "buf_pointer" and
 528:bertos/mware/formatwr.c **** 		 * ending at "ptr"-1
 529:bertos/mware/formatwr.c **** 		 */
 530:bertos/mware/formatwr.c **** 		switch (format_flag = PGM_READ_CHAR(format++))
 531:bertos/mware/formatwr.c **** 		{
 532:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_N_FORMATTER
 533:bertos/mware/formatwr.c **** 			case 'n':
 534:bertos/mware/formatwr.c **** 				if (sizeof(short) != sizeof(int))
 535:bertos/mware/formatwr.c **** 				{
 536:bertos/mware/formatwr.c **** 					if (sizeof(int) != sizeof(long))
 537:bertos/mware/formatwr.c **** 					{
 538:bertos/mware/formatwr.c **** 						if (h_modifier)
 539:bertos/mware/formatwr.c **** 							*va_arg(ap, short *) = nr_of_chars;
 540:bertos/mware/formatwr.c **** 						else if (flags.l_L_modifier)
 541:bertos/mware/formatwr.c **** 							*va_arg(ap, long *) = nr_of_chars;
 542:bertos/mware/formatwr.c **** 						else
 543:bertos/mware/formatwr.c **** 							*va_arg(ap, int *) = nr_of_chars;
 544:bertos/mware/formatwr.c **** 					}
 545:bertos/mware/formatwr.c **** 					else
 546:bertos/mware/formatwr.c **** 					{
 547:bertos/mware/formatwr.c **** 						if (h_modifier)
 548:bertos/mware/formatwr.c **** 							*va_arg(ap, short *) = nr_of_chars;
 549:bertos/mware/formatwr.c **** 						else
 550:bertos/mware/formatwr.c **** 							*va_arg(ap, int *) = nr_of_chars;
 551:bertos/mware/formatwr.c **** 					}
 552:bertos/mware/formatwr.c **** 				}
 553:bertos/mware/formatwr.c **** 				else
 554:bertos/mware/formatwr.c **** 				{
 555:bertos/mware/formatwr.c **** 					if (flags.l_L_modifier)
 556:bertos/mware/formatwr.c **** 						*va_arg(ap, long *) = nr_of_chars;
 557:bertos/mware/formatwr.c **** 					else
 558:bertos/mware/formatwr.c **** 						*va_arg(ap, int *) = nr_of_chars;
 559:bertos/mware/formatwr.c **** 				}
 560:bertos/mware/formatwr.c **** 				continue;
 561:bertos/mware/formatwr.c **** #endif
 562:bertos/mware/formatwr.c **** 			case 'c':
 563:bertos/mware/formatwr.c **** 				buf[0] = va_arg(ap, int);
 564:bertos/mware/formatwr.c **** 				ptr++;
 565:bertos/mware/formatwr.c **** 				break;
 566:bertos/mware/formatwr.c **** 
 567:bertos/mware/formatwr.c **** 			/* Custom formatter for strings in program memory. */
 568:bertos/mware/formatwr.c **** 			case 'S':
 569:bertos/mware/formatwr.c **** #if CPU_HARVARD
 570:bertos/mware/formatwr.c **** 				flags.progmem = true;
 571:bertos/mware/formatwr.c **** #endif
 572:bertos/mware/formatwr.c **** 				/* Fall trough */
 573:bertos/mware/formatwr.c **** 
 574:bertos/mware/formatwr.c **** 			case 's':
 575:bertos/mware/formatwr.c **** 				if ( !(buf_pointer = va_arg(ap, char *)) )
 576:bertos/mware/formatwr.c **** 					buf_pointer = null_pointer;
 577:bertos/mware/formatwr.c **** 				if (precision < 0)
 578:bertos/mware/formatwr.c **** 					precision = 10000;
 579:bertos/mware/formatwr.c **** 
 580:bertos/mware/formatwr.c **** 				/*
 581:bertos/mware/formatwr.c **** 				 * Move `ptr' to the last character of the
 582:bertos/mware/formatwr.c **** 				 * string that will be actually printed.
 583:bertos/mware/formatwr.c **** 				 */
 584:bertos/mware/formatwr.c **** 				ptr = buf_pointer;
 585:bertos/mware/formatwr.c **** #if CPU_HARVARD
 586:bertos/mware/formatwr.c **** 				if (flags.progmem)
 587:bertos/mware/formatwr.c **** 				{
 588:bertos/mware/formatwr.c **** 					for (n=0; pgm_read_char(ptr) && n < precision; n++)
 589:bertos/mware/formatwr.c **** 						++ptr;
 590:bertos/mware/formatwr.c **** 				}
 591:bertos/mware/formatwr.c **** 				else
 592:bertos/mware/formatwr.c **** #endif
 593:bertos/mware/formatwr.c **** 				for (n=0; *ptr && n < precision; n++)
 594:bertos/mware/formatwr.c **** 					++ptr;
 595:bertos/mware/formatwr.c **** 				break;
 596:bertos/mware/formatwr.c **** 
 597:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_OCTAL_FORMATTER
 598:bertos/mware/formatwr.c **** 			case 'o':
 599:bertos/mware/formatwr.c **** 				if (flags.alternate_flag && !precision)
 600:bertos/mware/formatwr.c **** 					precision++;
 601:bertos/mware/formatwr.c **** #endif
 602:bertos/mware/formatwr.c **** 			case 'x':
 603:bertos/mware/formatwr.c **** 				hex = hex_tab;
 604:bertos/mware/formatwr.c **** 			case 'u':
 605:bertos/mware/formatwr.c **** 			case 'p':
 606:bertos/mware/formatwr.c **** 			case 'X':
 607:bertos/mware/formatwr.c **** 				if (format_flag == 'p')
 608:bertos/mware/formatwr.c **** #if defined(__AVR__) || defined(__I196__) /* 16bit pointers */
 609:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(unsigned short)va_arg(ap, char *);
 610:bertos/mware/formatwr.c **** #else /* 32bit pointers */
 611:bertos/mware/formatwr.c **** 					ulong = (unsigned long)va_arg(ap, char *);
 612:bertos/mware/formatwr.c **** #endif /* 32bit pointers */
 613:bertos/mware/formatwr.c **** 				else if (flags.l_L_modifier)
 614:bertos/mware/formatwr.c **** 					ulong = va_arg(ap, unsigned long);
 615:bertos/mware/formatwr.c **** 				else if (flags.h_modifier)
 616:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(unsigned short)va_arg(ap, unsigned int);
 617:bertos/mware/formatwr.c **** 				else
 618:bertos/mware/formatwr.c **** 					ulong = va_arg(ap, unsigned int);
 619:bertos/mware/formatwr.c **** 
 620:bertos/mware/formatwr.c **** 				flags.div_factor =
 621:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_OCTAL_FORMATTER
 622:bertos/mware/formatwr.c **** 					(format_flag == 'o') ? DIV_OCT :
 623:bertos/mware/formatwr.c **** #endif
 624:bertos/mware/formatwr.c **** 					(format_flag == 'u') ? DIV_DEC : DIV_HEX;
 625:bertos/mware/formatwr.c **** 				flags.plus_space_flag = PSF_NONE;
 626:bertos/mware/formatwr.c **** 				goto INTEGRAL_CONVERSION;
 627:bertos/mware/formatwr.c **** 
 628:bertos/mware/formatwr.c **** 			case 'd':
 629:bertos/mware/formatwr.c **** 			case 'i':
 630:bertos/mware/formatwr.c **** 				if (flags.l_L_modifier)
 631:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(long)va_arg(ap, long);
 632:bertos/mware/formatwr.c **** 				else
 633:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(long)va_arg(ap, int);
 634:bertos/mware/formatwr.c **** 
 635:bertos/mware/formatwr.c **** 				/* Extract sign */
 636:bertos/mware/formatwr.c **** 				if ((signed long)ulong < 0)
 637:bertos/mware/formatwr.c **** 				{
 638:bertos/mware/formatwr.c **** 					flags.plus_space_flag = PSF_MINUS;
 639:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(-((signed long)ulong));
 640:bertos/mware/formatwr.c **** 				}
 641:bertos/mware/formatwr.c **** 
 642:bertos/mware/formatwr.c **** 				flags.div_factor = DIV_DEC;
 643:bertos/mware/formatwr.c **** 
 644:bertos/mware/formatwr.c **** 				/* Now convert to digits */
 645:bertos/mware/formatwr.c **** INTEGRAL_CONVERSION:
 646:bertos/mware/formatwr.c **** 				ptr = buf_pointer = &buf[FRMWRI_BUFSIZE - 1];
 647:bertos/mware/formatwr.c **** 				flags.nonzero_value = (ulong != 0);
 648:bertos/mware/formatwr.c **** 
 649:bertos/mware/formatwr.c **** 				/* No char if zero and zero precision */
 650:bertos/mware/formatwr.c **** 				if (precision != 0 || flags.nonzero_value)
 651:bertos/mware/formatwr.c **** 				{
 652:bertos/mware/formatwr.c **** 					switch (flags.div_factor)
 653:bertos/mware/formatwr.c **** 					{
 654:bertos/mware/formatwr.c **** 					case DIV_DEC:
 655:bertos/mware/formatwr.c **** 						do
 656:bertos/mware/formatwr.c **** 							*--buf_pointer = hex[ulong % 10];
 657:bertos/mware/formatwr.c **** 						while (ulong /= 10);
 658:bertos/mware/formatwr.c **** 						break;
 659:bertos/mware/formatwr.c **** 
 660:bertos/mware/formatwr.c **** 					case DIV_HEX:
 661:bertos/mware/formatwr.c **** 						do
 662:bertos/mware/formatwr.c **** 							*--buf_pointer = hex[ulong % 16];
 663:bertos/mware/formatwr.c **** 						while (ulong /= 16);
 664:bertos/mware/formatwr.c **** 						break;
 665:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_OCTAL_FORMATTER
 666:bertos/mware/formatwr.c **** 					case DIV_OCT:
 667:bertos/mware/formatwr.c **** 						do
 668:bertos/mware/formatwr.c **** 							*--buf_pointer = hex[ulong % 8];
 669:bertos/mware/formatwr.c **** 						while (ulong /= 8);
 670:bertos/mware/formatwr.c **** 						break;
 671:bertos/mware/formatwr.c **** #endif
 672:bertos/mware/formatwr.c **** 					}
 673:bertos/mware/formatwr.c **** 				}
 674:bertos/mware/formatwr.c **** 
 675:bertos/mware/formatwr.c **** 				/* "precision" takes precedence */
 676:bertos/mware/formatwr.c **** 				if (precision < 0)
 677:bertos/mware/formatwr.c **** 					if (flags.zeropad)
 678:bertos/mware/formatwr.c **** 						precision = field_width - (flags.plus_space_flag != PSF_NONE);
 679:bertos/mware/formatwr.c **** 				while (precision > (int)(ptr - buf_pointer))
 680:bertos/mware/formatwr.c **** 					*--buf_pointer = '0';
 681:bertos/mware/formatwr.c **** 
 682:bertos/mware/formatwr.c **** 				if (flags.alternate_flag && flags.nonzero_value)
 683:bertos/mware/formatwr.c **** 				{
 684:bertos/mware/formatwr.c **** 					if (format_flag == 'x' || format_flag == 'X')
 685:bertos/mware/formatwr.c **** 					{
 686:bertos/mware/formatwr.c **** 						*--buf_pointer = format_flag;
 687:bertos/mware/formatwr.c **** 						*--buf_pointer = '0';
 688:bertos/mware/formatwr.c **** 					}
 689:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_OCTAL_FORMATTER
 690:bertos/mware/formatwr.c **** 					else if ((format_flag == 'o') && (*buf_pointer != '0'))
 691:bertos/mware/formatwr.c **** 					{
 692:bertos/mware/formatwr.c **** 						*--buf_pointer = '0';
 693:bertos/mware/formatwr.c **** 					}
 694:bertos/mware/formatwr.c **** #endif
 695:bertos/mware/formatwr.c **** 				}
 696:bertos/mware/formatwr.c **** 				ASSERT(buf_pointer >= buf);
 697:bertos/mware/formatwr.c **** 				break;
 698:bertos/mware/formatwr.c **** 
 699:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_NOFLOAT
 700:bertos/mware/formatwr.c **** 			case 'g':
 701:bertos/mware/formatwr.c **** 			case 'G':
 702:bertos/mware/formatwr.c **** 				n = 1;
 703:bertos/mware/formatwr.c **** 				format_flag -= 2;
 704:bertos/mware/formatwr.c **** 				if (! precision)
 705:bertos/mware/formatwr.c **** 				{
 706:bertos/mware/formatwr.c **** 					precision = 1;
 707:bertos/mware/formatwr.c **** 				}
 708:bertos/mware/formatwr.c **** 				goto FLOATING_CONVERSION;
 709:bertos/mware/formatwr.c **** 			case 'f':
 710:bertos/mware/formatwr.c **** 				format_flag = 0;
 711:bertos/mware/formatwr.c **** 			case 'e':
 712:bertos/mware/formatwr.c **** 			case 'E':
 713:bertos/mware/formatwr.c **** 				n = 0;
 714:bertos/mware/formatwr.c **** FLOATING_CONVERSION:
 715:bertos/mware/formatwr.c **** 				if (precision < 0)
 716:bertos/mware/formatwr.c **** 				{
 717:bertos/mware/formatwr.c **** 					precision = 6;
 718:bertos/mware/formatwr.c **** 				}
 719:bertos/mware/formatwr.c **** 
 720:bertos/mware/formatwr.c **** 				if (sizeof(double) != sizeof(max_float_t))
 721:bertos/mware/formatwr.c **** 				{
 722:bertos/mware/formatwr.c **** 					fvalue = flags.l_L_modifier ?
 723:bertos/mware/formatwr.c **** 						va_arg(ap,max_float_t) : va_arg(ap,double);
 724:bertos/mware/formatwr.c **** 				}
 725:bertos/mware/formatwr.c **** 				else
 726:bertos/mware/formatwr.c **** 					fvalue = va_arg(ap,max_float_t);
 727:bertos/mware/formatwr.c **** 
 728:bertos/mware/formatwr.c **** 				if (fvalue < 0)
 729:bertos/mware/formatwr.c **** 				{
 730:bertos/mware/formatwr.c **** 					flags.plus_space_flag = PSF_MINUS;
 731:bertos/mware/formatwr.c **** 					fvalue = -fvalue;
 732:bertos/mware/formatwr.c **** 				}
 733:bertos/mware/formatwr.c **** 				ptr = float_conversion (fvalue,
 131               		.loc 1 733 0
 132 005e 9E01      		movw r18,r28	 ;  2729	*movhi/1	[length = 1]
 133               	.LVL2:
 134 0060 2F5F      		subi r18,lo8(-(1))	 ;  1895	*addhi3/4	[length = 2]
 135 0062 3F4F      		sbci r19,hi8(-(1))
 136 0064 C957      		subi r28,lo8(-135)	 ;  2730	*movhi/3	[length = 6]
 137 0066 DF4F      		sbci r29,hi8(-135)
 138 0068 3983      		std Y+1,r19
 139 006a 2883      		st Y,r18
 140 006c C758      		subi r28,lo8(135)
 141 006e D040      		sbci r29,hi8(135)
 142 0070 CE01      		movw r24,r28	 ;  2731	*movhi/1	[length = 1]
 143               	.LVL3:
 144 0072 8A57      		subi r24,lo8(-(134))	 ;  1982	*addhi3/4	[length = 2]
 145 0074 9F4F      		sbci r25,hi8(-(134))
 146 0076 C757      		subi r28,lo8(-137)	 ;  2732	*movhi/3	[length = 6]
 147 0078 DF4F      		sbci r29,hi8(-137)
 148 007a 9983      		std Y+1,r25
 149 007c 8883      		st Y,r24
 150 007e C958      		subi r28,lo8(137)
 151 0080 D040      		sbci r29,hi8(137)
 152 0082 00C0      		rjmp .L2	 ;  3108	jump	[length = 1]
 153               	.LVL4:
 154               	.L4:
 394:bertos/mware/formatwr.c **** 			if (!format_flag)
 155               		.loc 1 394 0
 156 0084 8823      		tst r24	 ;  148	*cmpqi/1	[length = 1]
 157 0086 01F4      		brne .L3	 ;  149	branch	[length = 1]
 734:bertos/mware/formatwr.c **** 						(short)precision,
 735:bertos/mware/formatwr.c **** 						buf_pointer += field_width,
 736:bertos/mware/formatwr.c **** 						format_flag,
 737:bertos/mware/formatwr.c **** 						(char)n,
 738:bertos/mware/formatwr.c **** 						flags.alternate_flag);
 739:bertos/mware/formatwr.c **** 				if (flags.zeropad)
 740:bertos/mware/formatwr.c **** 				{
 741:bertos/mware/formatwr.c **** 					precision = field_width - (flags.plus_space_flag != PSF_NONE);
 742:bertos/mware/formatwr.c **** 					while (precision > ptr - buf_pointer)
 743:bertos/mware/formatwr.c **** 						*--buf_pointer = '0';
 744:bertos/mware/formatwr.c **** 				}
 745:bertos/mware/formatwr.c **** 				break;
 746:bertos/mware/formatwr.c **** 
 747:bertos/mware/formatwr.c **** #endif /* CONFIG_PRINTF <= PRINTF_NOFLOAT */
 748:bertos/mware/formatwr.c **** 
 749:bertos/mware/formatwr.c **** 			case '\0': /* Really bad place to find NUL in */
 750:bertos/mware/formatwr.c **** 				format--;
 751:bertos/mware/formatwr.c **** 
 752:bertos/mware/formatwr.c **** 			default:
 753:bertos/mware/formatwr.c **** 				/* Undefined conversion! */
 754:bertos/mware/formatwr.c **** 				ptr = buf_pointer = bad_conversion;
 755:bertos/mware/formatwr.c **** 				ptr += sizeof(bad_conversion) - 1;
 756:bertos/mware/formatwr.c **** 				break;
 757:bertos/mware/formatwr.c **** 
 758:bertos/mware/formatwr.c **** 		}
 759:bertos/mware/formatwr.c **** 
 760:bertos/mware/formatwr.c **** 		/*
 761:bertos/mware/formatwr.c **** 		 * This part emittes the formatted string to "put_one_char".
 762:bertos/mware/formatwr.c **** 		 */
 763:bertos/mware/formatwr.c **** 
 764:bertos/mware/formatwr.c **** 		/* If field_width == 0 then nothing should be written. */
 765:bertos/mware/formatwr.c **** 		precision = ptr - buf_pointer;
 766:bertos/mware/formatwr.c **** 
 767:bertos/mware/formatwr.c **** 		if ( precision > field_width)
 768:bertos/mware/formatwr.c **** 		{
 769:bertos/mware/formatwr.c **** 			n = 0;
 770:bertos/mware/formatwr.c **** 		}
 771:bertos/mware/formatwr.c **** 		else
 772:bertos/mware/formatwr.c **** 		{
 773:bertos/mware/formatwr.c **** 			n = field_width - precision - (flags.plus_space_flag != PSF_NONE);
 774:bertos/mware/formatwr.c **** 		}
 775:bertos/mware/formatwr.c **** 
 776:bertos/mware/formatwr.c **** 		/* emit any leading pad characters */
 777:bertos/mware/formatwr.c **** 		if (!flags.left_adjust)
 778:bertos/mware/formatwr.c **** 			while (--n >= 0)
 779:bertos/mware/formatwr.c **** 			{
 780:bertos/mware/formatwr.c **** 				put_one_char(' ', secret_pointer);
 781:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 782:bertos/mware/formatwr.c **** 				nr_of_chars++;
 783:bertos/mware/formatwr.c **** #endif
 784:bertos/mware/formatwr.c **** 			}
 785:bertos/mware/formatwr.c **** 
 786:bertos/mware/formatwr.c **** 		/* emit flag characters (if any) */
 787:bertos/mware/formatwr.c **** 		if (flags.plus_space_flag)
 788:bertos/mware/formatwr.c **** 		{
 789:bertos/mware/formatwr.c **** 			put_one_char(flags.plus_space_flag == PSF_PLUS ? '+' : '-', secret_pointer);
 790:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 791:bertos/mware/formatwr.c **** 			nr_of_chars++;
 792:bertos/mware/formatwr.c **** #endif
 793:bertos/mware/formatwr.c **** 		}
 794:bertos/mware/formatwr.c **** 
 795:bertos/mware/formatwr.c **** #if CPU_HARVARD
 796:bertos/mware/formatwr.c **** 		if (flags.progmem)
 797:bertos/mware/formatwr.c **** 		{
 798:bertos/mware/formatwr.c **** 			while (--precision >= 0)
 799:bertos/mware/formatwr.c **** 			{
 800:bertos/mware/formatwr.c **** 				put_one_char(pgm_read_char(buf_pointer++), secret_pointer);
 801:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 802:bertos/mware/formatwr.c **** 				nr_of_chars++;
 803:bertos/mware/formatwr.c **** #endif
 804:bertos/mware/formatwr.c **** 			}
 805:bertos/mware/formatwr.c **** 		}
 806:bertos/mware/formatwr.c **** 		else
 807:bertos/mware/formatwr.c **** #endif /* CPU_HARVARD */
 808:bertos/mware/formatwr.c **** 		{
 809:bertos/mware/formatwr.c **** 			/* emit the string itself */
 810:bertos/mware/formatwr.c **** 			while (--precision >= 0)
 811:bertos/mware/formatwr.c **** 			{
 812:bertos/mware/formatwr.c **** 				put_one_char(*buf_pointer++, secret_pointer);
 813:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 814:bertos/mware/formatwr.c **** 				nr_of_chars++;
 815:bertos/mware/formatwr.c **** #endif
 816:bertos/mware/formatwr.c **** 			}
 817:bertos/mware/formatwr.c **** 		}
 818:bertos/mware/formatwr.c **** 
 819:bertos/mware/formatwr.c **** 		/* emit trailing space characters */
 820:bertos/mware/formatwr.c **** 		if (flags.left_adjust)
 821:bertos/mware/formatwr.c **** 			while (--n >= 0)
 822:bertos/mware/formatwr.c **** 			{
 823:bertos/mware/formatwr.c **** 				put_one_char(' ', secret_pointer);
 824:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 825:bertos/mware/formatwr.c **** 				nr_of_chars++;
 826:bertos/mware/formatwr.c **** #endif
 827:bertos/mware/formatwr.c **** 			}
 828:bertos/mware/formatwr.c **** 	}
 829:bertos/mware/formatwr.c **** 
 830:bertos/mware/formatwr.c **** #else /* PRINTF_REDUCED starts here */
 831:bertos/mware/formatwr.c **** 
 832:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_NOMODIFIERS
 833:bertos/mware/formatwr.c **** 	bool l_modifier, h_modifier;
 834:bertos/mware/formatwr.c **** 	unsigned long u_val, div_val;
 835:bertos/mware/formatwr.c **** #else
 836:bertos/mware/formatwr.c **** 	unsigned int u_val, div_val;
 837:bertos/mware/formatwr.c **** #endif /* CONFIG_PRINTF > PRINTF_NOMODIFIERS */
 838:bertos/mware/formatwr.c **** 
 839:bertos/mware/formatwr.c **** 	char format_flag;
 840:bertos/mware/formatwr.c **** 	unsigned int nr_of_chars, base;
 841:bertos/mware/formatwr.c **** 	char outChar;
 842:bertos/mware/formatwr.c **** 	char *ptr;
 843:bertos/mware/formatwr.c **** 
 844:bertos/mware/formatwr.c **** 	nr_of_chars = 0;
 845:bertos/mware/formatwr.c **** 	for (;;)    /* Until full format string read */
 846:bertos/mware/formatwr.c **** 	{
 847:bertos/mware/formatwr.c **** 		while ((format_flag = PGM_READ_CHAR(format++)) != '%')    /* Until '%' or '\0' */
 848:bertos/mware/formatwr.c **** 		{
 849:bertos/mware/formatwr.c **** 			if (!format_flag)
 850:bertos/mware/formatwr.c **** 				return (nr_of_chars);
 851:bertos/mware/formatwr.c **** 			put_one_char(format_flag, secret_pointer);
 852:bertos/mware/formatwr.c **** 			nr_of_chars++;
 853:bertos/mware/formatwr.c **** 		}
 854:bertos/mware/formatwr.c **** 
 855:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_NOMODIFIERS
 856:bertos/mware/formatwr.c **** 		/*
 857:bertos/mware/formatwr.c **** 		 * Optional 'l', 'z' or 'h' modifiers?
 858:bertos/mware/formatwr.c **** 		 */
 859:bertos/mware/formatwr.c **** 		l_modifier = h_modifier = false;
 860:bertos/mware/formatwr.c **** 		switch (PGM_READ_CHAR(format))
 861:bertos/mware/formatwr.c **** 		{
 862:bertos/mware/formatwr.c **** 			case 'l':
 863:bertos/mware/formatwr.c **** 		#if SIZEOF_SIZE_T == SIZEOF_LONG
 864:bertos/mware/formatwr.c **** 			case 'z':
 865:bertos/mware/formatwr.c **** 				l_modifier = true;
 866:bertos/mware/formatwr.c **** 		#elif SIZEOF_SIZE_T == SIZEOF_INT
 867:bertos/mware/formatwr.c **** 				l_modifier = true;
 868:bertos/mware/formatwr.c **** 			case 'z':
 869:bertos/mware/formatwr.c **** 		#endif
 870:bertos/mware/formatwr.c **** 				format++;
 871:bertos/mware/formatwr.c **** 				break;
 872:bertos/mware/formatwr.c **** 
 873:bertos/mware/formatwr.c **** 			case 'h':
 874:bertos/mware/formatwr.c **** 				h_modifier = true;
 875:bertos/mware/formatwr.c **** 				format++;
 876:bertos/mware/formatwr.c **** 				break;
 877:bertos/mware/formatwr.c **** 		}
 878:bertos/mware/formatwr.c **** #endif /* CONFIG_PRINTF > PRINTF_NOMODIFIERS */
 879:bertos/mware/formatwr.c **** 
 880:bertos/mware/formatwr.c **** 		switch (format_flag = PGM_READ_CHAR(format++))
 881:bertos/mware/formatwr.c **** 		{
 882:bertos/mware/formatwr.c **** 			case 'c':
 883:bertos/mware/formatwr.c **** 				format_flag = va_arg(ap, int);
 884:bertos/mware/formatwr.c **** 			default:
 885:bertos/mware/formatwr.c **** 				put_one_char(format_flag, secret_pointer);
 886:bertos/mware/formatwr.c **** 				nr_of_chars++;
 887:bertos/mware/formatwr.c **** 				continue;
 888:bertos/mware/formatwr.c **** 
 889:bertos/mware/formatwr.c **** 			case 's':
 890:bertos/mware/formatwr.c **** 				ptr = va_arg(ap, char *);
 891:bertos/mware/formatwr.c **** 				while ((format_flag = *ptr++))
 892:bertos/mware/formatwr.c **** 				{
 893:bertos/mware/formatwr.c **** 					put_one_char(format_flag, secret_pointer);
 894:bertos/mware/formatwr.c **** 					nr_of_chars++;
 895:bertos/mware/formatwr.c **** 				}
 896:bertos/mware/formatwr.c **** 				continue;
 897:bertos/mware/formatwr.c **** 
 898:bertos/mware/formatwr.c **** 			case 'o':
 899:bertos/mware/formatwr.c **** 				base = 8;
 900:bertos/mware/formatwr.c **** 				if (IS_SHORT)
 901:bertos/mware/formatwr.c **** 					div_val = 0x8000;
 902:bertos/mware/formatwr.c **** 				else
 903:bertos/mware/formatwr.c **** 					div_val = 0x40000000;
 904:bertos/mware/formatwr.c **** 				goto CONVERSION_LOOP;
 905:bertos/mware/formatwr.c **** 
 906:bertos/mware/formatwr.c **** 			case 'd':
 907:bertos/mware/formatwr.c **** 				base = 10;
 908:bertos/mware/formatwr.c **** 				if (IS_SHORT)
 909:bertos/mware/formatwr.c **** 					div_val = 10000;
 910:bertos/mware/formatwr.c **** 				else
 911:bertos/mware/formatwr.c **** 					div_val = 1000000000;
 912:bertos/mware/formatwr.c **** 				goto CONVERSION_LOOP;
 913:bertos/mware/formatwr.c **** 
 914:bertos/mware/formatwr.c **** 			case 'X':
 915:bertos/mware/formatwr.c **** 			case 'x':
 916:bertos/mware/formatwr.c **** 				base = 16;
 917:bertos/mware/formatwr.c **** 				if (IS_SHORT)
 918:bertos/mware/formatwr.c **** 					div_val = 0x1000;
 919:bertos/mware/formatwr.c **** 				else
 920:bertos/mware/formatwr.c **** 					div_val = 0x10000000;
 921:bertos/mware/formatwr.c **** 
 922:bertos/mware/formatwr.c **** CONVERSION_LOOP:
 923:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_NOMODIFIERS
 924:bertos/mware/formatwr.c **** 				if (h_modifier)
 925:bertos/mware/formatwr.c **** 				{
 926:bertos/mware/formatwr.c **** 					if (format_flag == 'd')
 927:bertos/mware/formatwr.c **** 						u_val = (short)va_arg(ap, int);
 928:bertos/mware/formatwr.c **** 					else
 929:bertos/mware/formatwr.c **** 						u_val = (unsigned short)va_arg(ap, int);
 930:bertos/mware/formatwr.c **** 				}
 931:bertos/mware/formatwr.c **** 				else if (l_modifier)
 932:bertos/mware/formatwr.c **** 					u_val = va_arg(ap, long);
 933:bertos/mware/formatwr.c **** 				else
 934:bertos/mware/formatwr.c **** 				{
 935:bertos/mware/formatwr.c **** 					if (format_flag == 'd')
 936:bertos/mware/formatwr.c **** 						u_val = va_arg(ap, int);
 937:bertos/mware/formatwr.c **** 					else
 938:bertos/mware/formatwr.c **** 						u_val = va_arg(ap, unsigned int);
 939:bertos/mware/formatwr.c **** 				}
 940:bertos/mware/formatwr.c **** 
 941:bertos/mware/formatwr.c **** #else /* CONFIG_PRINTF > PRINTF_NOMODIFIERS */
 942:bertos/mware/formatwr.c **** 				u_val = va_arg(ap,int);
 943:bertos/mware/formatwr.c **** #endif /* CONFIG_PRINTF > PRINTF_NOMODIFIERS */
 944:bertos/mware/formatwr.c **** 				if (format_flag == 'd')
 945:bertos/mware/formatwr.c **** 				{
 946:bertos/mware/formatwr.c **** 					if (((int)u_val) < 0)
 947:bertos/mware/formatwr.c **** 					{
 948:bertos/mware/formatwr.c **** 						u_val = - u_val;
 949:bertos/mware/formatwr.c **** 						put_one_char('-', secret_pointer);
 950:bertos/mware/formatwr.c **** 						nr_of_chars++;
 951:bertos/mware/formatwr.c **** 					}
 952:bertos/mware/formatwr.c **** 				}
 953:bertos/mware/formatwr.c **** 				while (div_val > 1 && div_val > u_val)
 954:bertos/mware/formatwr.c **** 				{
 955:bertos/mware/formatwr.c **** 					div_val /= base;
 956:bertos/mware/formatwr.c **** 				}
 957:bertos/mware/formatwr.c **** 				do
 958:bertos/mware/formatwr.c **** 				{
 959:bertos/mware/formatwr.c **** 					outChar = (u_val / div_val) + '0';
 960:bertos/mware/formatwr.c **** 					if (outChar > '9')
 961:bertos/mware/formatwr.c **** 					{
 962:bertos/mware/formatwr.c **** 						if (format_flag == 'x')
 963:bertos/mware/formatwr.c **** 							outChar += 'a'-'9'-1;
 964:bertos/mware/formatwr.c **** 						else
 965:bertos/mware/formatwr.c **** 							outChar += 'A'-'9'-1;
 966:bertos/mware/formatwr.c **** 					}
 967:bertos/mware/formatwr.c **** 					put_one_char(outChar, secret_pointer);
 968:bertos/mware/formatwr.c **** 					nr_of_chars++;
 969:bertos/mware/formatwr.c **** 					u_val %= div_val;
 970:bertos/mware/formatwr.c **** 					div_val /= base;
 971:bertos/mware/formatwr.c **** 				}
 972:bertos/mware/formatwr.c **** 				while (div_val);
 973:bertos/mware/formatwr.c **** 
 974:bertos/mware/formatwr.c **** 		} /* end switch(format_flag...) */
 975:bertos/mware/formatwr.c **** 	}
 976:bertos/mware/formatwr.c **** #endif /* CONFIG_PRINTF > PRINTF_REDUCED */
 977:bertos/mware/formatwr.c **** }
 158               		.loc 1 977 0
 159 0088 C557      		subi r28,lo8(-139)	 ;  1907	*movqi/4	[length = 5]
 160 008a DF4F      		sbci r29,hi8(-139)
 161 008c 8881      		ld r24,Y
 162 008e CB58      		subi r28,lo8(139)
 163 0090 D040      		sbci r29,hi8(139)
 164               	.LVL5:
 165 0092 C457      		subi r28,lo8(-140)	 ;  1908	*movqi/4	[length = 5]
 166 0094 DF4F      		sbci r29,hi8(-140)
 167 0096 9881      		ld r25,Y
 168 0098 CC58      		subi r28,lo8(140)
 169 009a D040      		sbci r29,hi8(140)
 170               	/* epilogue start */
 171 009c CC55      		subi r28,lo8(-(164))	 ;  2992	*addhi3/4	[length = 2]
 172 009e DF4F      		sbci r29,hi8(-(164))
 173 00a0 0FB6      		in __tmp_reg__,__SREG__	 ;  2993	*movhi_sp/1	[length = 5]
 174 00a2 F894      		cli
 175 00a4 DEBF      		out __SP_H__,r29
 176 00a6 0FBE      		out __SREG__,__tmp_reg__
 177 00a8 CDBF      		out __SP_L__,r28
 178 00aa DF91      		pop r29	 ;  2994	popqi	[length = 1]
 179 00ac CF91      		pop r28	 ;  2995	popqi	[length = 1]
 180 00ae 1F91      		pop r17	 ;  2996	popqi	[length = 1]
 181 00b0 0F91      		pop r16	 ;  2997	popqi	[length = 1]
 182 00b2 FF90      		pop r15	 ;  2998	popqi	[length = 1]
 183 00b4 EF90      		pop r14	 ;  2999	popqi	[length = 1]
 184 00b6 DF90      		pop r13	 ;  3000	popqi	[length = 1]
 185 00b8 CF90      		pop r12	 ;  3001	popqi	[length = 1]
 186 00ba BF90      		pop r11	 ;  3002	popqi	[length = 1]
 187 00bc AF90      		pop r10	 ;  3003	popqi	[length = 1]
 188               	.LVL6:
 189 00be 9F90      		pop r9	 ;  3004	popqi	[length = 1]
 190 00c0 8F90      		pop r8	 ;  3005	popqi	[length = 1]
 191 00c2 7F90      		pop r7	 ;  3006	popqi	[length = 1]
 192 00c4 6F90      		pop r6	 ;  3007	popqi	[length = 1]
 193 00c6 5F90      		pop r5	 ;  3008	popqi	[length = 1]
 194 00c8 4F90      		pop r4	 ;  3009	popqi	[length = 1]
 195 00ca 3F90      		pop r3	 ;  3010	popqi	[length = 1]
 196 00cc 2F90      		pop r2	 ;  3011	popqi	[length = 1]
 197               	.LVL7:
 198 00ce 0895      		ret	 ;  3012	return_from_epilogue	[length = 1]
 199               	.LVL8:
 200               	.L3:
 400:bertos/mware/formatwr.c **** 			put_one_char(format_flag, secret_pointer);
 201               		.loc 1 400 0
 202 00d0 C656      		subi r28,lo8(-154)	 ;  158	*movhi/2	[length = 6]
 203 00d2 DF4F      		sbci r29,hi8(-154)
 204 00d4 6881      		ld r22,Y
 205 00d6 7981      		ldd r23,Y+1
 206 00d8 CA59      		subi r28,lo8(154)
 207 00da D040      		sbci r29,hi8(154)
 208 00dc CD55      		subi r28,lo8(-163)	 ;  2721	*movqi/3	[length = 5]
 209 00de DF4F      		sbci r29,hi8(-163)
 210 00e0 4883      		st Y,r20
 211 00e2 C35A      		subi r28,lo8(163)
 212 00e4 D040      		sbci r29,hi8(163)
 213 00e6 CC55      		subi r28,lo8(-164)	 ;  2722	*movqi/3	[length = 5]
 214 00e8 DF4F      		sbci r29,hi8(-164)
 215 00ea 5883      		st Y,r21
 216 00ec C45A      		subi r28,lo8(164)
 217 00ee D040      		sbci r29,hi8(164)
 218 00f0 C856      		subi r28,lo8(-152)	 ;  2733	*movhi/2	[length = 6]
 219 00f2 DF4F      		sbci r29,hi8(-152)
 220 00f4 A881      		ld r26,Y
 221 00f6 B981      		ldd r27,Y+1
 222 00f8 C859      		subi r28,lo8(152)
 223 00fa D040      		sbci r29,hi8(152)
 224 00fc FD01      		movw r30,r26	 ;  159	call_insn/2	[length = 2]
 225 00fe 0995      		icall
 226               	.LVL9:
 402:bertos/mware/formatwr.c **** 			nr_of_chars++;
 227               		.loc 1 402 0
 228 0100 C557      		subi r28,lo8(-139)	 ;  2734	*movhi/2	[length = 6]
 229 0102 DF4F      		sbci r29,hi8(-139)
 230 0104 E881      		ld r30,Y
 231 0106 F981      		ldd r31,Y+1
 232 0108 CB58      		subi r28,lo8(139)
 233 010a D040      		sbci r29,hi8(139)
 234 010c 3196      		adiw r30,1	 ;  160	*addhi3/2	[length = 1]
 235 010e C557      		subi r28,lo8(-139)	 ;  2735	*movhi/3	[length = 6]
 236 0110 DF4F      		sbci r29,hi8(-139)
 237 0112 F983      		std Y+1,r31
 238 0114 E883      		st Y,r30
 239 0116 CB58      		subi r28,lo8(139)
 240 0118 D040      		sbci r29,hi8(139)
 241               	.LVL10:
 242 011a CD55      		subi r28,lo8(-163)	 ;  2723	*movqi/4	[length = 5]
 243 011c DF4F      		sbci r29,hi8(-163)
 244 011e 4881      		ld r20,Y
 245 0120 C35A      		subi r28,lo8(163)
 246 0122 D040      		sbci r29,hi8(163)
 247 0124 CC55      		subi r28,lo8(-164)	 ;  2724	*movqi/4	[length = 5]
 248 0126 DF4F      		sbci r29,hi8(-164)
 249 0128 5881      		ld r21,Y
 250 012a C45A      		subi r28,lo8(164)
 251 012c D040      		sbci r29,hi8(164)
 252 012e C157      		subi r28,lo8(-143)	 ;  35	*movhi/3	[length = 6]
 253 0130 DF4F      		sbci r29,hi8(-143)
 254 0132 5983      		std Y+1,r21
 255 0134 4883      		st Y,r20
 256 0136 CF58      		subi r28,lo8(143)
 257 0138 D040      		sbci r29,hi8(143)
 258               	.LVL11:
 259               	.L6:
 412:bertos/mware/formatwr.c **** 			continue;
 260               		.loc 1 412 0 discriminator 1
 261 013a C157      		subi r28,lo8(-143)	 ;  37	*movhi/2	[length = 6]
 262 013c DF4F      		sbci r29,hi8(-143)
 263 013e 4881      		ld r20,Y
 264 0140 5981      		ldd r21,Y+1
 265 0142 CF58      		subi r28,lo8(143)
 266 0144 D040      		sbci r29,hi8(143)
 267 0146 CE56      		subi r28,lo8(-146)	 ;  38	*movhi/2	[length = 6]
 268 0148 DF4F      		sbci r29,hi8(-146)
 269 014a E881      		ld r30,Y
 270 014c F981      		ldd r31,Y+1
 271 014e C259      		subi r28,lo8(146)
 272 0150 D040      		sbci r29,hi8(146)
 273               	.LVL12:
 274               	.L2:
 392:bertos/mware/formatwr.c **** 		while ((format_flag = PGM_READ_CHAR(format++)) != '%')    /* Until '%' or '\0' */
 275               		.loc 1 392 0 discriminator 1
 276 0152 DF01      		movw r26,r30	 ;  2736	*movhi/1	[length = 1]
 277 0154 8D91      		ld r24,X+	 ;  172	*movqi/4	[length = 1]
 278 0156 CE56      		subi r28,lo8(-146)	 ;  2737	*movhi/3	[length = 6]
 279 0158 DF4F      		sbci r29,hi8(-146)
 280 015a B983      		std Y+1,r27
 281 015c A883      		st Y,r26
 282 015e C259      		subi r28,lo8(146)
 283 0160 D040      		sbci r29,hi8(146)
 284               	.LVL13:
 285 0162 8532      		cpi r24,lo8(37)	 ;  177	*cmpqi/3	[length = 1]
 286 0164 01F0      		breq .+2	 ;  178	branch	[length = 2]
 287 0166 00C0      		rjmp .L4
 405:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '%')    /* %% prints as % */
 288               		.loc 1 405 0
 289 0168 8181      		ldd r24,Z+1	 ;  180	*movqi/4	[length = 1]
 290 016a 8532      		cpi r24,lo8(37)	 ;  181	*cmpqi/3	[length = 1]
 291 016c 01F4      		brne .L5	 ;  182	branch	[length = 1]
 407:bertos/mware/formatwr.c **** 			format++;
 292               		.loc 1 407 0
 293 016e 9F01      		movw r18,r30	 ;  2738	*movhi/1	[length = 1]
 294 0170 2E5F      		subi r18,lo8(-(2))	 ;  184	*addhi3/4	[length = 2]
 295 0172 3F4F      		sbci r19,hi8(-(2))
 296 0174 CE56      		subi r28,lo8(-146)	 ;  2739	*movhi/3	[length = 6]
 297 0176 DF4F      		sbci r29,hi8(-146)
 298 0178 3983      		std Y+1,r19
 299 017a 2883      		st Y,r18
 300 017c C259      		subi r28,lo8(146)
 301 017e D040      		sbci r29,hi8(146)
 302               	.LVL14:
 303 0180 00C0      		rjmp .L3	 ;  3110	jump	[length = 1]
 304               	.LVL15:
 305               	.L5:
 412:bertos/mware/formatwr.c **** 			continue;
 306               		.loc 1 412 0
 307 0182 CE56      		subi r28,lo8(-146)	 ;  197	*movhi/2	[length = 6]
 308 0184 DF4F      		sbci r29,hi8(-146)
 309 0186 E881      		ld r30,Y
 310 0188 F981      		ldd r31,Y+1
 311 018a C259      		subi r28,lo8(146)
 312 018c D040      		sbci r29,hi8(146)
 313               	.LVL16:
 405:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '%')    /* %% prints as % */
 314               		.loc 1 405 0
 315 018e C356      		subi r28,lo8(-157)	 ;  40	*movqi/3	[length = 5]
 316 0190 DF4F      		sbci r29,hi8(-157)
 317 0192 1882      		st Y,__zero_reg__
 318 0194 CD59      		subi r28,lo8(157)
 319 0196 D040      		sbci r29,hi8(157)
 320 0198 CB56      		subi r28,lo8(-149)	 ;  41	*movqi/3	[length = 5]
 321 019a DF4F      		sbci r29,hi8(-149)
 322 019c 1882      		st Y,__zero_reg__
 323 019e C559      		subi r28,lo8(149)
 324 01a0 D040      		sbci r29,hi8(149)
 325 01a2 3324      		clr r3	 ;  42	*movqi/7	[length = 1]
 326 01a4 CF56      		subi r28,lo8(-145)	 ;  43	*movqi/3	[length = 5]
 327 01a6 DF4F      		sbci r29,hi8(-145)
 328 01a8 1882      		st Y,__zero_reg__
 329 01aa C159      		subi r28,lo8(145)
 330 01ac D040      		sbci r29,hi8(145)
 431:bertos/mware/formatwr.c **** 					if (flags.plus_space_flag)
 331               		.loc 1 431 0
 332 01ae CC56      		subi r28,lo8(-148)	 ;  2743	*movqi/4	[length = 5]
 333 01b0 DF4F      		sbci r29,hi8(-148)
 334 01b2 3881      		ld r19,Y
 335 01b4 C459      		subi r28,lo8(148)
 336 01b6 D040      		sbci r29,hi8(148)
 337 01b8 3170      		andi r19,lo8(1)	 ;  242	andqi3/2	[length = 1]
 338 01ba 330F      		lsl r19	 ;  243	*ashlqi3/4	[length = 2]
 339 01bc 330F      		lsl r19
 340 01be 222D      		mov r18,r2	 ;  2744	*movqi/1	[length = 1]
 341 01c0 2170      		andi r18,lo8(1)	 ;  254	andqi3/2	[length = 1]
 342 01c2 2295      		swap r18	 ;  2964	*rotlqi3_4	[length = 1]
 343 01c4 207F      		andi r18,lo8(-16)	 ;  2965	andqi3/2	[length = 1]
 344 01c6 CA56      		subi r28,lo8(-150)	 ;  2745	*movqi/4	[length = 5]
 345 01c8 DF4F      		sbci r29,hi8(-150)
 346 01ca 9881      		ld r25,Y
 347 01cc C659      		subi r28,lo8(150)
 348 01ce D040      		sbci r29,hi8(150)
 349 01d0 9170      		andi r25,lo8(1)	 ;  260	andqi3/2	[length = 1]
 350 01d2 9295      		swap r25	 ;  2966	*rotlqi3_4	[length = 1]
 351 01d4 990F      		lsl r25	 ;  2967	*ashlqi3/3	[length = 1]
 352 01d6 907E      		andi r25,lo8(-32)	 ;  2968	andqi3/2	[length = 1]
 353 01d8 C956      		subi r28,lo8(-151)	 ;  2746	*movqi/4	[length = 5]
 354 01da DF4F      		sbci r29,hi8(-151)
 355 01dc 6881      		ld r22,Y
 356 01de C759      		subi r28,lo8(151)
 357 01e0 D040      		sbci r29,hi8(151)
 358 01e2 6795      		ror r22	 ;  272	*ashlqi3/5	[length = 3]
 359 01e4 6627      		clr r22
 360 01e6 6795      		ror r22
 361 01e8 70E0      		ldi r23,lo8(0)	 ;  2360	*movqi/2	[length = 1]
 362 01ea 00E0      		ldi r16,lo8(0)	 ;  2362	*movqi/2	[length = 1]
 363               	.LVL17:
 364               	.L174:
 412:bertos/mware/formatwr.c **** 			continue;
 365               		.loc 1 412 0
 366 01ec DF01      		movw r26,r30	 ;  199	*movhi/1	[length = 1]
 367               	.LVL18:
 428:bertos/mware/formatwr.c **** 			switch (PGM_READ_CHAR(format))
 368               		.loc 1 428 0
 369 01ee 8191      		ld r24,Z+	 ;  205	*movqi/4	[length = 1]
 370               	.LVL19:
 371 01f0 8B32      		cpi r24,lo8(43)	 ;  207	*cmpqi/3	[length = 1]
 372 01f2 01F0      		breq .L134	 ;  208	branch	[length = 1]
 373 01f4 8C32      		cpi r24,lo8(44)	 ;  209	*cmpqi/3	[length = 1]
 374 01f6 04F4      		brge .L13	 ;  210	branch	[length = 1]
 375 01f8 8032      		cpi r24,lo8(32)	 ;  211	*cmpqi/3	[length = 1]
 376 01fa 01F0      		breq .L8	 ;  212	branch	[length = 1]
 377 01fc 8332      		cpi r24,lo8(35)	 ;  213	*cmpqi/3	[length = 1]
 378 01fe 01F4      		brne .L7	 ;  214	branch	[length = 1]
 379 0200 00C0      		rjmp .L189	 ;  3114	jump	[length = 1]
 380               	.L13:
 381 0202 8D32      		cpi r24,lo8(45)	 ;  218	*cmpqi/3	[length = 1]
 382 0204 01F0      		breq .L11	 ;  219	branch	[length = 1]
 383 0206 8033      		cpi r24,lo8(48)	 ;  220	*cmpqi/3	[length = 1]
 384 0208 01F4      		brne .L7	 ;  221	branch	[length = 1]
 385 020a 00C0      		rjmp .L190	 ;  3118	jump	[length = 1]
 386               	.L11:
 437:bertos/mware/formatwr.c **** 					flags.left_adjust = true;
 387               		.loc 1 437 0
 388 020c 01E0      		ldi r16,lo8(1)	 ;  2027	*movqi/2	[length = 1]
 389               	.LVL20:
 390 020e 00C0      		rjmp .L174	 ;  3120	jump	[length = 1]
 391               	.LVL21:
 392               	.L8:
 431:bertos/mware/formatwr.c **** 					if (flags.plus_space_flag)
 393               		.loc 1 431 0
 394 0210 1C7F      		andi r17,lo8(-4)	 ;  239	andqi3/2	[length = 1]
 395               	.LVL22:
 396 0212 172B      		or r17,r23	 ;  240	iorqi3/1	[length = 1]
 397 0214 1B7F      		andi r17,lo8(-5)	 ;  245	andqi3/2	[length = 1]
 398 0216 132B      		or r17,r19	 ;  246	iorqi3/1	[length = 1]
 399 0218 802F      		mov r24,r16	 ;  2747	*movqi/1	[length = 1]
 400 021a 880F      		lsl r24	 ;  249	*ashlqi3/5	[length = 3]
 401 021c 880F      		lsl r24
 402 021e 880F      		lsl r24
 403 0220 177F      		andi r17,lo8(-9)	 ;  251	andqi3/2	[length = 1]
 404 0222 182B      		or r17,r24	 ;  252	iorqi3/1	[length = 1]
 405 0224 1F7E      		andi r17,lo8(-17)	 ;  257	andqi3/2	[length = 1]
 406 0226 122B      		or r17,r18	 ;  258	iorqi3/1	[length = 1]
 407 0228 1F7D      		andi r17,lo8(-33)	 ;  263	andqi3/2	[length = 1]
 408 022a 192B      		or r17,r25	 ;  264	iorqi3/1	[length = 1]
 409 022c 832D      		mov r24,r3	 ;  2748	*movqi/1	[length = 1]
 410 022e 8295      		swap r24	 ;  2961	*rotlqi3_4	[length = 1]
 411 0230 880F      		lsl r24	 ;  2962	*ashlqi3/4	[length = 2]
 412 0232 880F      		lsl r24
 413 0234 807C      		andi r24,lo8(-64)	 ;  2963	andqi3/2	[length = 1]
 414 0236 1F7B      		andi r17,lo8(-65)	 ;  269	andqi3/2	[length = 1]
 415 0238 182B      		or r17,r24	 ;  270	iorqi3/1	[length = 1]
 416 023a 1F77      		andi r17,lo8(127)	 ;  274	andqi3/2	[length = 1]
 417 023c 162B      		or r17,r22	 ;  275	iorqi3/1	[length = 1]
 418 023e 812F      		mov r24,r17	 ;  2749	*movqi/1	[length = 1]
 419 0240 8370      		andi r24,lo8(3)	 ;  277	andqi3/2	[length = 1]
 420 0242 01F0      		breq .L134	 ;  279	branch	[length = 1]
 421 0244 00C0      		rjmp .L174	 ;  3123	jump	[length = 1]
 422               	.LVL23:
 423               	.L189:
 440:bertos/mware/formatwr.c **** 					flags.alternate_flag = true;
 424               		.loc 1 440 0
 425 0246 3324      		clr r3	 ;  2037	*movqi/7	[length = 2]
 426 0248 3394      		inc r3
 441:bertos/mware/formatwr.c **** 					goto NEXT_FLAG;
 427               		.loc 1 441 0
 428 024a 00C0      		rjmp .L174	 ;  3125	jump	[length = 1]
 429               	.LVL24:
 430               	.L190:
 443:bertos/mware/formatwr.c **** 					flags.zeropad = true;
 431               		.loc 1 443 0
 432 024c 81E0      		ldi r24,lo8(1)	 ;  2028	*movqi/2	[length = 1]
 433 024e C356      		subi r28,lo8(-157)	 ;  2750	*movqi/3	[length = 5]
 434 0250 DF4F      		sbci r29,hi8(-157)
 435 0252 8883      		st Y,r24
 436 0254 CD59      		subi r28,lo8(157)
 437 0256 D040      		sbci r29,hi8(157)
 444:bertos/mware/formatwr.c **** 					goto NEXT_FLAG;
 438               		.loc 1 444 0
 439 0258 00C0      		rjmp .L174	 ;  3127	jump	[length = 1]
 440               	.LVL25:
 441               	.L134:
 434:bertos/mware/formatwr.c **** 					flags.plus_space_flag = PSF_PLUS;
 442               		.loc 1 434 0
 443 025a 71E0      		ldi r23,lo8(1)	 ;  2036	*movqi/2	[length = 1]
 444               	.L10:
 445               	.LVL26:
 449:bertos/mware/formatwr.c **** 		}
 446               		.loc 1 449 0
 447 025c 00C0      		rjmp .L174	 ;  3129	jump	[length = 1]
 448               	.LVL27:
 449               	.L7:
 450 025e CB56      		subi r28,lo8(-149)	 ;  2371	*movqi/3	[length = 5]
 451 0260 DF4F      		sbci r29,hi8(-149)
 452 0262 7883      		st Y,r23
 453 0264 C559      		subi r28,lo8(149)
 454 0266 D040      		sbci r29,hi8(149)
 455 0268 CF56      		subi r28,lo8(-145)	 ;  2373	*movqi/3	[length = 5]
 456 026a DF4F      		sbci r29,hi8(-145)
 457 026c 0883      		st Y,r16
 458 026e C159      		subi r28,lo8(145)
 459 0270 D040      		sbci r29,hi8(145)
 428:bertos/mware/formatwr.c **** 			switch (PGM_READ_CHAR(format))
 460               		.loc 1 428 0
 461 0272 C056      		subi r28,lo8(-160)	 ;  49	*movqi/3	[length = 5]
 462 0274 DF4F      		sbci r29,hi8(-160)
 463 0276 3882      		st Y,r3
 464 0278 C05A      		subi r28,lo8(160)
 465 027a D040      		sbci r29,hi8(160)
 452:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '*')
 466               		.loc 1 452 0
 467 027c 8A32      		cpi r24,lo8(42)	 ;  303	*cmpqi/3	[length = 1]
 468 027e 01F0      		breq .L15	 ;  304	branch	[length = 1]
 469 0280 C357      		subi r28,lo8(-141)	 ;  51	*movhi/3	[length = 6]
 470 0282 DF4F      		sbci r29,hi8(-141)
 471 0284 1982      		std Y+1,__zero_reg__
 472 0286 1882      		st Y,__zero_reg__
 473 0288 CD58      		subi r28,lo8(141)
 474 028a D040      		sbci r29,hi8(141)
 475 028c 20E0      		ldi r18,lo8(0)	 ;  2376	*movhi/4	[length = 2]
 476 028e 30E0      		ldi r19,hi8(0)
 477 0290 BA01      		movw r22,r20	 ;  2379	*movhi/1	[length = 1]
 478 0292 00C0      		rjmp .L16	 ;  3131	jump	[length = 1]
 479               	.L15:
 454:bertos/mware/formatwr.c **** 			field_width = va_arg(ap, int);
 480               		.loc 1 454 0
 481 0294 CA01      		movw r24,r20	 ;  2751	*movhi/1	[length = 1]
 482 0296 0296      		adiw r24,2	 ;  311	*addhi3/2	[length = 1]
 483               	.LVL28:
 484 0298 FA01      		movw r30,r20	 ;  2752	*movhi/1	[length = 1]
 485 029a 0190      		ld __tmp_reg__,Z+	 ;  313	*movhi/2	[length = 3]
 486 029c F081      		ld r31,Z
 487 029e E02D      		mov r30,__tmp_reg__
 488 02a0 C357      		subi r28,lo8(-141)	 ;  2753	*movhi/3	[length = 6]
 489 02a2 DF4F      		sbci r29,hi8(-141)
 490 02a4 F983      		std Y+1,r31
 491 02a6 E883      		st Y,r30
 492 02a8 CD58      		subi r28,lo8(141)
 493 02aa D040      		sbci r29,hi8(141)
 494               	.LVL29:
 455:bertos/mware/formatwr.c **** 			if (field_width < 0)
 495               		.loc 1 455 0
 496 02ac F7FF      		sbrs r31,7	 ;  3107	*sbrx_and_branchhi	[length = 2]
 497 02ae 00C0      		rjmp .L17
 457:bertos/mware/formatwr.c **** 				field_width = -field_width;
 498               		.loc 1 457 0
 499 02b0 F095      		com r31	 ;  318	neghi2/1	[length = 3]
 500 02b2 E195      		neg r30
 501 02b4 FF4F      		sbci r31,lo8(-1)
 502 02b6 C357      		subi r28,lo8(-141)	 ;  2754	*movhi/3	[length = 6]
 503 02b8 DF4F      		sbci r29,hi8(-141)
 504 02ba F983      		std Y+1,r31
 505 02bc E883      		st Y,r30
 506 02be CD58      		subi r28,lo8(141)
 507 02c0 D040      		sbci r29,hi8(141)
 508               	.LVL30:
 458:bertos/mware/formatwr.c **** 				flags.left_adjust = true;
 509               		.loc 1 458 0
 510 02c2 F1E0      		ldi r31,lo8(1)	 ;  50	*movqi/2	[length = 1]
 511 02c4 CF56      		subi r28,lo8(-145)	 ;  2755	*movqi/3	[length = 5]
 512 02c6 DF4F      		sbci r29,hi8(-145)
 513 02c8 F883      		st Y,r31
 514 02ca C159      		subi r28,lo8(145)
 515 02cc D040      		sbci r29,hi8(145)
 516               	.LVL31:
 517               	.L17:
 460:bertos/mware/formatwr.c **** 			format++;
 518               		.loc 1 460 0
 519 02ce FD01      		movw r30,r26	 ;  2756	*movhi/1	[length = 1]
 520 02d0 3196      		adiw r30,1	 ;  325	*addhi3/2	[length = 1]
 521               	.LVL32:
 454:bertos/mware/formatwr.c **** 			field_width = va_arg(ap, int);
 522               		.loc 1 454 0
 523 02d2 AC01      		movw r20,r24	 ;  52	*movhi/1	[length = 1]
 524 02d4 00C0      		rjmp .L18	 ;  3133	jump	[length = 1]
 525               	.LVL33:
 526               	.L19:
 466:bertos/mware/formatwr.c **** 				field_width = field_width * 10 + (PGM_READ_CHAR(format++) - '0');
 527               		.loc 1 466 0
 528 02d6 C901      		movw r24,r18	 ;  2757	*movhi/1	[length = 1]
 529 02d8 880F      		lsl r24	 ;  3105	*ashlhi3_const/2	[length = 2]
 530 02da 991F      		rol r25
 531               	.LVL34:
 532 02dc F3E0      		ldi r31,3	 ;  3106	*ashlhi3_const/5	[length = 5]
 533 02de 220F      	1:	lsl r18
 534 02e0 331F      		rol r19
 535 02e2 FA95      		dec r31
 536 02e4 01F4      		brne 1b
 537               	.LVL35:
 538 02e6 280F      		add r18,r24	 ;  334	*addhi3/1	[length = 2]
 539 02e8 391F      		adc r19,r25
 540 02ea 2053      		subi r18,lo8(-(-48))	 ;  335	*addhi3/4	[length = 2]
 541 02ec 3040      		sbci r19,hi8(-(-48))
 542 02ee 842F      		mov r24,r20	 ;  336	extendqihi2/2	[length = 4]
 543 02f0 9927      		clr r25
 544 02f2 87FD      		sbrc r24,7
 545 02f4 9095      		com r25
 546 02f6 280F      		add r18,r24	 ;  337	*addhi3/1	[length = 2]
 547 02f8 391F      		adc r19,r25
 548               	.LVL36:
 549               	.L16:
 466:bertos/mware/formatwr.c **** 				field_width = field_width * 10 + (PGM_READ_CHAR(format++) - '0');
 550               		.loc 1 466 0 is_stmt 0 discriminator 1
 551 02fa FD01      		movw r30,r26	 ;  342	*movhi/1	[length = 1]
 552               	.LVL37:
 465:bertos/mware/formatwr.c **** 			while (PGM_READ_CHAR(format) >= '0' && PGM_READ_CHAR(format) <= '9')
 553               		.loc 1 465 0 is_stmt 1 discriminator 1
 554 02fc 4D91      		ld r20,X+	 ;  345	*movqi/4	[length = 1]
 555               	.LVL38:
 556 02fe 842F      		mov r24,r20	 ;  2758	*movqi/1	[length = 1]
 557 0300 8053      		subi r24,lo8(-(-48))	 ;  348	addqi3/2	[length = 1]
 558 0302 8A30      		cpi r24,lo8(10)	 ;  349	*cmpqi/3	[length = 1]
 559 0304 00F0      		brlo .L19	 ;  350	branch	[length = 1]
 560 0306 C357      		subi r28,lo8(-141)	 ;  2382	*movhi/3	[length = 6]
 561 0308 DF4F      		sbci r29,hi8(-141)
 562 030a 3983      		std Y+1,r19
 563 030c 2883      		st Y,r18
 564 030e CD58      		subi r28,lo8(141)
 565 0310 D040      		sbci r29,hi8(141)
 566 0312 AB01      		movw r20,r22	 ;  2384	*movhi/1	[length = 1]
 567               	.LVL39:
 568               	.L18:
 469:bertos/mware/formatwr.c **** 		if (flags.left_adjust)
 569               		.loc 1 469 0
 570 0314 CF56      		subi r28,lo8(-145)	 ;  2759	*movqi/4	[length = 5]
 571 0316 DF4F      		sbci r29,hi8(-145)
 572 0318 2881      		ld r18,Y
 573 031a C159      		subi r28,lo8(145)
 574 031c D040      		sbci r29,hi8(145)
 575 031e 2223      		tst r18	 ;  357	*cmpqi/1	[length = 1]
 576 0320 01F0      		breq .L20	 ;  358	branch	[length = 1]
 470:bertos/mware/formatwr.c **** 			flags.zeropad = false;
 577               		.loc 1 470 0
 578 0322 C356      		subi r28,lo8(-157)	 ;  53	*movqi/3	[length = 5]
 579 0324 DF4F      		sbci r29,hi8(-157)
 580 0326 1882      		st Y,__zero_reg__
 581 0328 CD59      		subi r28,lo8(157)
 582 032a D040      		sbci r29,hi8(157)
 583               	.L20:
 473:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '.')
 584               		.loc 1 473 0
 585 032c 8081      		ld r24,Z	 ;  363	*movqi/4	[length = 1]
 586 032e 8E32      		cpi r24,lo8(46)	 ;  364	*cmpqi/3	[length = 1]
 587 0330 01F4      		brne .L136	 ;  365	branch	[length = 1]
 588               	.LVL40:
 475:bertos/mware/formatwr.c **** 			if (PGM_READ_CHAR(++format) == '*')
 589               		.loc 1 475 0
 590 0332 8181      		ldd r24,Z+1	 ;  368	*movqi/4	[length = 1]
 591 0334 8A32      		cpi r24,lo8(42)	 ;  369	*cmpqi/3	[length = 1]
 592 0336 01F0      		breq .L22	 ;  370	branch	[length = 1]
 593 0338 DF01      		movw r26,r30	 ;  2760	*movhi/1	[length = 1]
 594 033a 1196      		adiw r26,1	 ;  372	*addhi3/2	[length = 1]
 595 033c 8824      		clr r8	 ;  54	*movhi/5	[length = 2]
 596 033e 9924      		clr r9
 597 0340 9401      		movw r18,r8	 ;  2388	*movhi/1	[length = 1]
 598 0342 BA01      		movw r22,r20	 ;  2389	*movhi/1	[length = 1]
 599 0344 00C0      		rjmp .L23	 ;  3135	jump	[length = 1]
 600               	.L22:
 601               	.LVL41:
 477:bertos/mware/formatwr.c **** 				precision = va_arg(ap, int);
 602               		.loc 1 477 0
 603 0346 DA01      		movw r26,r20	 ;  2761	*movhi/1	[length = 1]
 604 0348 8D90      		ld r8,X+	 ;  379	*movhi/2	[length = 3]
 605 034a 9C90      		ld r9,X
 606 034c 1197      		sbiw r26,1
 607               	.LVL42:
 478:bertos/mware/formatwr.c **** 				format++;
 608               		.loc 1 478 0
 609 034e 3296      		adiw r30,2	 ;  381	*addhi3/2	[length = 1]
 610               	.LVL43:
 477:bertos/mware/formatwr.c **** 				precision = va_arg(ap, int);
 611               		.loc 1 477 0
 612 0350 4E5F      		subi r20,lo8(-(2))	 ;  56	*addhi3/4	[length = 2]
 613 0352 5F4F      		sbci r21,hi8(-(2))
 614               	.LVL44:
 615 0354 00C0      		rjmp .L21	 ;  3137	jump	[length = 1]
 616               	.LVL45:
 617               	.L24:
 484:bertos/mware/formatwr.c **** 					precision = precision * 10 + (PGM_READ_CHAR(format++) - '0');
 618               		.loc 1 484 0
 619 0356 C901      		movw r24,r18	 ;  2762	*movhi/1	[length = 1]
 620 0358 880F      		lsl r24	 ;  3103	*ashlhi3_const/2	[length = 2]
 621 035a 991F      		rol r25
 622 035c 53E0      		ldi r21,3	 ;  3104	*ashlhi3_const/5	[length = 5]
 623 035e 220F      	1:	lsl r18
 624 0360 331F      		rol r19
 625 0362 5A95      		dec r21
 626 0364 01F4      		brne 1b
 627               	.LVL46:
 628 0366 280F      		add r18,r24	 ;  390	*addhi3/1	[length = 2]
 629 0368 391F      		adc r19,r25
 630 036a 2053      		subi r18,lo8(-(-48))	 ;  391	*addhi3/4	[length = 2]
 631 036c 3040      		sbci r19,hi8(-(-48))
 632 036e 842F      		mov r24,r20	 ;  392	extendqihi2/2	[length = 4]
 633 0370 9927      		clr r25
 634 0372 87FD      		sbrc r24,7
 635 0374 9095      		com r25
 636 0376 280F      		add r18,r24	 ;  393	*addhi3/1	[length = 2]
 637 0378 391F      		adc r19,r25
 638               	.LVL47:
 639               	.L23:
 484:bertos/mware/formatwr.c **** 					precision = precision * 10 + (PGM_READ_CHAR(format++) - '0');
 640               		.loc 1 484 0 is_stmt 0 discriminator 1
 641 037a FD01      		movw r30,r26	 ;  398	*movhi/1	[length = 1]
 642               	.LVL48:
 483:bertos/mware/formatwr.c **** 				while (PGM_READ_CHAR(format) >= '0' && PGM_READ_CHAR(format) <= '9')
 643               		.loc 1 483 0 is_stmt 1 discriminator 1
 644 037c 4D91      		ld r20,X+	 ;  401	*movqi/4	[length = 1]
 645               	.LVL49:
 646 037e 842F      		mov r24,r20	 ;  2763	*movqi/1	[length = 1]
 647 0380 8053      		subi r24,lo8(-(-48))	 ;  404	addqi3/2	[length = 1]
 648 0382 8A30      		cpi r24,lo8(10)	 ;  405	*cmpqi/3	[length = 1]
 649 0384 00F0      		brlo .L24	 ;  406	branch	[length = 1]
 650 0386 4901      		movw r8,r18	 ;  2393	*movhi/1	[length = 1]
 651 0388 AB01      		movw r20,r22	 ;  2394	*movhi/1	[length = 1]
 652 038a 00C0      		rjmp .L21	 ;  3139	jump	[length = 1]
 653               	.LVL50:
 654               	.L136:
 488:bertos/mware/formatwr.c **** 			precision = -1;
 655               		.loc 1 488 0
 656 038c 8824      		clr r8	 ;  55	*movhi/5	[length = 3]
 657 038e 8A94      		dec r8
 658 0390 982C      		mov r9,r8
 659               	.L21:
 660               	.LVL51:
 504:bertos/mware/formatwr.c **** 		switch (PGM_READ_CHAR(format))
 661               		.loc 1 504 0
 662 0392 8081      		ld r24,Z	 ;  414	*movqi/4	[length = 1]
 663 0394 8836      		cpi r24,lo8(104)	 ;  415	*cmpqi/3	[length = 1]
 664 0396 01F0      		breq .L27	 ;  416	branch	[length = 1]
 665 0398 8936      		cpi r24,lo8(105)	 ;  417	*cmpqi/3	[length = 1]
 666 039a 04F4      		brge .L29	 ;  418	branch	[length = 1]
 667 039c 8C34      		cpi r24,lo8(76)	 ;  419	*cmpqi/3	[length = 1]
 668 039e 01F4      		brne .L137	 ;  420	branch	[length = 1]
 669 03a0 00C0      		rjmp .L138	 ;  3142	jump	[length = 1]
 670               	.L29:
 671 03a2 8C36      		cpi r24,lo8(108)	 ;  424	*cmpqi/3	[length = 1]
 672 03a4 01F0      		breq .L138	 ;  425	branch	[length = 1]
 673 03a6 8A37      		cpi r24,lo8(122)	 ;  426	*cmpqi/3	[length = 1]
 674 03a8 01F4      		brne .L137	 ;  427	branch	[length = 1]
 500:bertos/mware/formatwr.c **** 		flags.l_L_modifier = false;
 675               		.loc 1 500 0
 676 03aa 2224      		clr r2	 ;  57	*movqi/7	[length = 1]
 677 03ac 00C0      		rjmp .L26	 ;  3144	jump	[length = 1]
 678               	.L138:
 512:bertos/mware/formatwr.c **** 				flags.l_L_modifier = true;
 679               		.loc 1 512 0
 680 03ae 2224      		clr r2	 ;  58	*movqi/7	[length = 2]
 681 03b0 2394      		inc r2
 682               	.L26:
 683               	.LVL52:
 515:bertos/mware/formatwr.c **** 				format++;
 684               		.loc 1 515 0
 685 03b2 3196      		adiw r30,1	 ;  435	*addhi3/2	[length = 1]
 686               	.LVL53:
 501:bertos/mware/formatwr.c **** 		flags.h_modifier = false;
 687               		.loc 1 501 0
 688 03b4 CA56      		subi r28,lo8(-150)	 ;  61	*movqi/3	[length = 5]
 689 03b6 DF4F      		sbci r29,hi8(-150)
 690 03b8 1882      		st Y,__zero_reg__
 691 03ba C659      		subi r28,lo8(150)
 692 03bc D040      		sbci r29,hi8(150)
 516:bertos/mware/formatwr.c **** 				break;
 693               		.loc 1 516 0
 694 03be 00C0      		rjmp .L25	 ;  3146	jump	[length = 1]
 695               	.LVL54:
 696               	.L27:
 520:bertos/mware/formatwr.c **** 				format++;
 697               		.loc 1 520 0
 698 03c0 3196      		adiw r30,1	 ;  442	*addhi3/2	[length = 1]
 699               	.LVL55:
 519:bertos/mware/formatwr.c **** 				flags.h_modifier = true;
 700               		.loc 1 519 0
 701 03c2 B1E0      		ldi r27,lo8(1)	 ;  62	*movqi/2	[length = 1]
 702 03c4 CA56      		subi r28,lo8(-150)	 ;  2764	*movqi/3	[length = 5]
 703 03c6 DF4F      		sbci r29,hi8(-150)
 704 03c8 B883      		st Y,r27
 705 03ca C659      		subi r28,lo8(150)
 706 03cc D040      		sbci r29,hi8(150)
 707 03ce 00C0      		rjmp .L185	 ;  3148	jump	[length = 1]
 708               	.LVL56:
 709               	.L137:
 501:bertos/mware/formatwr.c **** 		flags.h_modifier = false;
 710               		.loc 1 501 0
 711 03d0 CA56      		subi r28,lo8(-150)	 ;  59	*movqi/3	[length = 5]
 712 03d2 DF4F      		sbci r29,hi8(-150)
 713 03d4 1882      		st Y,__zero_reg__
 714 03d6 C659      		subi r28,lo8(150)
 715 03d8 D040      		sbci r29,hi8(150)
 716               	.LVL57:
 717               	.L185:
 500:bertos/mware/formatwr.c **** 		flags.l_L_modifier = false;
 718               		.loc 1 500 0
 719 03da 2224      		clr r2	 ;  60	*movqi/7	[length = 1]
 720               	.LVL58:
 721               	.L25:
 530:bertos/mware/formatwr.c **** 		switch (format_flag = PGM_READ_CHAR(format++))
 722               		.loc 1 530 0
 723 03dc DF01      		movw r26,r30	 ;  2765	*movhi/1	[length = 1]
 724 03de 0D91      		ld r16,X+	 ;  449	*movqi/4	[length = 1]
 725 03e0 CE56      		subi r28,lo8(-146)	 ;  2766	*movhi/3	[length = 6]
 726 03e2 DF4F      		sbci r29,hi8(-146)
 727 03e4 B983      		std Y+1,r27
 728 03e6 A883      		st Y,r26
 729 03e8 C259      		subi r28,lo8(146)
 730 03ea D040      		sbci r29,hi8(146)
 731               	.LVL59:
 732 03ec 0536      		cpi r16,lo8(101)	 ;  453	*cmpqi/3	[length = 1]
 733 03ee 01F4      		brne .+2	 ;  454	branch	[length = 2]
 734 03f0 00C0      		rjmp .L187
 735 03f2 0636      		cpi r16,lo8(102)	 ;  455	*cmpqi/3	[length = 1]
 736 03f4 04F4      		brge .L41	 ;  456	branch	[length = 1]
 737 03f6 0335      		cpi r16,lo8(83)	 ;  457	*cmpqi/3	[length = 1]
 738 03f8 01F4      		brne .+2	 ;  458	branch	[length = 2]
 739 03fa 00C0      		rjmp .L140
 740 03fc 0435      		cpi r16,lo8(84)	 ;  459	*cmpqi/3	[length = 1]
 741 03fe 04F4      		brge .L42	 ;  460	branch	[length = 1]
 742 0400 0534      		cpi r16,lo8(69)	 ;  461	*cmpqi/3	[length = 1]
 743 0402 01F4      		brne .+2	 ;  462	branch	[length = 2]
 744 0404 00C0      		rjmp .L187
 745 0406 0734      		cpi r16,lo8(71)	 ;  463	*cmpqi/3	[length = 1]
 746 0408 01F4      		brne .+2	 ;  464	branch	[length = 2]
 747 040a 00C0      		rjmp .L33
 748 040c 0023      		tst r16	 ;  465	*cmpqi/1	[length = 1]
 749 040e 01F4      		brne .+2	 ;  466	branch	[length = 2]
 750 0410 00C0      		rjmp .L139
 751 0412 00C0      		rjmp .L30	 ;  3151	jump	[length = 1]
 752               	.L42:
 753 0414 0336      		cpi r16,lo8(99)	 ;  470	*cmpqi/3	[length = 1]
 754 0416 01F0      		breq .L36	 ;  471	branch	[length = 1]
 755 0418 0436      		cpi r16,lo8(100)	 ;  472	*cmpqi/3	[length = 1]
 756 041a 04F0      		brlt .+2	 ;  473	branch	[length = 2]
 757 041c 00C0      		rjmp .L37
 758 041e 0835      		cpi r16,lo8(88)	 ;  474	*cmpqi/3	[length = 1]
 759 0420 01F4      		brne .L30	 ;  475	branch	[length = 1]
 760 0422 00C0      		rjmp .L35	 ;  3154	jump	[length = 1]
 761               	.L41:
 762 0424 0037      		cpi r16,lo8(112)	 ;  479	*cmpqi/3	[length = 1]
 763 0426 01F4      		brne .+2	 ;  480	branch	[length = 2]
 764 0428 00C0      		rjmp .L35
 765 042a 0137      		cpi r16,lo8(113)	 ;  481	*cmpqi/3	[length = 1]
 766 042c 04F4      		brge .L43	 ;  482	branch	[length = 1]
 767 042e 0736      		cpi r16,lo8(103)	 ;  483	*cmpqi/3	[length = 1]
 768 0430 01F4      		brne .+2	 ;  484	branch	[length = 2]
 769 0432 00C0      		rjmp .L33
 770 0434 0736      		cpi r16,lo8(103)	 ;  485	*cmpqi/3	[length = 1]
 771 0436 04F4      		brge .+2	 ;  486	branch	[length = 2]
 772 0438 00C0      		rjmp .L141
 773 043a 0936      		cpi r16,lo8(105)	 ;  487	*cmpqi/3	[length = 1]
 774 043c 01F4      		brne .L30	 ;  488	branch	[length = 1]
 775 043e 00C0      		rjmp .L37	 ;  3157	jump	[length = 1]
 776               	.L43:
 777 0440 0537      		cpi r16,lo8(117)	 ;  492	*cmpqi/3	[length = 1]
 778 0442 01F4      		brne .+2	 ;  493	branch	[length = 2]
 779 0444 00C0      		rjmp .L35
 780 0446 0837      		cpi r16,lo8(120)	 ;  494	*cmpqi/3	[length = 1]
 781 0448 01F4      		brne .+2	 ;  495	branch	[length = 2]
 782 044a 00C0      		rjmp .L142
 783 044c 0337      		cpi r16,lo8(115)	 ;  496	*cmpqi/3	[length = 1]
 784 044e 01F4      		brne .L30	 ;  497	branch	[length = 1]
 420:bertos/mware/formatwr.c **** 		flags.progmem = false;
 785               		.loc 1 420 0
 786 0450 00E0      		ldi r16,lo8(0)	 ;  64	*movqi/2	[length = 1]
 787 0452 00C0      		rjmp .L34	 ;  3159	jump	[length = 1]
 788               	.L30:
 530:bertos/mware/formatwr.c **** 		switch (format_flag = PGM_READ_CHAR(format++))
 789               		.loc 1 530 0
 790 0454 C157      		subi r28,lo8(-143)	 ;  135	*movhi/3	[length = 6]
 791 0456 DF4F      		sbci r29,hi8(-143)
 792 0458 5983      		std Y+1,r21
 793 045a 4883      		st Y,r20
 794 045c CF58      		subi r28,lo8(143)
 795 045e D040      		sbci r29,hi8(143)
 796 0460 00C0      		rjmp .L188	 ;  3161	jump	[length = 1]
 797               	.L36:
 563:bertos/mware/formatwr.c **** 				buf[0] = va_arg(ap, int);
 798               		.loc 1 563 0
 799 0462 FA01      		movw r30,r20	 ;  2768	*movhi/1	[length = 1]
 800               	.LVL60:
 801 0464 3296      		adiw r30,2	 ;  514	*addhi3/2	[length = 1]
 802 0466 C157      		subi r28,lo8(-143)	 ;  2769	*movhi/3	[length = 6]
 803 0468 DF4F      		sbci r29,hi8(-143)
 804 046a F983      		std Y+1,r31
 805 046c E883      		st Y,r30
 806 046e CF58      		subi r28,lo8(143)
 807 0470 D040      		sbci r29,hi8(143)
 808               	.LVL61:
 809 0472 DA01      		movw r26,r20	 ;  2770	*movhi/1	[length = 1]
 810               	.LVL62:
 811 0474 8C91      		ld r24,X	 ;  516	*movqi/4	[length = 1]
 812 0476 8983      		std Y+1,r24	 ;  517	*movqi/3	[length = 1]
 813               	.LVL63:
 420:bertos/mware/formatwr.c **** 		flags.progmem = false;
 814               		.loc 1 420 0
 815 0478 00E0      		ldi r16,lo8(0)	 ;  121	*movqi/2	[length = 1]
 564:bertos/mware/formatwr.c **** 				ptr++;
 816               		.loc 1 564 0
 817 047a DE01      		movw r26,r28	 ;  2771	*movhi/1	[length = 1]
 818 047c 1296      		adiw r26,2	 ;  2072	*addhi3/2	[length = 1]
 422:bertos/mware/formatwr.c **** 		ptr = buf_pointer = &buf[0];
 819               		.loc 1 422 0
 820 047e 2E01      		movw r4,r28	 ;  2772	*movhi/1	[length = 1]
 821 0480 0894      		sec	 ;  2073	*addhi3/5	[length = 3]
 822 0482 411C      		adc r4,__zero_reg__
 823 0484 511C      		adc r5,__zero_reg__
 565:bertos/mware/formatwr.c **** 				break;
 824               		.loc 1 565 0
 825 0486 00C0      		rjmp .L31	 ;  3163	jump	[length = 1]
 826               	.LVL64:
 827               	.L140:
 570:bertos/mware/formatwr.c **** 				flags.progmem = true;
 828               		.loc 1 570 0
 829 0488 01E0      		ldi r16,lo8(1)	 ;  65	*movqi/2	[length = 1]
 830               	.L34:
 831               	.LVL65:
 575:bertos/mware/formatwr.c **** 				if ( !(buf_pointer = va_arg(ap, char *)) )
 832               		.loc 1 575 0
 833 048a FA01      		movw r30,r20	 ;  2773	*movhi/1	[length = 1]
 834 048c 3296      		adiw r30,2	 ;  524	*addhi3/2	[length = 1]
 835 048e C157      		subi r28,lo8(-143)	 ;  2774	*movhi/3	[length = 6]
 836 0490 DF4F      		sbci r29,hi8(-143)
 837 0492 F983      		std Y+1,r31
 838 0494 E883      		st Y,r30
 839 0496 CF58      		subi r28,lo8(143)
 840 0498 D040      		sbci r29,hi8(143)
 841               	.LVL66:
 842 049a DA01      		movw r26,r20	 ;  2775	*movhi/1	[length = 1]
 843 049c 4D90      		ld r4,X+	 ;  526	*movhi/2	[length = 3]
 844 049e 5C90      		ld r5,X
 845 04a0 1197      		sbiw r26,1
 846               	.LVL67:
 847 04a2 4114      		cp r4,__zero_reg__	 ;  528	*cmphi/2	[length = 2]
 848 04a4 5104      		cpc r5,__zero_reg__
 849 04a6 01F4      		brne .L44	 ;  529	branch	[length = 1]
 576:bertos/mware/formatwr.c **** 					buf_pointer = null_pointer;
 850               		.loc 1 576 0
 851 04a8 A0E0      		ldi r26,lo8(null_pointer.1419)	 ;  3102	*reload_inhi	[length = 4]
 852 04aa 4A2E      		mov r4,r26
 853 04ac A0E0      		ldi r26,hi8(null_pointer.1419)
 854 04ae 5A2E      		mov r5,r26
 855               	.L44:
 856               	.LVL68:
 577:bertos/mware/formatwr.c **** 				if (precision < 0)
 857               		.loc 1 577 0
 858 04b0 97FE      		sbrs r9,7	 ;  3101	*sbrx_and_branchhi	[length = 2]
 859 04b2 00C0      		rjmp .L45
 578:bertos/mware/formatwr.c **** 					precision = 10000;
 860               		.loc 1 578 0
 861 04b4 F0E1      		ldi r31,lo8(10000)	 ;  3100	*reload_inhi	[length = 4]
 862 04b6 8F2E      		mov r8,r31
 863 04b8 F7E2      		ldi r31,hi8(10000)
 864 04ba 9F2E      		mov r9,r31
 865               	.LVL69:
 866               	.L45:
 586:bertos/mware/formatwr.c **** 				if (flags.progmem)
 867               		.loc 1 586 0
 868 04bc 0023      		tst r16	 ;  541	*cmpqi/1	[length = 1]
 869 04be 01F4      		brne .L145	 ;  542	branch	[length = 1]
 870 04c0 9201      		movw r18,r4	 ;  544	*movhi/1	[length = 1]
 871 04c2 40E0      		ldi r20,lo8(0)	 ;  70	*movhi/4	[length = 2]
 872 04c4 50E0      		ldi r21,hi8(0)
 873 04c6 00C0      		rjmp .L47	 ;  3165	jump	[length = 1]
 874               	.LVL70:
 875               	.L48:
 589:bertos/mware/formatwr.c **** 						++ptr;
 876               		.loc 1 589 0 discriminator 1
 877 04c8 1196      		adiw r26,1	 ;  548	*addhi3/2	[length = 1]
 878               	.LVL71:
 588:bertos/mware/formatwr.c **** 					for (n=0; pgm_read_char(ptr) && n < precision; n++)
 879               		.loc 1 588 0 discriminator 1
 880 04ca 2F5F      		subi r18,lo8(-(1))	 ;  550	*addhi3/4	[length = 2]
 881 04cc 3F4F      		sbci r19,hi8(-(1))
 882               	.LVL72:
 883 04ce 00C0      		rjmp .L46	 ;  3167	jump	[length = 1]
 884               	.LVL73:
 885               	.L145:
 586:bertos/mware/formatwr.c **** 				if (flags.progmem)
 886               		.loc 1 586 0
 887 04d0 D201      		movw r26,r4	 ;  68	*movhi/1	[length = 1]
 888 04d2 20E0      		ldi r18,lo8(0)	 ;  69	*movhi/4	[length = 2]
 889 04d4 30E0      		ldi r19,hi8(0)
 890               	.LVL74:
 891               	.L46:
 892               	.LBB8:
 588:bertos/mware/formatwr.c **** 					for (n=0; pgm_read_char(ptr) && n < precision; n++)
 893               		.loc 1 588 0 discriminator 1
 894 04d6 FD01      		movw r30,r26	 ;  2776	*movhi/1	[length = 1]
 895               	/* #APP */
 896               	 ;  588 "bertos/mware/formatwr.c" 1
 897 04d8 8491      		lpm r24, Z
 898               		
 899               	 ;  0 "" 2
 900               	.LVL75:
 901               	/* #NOAPP */
 902               	.LBE8:
 903 04da 8823      		tst r24	 ;  560	*cmpqi/1	[length = 1]
 904 04dc 01F4      		brne .+2	 ;  561	branch	[length = 2]
 905 04de 00C0      		rjmp .L31
 588:bertos/mware/formatwr.c **** 					for (n=0; pgm_read_char(ptr) && n < precision; n++)
 906               		.loc 1 588 0 is_stmt 0 discriminator 2
 907 04e0 2815      		cp r18,r8	 ;  564	*cmphi/3	[length = 2]
 908 04e2 3905      		cpc r19,r9
 909 04e4 04F0      		brlt .L48	 ;  565	branch	[length = 1]
 910 04e6 00C0      		rjmp .L31	 ;  3170	jump	[length = 1]
 911               	.LVL76:
 912               	.L49:
 593:bertos/mware/formatwr.c **** 				for (n=0; *ptr && n < precision; n++)
 913               		.loc 1 593 0 is_stmt 1 discriminator 1
 914 04e8 4F5F      		subi r20,lo8(-(1))	 ;  571	*addhi3/4	[length = 2]
 915 04ea 5F4F      		sbci r21,hi8(-(1))
 916               	.LVL77:
 917               	.L47:
 918 04ec D901      		movw r26,r18	 ;  575	*movhi/1	[length = 1]
 919               	.LVL78:
 920 04ee 2F5F      		subi r18,lo8(-(1))	 ;  578	*addhi3/4	[length = 2]
 921 04f0 3F4F      		sbci r19,hi8(-(1))
 922               	.LVL79:
 923 04f2 8C91      		ld r24,X	 ;  579	*movqi/4	[length = 1]
 924 04f4 8823      		tst r24	 ;  580	*cmpqi/1	[length = 1]
 925 04f6 01F4      		brne .+2	 ;  581	branch	[length = 2]
 926 04f8 00C0      		rjmp .L31
 593:bertos/mware/formatwr.c **** 				for (n=0; *ptr && n < precision; n++)
 927               		.loc 1 593 0 is_stmt 0 discriminator 2
 928 04fa 4815      		cp r20,r8	 ;  584	*cmphi/3	[length = 2]
 929 04fc 5905      		cpc r21,r9
 930 04fe 04F0      		brlt .L49	 ;  585	branch	[length = 1]
 931 0500 00C0      		rjmp .L31	 ;  3173	jump	[length = 1]
 932               	.LVL80:
 933               	.L35:
 607:bertos/mware/formatwr.c **** 				if (format_flag == 'p')
 934               		.loc 1 607 0 is_stmt 1
 935 0502 0037      		cpi r16,lo8(112)	 ;  592	*cmpqi/3	[length = 1]
 936 0504 01F4      		brne .L146	 ;  593	branch	[length = 1]
 609:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(unsigned short)va_arg(ap, char *);
 937               		.loc 1 609 0
 938 0506 9A01      		movw r18,r20	 ;  2777	*movhi/1	[length = 1]
 939 0508 2E5F      		subi r18,lo8(-(2))	 ;  595	*addhi3/4	[length = 2]
 940 050a 3F4F      		sbci r19,hi8(-(2))
 941 050c C157      		subi r28,lo8(-143)	 ;  2778	*movhi/3	[length = 6]
 942 050e DF4F      		sbci r29,hi8(-143)
 943 0510 3983      		std Y+1,r19
 944 0512 2883      		st Y,r18
 945 0514 CF58      		subi r28,lo8(143)
 946 0516 D040      		sbci r29,hi8(143)
 947               	.LVL81:
 948 0518 DA01      		movw r26,r20	 ;  2779	*movhi/1	[length = 1]
 949 051a 8D91      		ld r24,X+	 ;  597	*movhi/2	[length = 2]
 950 051c 9C91      		ld r25,X
 951 051e A0E0      		ldi r26,lo8(0)	 ;  2960	*movhi/4	[length = 2]
 952 0520 B0E0      		ldi r27,hi8(0)
 953               	.LVL82:
 423:bertos/mware/formatwr.c **** 		hex = HEX_tab;
 954               		.loc 1 423 0
 955 0522 E0E0      		ldi r30,lo8(HEX_tab)	 ;  3099	*reload_inhi	[length = 4]
 956 0524 AE2E      		mov r10,r30
 957 0526 E0E0      		ldi r30,hi8(HEX_tab)
 958 0528 BE2E      		mov r11,r30
 959 052a 00C0      		rjmp .L50	 ;  3175	jump	[length = 1]
 960               	.LVL83:
 961               	.L142:
 603:bertos/mware/formatwr.c **** 				hex = hex_tab;
 962               		.loc 1 603 0
 963 052c 70E0      		ldi r23,lo8(hex_tab)	 ;  3098	*reload_inhi	[length = 4]
 964 052e A72E      		mov r10,r23
 965 0530 70E0      		ldi r23,hi8(hex_tab)
 966 0532 B72E      		mov r11,r23
 967               	.LVL84:
 968 0534 00C0      		rjmp .L40	 ;  3177	jump	[length = 1]
 969               	.LVL85:
 970               	.L146:
 423:bertos/mware/formatwr.c **** 		hex = HEX_tab;
 971               		.loc 1 423 0
 972 0536 60E0      		ldi r22,lo8(HEX_tab)	 ;  3097	*reload_inhi	[length = 4]
 973 0538 A62E      		mov r10,r22
 974 053a 60E0      		ldi r22,hi8(HEX_tab)
 975 053c B62E      		mov r11,r22
 976               	.LVL86:
 977               	.L40:
 613:bertos/mware/formatwr.c **** 				else if (flags.l_L_modifier)
 978               		.loc 1 613 0
 979 053e 2220      		tst r2	 ;  604	*cmpqi/1	[length = 1]
 980 0540 01F0      		breq .L51	 ;  605	branch	[length = 1]
 614:bertos/mware/formatwr.c **** 					ulong = va_arg(ap, unsigned long);
 981               		.loc 1 614 0
 982 0542 FA01      		movw r30,r20	 ;  2780	*movhi/1	[length = 1]
 983 0544 3496      		adiw r30,4	 ;  607	*addhi3/2	[length = 1]
 984 0546 C157      		subi r28,lo8(-143)	 ;  2781	*movhi/3	[length = 6]
 985 0548 DF4F      		sbci r29,hi8(-143)
 986 054a F983      		std Y+1,r31
 987 054c E883      		st Y,r30
 988 054e CF58      		subi r28,lo8(143)
 989 0550 D040      		sbci r29,hi8(143)
 990               	.LVL87:
 991 0552 FA01      		movw r30,r20	 ;  2782	*movhi/1	[length = 1]
 992               	.LVL88:
 993 0554 8081      		ld r24,Z	 ;  609	*movsi/3	[length = 4]
 994 0556 9181      		ldd r25,Z+1
 995 0558 A281      		ldd r26,Z+2
 996 055a B381      		ldd r27,Z+3
 997               	.LVL89:
 998 055c 00C0      		rjmp .L50	 ;  3179	jump	[length = 1]
 999               	.LVL90:
 1000               	.L51:
 1001 055e 9A01      		movw r18,r20	 ;  2783	*movhi/1	[length = 1]
 1002 0560 2E5F      		subi r18,lo8(-(2))	 ;  1989	*addhi3/4	[length = 2]
 1003 0562 3F4F      		sbci r19,hi8(-(2))
 1004 0564 DA01      		movw r26,r20	 ;  2784	*movhi/1	[length = 1]
 1005 0566 8D91      		ld r24,X+	 ;  1992	*movhi/2	[length = 2]
 1006 0568 9C91      		ld r25,X
 616:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(unsigned short)va_arg(ap, unsigned int);
 1007               		.loc 1 616 0
 1008 056a C157      		subi r28,lo8(-143)	 ;  1990	*movhi/3	[length = 6]
 1009 056c DF4F      		sbci r29,hi8(-143)
 1010 056e 3983      		std Y+1,r19
 1011 0570 2883      		st Y,r18
 1012 0572 CF58      		subi r28,lo8(143)
 1013 0574 D040      		sbci r29,hi8(143)
 1014               	.LVL91:
 618:bertos/mware/formatwr.c **** 					ulong = va_arg(ap, unsigned int);
 1015               		.loc 1 618 0
 1016 0576 A0E0      		ldi r26,lo8(0)	 ;  2956	*movhi/4	[length = 2]
 1017 0578 B0E0      		ldi r27,hi8(0)
 1018               	.LVL92:
 1019               	.L50:
 624:bertos/mware/formatwr.c **** 					(format_flag == 'u') ? DIV_DEC : DIV_HEX;
 1020               		.loc 1 624 0
 1021 057a E1E0      		ldi r30,lo8(1)	 ;  636	*movqi/2	[length = 1]
 1022 057c CC56      		subi r28,lo8(-148)	 ;  2786	*movqi/3	[length = 5]
 1023 057e DF4F      		sbci r29,hi8(-148)
 1024 0580 E883      		st Y,r30
 1025 0582 C459      		subi r28,lo8(148)
 1026 0584 D040      		sbci r29,hi8(148)
 1027 0586 0537      		cpi r16,lo8(117)	 ;  637	*cmpqi/3	[length = 1]
 1028 0588 01F4      		brne .L53	 ;  638	branch	[length = 1]
 1029 058a CC56      		subi r28,lo8(-148)	 ;  639	*movqi/3	[length = 5]
 1030 058c DF4F      		sbci r29,hi8(-148)
 1031 058e 1882      		st Y,__zero_reg__
 1032 0590 C459      		subi r28,lo8(148)
 1033 0592 D040      		sbci r29,hi8(148)
 1034               	.L53:
 1035               	.LVL93:
 625:bertos/mware/formatwr.c **** 				flags.plus_space_flag = PSF_NONE;
 1036               		.loc 1 625 0
 1037 0594 CB56      		subi r28,lo8(-149)	 ;  74	*movqi/3	[length = 5]
 1038 0596 DF4F      		sbci r29,hi8(-149)
 1039 0598 1882      		st Y,__zero_reg__
 1040 059a C559      		subi r28,lo8(149)
 1041 059c D040      		sbci r29,hi8(149)
 626:bertos/mware/formatwr.c **** 				goto INTEGRAL_CONVERSION;
 1042               		.loc 1 626 0
 1043 059e 00C0      		rjmp .L54	 ;  3181	jump	[length = 1]
 1044               	.LVL94:
 1045               	.L37:
 631:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(long)va_arg(ap, long);
 1046               		.loc 1 631 0
 1047 05a0 9A01      		movw r18,r20	 ;  2787	*movhi/1	[length = 1]
 630:bertos/mware/formatwr.c **** 				if (flags.l_L_modifier)
 1048               		.loc 1 630 0
 1049 05a2 2220      		tst r2	 ;  647	*cmpqi/1	[length = 1]
 1050 05a4 01F0      		breq .L55	 ;  648	branch	[length = 1]
 631:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(long)va_arg(ap, long);
 1051               		.loc 1 631 0
 1052 05a6 2C5F      		subi r18,lo8(-(4))	 ;  650	*addhi3/4	[length = 2]
 1053 05a8 3F4F      		sbci r19,hi8(-(4))
 1054 05aa C157      		subi r28,lo8(-143)	 ;  2788	*movhi/3	[length = 6]
 1055 05ac DF4F      		sbci r29,hi8(-143)
 1056 05ae 3983      		std Y+1,r19
 1057 05b0 2883      		st Y,r18
 1058 05b2 CF58      		subi r28,lo8(143)
 1059 05b4 D040      		sbci r29,hi8(143)
 1060               	.LVL95:
 1061 05b6 FA01      		movw r30,r20	 ;  2789	*movhi/1	[length = 1]
 1062 05b8 8081      		ld r24,Z	 ;  652	*movsi/3	[length = 4]
 1063 05ba 9181      		ldd r25,Z+1
 1064 05bc A281      		ldd r26,Z+2
 1065 05be B381      		ldd r27,Z+3
 1066               	.LVL96:
 1067 05c0 00C0      		rjmp .L56	 ;  3183	jump	[length = 1]
 1068               	.LVL97:
 1069               	.L55:
 633:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(long)va_arg(ap, int);
 1070               		.loc 1 633 0
 1071 05c2 2E5F      		subi r18,lo8(-(2))	 ;  658	*addhi3/4	[length = 2]
 1072 05c4 3F4F      		sbci r19,hi8(-(2))
 1073 05c6 C157      		subi r28,lo8(-143)	 ;  2791	*movhi/3	[length = 6]
 1074 05c8 DF4F      		sbci r29,hi8(-143)
 1075 05ca 3983      		std Y+1,r19
 1076 05cc 2883      		st Y,r18
 1077 05ce CF58      		subi r28,lo8(143)
 1078 05d0 D040      		sbci r29,hi8(143)
 1079               	.LVL98:
 1080 05d2 DA01      		movw r26,r20	 ;  2792	*movhi/1	[length = 1]
 1081 05d4 8D91      		ld r24,X+	 ;  660	*movhi/2	[length = 2]
 1082 05d6 9C91      		ld r25,X
 1083 05d8 AA27      		clr r26	 ;  661	extendhisi2/1	[length = 4]
 1084 05da 97FD      		sbrc r25,7
 1085 05dc A095      		com r26
 1086 05de BA2F      		mov r27,r26
 1087               	.LVL99:
 1088               	.L56:
 636:bertos/mware/formatwr.c **** 				if ((signed long)ulong < 0)
 1089               		.loc 1 636 0
 1090 05e0 B7FF      		sbrs r27,7	 ;  3096	*sbrx_and_branchsi	[length = 2]
 1091 05e2 00C0      		rjmp .L147
 1092               	.LVL100:
 639:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(-((signed long)ulong));
 1093               		.loc 1 639 0
 1094 05e4 B095      		com r27	 ;  672	negsi2/1	[length = 7]
 1095 05e6 A095      		com r26
 1096 05e8 9095      		com r25
 1097 05ea 8195      		neg r24
 1098 05ec 9F4F      		sbci r25,lo8(-1)
 1099 05ee AF4F      		sbci r26,lo8(-1)
 1100 05f0 BF4F      		sbci r27,lo8(-1)
 1101               	.LVL101:
 642:bertos/mware/formatwr.c **** 				flags.div_factor = DIV_DEC;
 1102               		.loc 1 642 0
 1103 05f2 CC56      		subi r28,lo8(-148)	 ;  75	*movqi/3	[length = 5]
 1104 05f4 DF4F      		sbci r29,hi8(-148)
 1105 05f6 1882      		st Y,__zero_reg__
 1106 05f8 C459      		subi r28,lo8(148)
 1107 05fa D040      		sbci r29,hi8(148)
 638:bertos/mware/formatwr.c **** 					flags.plus_space_flag = PSF_MINUS;
 1108               		.loc 1 638 0
 1109 05fc E2E0      		ldi r30,lo8(2)	 ;  76	*movqi/2	[length = 1]
 1110 05fe CB56      		subi r28,lo8(-149)	 ;  2793	*movqi/3	[length = 5]
 1111 0600 DF4F      		sbci r29,hi8(-149)
 1112 0602 E883      		st Y,r30
 1113 0604 C559      		subi r28,lo8(149)
 1114 0606 D040      		sbci r29,hi8(149)
 1115 0608 00C0      		rjmp .L186	 ;  3185	jump	[length = 1]
 1116               	.LVL102:
 1117               	.L147:
 642:bertos/mware/formatwr.c **** 				flags.div_factor = DIV_DEC;
 1118               		.loc 1 642 0
 1119 060a CC56      		subi r28,lo8(-148)	 ;  78	*movqi/3	[length = 5]
 1120 060c DF4F      		sbci r29,hi8(-148)
 1121 060e 1882      		st Y,__zero_reg__
 1122 0610 C459      		subi r28,lo8(148)
 1123 0612 D040      		sbci r29,hi8(148)
 1124               	.LVL103:
 1125               	.L186:
 423:bertos/mware/formatwr.c **** 		hex = HEX_tab;
 1126               		.loc 1 423 0
 1127 0614 50E0      		ldi r21,lo8(HEX_tab)	 ;  3095	*reload_inhi	[length = 4]
 1128 0616 A52E      		mov r10,r21
 1129 0618 50E0      		ldi r21,hi8(HEX_tab)
 1130 061a B52E      		mov r11,r21
 1131               	.L54:
 1132               	.LVL104:
 647:bertos/mware/formatwr.c **** 				flags.nonzero_value = (ulong != 0);
 1133               		.loc 1 647 0
 1134 061c F1E0      		ldi r31,lo8(1)	 ;  683	*movqi/2	[length = 1]
 1135 061e C956      		subi r28,lo8(-151)	 ;  2794	*movqi/3	[length = 5]
 1136 0620 DF4F      		sbci r29,hi8(-151)
 1137 0622 F883      		st Y,r31
 1138 0624 C759      		subi r28,lo8(151)
 1139 0626 D040      		sbci r29,hi8(151)
 1140 0628 0097      		sbiw r24,0	 ;  684	*cmpsi/1	[length = 4]
 1141 062a A105      		cpc r26,__zero_reg__
 1142 062c B105      		cpc r27,__zero_reg__
 1143 062e 01F4      		brne .L57	 ;  685	branch	[length = 1]
 1144 0630 C956      		subi r28,lo8(-151)	 ;  686	*movqi/3	[length = 5]
 1145 0632 DF4F      		sbci r29,hi8(-151)
 1146 0634 1882      		st Y,__zero_reg__
 1147 0636 C759      		subi r28,lo8(151)
 1148 0638 D040      		sbci r29,hi8(151)
 1149               	.L57:
 1150               	.LVL105:
 650:bertos/mware/formatwr.c **** 				if (precision != 0 || flags.nonzero_value)
 1151               		.loc 1 650 0
 1152 063a 8114      		cp r8,__zero_reg__	 ;  689	*cmphi/2	[length = 2]
 1153 063c 9104      		cpc r9,__zero_reg__
 1154 063e 01F4      		brne .L58	 ;  690	branch	[length = 1]
 650:bertos/mware/formatwr.c **** 				if (precision != 0 || flags.nonzero_value)
 1155               		.loc 1 650 0 is_stmt 0 discriminator 1
 1156 0640 C956      		subi r28,lo8(-151)	 ;  2795	*movqi/4	[length = 5]
 1157 0642 DF4F      		sbci r29,hi8(-151)
 1158 0644 2881      		ld r18,Y
 1159 0646 C759      		subi r28,lo8(151)
 1160 0648 D040      		sbci r29,hi8(151)
 1161 064a 2223      		tst r18	 ;  692	*cmpqi/1	[length = 1]
 1162 064c 01F4      		brne .+2	 ;  693	branch	[length = 2]
 1163 064e 00C0      		rjmp .L148
 1164               	.L58:
 652:bertos/mware/formatwr.c **** 					switch (flags.div_factor)
 1165               		.loc 1 652 0 is_stmt 1
 1166 0650 CC56      		subi r28,lo8(-148)	 ;  2796	*movqi/4	[length = 5]
 1167 0652 DF4F      		sbci r29,hi8(-148)
 1168 0654 3881      		ld r19,Y
 1169 0656 C459      		subi r28,lo8(148)
 1170 0658 D040      		sbci r29,hi8(148)
 646:bertos/mware/formatwr.c **** 				ptr = buf_pointer = &buf[FRMWRI_BUFSIZE - 1];
 1171               		.loc 1 646 0
 1172 065a 46E8      		ldi r20,lo8(134)	 ;  3094	*reload_inhi	[length = 3]
 1173 065c C42E      		mov r12,r20
 1174 065e D12C      		mov r13,__zero_reg__
 1175 0660 CC0E      		add r12,r28	 ;  2061	*addhi3/1	[length = 2]
 1176 0662 DD1E      		adc r13,r29
 652:bertos/mware/formatwr.c **** 					switch (flags.div_factor)
 1177               		.loc 1 652 0
 1178 0664 3130      		cpi r19,lo8(1)	 ;  697	*cmpqi/3	[length = 1]
 1179 0666 01F0      		breq .L61	 ;  698	branch	[length = 1]
 656:bertos/mware/formatwr.c **** 							*--buf_pointer = hex[ulong % 10];
 1180               		.loc 1 656 0
 1181 0668 3AE0      		ldi r19,lo8(10)	 ;  3093	*reload_insi	[length = 5]
 1182 066a 432E      		mov r4,r19
 1183 066c 512C      		mov r5,__zero_reg__
 1184 066e 612C      		mov r6,__zero_reg__
 1185 0670 712C      		mov r7,__zero_reg__
 1186               	.L60:
 1187               	.LVL106:
 656:bertos/mware/formatwr.c **** 							*--buf_pointer = hex[ulong % 10];
 1188               		.loc 1 656 0 is_stmt 0 discriminator 1
 1189 0672 BC01      		movw r22,r24	 ;  2280	*movsi/1	[length = 2]
 1190 0674 CD01      		movw r24,r26
 1191 0676 A301      		movw r20,r6	 ;  2281	*movsi/1	[length = 2]
 1192 0678 9201      		movw r18,r4
 1193 067a 0E94 0000 		call __udivmodsi4	 ;  2282	*udivmodsi4_call	[length = 2]
 1194 067e DC01      		movw r26,r24	 ;  2284	*movsi/1	[length = 2]
 1195 0680 CB01      		movw r24,r22
 1196               	.LVL107:
 1197 0682 8A0D      		add r24,r10	 ;  709	*addhi3/1	[length = 2]
 1198 0684 9B1D      		adc r25,r11
 1199 0686 DC01      		movw r26,r24	 ;  2798	*movhi/1	[length = 1]
 1200 0688 8C91      		ld r24,X	 ;  710	*movqi/4	[length = 1]
 1201 068a F601      		movw r30,r12	 ;  2799	*movhi/1	[length = 1]
 1202 068c 8293      		st -Z,r24	 ;  711	*movqi/3	[length = 1]
 1203 068e 6F01      		movw r12,r30	 ;  2800	*movhi/1	[length = 1]
 1204               	.LVL108:
 657:bertos/mware/formatwr.c **** 						while (ulong /= 10);
 1205               		.loc 1 657 0 is_stmt 1 discriminator 1
 1206 0690 C901      		movw r24,r18	 ;  3091	*movhi/1	[length = 1]
 1207 0692 DA01      		movw r26,r20	 ;  3092	*movhi/1	[length = 1]
 1208               	.LVL109:
 1209 0694 0097      		sbiw r24,0	 ;  716	*cmpsi/1	[length = 4]
 1210 0696 A105      		cpc r26,__zero_reg__
 1211 0698 B105      		cpc r27,__zero_reg__
 1212 069a 01F4      		brne .L60	 ;  717	branch	[length = 1]
 1213 069c 00C0      		rjmp .L62	 ;  3188	jump	[length = 1]
 1214               	.LVL110:
 1215               	.L61:
 662:bertos/mware/formatwr.c **** 							*--buf_pointer = hex[ulong % 16];
 1216               		.loc 1 662 0 discriminator 1
 1217 069e FC01      		movw r30,r24	 ;  2802	*movhi/1	[length = 1]
 1218 06a0 EF70      		andi r30,lo8(15)	 ;  727	andhi3/2	[length = 2]
 1219 06a2 F070      		andi r31,hi8(15)
 1220 06a4 EA0D      		add r30,r10	 ;  728	*addhi3/1	[length = 2]
 1221 06a6 FB1D      		adc r31,r11
 1222 06a8 2081      		ld r18,Z	 ;  729	*movqi/4	[length = 1]
 1223 06aa F601      		movw r30,r12	 ;  2803	*movhi/1	[length = 1]
 1224 06ac 2293      		st -Z,r18	 ;  730	*movqi/3	[length = 1]
 1225 06ae 6F01      		movw r12,r30	 ;  2804	*movhi/1	[length = 1]
 1226               	.LVL111:
 663:bertos/mware/formatwr.c **** 						while (ulong /= 16);
 1227               		.loc 1 663 0 discriminator 1
 1228 06b0 24E0      		ldi r18,4	 ;  3090	*lshrsi3_const/4	[length = 7]
 1229 06b2 B695      	1:	lsr r27
 1230 06b4 A795      		ror r26
 1231 06b6 9795      		ror r25
 1232 06b8 8795      		ror r24
 1233 06ba 2A95      		dec r18
 1234 06bc 01F4      		brne 1b
 1235               	.LVL112:
 1236 06be 0097      		sbiw r24,0	 ;  733	*cmpsi/1	[length = 4]
 1237 06c0 A105      		cpc r26,__zero_reg__
 1238 06c2 B105      		cpc r27,__zero_reg__
 1239 06c4 01F4      		brne .L61	 ;  734	branch	[length = 1]
 1240               	.LVL113:
 1241               	.L62:
 676:bertos/mware/formatwr.c **** 				if (precision < 0)
 1242               		.loc 1 676 0
 1243 06c6 97FE      		sbrs r9,7	 ;  3089	*sbrx_and_branchhi	[length = 2]
 1244 06c8 00C0      		rjmp .L59
 677:bertos/mware/formatwr.c **** 					if (flags.zeropad)
 1245               		.loc 1 677 0
 1246 06ca C356      		subi r28,lo8(-157)	 ;  2805	*movqi/4	[length = 5]
 1247 06cc DF4F      		sbci r29,hi8(-157)
 1248 06ce F881      		ld r31,Y
 1249 06d0 CD59      		subi r28,lo8(157)
 1250 06d2 D040      		sbci r29,hi8(157)
 1251 06d4 FF23      		tst r31	 ;  741	*cmpqi/1	[length = 1]
 1252 06d6 01F4      		brne .+2	 ;  742	branch	[length = 2]
 1253 06d8 00C0      		rjmp .L59
 678:bertos/mware/formatwr.c **** 						precision = field_width - (flags.plus_space_flag != PSF_NONE);
 1254               		.loc 1 678 0
 1255 06da 1C7F      		andi r17,lo8(-4)	 ;  753	andqi3/2	[length = 1]
 1256               	.LVL114:
 1257 06dc CB56      		subi r28,lo8(-149)	 ;  2806	*movqi/4	[length = 5]
 1258 06de DF4F      		sbci r29,hi8(-149)
 1259 06e0 2881      		ld r18,Y
 1260 06e2 C559      		subi r28,lo8(149)
 1261 06e4 D040      		sbci r29,hi8(149)
 1262 06e6 122B      		or r17,r18	 ;  754	iorqi3/1	[length = 1]
 1263 06e8 CC56      		subi r28,lo8(-148)	 ;  2807	*movqi/4	[length = 5]
 1264 06ea DF4F      		sbci r29,hi8(-148)
 1265 06ec 8881      		ld r24,Y
 1266 06ee C459      		subi r28,lo8(148)
 1267 06f0 D040      		sbci r29,hi8(148)
 1268               	.LVL115:
 1269 06f2 8170      		andi r24,lo8(1)	 ;  756	andqi3/2	[length = 1]
 1270 06f4 880F      		lsl r24	 ;  757	*ashlqi3/4	[length = 2]
 1271 06f6 880F      		lsl r24
 1272 06f8 1B7F      		andi r17,lo8(-5)	 ;  759	andqi3/2	[length = 1]
 1273 06fa 182B      		or r17,r24	 ;  760	iorqi3/1	[length = 1]
 1274 06fc CF56      		subi r28,lo8(-145)	 ;  2808	*movqi/4	[length = 5]
 1275 06fe DF4F      		sbci r29,hi8(-145)
 1276 0700 8881      		ld r24,Y
 1277 0702 C159      		subi r28,lo8(145)
 1278 0704 D040      		sbci r29,hi8(145)
 1279 0706 880F      		lsl r24	 ;  763	*ashlqi3/5	[length = 3]
 1280 0708 880F      		lsl r24
 1281 070a 880F      		lsl r24
 1282 070c 177F      		andi r17,lo8(-9)	 ;  765	andqi3/2	[length = 1]
 1283 070e 182B      		or r17,r24	 ;  766	iorqi3/1	[length = 1]
 1284 0710 822D      		mov r24,r2	 ;  2809	*movqi/1	[length = 1]
 1285 0712 8170      		andi r24,lo8(1)	 ;  768	andqi3/2	[length = 1]
 1286 0714 8295      		swap r24	 ;  2947	*rotlqi3_4	[length = 1]
 1287 0716 807F      		andi r24,lo8(-16)	 ;  2948	andqi3/2	[length = 1]
 1288 0718 1F7E      		andi r17,lo8(-17)	 ;  771	andqi3/2	[length = 1]
 1289 071a 182B      		or r17,r24	 ;  772	iorqi3/1	[length = 1]
 1290 071c CA56      		subi r28,lo8(-150)	 ;  2810	*movqi/4	[length = 5]
 1291 071e DF4F      		sbci r29,hi8(-150)
 1292 0720 8881      		ld r24,Y
 1293 0722 C659      		subi r28,lo8(150)
 1294 0724 D040      		sbci r29,hi8(150)
 1295 0726 8170      		andi r24,lo8(1)	 ;  774	andqi3/2	[length = 1]
 1296 0728 8295      		swap r24	 ;  2949	*rotlqi3_4	[length = 1]
 1297 072a 880F      		lsl r24	 ;  2950	*ashlqi3/3	[length = 1]
 1298 072c 807E      		andi r24,lo8(-32)	 ;  2951	andqi3/2	[length = 1]
 1299 072e 1F7D      		andi r17,lo8(-33)	 ;  777	andqi3/2	[length = 1]
 1300 0730 182B      		or r17,r24	 ;  778	iorqi3/1	[length = 1]
 1301 0732 832D      		mov r24,r3	 ;  2811	*movqi/1	[length = 1]
 1302 0734 8295      		swap r24	 ;  2952	*rotlqi3_4	[length = 1]
 1303 0736 880F      		lsl r24	 ;  2953	*ashlqi3/4	[length = 2]
 1304 0738 880F      		lsl r24
 1305 073a 807C      		andi r24,lo8(-64)	 ;  2954	andqi3/2	[length = 1]
 1306 073c 1F7B      		andi r17,lo8(-65)	 ;  783	andqi3/2	[length = 1]
 1307 073e 182B      		or r17,r24	 ;  784	iorqi3/1	[length = 1]
 1308 0740 C956      		subi r28,lo8(-151)	 ;  2812	*movqi/4	[length = 5]
 1309 0742 DF4F      		sbci r29,hi8(-151)
 1310 0744 8881      		ld r24,Y
 1311 0746 C759      		subi r28,lo8(151)
 1312 0748 D040      		sbci r29,hi8(151)
 1313 074a 8795      		ror r24	 ;  786	*ashlqi3/5	[length = 3]
 1314 074c 8827      		clr r24
 1315 074e 8795      		ror r24
 1316 0750 1F77      		andi r17,lo8(127)	 ;  788	andqi3/2	[length = 1]
 1317 0752 182B      		or r17,r24	 ;  789	iorqi3/1	[length = 1]
 1318 0754 212F      		mov r18,r17	 ;  2813	*movqi/1	[length = 1]
 1319 0756 2370      		andi r18,lo8(3)	 ;  791	andqi3/2	[length = 1]
 1320 0758 81E0      		ldi r24,lo8(1)	 ;  792	*movhi/4	[length = 2]
 1321 075a 90E0      		ldi r25,hi8(1)
 1322 075c 01F4      		brne .L63	 ;  794	branch	[length = 1]
 1323 075e 80E0      		ldi r24,lo8(0)	 ;  795	*movhi/4	[length = 2]
 1324 0760 90E0      		ldi r25,hi8(0)
 1325               	.LVL116:
 1326               	.L63:
 1327 0762 C357      		subi r28,lo8(-141)	 ;  2814	*movhi/2	[length = 6]
 1328 0764 DF4F      		sbci r29,hi8(-141)
 1329 0766 8880      		ld r8,Y
 1330 0768 9980      		ldd r9,Y+1
 1331 076a CD58      		subi r28,lo8(141)
 1332 076c D040      		sbci r29,hi8(141)
 1333               	.LVL117:
 1334 076e 881A      		sub r8,r24	 ;  797	subhi3/1	[length = 2]
 1335 0770 990A      		sbc r9,r25
 1336               	.LVL118:
 1337 0772 00C0      		rjmp .L59	 ;  3190	jump	[length = 1]
 1338               	.LVL119:
 1339               	.L148:
 646:bertos/mware/formatwr.c **** 				ptr = buf_pointer = &buf[FRMWRI_BUFSIZE - 1];
 1340               		.loc 1 646 0
 1341 0774 86E8      		ldi r24,lo8(134)	 ;  3088	*reload_inhi	[length = 3]
 1342 0776 C82E      		mov r12,r24
 1343 0778 D12C      		mov r13,__zero_reg__
 1344               	.LVL120:
 1345 077a CC0E      		add r12,r28	 ;  2063	*addhi3/1	[length = 2]
 1346 077c DD1E      		adc r13,r29
 1347               	.L59:
 678:bertos/mware/formatwr.c **** 						precision = field_width - (flags.plus_space_flag != PSF_NONE);
 1348               		.loc 1 678 0 discriminator 1
 1349 077e D601      		movw r26,r12	 ;  801	*movhi/1	[length = 1]
 334:bertos/mware/formatwr.c **** PGM_FUNC(_formatted_write)(const char * PGM_ATTR format,
 1350               		.loc 1 334 0 discriminator 1
 1351 0780 C757      		subi r28,lo8(-137)	 ;  2816	*movhi/2	[length = 6]
 1352 0782 DF4F      		sbci r29,hi8(-137)
 1353 0784 8881      		ld r24,Y
 1354 0786 9981      		ldd r25,Y+1
 1355 0788 C958      		subi r28,lo8(137)
 1356 078a D040      		sbci r29,hi8(137)
 1357 078c 8C19      		sub r24,r12	 ;  803	subhi3/1	[length = 2]
 1358 078e 9D09      		sbc r25,r13
 1359 0790 00C0      		rjmp .L64	 ;  3192	jump	[length = 1]
 1360               	.LVL121:
 1361               	.L65:
 680:bertos/mware/formatwr.c **** 					*--buf_pointer = '0';
 1362               		.loc 1 680 0
 1363 0792 30E3      		ldi r19,lo8(48)	 ;  2817	*movqi/2	[length = 1]
 1364 0794 3E93      		st -X,r19	 ;  810	*movqi/3	[length = 1]
 1365 0796 0196      		adiw r24,1	 ;  812	*addhi3/2	[length = 1]
 1366               	.LVL122:
 1367               	.L64:
 680:bertos/mware/formatwr.c **** 					*--buf_pointer = '0';
 1368               		.loc 1 680 0 is_stmt 0 discriminator 1
 1369 0798 2D01      		movw r4,r26	 ;  815	*movhi/1	[length = 1]
 1370               	.LVL123:
 679:bertos/mware/formatwr.c **** 				while (precision > (int)(ptr - buf_pointer))
 1371               		.loc 1 679 0 is_stmt 1 discriminator 1
 1372 079a 8815      		cp r24,r8	 ;  819	*cmphi/3	[length = 2]
 1373 079c 9905      		cpc r25,r9
 1374 079e 04F0      		brlt .L65	 ;  820	branch	[length = 1]
 682:bertos/mware/formatwr.c **** 				if (flags.alternate_flag && flags.nonzero_value)
 1375               		.loc 1 682 0
 1376 07a0 3320      		tst r3	 ;  822	*cmpqi/1	[length = 1]
 1377 07a2 01F0      		breq .L66	 ;  823	branch	[length = 1]
 682:bertos/mware/formatwr.c **** 				if (flags.alternate_flag && flags.nonzero_value)
 1378               		.loc 1 682 0 is_stmt 0 discriminator 1
 1379 07a4 C956      		subi r28,lo8(-151)	 ;  2818	*movqi/4	[length = 5]
 1380 07a6 DF4F      		sbci r29,hi8(-151)
 1381 07a8 4881      		ld r20,Y
 1382 07aa C759      		subi r28,lo8(151)
 1383 07ac D040      		sbci r29,hi8(151)
 1384 07ae 4423      		tst r20	 ;  825	*cmpqi/1	[length = 1]
 1385 07b0 01F0      		breq .L66	 ;  826	branch	[length = 1]
 684:bertos/mware/formatwr.c **** 					if (format_flag == 'x' || format_flag == 'X')
 1386               		.loc 1 684 0 is_stmt 1
 1387 07b2 0837      		cpi r16,lo8(120)	 ;  828	*cmpqi/3	[length = 1]
 1388 07b4 01F0      		breq .L67	 ;  829	branch	[length = 1]
 684:bertos/mware/formatwr.c **** 					if (format_flag == 'x' || format_flag == 'X')
 1389               		.loc 1 684 0 is_stmt 0 discriminator 1
 1390 07b6 0835      		cpi r16,lo8(88)	 ;  831	*cmpqi/3	[length = 1]
 1391 07b8 01F4      		brne .L66	 ;  832	branch	[length = 1]
 1392               	.L67:
 1393               	.LVL124:
 686:bertos/mware/formatwr.c **** 						*--buf_pointer = format_flag;
 1394               		.loc 1 686 0 is_stmt 1
 1395 07ba FD01      		movw r30,r26	 ;  2819	*movhi/1	[length = 1]
 1396 07bc 3197      		sbiw r30,1	 ;  837	*addhi3/3	[length = 1]
 1397 07be 0083      		st Z,r16	 ;  838	*movqi/3	[length = 1]
 687:bertos/mware/formatwr.c **** 						*--buf_pointer = '0';
 1398               		.loc 1 687 0
 1399 07c0 0EEF      		ldi r16,lo8(-2)	 ;  3087	*reload_inhi	[length = 4]
 1400 07c2 402E      		mov r4,r16
 1401 07c4 0FEF      		ldi r16,hi8(-2)
 1402 07c6 502E      		mov r5,r16
 1403 07c8 4A0E      		add r4,r26	 ;  839	*addhi3/1	[length = 2]
 1404 07ca 5B1E      		adc r5,r27
 1405               	.LVL125:
 1406 07cc E0E3      		ldi r30,lo8(48)	 ;  2822	*movqi/2	[length = 1]
 1407 07ce D201      		movw r26,r4	 ;  2821	*movhi/1	[length = 1]
 1408 07d0 EC93      		st X,r30	 ;  844	*movqi/3	[length = 1]
 1409               	.L66:
 696:bertos/mware/formatwr.c **** 				ASSERT(buf_pointer >= buf);
 1410               		.loc 1 696 0
 1411 07d2 C957      		subi r28,lo8(-135)	 ;  2823	*movhi/2	[length = 6]
 1412 07d4 DF4F      		sbci r29,hi8(-135)
 1413 07d6 2881      		ld r18,Y
 1414 07d8 3981      		ldd r19,Y+1
 1415 07da C758      		subi r28,lo8(135)
 1416 07dc D040      		sbci r29,hi8(135)
 1417 07de 4216      		cp r4,r18	 ;  848	*cmphi/3	[length = 2]
 1418 07e0 5306      		cpc r5,r19
 1419 07e2 00F0      		brlo .+2	 ;  849	branch	[length = 2]
 1420 07e4 00C0      		rjmp .L151
 696:bertos/mware/formatwr.c **** 				ASSERT(buf_pointer >= buf);
 1421               		.loc 1 696 0 is_stmt 0 discriminator 1
 1422 07e6 80E0      		ldi r24,lo8(__c.1502)	 ;  854	*movhi/4	[length = 2]
 1423 07e8 90E0      		ldi r25,hi8(__c.1502)
 1424 07ea 60E0      		ldi r22,lo8(__c.1504)	 ;  855	*movhi/4	[length = 2]
 1425 07ec 70E0      		ldi r23,hi8(__c.1504)
 1426 07ee 48EB      		ldi r20,lo8(696)	 ;  856	*movhi/4	[length = 2]
 1427 07f0 52E0      		ldi r21,hi8(696)
 1428 07f2 0E94 0000 		call __bassert_P	 ;  857	call_value_insn/3	[length = 2]
 1429               	.LVL126:
 1430 07f6 00C0      		rjmp .L151	 ;  3194	jump	[length = 1]
 1431               	.LVL127:
 1432               	.L33:
 703:bertos/mware/formatwr.c **** 				format_flag -= 2;
 1433               		.loc 1 703 0 is_stmt 1
 1434 07f8 0250      		subi r16,lo8(-(-2))	 ;  863	addqi3/2	[length = 1]
 1435               	.LVL128:
 702:bertos/mware/formatwr.c **** 				n = 1;
 1436               		.loc 1 702 0
 1437 07fa E1E0      		ldi r30,lo8(1)	 ;  3086	*reload_inhi	[length = 3]
 1438 07fc AE2E      		mov r10,r30
 1439 07fe B12C      		mov r11,__zero_reg__
 704:bertos/mware/formatwr.c **** 				if (! precision)
 1440               		.loc 1 704 0
 1441 0800 8114      		cp r8,__zero_reg__	 ;  865	*cmphi/2	[length = 2]
 1442 0802 9104      		cpc r9,__zero_reg__
 1443 0804 01F0      		breq .L152	 ;  866	branch	[length = 1]
 1444 0806 00C0      		rjmp .L38	 ;  3197	jump	[length = 1]
 1445               	.LVL129:
 1446               	.L141:
 710:bertos/mware/formatwr.c **** 				format_flag = 0;
 1447               		.loc 1 710 0
 1448 0808 00E0      		ldi r16,lo8(0)	 ;  85	*movqi/2	[length = 1]
 1449               	.L187:
 713:bertos/mware/formatwr.c **** 				n = 0;
 1450               		.loc 1 713 0
 1451 080a AA24      		clr r10	 ;  86	*movhi/5	[length = 2]
 1452 080c BB24      		clr r11
 1453               	.LVL130:
 1454               	.L38:
 715:bertos/mware/formatwr.c **** 				if (precision < 0)
 1455               		.loc 1 715 0
 1456 080e 97FE      		sbrs r9,7	 ;  3085	*sbrx_and_branchhi	[length = 2]
 1457 0810 00C0      		rjmp .L69
 1458 0812 00C0      		rjmp .L191	 ;  3201	jump	[length = 1]
 1459               	.LVL131:
 1460               	.L152:
 706:bertos/mware/formatwr.c **** 					precision = 1;
 1461               		.loc 1 706 0
 1462 0814 71E0      		ldi r23,lo8(1)	 ;  3084	*reload_inhi	[length = 3]
 1463 0816 872E      		mov r8,r23
 1464 0818 912C      		mov r9,__zero_reg__
 1465               	.LVL132:
 1466 081a 00C0      		rjmp .L69	 ;  3203	jump	[length = 1]
 1467               	.LVL133:
 1468               	.L191:
 717:bertos/mware/formatwr.c **** 					precision = 6;
 1469               		.loc 1 717 0
 1470 081c 66E0      		ldi r22,lo8(6)	 ;  3083	*reload_inhi	[length = 3]
 1471 081e 862E      		mov r8,r22
 1472 0820 912C      		mov r9,__zero_reg__
 1473               	.LVL134:
 1474               	.L69:
 726:bertos/mware/formatwr.c **** 					fvalue = va_arg(ap,max_float_t);
 1475               		.loc 1 726 0
 1476 0822 CA01      		movw r24,r20	 ;  2825	*movhi/1	[length = 1]
 1477 0824 0496      		adiw r24,4	 ;  879	*addhi3/2	[length = 1]
 1478 0826 C157      		subi r28,lo8(-143)	 ;  2826	*movhi/3	[length = 6]
 1479 0828 DF4F      		sbci r29,hi8(-143)
 1480 082a 9983      		std Y+1,r25
 1481 082c 8883      		st Y,r24
 1482 082e CF58      		subi r28,lo8(143)
 1483 0830 D040      		sbci r29,hi8(143)
 1484               	.LVL135:
 1485 0832 DA01      		movw r26,r20	 ;  2827	*movhi/1	[length = 1]
 1486 0834 CD90      		ld r12,X+	 ;  881	*movsf/3	[length = 4]
 1487 0836 DD90      		ld r13,X+
 1488 0838 ED90      		ld r14,X+
 1489 083a FC90      		ld r15,X
 1490               	.LVL136:
 728:bertos/mware/formatwr.c **** 				if (fvalue < 0)
 1491               		.loc 1 728 0
 1492 083c C701      		movw r24,r14	 ;  883	*movsf/1	[length = 2]
 1493 083e B601      		movw r22,r12
 1494 0840 20E0      		ldi r18,lo8(0x0)	 ;  884	*movsf/2	[length = 3]
 1495 0842 30E0      		ldi r19,hi8(0x0)
 1496 0844 A901      		movw r20,r18
 1497 0846 0E94 0000 		call __ltsf2	 ;  885	call_value_insn/3	[length = 2]
 1498               	.LVL137:
 1499 084a 87FF      		sbrs r24,7	 ;  3082	*sbrx_branchhi	[length = 2]
 1500 084c 00C0      		rjmp .L70
 1501               	.LVL138:
 731:bertos/mware/formatwr.c **** 					fvalue = -fvalue;
 1502               		.loc 1 731 0
 1503 084e F7FA      		bst r15,7	 ;  894	negsf2/2	[length = 4]
 1504 0850 F094      		com r15
 1505 0852 F7F8      		bld r15,7
 1506 0854 F094      		com r15
 1507               	.LVL139:
 730:bertos/mware/formatwr.c **** 					flags.plus_space_flag = PSF_MINUS;
 1508               		.loc 1 730 0
 1509 0856 B2E0      		ldi r27,lo8(2)	 ;  91	*movqi/2	[length = 1]
 1510 0858 CB56      		subi r28,lo8(-149)	 ;  2828	*movqi/3	[length = 5]
 1511 085a DF4F      		sbci r29,hi8(-149)
 1512 085c B883      		st Y,r27
 1513 085e C559      		subi r28,lo8(149)
 1514 0860 D040      		sbci r29,hi8(149)
 1515               	.LVL140:
 1516               	.L70:
 733:bertos/mware/formatwr.c **** 				ptr = float_conversion (fvalue,
 1517               		.loc 1 733 0
 1518 0862 31E0      		ldi r19,lo8(1)	 ;  3080	*reload_inhi	[length = 3]
 1519 0864 432E      		mov r4,r19
 1520 0866 512C      		mov r5,__zero_reg__
 1521 0868 4C0E      		add r4,r28	 ;  2831	*addhi3/1	[length = 2]
 1522 086a 5D1E      		adc r5,r29
 1523 086c C357      		subi r28,lo8(-141)	 ;  2832	*movhi/2	[length = 6]
 1524 086e DF4F      		sbci r29,hi8(-141)
 1525 0870 E881      		ld r30,Y
 1526 0872 F981      		ldd r31,Y+1
 1527 0874 CD58      		subi r28,lo8(141)
 1528 0876 D040      		sbci r29,hi8(141)
 1529 0878 4E0E      		add r4,r30	 ;  901	*addhi3/1	[length = 2]
 1530 087a 5F1E      		adc r5,r31
 1531               	.LVL141:
 1532 087c C456      		subi r28,lo8(-156)	 ;  903	*movqi/3	[length = 5]
 1533 087e DF4F      		sbci r29,hi8(-156)
 1534 0880 A882      		st Y,r10
 1535 0882 CC59      		subi r28,lo8(156)
 1536 0884 D040      		sbci r29,hi8(156)
 1537               	.LVL142:
 1538               	.LBB9:
 1539               	.LBB10:
 158:bertos/mware/formatwr.c **** 	if (value >= 1)
 1540               		.loc 1 158 0
 1541 0886 C701      		movw r24,r14	 ;  912	*movsf/1	[length = 2]
 1542 0888 B601      		movw r22,r12
 1543 088a 20E0      		ldi r18,lo8(0x3f800000)	 ;  913	*movsf/5	[length = 4]
 1544 088c 30E0      		ldi r19,hi8(0x3f800000)
 1545 088e 40E8      		ldi r20,hlo8(0x3f800000)
 1546 0890 5FE3      		ldi r21,hhi8(0x3f800000)
 1547 0892 0E94 0000 		call __gesf2	 ;  914	call_value_insn/3	[length = 2]
 1548 0896 87FF      		sbrs r24,7	 ;  3081	*sbrx_branchhi	[length = 2]
 1549 0898 00C0      		rjmp .L154
 1550               	.LVL143:
 1551 089a 00C0      		rjmp .L192	 ;  3207	jump	[length = 1]
 1552               	.LVL144:
 1553               	.L74:
 162:bertos/mware/formatwr.c **** 			value /= 1e10;
 1554               		.loc 1 162 0
 1555 089c C701      		movw r24,r14	 ;  922	*movsf/1	[length = 2]
 1556 089e B601      		movw r22,r12
 1557 08a0 29EF      		ldi r18,lo8(0x501502f9)	 ;  923	*movsf/5	[length = 4]
 1558 08a2 32E0      		ldi r19,hi8(0x501502f9)
 1559 08a4 45E1      		ldi r20,hlo8(0x501502f9)
 1560 08a6 50E5      		ldi r21,hhi8(0x501502f9)
 1561 08a8 0E94 0000 		call __divsf3	 ;  924	call_value_insn/3	[length = 2]
 1562 08ac 6B01      		movw r12,r22	 ;  3079	*movhi/1	[length = 1]
 1563               	.LVL145:
 1564 08ae E82E      		mov r14,r24	 ;  2300	*movqi/1	[length = 1]
 1565 08b0 F92E      		mov r15,r25	 ;  2301	*movqi/1	[length = 1]
 1566               	.LVL146:
 163:bertos/mware/formatwr.c **** 			integral_10_log += 10;
 1567               		.loc 1 163 0
 1568 08b2 2AE0      		ldi r18,lo8(10)	 ;  2833	*movhi/4	[length = 2]
 1569 08b4 30E0      		ldi r19,hi8(10)
 1570 08b6 620E      		add r6,r18	 ;  928	*addhi3/1	[length = 2]
 1571 08b8 731E      		adc r7,r19
 1572               	.LVL147:
 1573 08ba 00C0      		rjmp .L72	 ;  3209	jump	[length = 1]
 1574               	.LVL148:
 1575               	.L154:
 158:bertos/mware/formatwr.c **** 	if (value >= 1)
 1576               		.loc 1 158 0
 1577 08bc 6624      		clr r6	 ;  92	*movhi/5	[length = 2]
 1578 08be 7724      		clr r7
 1579               	.LVL149:
 1580               	.L72:
 160:bertos/mware/formatwr.c **** 		while (value >= 1e11) /* To speed up things a bit */
 1581               		.loc 1 160 0
 1582 08c0 C701      		movw r24,r14	 ;  935	*movsf/1	[length = 2]
 1583 08c2 B601      		movw r22,r12
 1584 08c4 27EB      		ldi r18,lo8(0x51ba43b7)	 ;  936	*movsf/5	[length = 4]
 1585 08c6 33E4      		ldi r19,hi8(0x51ba43b7)
 1586 08c8 4AEB      		ldi r20,hlo8(0x51ba43b7)
 1587 08ca 51E5      		ldi r21,hhi8(0x51ba43b7)
 1588 08cc 0E94 0000 		call __gesf2	 ;  937	call_value_insn/3	[length = 2]
 1589 08d0 87FF      		sbrs r24,7	 ;  3077	*sbrx_branchhi	[length = 2]
 1590 08d2 00C0      		rjmp .L74
 1591 08d4 00C0      		rjmp .L176	 ;  3212	jump	[length = 1]
 1592               	.L76:
 167:bertos/mware/formatwr.c **** 			value /= 10;
 1593               		.loc 1 167 0
 1594 08d6 C701      		movw r24,r14	 ;  945	*movsf/1	[length = 2]
 1595 08d8 B601      		movw r22,r12
 1596 08da 20E0      		ldi r18,lo8(0x41200000)	 ;  946	*movsf/5	[length = 4]
 1597 08dc 30E0      		ldi r19,hi8(0x41200000)
 1598 08de 40E2      		ldi r20,hlo8(0x41200000)
 1599 08e0 51E4      		ldi r21,hhi8(0x41200000)
 1600 08e2 0E94 0000 		call __divsf3	 ;  947	call_value_insn/3	[length = 2]
 1601 08e6 6B01      		movw r12,r22	 ;  3076	*movhi/1	[length = 1]
 1602               	.LVL150:
 1603 08e8 E82E      		mov r14,r24	 ;  2309	*movqi/1	[length = 1]
 1604 08ea F92E      		mov r15,r25	 ;  2310	*movqi/1	[length = 1]
 1605               	.LVL151:
 168:bertos/mware/formatwr.c **** 			integral_10_log++;
 1606               		.loc 1 168 0
 1607 08ec 0894      		sec	 ;  951	*addhi3/5	[length = 3]
 1608 08ee 611C      		adc r6,__zero_reg__
 1609 08f0 711C      		adc r7,__zero_reg__
 1610               	.LVL152:
 1611               	.L176:
 165:bertos/mware/formatwr.c **** 		while (value >= 10)
 1612               		.loc 1 165 0
 1613 08f2 C701      		movw r24,r14	 ;  958	*movsf/1	[length = 2]
 1614 08f4 B601      		movw r22,r12
 1615 08f6 20E0      		ldi r18,lo8(0x41200000)	 ;  959	*movsf/5	[length = 4]
 1616 08f8 30E0      		ldi r19,hi8(0x41200000)
 1617 08fa 40E2      		ldi r20,hlo8(0x41200000)
 1618 08fc 51E4      		ldi r21,hhi8(0x41200000)
 1619 08fe 0E94 0000 		call __gesf2	 ;  960	call_value_insn/3	[length = 2]
 1620 0902 87FF      		sbrs r24,7	 ;  3074	*sbrx_branchhi	[length = 2]
 1621 0904 00C0      		rjmp .L76
 1622 0906 00C0      		rjmp .L77	 ;  3215	jump	[length = 1]
 1623               	.LVL153:
 1624               	.L192:
 171:bertos/mware/formatwr.c **** 	else if (value) /* Not just 0.0 */
 1625               		.loc 1 171 0
 1626 0908 C701      		movw r24,r14	 ;  969	*movsf/1	[length = 2]
 1627 090a B601      		movw r22,r12
 1628 090c 20E0      		ldi r18,lo8(0x0)	 ;  970	*movsf/2	[length = 3]
 1629 090e 30E0      		ldi r19,hi8(0x0)
 1630 0910 A901      		movw r20,r18
 1631 0912 0E94 0000 		call __nesf2	 ;  971	call_value_insn/3	[length = 2]
 1632 0916 6624      		clr r6	 ;  93	*movhi/5	[length = 2]
 1633 0918 7724      		clr r7
 1634 091a 8823      		tst r24	 ;  973	*cmpqi/1	[length = 1]
 1635 091c 01F4      		brne .L78	 ;  974	branch	[length = 1]
 1636 091e 00C0      		rjmp .L77	 ;  3218	jump	[length = 1]
 1637               	.LVL154:
 1638               	.L79:
 175:bertos/mware/formatwr.c **** 			value *= 1e10;
 1639               		.loc 1 175 0
 1640 0920 C701      		movw r24,r14	 ;  979	*movsf/1	[length = 2]
 1641 0922 B601      		movw r22,r12
 1642 0924 29EF      		ldi r18,lo8(0x501502f9)	 ;  980	*movsf/5	[length = 4]
 1643 0926 32E0      		ldi r19,hi8(0x501502f9)
 1644 0928 45E1      		ldi r20,hlo8(0x501502f9)
 1645 092a 50E5      		ldi r21,hhi8(0x501502f9)
 1646 092c 0E94 0000 		call __mulsf3	 ;  981	call_value_insn/3	[length = 2]
 1647 0930 6B01      		movw r12,r22	 ;  3073	*movhi/1	[length = 1]
 1648               	.LVL155:
 1649 0932 E82E      		mov r14,r24	 ;  2318	*movqi/1	[length = 1]
 1650 0934 F92E      		mov r15,r25	 ;  2319	*movqi/1	[length = 1]
 1651               	.LVL156:
 176:bertos/mware/formatwr.c **** 			integral_10_log -= 10;
 1652               		.loc 1 176 0
 1653 0936 86EF      		ldi r24,lo8(-10)	 ;  2834	*movhi/4	[length = 2]
 1654 0938 9FEF      		ldi r25,hi8(-10)
 1655 093a 680E      		add r6,r24	 ;  985	*addhi3/1	[length = 2]
 1656 093c 791E      		adc r7,r25
 1657               	.LVL157:
 1658               	.L78:
 173:bertos/mware/formatwr.c **** 		while (value <= 1e-10) /* To speed up things a bit */
 1659               		.loc 1 173 0
 1660 093e C701      		movw r24,r14	 ;  992	*movsf/1	[length = 2]
 1661 0940 B601      		movw r22,r12
 1662 0942 2FEF      		ldi r18,lo8(0x2edbe6ff)	 ;  993	*movsf/5	[length = 4]
 1663 0944 36EE      		ldi r19,hi8(0x2edbe6ff)
 1664 0946 4BED      		ldi r20,hlo8(0x2edbe6ff)
 1665 0948 5EE2      		ldi r21,hhi8(0x2edbe6ff)
 1666 094a 0E94 0000 		call __lesf2	 ;  994	call_value_insn/3	[length = 2]
 1667 094e 1816      		cp __zero_reg__,r24	 ;  996	*reversed_tstqi	[length = 2]
 1668 0950 04F4      		brge .L79	 ;  997	branch	[length = 1]
 1669 0952 00C0      		rjmp .L177	 ;  3221	jump	[length = 1]
 1670               	.L81:
 180:bertos/mware/formatwr.c **** 			value *= 10;
 1671               		.loc 1 180 0
 1672 0954 C701      		movw r24,r14	 ;  1002	*movsf/1	[length = 2]
 1673 0956 B601      		movw r22,r12
 1674 0958 20E0      		ldi r18,lo8(0x41200000)	 ;  1003	*movsf/5	[length = 4]
 1675 095a 30E0      		ldi r19,hi8(0x41200000)
 1676 095c 40E2      		ldi r20,hlo8(0x41200000)
 1677 095e 51E4      		ldi r21,hhi8(0x41200000)
 1678 0960 0E94 0000 		call __mulsf3	 ;  1004	call_value_insn/3	[length = 2]
 1679 0964 6B01      		movw r12,r22	 ;  3071	*movhi/1	[length = 1]
 1680               	.LVL158:
 1681 0966 E82E      		mov r14,r24	 ;  2327	*movqi/1	[length = 1]
 1682 0968 F92E      		mov r15,r25	 ;  2328	*movqi/1	[length = 1]
 1683               	.LVL159:
 181:bertos/mware/formatwr.c **** 			integral_10_log--;
 1684               		.loc 1 181 0
 1685 096a 0894      		sec	 ;  1008	*addhi3/6	[length = 3]
 1686 096c 6108      		sbc r6,__zero_reg__
 1687 096e 7108      		sbc r7,__zero_reg__
 1688               	.LVL160:
 1689               	.L177:
 178:bertos/mware/formatwr.c **** 		while (value < 1)
 1690               		.loc 1 178 0
 1691 0970 C701      		movw r24,r14	 ;  1015	*movsf/1	[length = 2]
 1692 0972 B601      		movw r22,r12
 1693 0974 20E0      		ldi r18,lo8(0x3f800000)	 ;  1016	*movsf/5	[length = 4]
 1694 0976 30E0      		ldi r19,hi8(0x3f800000)
 1695 0978 40E8      		ldi r20,hlo8(0x3f800000)
 1696 097a 5FE3      		ldi r21,hhi8(0x3f800000)
 1697 097c 0E94 0000 		call __ltsf2	 ;  1017	call_value_insn/3	[length = 2]
 1698 0980 87FD      		sbrc r24,7	 ;  3069	*sbrx_branchhi	[length = 2]
 1699 0982 00C0      		rjmp .L81
 1700               	.LVL161:
 1701               	.L77:
 184:bertos/mware/formatwr.c **** 	if (g_flag)
 1702               		.loc 1 184 0
 1703 0984 C456      		subi r28,lo8(-156)	 ;  2835	*movqi/4	[length = 5]
 1704 0986 DF4F      		sbci r29,hi8(-156)
 1705 0988 9881      		ld r25,Y
 1706 098a CC59      		subi r28,lo8(156)
 1707 098c D040      		sbci r29,hi8(156)
 1708 098e 9923      		tst r25	 ;  1025	*cmpqi/1	[length = 1]
 1709 0990 01F0      		breq .L82	 ;  1026	branch	[length = 1]
 186:bertos/mware/formatwr.c **** 		if (integral_10_log < nr_of_digits && integral_10_log >= -4)
 1710               		.loc 1 186 0
 1711 0992 6814      		cp r6,r8	 ;  1028	*cmphi/3	[length = 2]
 1712 0994 7904      		cpc r7,r9
 1713 0996 04F4      		brge .L83	 ;  1029	branch	[length = 1]
 1714 0998 ACEF      		ldi r26,lo8(-4)	 ;  1031	*cmphi/7	[length = 4]
 1715 099a 6A16      		cp r6,r26
 1716 099c AFEF      		ldi r26,hi8(-4)
 1717 099e 7A06      		cpc r7,r26
 1718 09a0 04F0      		brlt .L83	 ;  1032	branch	[length = 1]
 1719               	.LVL162:
 189:bertos/mware/formatwr.c **** 			nr_of_digits -= integral_10_log;
 1720               		.loc 1 189 0
 1721 09a2 8618      		sub r8,r6	 ;  1035	subhi3/1	[length = 2]
 1722 09a4 9708      		sbc r9,r7
 1723               	.LVL163:
 188:bertos/mware/formatwr.c **** 			format_flag = 0;
 1724               		.loc 1 188 0
 1725 09a6 00E0      		ldi r16,lo8(0)	 ;  95	*movqi/2	[length = 1]
 1726               	.LVL164:
 1727               	.L83:
 191:bertos/mware/formatwr.c **** 		nr_of_digits--;
 1728               		.loc 1 191 0
 1729 09a8 0894      		sec	 ;  1041	*addhi3/6	[length = 3]
 1730 09aa 8108      		sbc r8,__zero_reg__
 1731 09ac 9108      		sbc r9,__zero_reg__
 1732               	.LVL165:
 192:bertos/mware/formatwr.c **** 		if (alternate_flag)
 1733               		.loc 1 192 0
 1734 09ae 3320      		tst r3	 ;  1043	*cmpqi/1	[length = 1]
 1735 09b0 01F0      		breq .L156	 ;  1044	branch	[length = 1]
 194:bertos/mware/formatwr.c **** 			g_flag = 0;
 1736               		.loc 1 194 0
 1737 09b2 C456      		subi r28,lo8(-156)	 ;  97	*movqi/3	[length = 5]
 1738 09b4 DF4F      		sbci r29,hi8(-156)
 1739 09b6 1882      		st Y,__zero_reg__
 1740 09b8 CC59      		subi r28,lo8(156)
 1741 09ba D040      		sbci r29,hi8(156)
 1742 09bc 00C0      		rjmp .L82	 ;  3223	jump	[length = 1]
 1743               	.L156:
 197:bertos/mware/formatwr.c **** 			alternate_flag = true;
 1744               		.loc 1 197 0
 1745 09be 3324      		clr r3	 ;  98	*movqi/7	[length = 2]
 1746 09c0 3394      		inc r3
 1747               	.LVL166:
 192:bertos/mware/formatwr.c **** 		if (alternate_flag)
 1748               		.loc 1 192 0
 1749 09c2 B1E0      		ldi r27,lo8(1)	 ;  99	*movqi/2	[length = 1]
 1750 09c4 C456      		subi r28,lo8(-156)	 ;  2836	*movqi/3	[length = 5]
 1751 09c6 DF4F      		sbci r29,hi8(-156)
 1752 09c8 B883      		st Y,r27
 1753 09ca CC59      		subi r28,lo8(156)
 1754 09cc D040      		sbci r29,hi8(156)
 1755               	.L82:
 1756               	.LVL167:
 201:bertos/mware/formatwr.c **** 	if (format_flag)
 1757               		.loc 1 201 0
 1758 09ce 0023      		tst r16	 ;  1052	*cmpqi/1	[length = 1]
 1759 09d0 01F0      		breq .+2	 ;  1053	branch	[length = 2]
 1760 09d2 00C0      		rjmp .L157
 208:bertos/mware/formatwr.c **** 		if (integral_10_log < 0)
 1761               		.loc 1 208 0
 1762 09d4 77FE      		sbrs r7,7	 ;  3068	*sbrx_and_branchhi	[length = 2]
 1763 09d6 00C0      		rjmp .L85
 210:bertos/mware/formatwr.c **** 			*buf_pointer++ = '0';
 1764               		.loc 1 210 0
 1765 09d8 E1E0      		ldi r30,lo8(1)	 ;  2838	*movhi/4	[length = 2]
 1766 09da F0E0      		ldi r31,hi8(1)
 1767 09dc EC0F      		add r30,r28	 ;  2839	*addhi3/1	[length = 2]
 1768 09de FD1F      		adc r31,r29
 1769 09e0 C357      		subi r28,lo8(-141)	 ;  2840	*movhi/2	[length = 6]
 1770 09e2 DF4F      		sbci r29,hi8(-141)
 1771 09e4 2881      		ld r18,Y
 1772 09e6 3981      		ldd r19,Y+1
 1773 09e8 CD58      		subi r28,lo8(141)
 1774 09ea D040      		sbci r29,hi8(141)
 1775 09ec E20F      		add r30,r18	 ;  1058	*addhi3/1	[length = 2]
 1776 09ee F31F      		adc r31,r19
 1777 09f0 30E3      		ldi r19,lo8(48)	 ;  2841	*movqi/2	[length = 1]
 1778 09f2 3083      		st Z,r19	 ;  1060	*movqi/3	[length = 1]
 1779               	.LVL168:
 211:bertos/mware/formatwr.c **** 			if ((n = nr_of_digits) || alternate_flag)
 1780               		.loc 1 211 0
 1781 09f4 8114      		cp r8,__zero_reg__	 ;  1063	*cmphi/2	[length = 2]
 1782 09f6 9104      		cpc r9,__zero_reg__
 1783 09f8 01F4      		brne .L86	 ;  1064	branch	[length = 1]
 1784 09fa 3320      		tst r3	 ;  1066	*cmpqi/1	[length = 1]
 1785 09fc 01F4      		brne .L86	 ;  1067	branch	[length = 1]
 210:bertos/mware/formatwr.c **** 			*buf_pointer++ = '0';
 1786               		.loc 1 210 0
 1787 09fe 5201      		movw r10,r4	 ;  2842	*movhi/1	[length = 1]
 1788 0a00 0894      		sec	 ;  1069	*addhi3/5	[length = 3]
 1789 0a02 A11C      		adc r10,__zero_reg__
 1790 0a04 B11C      		adc r11,__zero_reg__
 1791 0a06 20E0      		ldi r18,lo8(0)	 ;  101	*movhi/4	[length = 2]
 1792 0a08 30E0      		ldi r19,hi8(0)
 1793 0a0a 00C0      		rjmp .L87	 ;  3225	jump	[length = 1]
 1794               	.L86:
 212:bertos/mware/formatwr.c **** 				*buf_pointer++ = '.';
 1795               		.loc 1 212 0
 1796 0a0c E2E0      		ldi r30,lo8(2)	 ;  2844	*movhi/4	[length = 2]
 1797 0a0e F0E0      		ldi r31,hi8(2)
 1798 0a10 EC0F      		add r30,r28	 ;  2845	*addhi3/1	[length = 2]
 1799 0a12 FD1F      		adc r31,r29
 1800 0a14 C357      		subi r28,lo8(-141)	 ;  2846	*movhi/2	[length = 6]
 1801 0a16 DF4F      		sbci r29,hi8(-141)
 1802 0a18 8881      		ld r24,Y
 1803 0a1a 9981      		ldd r25,Y+1
 1804 0a1c CD58      		subi r28,lo8(141)
 1805 0a1e D040      		sbci r29,hi8(141)
 1806 0a20 E80F      		add r30,r24	 ;  1075	*addhi3/1	[length = 2]
 1807 0a22 F91F      		adc r31,r25
 1808 0a24 8EE2      		ldi r24,lo8(46)	 ;  1076	*movqi/2	[length = 1]
 1809 0a26 8083      		st Z,r24	 ;  1077	*movqi/3	[length = 1]
 1810 0a28 22E0      		ldi r18,lo8(2)	 ;  3067	*reload_inhi	[length = 3]
 1811 0a2a A22E      		mov r10,r18
 1812 0a2c B12C      		mov r11,__zero_reg__
 1813 0a2e A40C      		add r10,r4	 ;  1078	*addhi3/1	[length = 2]
 1814 0a30 B51C      		adc r11,r5
 1815               	.LVL169:
 1816 0a32 9401      		movw r18,r8	 ;  100	*movhi/1	[length = 1]
 1817               	.L87:
 210:bertos/mware/formatwr.c **** 			*buf_pointer++ = '0';
 1818               		.loc 1 210 0
 1819 0a34 80E0      		ldi r24,lo8(0)	 ;  102	*movhi/4	[length = 2]
 1820 0a36 90E0      		ldi r25,hi8(0)
 1821 0a38 F501      		movw r30,r10	 ;  2542	*movhi/1	[length = 1]
 1822 0a3a 00C0      		rjmp .L88	 ;  3227	jump	[length = 1]
 1823               	.LVL170:
 1824               	.L90:
 216:bertos/mware/formatwr.c **** 				*buf_pointer++ = '0';
 1825               		.loc 1 216 0
 1826 0a3c A0E3      		ldi r26,lo8(48)	 ;  2848	*movqi/2	[length = 1]
 1827 0a3e A193      		st Z+,r26	 ;  1086	*movqi/3	[length = 1]
 1828               	.LVL171:
 217:bertos/mware/formatwr.c **** 				nr_of_digits--;
 1829               		.loc 1 217 0
 1830 0a40 2150      		subi r18,lo8(-(-1))	 ;  1089	*addhi3/4	[length = 2]
 1831 0a42 3040      		sbci r19,hi8(-(-1))
 1832               	.LVL172:
 1833               	.L88:
 214:bertos/mware/formatwr.c **** 			while (--i > integral_10_log && nr_of_digits)
 1834               		.loc 1 214 0
 1835 0a44 0197      		sbiw r24,1	 ;  1096	*addhi3/3	[length = 1]
 1836               	.LVL173:
 1837 0a46 8615      		cp r24,r6	 ;  1098	*cmphi/3	[length = 2]
 1838 0a48 9705      		cpc r25,r7
 1839 0a4a 01F0      		breq .L89	 ;  1099	branch	[length = 1]
 1840 0a4c 2115      		cp r18,__zero_reg__	 ;  1102	*cmphi/2	[length = 2]
 1841 0a4e 3105      		cpc r19,__zero_reg__
 1842 0a50 01F4      		brne .L90	 ;  1103	branch	[length = 1]
 1843               	.L89:
 1844 0a52 5F01      		movw r10,r30	 ;  2553	*movhi/1	[length = 1]
 219:bertos/mware/formatwr.c **** 			if (integral_10_log < (-n - 1))
 1845               		.loc 1 219 0
 1846 0a54 C401      		movw r24,r8	 ;  2849	*movhi/1	[length = 1]
 1847               	.LVL174:
 1848 0a56 8095      		com r24	 ;  1106	one_cmplhi2	[length = 2]
 1849 0a58 9095      		com r25
 1850 0a5a 6816      		cp r6,r24	 ;  1107	*cmphi/3	[length = 2]
 1851 0a5c 7906      		cpc r7,r25
 1852 0a5e 04F4      		brge .+2	 ;  1108	branch	[length = 2]
 1853 0a60 00C0      		rjmp .L91
 1854 0a62 4901      		movw r8,r18	 ;  105	*movhi/1	[length = 1]
 1855               	.LVL175:
 222:bertos/mware/formatwr.c **** 			dec_point_pos = 1;
 1856               		.loc 1 222 0
 1857 0a64 81E0      		ldi r24,lo8(1)	 ;  106	*movhi/4	[length = 2]
 1858 0a66 90E0      		ldi r25,hi8(1)
 1859               	.LVL176:
 1860 0a68 00C0      		rjmp .L84	 ;  3229	jump	[length = 1]
 1861               	.LVL177:
 1862               	.L85:
 226:bertos/mware/formatwr.c **** 			dec_point_pos = - integral_10_log;
 1863               		.loc 1 226 0
 1864 0a6a 8827      		clr r24	 ;  1114	neghi2/3	[length = 4]
 1865 0a6c 9927      		clr r25
 1866 0a6e 8619      		sub r24,r6
 1867 0a70 9709      		sbc r25,r7
 1868               	.LVL178:
 733:bertos/mware/formatwr.c **** 				ptr = float_conversion (fvalue,
 1869               		.loc 1 733 0
 1870 0a72 5201      		movw r10,r4	 ;  107	*movhi/1	[length = 1]
 1871 0a74 00C0      		rjmp .L84	 ;  3231	jump	[length = 1]
 1872               	.LVL179:
 1873               	.L157:
 1874 0a76 5201      		movw r10,r4	 ;  103	*movhi/1	[length = 1]
 203:bertos/mware/formatwr.c **** 		dec_point_pos = 0;
 1875               		.loc 1 203 0
 1876 0a78 80E0      		ldi r24,lo8(0)	 ;  104	*movhi/4	[length = 2]
 1877 0a7a 90E0      		ldi r25,hi8(0)
 1878               	.LVL180:
 1879               	.L84:
 226:bertos/mware/formatwr.c **** 			dec_point_pos = - integral_10_log;
 1880               		.loc 1 226 0
 1881 0a7c C256      		subi r28,lo8(-158)	 ;  1122	*movhi/3	[length = 6]
 1882 0a7e DF4F      		sbci r29,hi8(-158)
 1883 0a80 9983      		std Y+1,r25
 1884 0a82 8883      		st Y,r24
 1885 0a84 CE59      		subi r28,lo8(158)
 1886 0a86 D040      		sbci r29,hi8(158)
 1887 0a88 00C0      		rjmp .L92	 ;  3233	jump	[length = 1]
 1888               	.LVL181:
 1889               	.L95:
 233:bertos/mware/formatwr.c **** 		value -= (max_float_t)(n = (short)value); /* n=Digit value=Remainder */
 1890               		.loc 1 233 0
 1891 0a8a C701      		movw r24,r14	 ;  1126	*movsf/1	[length = 2]
 1892 0a8c B601      		movw r22,r12
 1893 0a8e 0E94 0000 		call __fixsfsi	 ;  1127	call_value_insn/3	[length = 2]
 1894 0a92 DC01      		movw r26,r24	 ;  1128	*movsi/1	[length = 2]
 1895 0a94 CB01      		movw r24,r22
 1896 0a96 CF55      		subi r28,lo8(-161)	 ;  1129	*movhi/3	[length = 6]
 1897 0a98 DF4F      		sbci r29,hi8(-161)
 1898 0a9a 9983      		std Y+1,r25
 1899 0a9c 8883      		st Y,r24
 1900 0a9e C15A      		subi r28,lo8(161)
 1901 0aa0 D040      		sbci r29,hi8(161)
 1902               	.LVL182:
 1903 0aa2 FC01      		movw r30,r24	 ;  2850	*movhi/1	[length = 1]
 1904 0aa4 BF01      		movw r22,r30	 ;  1131	extendhisi2/2	[length = 5]
 1905 0aa6 8827      		clr r24
 1906 0aa8 77FD      		sbrc r23,7
 1907 0aaa 8095      		com r24
 1908 0aac 982F      		mov r25,r24
 1909 0aae 0E94 0000 		call __floatsisf	 ;  1133	call_value_insn/3	[length = 2]
 1910               	.LVL183:
 1911 0ab2 9B01      		movw r18,r22	 ;  1134	*movsf/1	[length = 2]
 1912 0ab4 AC01      		movw r20,r24
 1913 0ab6 C701      		movw r24,r14	 ;  1135	*movsf/1	[length = 2]
 1914 0ab8 B601      		movw r22,r12
 1915 0aba 0E94 0000 		call __subsf3	 ;  1137	call_value_insn/3	[length = 2]
 1916               	.LVL184:
 234:bertos/mware/formatwr.c **** 		value *= 10; /* Prepare for next shot */
 1917               		.loc 1 234 0
 1918 0abe 9C01      		movw r18,r24	 ;  3060	*movhi/1	[length = 1]
 1919 0ac0 CB01      		movw r24,r22	 ;  3061	*movhi/1	[length = 1]
 1920               	.LVL185:
 1921 0ac2 D901      		movw r26,r18	 ;  3062	*movhi/1	[length = 1]
 1922 0ac4 BC01      		movw r22,r24	 ;  2338	*movsf/1	[length = 2]
 1923 0ac6 CD01      		movw r24,r26
 1924 0ac8 20E0      		ldi r18,lo8(0x41200000)	 ;  1142	*movsf/5	[length = 4]
 1925 0aca 30E0      		ldi r19,hi8(0x41200000)
 1926 0acc 40E2      		ldi r20,hlo8(0x41200000)
 1927 0ace 51E4      		ldi r21,hhi8(0x41200000)
 1928 0ad0 0E94 0000 		call __mulsf3	 ;  1143	call_value_insn/3	[length = 2]
 1929 0ad4 6B01      		movw r12,r22	 ;  3065	*movhi/1	[length = 1]
 1930 0ad6 7C01      		movw r14,r24	 ;  3066	*movhi/1	[length = 1]
 1931               	.LVL186:
 235:bertos/mware/formatwr.c **** 		*buf_pointer++ = n + '0';
 1932               		.loc 1 235 0
 1933 0ad8 CF55      		subi r28,lo8(-161)	 ;  2851	*movqi/4	[length = 5]
 1934 0ada DF4F      		sbci r29,hi8(-161)
 1935 0adc 8881      		ld r24,Y
 1936 0ade C15A      		subi r28,lo8(161)
 1937 0ae0 D040      		sbci r29,hi8(161)
 1938 0ae2 805D      		subi r24,lo8(-(48))	 ;  1147	addqi3/2	[length = 1]
 1939 0ae4 F501      		movw r30,r10	 ;  2085	*movhi/1	[length = 1]
 1940 0ae6 8193      		st Z+,r24	 ;  1148	*movqi/3	[length = 1]
 1941               	.LVL187:
 236:bertos/mware/formatwr.c **** 		if ( ! i++ && (nr_of_digits || alternate_flag))
 1942               		.loc 1 236 0
 1943 0ae8 C256      		subi r28,lo8(-158)	 ;  2852	*movhi/2	[length = 6]
 1944 0aea DF4F      		sbci r29,hi8(-158)
 1945 0aec 2881      		ld r18,Y
 1946 0aee 3981      		ldd r19,Y+1
 1947 0af0 CE59      		subi r28,lo8(158)
 1948 0af2 D040      		sbci r29,hi8(158)
 1949 0af4 2115      		cp r18,__zero_reg__	 ;  1152	*cmphi/2	[length = 2]
 1950 0af6 3105      		cpc r19,__zero_reg__
 1951 0af8 01F4      		brne .L93	 ;  1153	branch	[length = 1]
 1952 0afa 8114      		cp r8,__zero_reg__	 ;  1155	*cmphi/2	[length = 2]
 1953 0afc 9104      		cpc r9,__zero_reg__
 1954 0afe 01F4      		brne .L94	 ;  1156	branch	[length = 1]
 1955 0b00 3320      		tst r3	 ;  1158	*cmpqi/1	[length = 1]
 1956 0b02 01F0      		breq .L93	 ;  1159	branch	[length = 1]
 1957               	.L94:
 237:bertos/mware/formatwr.c **** 			*buf_pointer++ = '.';
 1958               		.loc 1 237 0
 1959 0b04 EEE2      		ldi r30,lo8(46)	 ;  2854	*movqi/2	[length = 1]
 1960               	.LVL188:
 1961 0b06 D501      		movw r26,r10	 ;  2853	*movhi/1	[length = 1]
 1962 0b08 1196      		adiw r26,1	 ;  1163	*movqi/3	[length = 3]
 1963 0b0a EC93      		st X,r30
 1964 0b0c 1197      		sbiw r26,1
 1965 0b0e F501      		movw r30,r10	 ;  2855	*movhi/1	[length = 1]
 1966 0b10 3296      		adiw r30,2	 ;  1164	*addhi3/2	[length = 1]
 1967               	.LVL189:
 1968               	.L93:
 1969 0b12 C256      		subi r28,lo8(-158)	 ;  2856	*movhi/2	[length = 6]
 1970 0b14 DF4F      		sbci r29,hi8(-158)
 1971 0b16 2881      		ld r18,Y
 1972 0b18 3981      		ldd r19,Y+1
 1973 0b1a CE59      		subi r28,lo8(158)
 1974 0b1c D040      		sbci r29,hi8(158)
 1975 0b1e 2F5F      		subi r18,lo8(-(1))	 ;  1168	*addhi3/4	[length = 2]
 1976 0b20 3F4F      		sbci r19,hi8(-(1))
 1977 0b22 C256      		subi r28,lo8(-158)	 ;  2857	*movhi/3	[length = 6]
 1978 0b24 DF4F      		sbci r29,hi8(-158)
 1979 0b26 3983      		std Y+1,r19
 1980 0b28 2883      		st Y,r18
 1981 0b2a CE59      		subi r28,lo8(158)
 1982 0b2c D040      		sbci r29,hi8(158)
 733:bertos/mware/formatwr.c **** 				ptr = float_conversion (fvalue,
 1983               		.loc 1 733 0
 1984 0b2e 5F01      		movw r10,r30	 ;  108	*movhi/1	[length = 1]
 1985               	.LVL190:
 1986               	.L92:
 231:bertos/mware/formatwr.c **** 	while (i <= nr_of_digits )
 1987               		.loc 1 231 0
 1988 0b30 C256      		subi r28,lo8(-158)	 ;  2858	*movhi/2	[length = 6]
 1989 0b32 DF4F      		sbci r29,hi8(-158)
 1990 0b34 8881      		ld r24,Y
 1991 0b36 9981      		ldd r25,Y+1
 1992 0b38 CE59      		subi r28,lo8(158)
 1993 0b3a D040      		sbci r29,hi8(158)
 1994 0b3c 8816      		cp r8,r24	 ;  1176	*cmphi/3	[length = 2]
 1995 0b3e 9906      		cpc r9,r25
 1996 0b40 04F0      		brlt .+2	 ;  1177	branch	[length = 2]
 1997 0b42 00C0      		rjmp .L95
 241:bertos/mware/formatwr.c **** 	if (value >= 5)
 1998               		.loc 1 241 0
 1999 0b44 C701      		movw r24,r14	 ;  1179	*movsf/1	[length = 2]
 2000 0b46 B601      		movw r22,r12
 2001 0b48 20E0      		ldi r18,lo8(0x40a00000)	 ;  1180	*movsf/5	[length = 4]
 2002 0b4a 30E0      		ldi r19,hi8(0x40a00000)
 2003 0b4c 40EA      		ldi r20,hlo8(0x40a00000)
 2004 0b4e 50E4      		ldi r21,hhi8(0x40a00000)
 2005 0b50 0E94 0000 		call __gesf2	 ;  1181	call_value_insn/3	[length = 2]
 2006 0b54 87FD      		sbrc r24,7	 ;  3058	*sbrx_branchhi	[length = 2]
 2007 0b56 00C0      		rjmp .L91
 2008               	.LVL191:
 2009 0b58 F501      		movw r30,r10	 ;  1191	*movhi/1	[length = 1]
 243:bertos/mware/formatwr.c **** 		n = 1; /* Carry */
 2010               		.loc 1 243 0
 2011 0b5a 81E0      		ldi r24,lo8(1)	 ;  110	*movhi/4	[length = 2]
 2012 0b5c 90E0      		ldi r25,hi8(1)
 2013               	.LVL192:
 2014               	.L98:
 247:bertos/mware/formatwr.c **** 			if (*cp != '.')
 2015               		.loc 1 247 0
 2016 0b5e 2291      		ld r18,-Z	 ;  1197	*movqi/4	[length = 1]
 2017 0b60 2E32      		cpi r18,lo8(46)	 ;  1198	*cmpqi/3	[length = 1]
 2018 0b62 01F0      		breq .L97	 ;  1199	branch	[length = 1]
 249:bertos/mware/formatwr.c **** 				if ( (*cp += n) == ('9' + 1) )
 2019               		.loc 1 249 0
 2020 0b64 820F      		add r24,r18	 ;  1201	addqi3/1	[length = 1]
 2021               	.LVL193:
 2022 0b66 8083      		st Z,r24	 ;  1202	*movqi/3	[length = 1]
 2023 0b68 8A33      		cpi r24,lo8(58)	 ;  1203	*cmpqi/3	[length = 1]
 2024 0b6a 01F4      		brne .L158	 ;  1204	branch	[length = 1]
 251:bertos/mware/formatwr.c **** 					*cp = '0';
 2025               		.loc 1 251 0
 2026 0b6c 90E3      		ldi r25,lo8(48)	 ;  2859	*movqi/2	[length = 1]
 2027 0b6e 9083      		st Z,r25	 ;  1207	*movqi/3	[length = 1]
 2028               	.LVL194:
 252:bertos/mware/formatwr.c **** 					n = 1;
 2029               		.loc 1 252 0
 2030 0b70 81E0      		ldi r24,lo8(1)	 ;  2022	*movhi/4	[length = 2]
 2031 0b72 90E0      		ldi r25,hi8(1)
 2032 0b74 00C0      		rjmp .L97	 ;  3235	jump	[length = 1]
 2033               	.LVL195:
 2034               	.L158:
 255:bertos/mware/formatwr.c **** 					n = 0;
 2035               		.loc 1 255 0
 2036 0b76 80E0      		ldi r24,lo8(0)	 ;  2020	*movhi/4	[length = 2]
 2037 0b78 90E0      		ldi r25,hi8(0)
 2038               	.L97:
 2039               	.LVL196:
 257:bertos/mware/formatwr.c **** 		} while (cp-- > buf);
 2040               		.loc 1 257 0
 2041 0b7a 4E16      		cp r4,r30	 ;  1214	*cmphi/3	[length = 2]
 2042 0b7c 5F06      		cpc r5,r31
 2043 0b7e 00F0      		brlo .L98	 ;  1215	branch	[length = 1]
 258:bertos/mware/formatwr.c **** 		if (n)
 2044               		.loc 1 258 0
 2045 0b80 0097      		sbiw r24,0	 ;  1217	*cmphi/1	[length = 1]
 2046 0b82 01F0      		breq .L91	 ;  1218	branch	[length = 1]
 261:bertos/mware/formatwr.c **** 			if (format_flag)
 2047               		.loc 1 261 0
 2048 0b84 0023      		tst r16	 ;  1220	*cmpqi/1	[length = 1]
 2049 0b86 01F0      		breq .L99	 ;  1221	branch	[length = 1]
 2050 0b88 D501      		movw r26,r10	 ;  113	*movhi/1	[length = 1]
 2051 0b8a 00C0      		rjmp .L100	 ;  3237	jump	[length = 1]
 2052               	.LVL197:
 2053               	.L103:
 266:bertos/mware/formatwr.c **** 					if (*(cp - 1) == '.')
 2054               		.loc 1 266 0
 2055 0b8c FD01      		movw r30,r26	 ;  2860	*movhi/1	[length = 1]
 2056 0b8e 8291      		ld r24,-Z	 ;  1228	*movqi/4	[length = 1]
 2057 0b90 9F01      		movw r18,r30	 ;  2861	*movhi/1	[length = 1]
 2058 0b92 8E32      		cpi r24,lo8(46)	 ;  1229	*cmpqi/3	[length = 1]
 2059 0b94 01F4      		brne .L101	 ;  1230	branch	[length = 1]
 268:bertos/mware/formatwr.c **** 						*cp = *(cp - 2);
 2060               		.loc 1 268 0
 2061 0b96 FD01      		movw r30,r26	 ;  2862	*movhi/1	[length = 1]
 2062 0b98 3297      		sbiw r30,2	 ;  1233	*addhi3/3	[length = 1]
 2063 0b9a 8081      		ld r24,Z	 ;  1234	*movqi/4	[length = 1]
 2064 0b9c 8C93      		st X,r24	 ;  1235	*movqi/3	[length = 1]
 269:bertos/mware/formatwr.c **** 						cp--;
 2065               		.loc 1 269 0
 2066 0b9e D901      		movw r26,r18	 ;  1236	*movhi/1	[length = 1]
 2067               	.LVL198:
 2068 0ba0 00C0      		rjmp .L102	 ;  3239	jump	[length = 1]
 2069               	.LVL199:
 2070               	.L101:
 272:bertos/mware/formatwr.c **** 						*cp = *(cp - 1);
 2071               		.loc 1 272 0
 2072 0ba2 8C93      		st X,r24	 ;  1245	*movqi/3	[length = 1]
 2073               	.LVL200:
 2074               	.L102:
 273:bertos/mware/formatwr.c **** 					cp--;
 2075               		.loc 1 273 0
 2076 0ba4 1197      		sbiw r26,1	 ;  1249	*addhi3/3	[length = 1]
 2077               	.LVL201:
 2078               	.L100:
 264:bertos/mware/formatwr.c **** 				while (cp > buf)
 2079               		.loc 1 264 0
 2080 0ba6 4A16      		cp r4,r26	 ;  1255	*cmphi/3	[length = 2]
 2081 0ba8 5B06      		cpc r5,r27
 2082 0baa 00F0      		brlo .L103	 ;  1256	branch	[length = 1]
 275:bertos/mware/formatwr.c **** 				integral_10_log++;
 2083               		.loc 1 275 0
 2084 0bac 0894      		sec	 ;  1258	*addhi3/5	[length = 3]
 2085 0bae 611C      		adc r6,__zero_reg__
 2086 0bb0 711C      		adc r7,__zero_reg__
 2087               	.LVL202:
 2088 0bb2 00C0      		rjmp .L104	 ;  3241	jump	[length = 1]
 2089               	.LVL203:
 2090               	.L99:
 279:bertos/mware/formatwr.c **** 				cp = ++buf_pointer;
 2091               		.loc 1 279 0
 2092 0bb4 0894      		sec	 ;  1264	*addhi3/5	[length = 3]
 2093 0bb6 A11C      		adc r10,__zero_reg__
 2094 0bb8 B11C      		adc r11,__zero_reg__
 2095               	.LVL204:
 2096 0bba D501      		movw r26,r10	 ;  114	*movhi/1	[length = 1]
 2097 0bbc 00C0      		rjmp .L105	 ;  3243	jump	[length = 1]
 2098               	.LVL205:
 2099               	.L106:
 334:bertos/mware/formatwr.c **** PGM_FUNC(_formatted_write)(const char * PGM_ATTR format,
 2100               		.loc 1 334 0
 2101 0bbe FD01      		movw r30,r26	 ;  2087	*movhi/1	[length = 1]
 282:bertos/mware/formatwr.c **** 					*cp = *(cp - 1);
 2102               		.loc 1 282 0
 2103 0bc0 8291      		ld r24,-Z	 ;  1271	*movqi/4	[length = 1]
 2104 0bc2 8C93      		st X,r24	 ;  1272	*movqi/3	[length = 1]
 2105               	.LVL206:
 283:bertos/mware/formatwr.c **** 					cp--;
 2106               		.loc 1 283 0
 2107 0bc4 DF01      		movw r26,r30	 ;  115	*movhi/1	[length = 1]
 2108               	.LVL207:
 2109               	.L105:
 280:bertos/mware/formatwr.c **** 				while (cp > buf)
 2110               		.loc 1 280 0
 2111 0bc6 4A16      		cp r4,r26	 ;  1278	*cmphi/3	[length = 2]
 2112 0bc8 5B06      		cpc r5,r27
 2113 0bca 00F0      		brlo .L106	 ;  1279	branch	[length = 1]
 2114               	.L104:
 286:bertos/mware/formatwr.c **** 			*buf = '1';
 2115               		.loc 1 286 0
 2116 0bcc E1E0      		ldi r30,lo8(1)	 ;  2864	*movhi/4	[length = 2]
 2117 0bce F0E0      		ldi r31,hi8(1)
 2118 0bd0 EC0F      		add r30,r28	 ;  2865	*addhi3/1	[length = 2]
 2119 0bd2 FD1F      		adc r31,r29
 2120 0bd4 C357      		subi r28,lo8(-141)	 ;  2866	*movhi/2	[length = 6]
 2121 0bd6 DF4F      		sbci r29,hi8(-141)
 2122 0bd8 2881      		ld r18,Y
 2123 0bda 3981      		ldd r19,Y+1
 2124 0bdc CD58      		subi r28,lo8(141)
 2125 0bde D040      		sbci r29,hi8(141)
 2126 0be0 E20F      		add r30,r18	 ;  1284	*addhi3/1	[length = 2]
 2127 0be2 F31F      		adc r31,r19
 2128 0be4 81E3      		ldi r24,lo8(49)	 ;  1285	*movqi/2	[length = 1]
 2129 0be6 8083      		st Z,r24	 ;  1286	*movqi/3	[length = 1]
 2130               	.LVL208:
 2131               	.L91:
 292:bertos/mware/formatwr.c **** 	if (g_flag)
 2132               		.loc 1 292 0
 2133 0be8 C456      		subi r28,lo8(-156)	 ;  2867	*movqi/4	[length = 5]
 2134 0bea DF4F      		sbci r29,hi8(-156)
 2135 0bec 3881      		ld r19,Y
 2136 0bee CC59      		subi r28,lo8(156)
 2137 0bf0 D040      		sbci r29,hi8(156)
 2138 0bf2 3323      		tst r19	 ;  1291	*cmpqi/1	[length = 1]
 2139 0bf4 01F0      		breq .L107	 ;  1292	branch	[length = 1]
 2140 0bf6 00C0      		rjmp .L178	 ;  3246	jump	[length = 1]
 2141               	.L159:
 295:bertos/mware/formatwr.c **** 			buf_pointer--;
 2142               		.loc 1 295 0
 2143 0bf8 5F01      		movw r10,r30	 ;  116	*movhi/1	[length = 1]
 2144               	.LVL209:
 2145               	.L178:
 334:bertos/mware/formatwr.c **** PGM_FUNC(_formatted_write)(const char * PGM_ATTR format,
 2146               		.loc 1 334 0
 2147 0bfa F501      		movw r30,r10	 ;  2088	*movhi/1	[length = 1]
 294:bertos/mware/formatwr.c **** 		while (*(buf_pointer - 1) == '0')
 2148               		.loc 1 294 0
 2149 0bfc 8291      		ld r24,-Z	 ;  1297	*movqi/4	[length = 1]
 2150 0bfe 8033      		cpi r24,lo8(48)	 ;  1299	*cmpqi/3	[length = 1]
 2151 0c00 01F0      		breq .L159	 ;  1300	branch	[length = 1]
 296:bertos/mware/formatwr.c **** 		if (*(buf_pointer - 1) == '.')
 2152               		.loc 1 296 0
 2153 0c02 8E32      		cpi r24,lo8(46)	 ;  1302	*cmpqi/3	[length = 1]
 2154 0c04 01F4      		brne .L107	 ;  1303	branch	[length = 1]
 297:bertos/mware/formatwr.c **** 			buf_pointer--;
 2155               		.loc 1 297 0
 2156 0c06 5F01      		movw r10,r30	 ;  1305	*movhi/1	[length = 1]
 2157               	.LVL210:
 2158               	.L107:
 303:bertos/mware/formatwr.c **** 		*buf_pointer++ = format_flag;
 2159               		.loc 1 303 0
 2160 0c08 D501      		movw r26,r10	 ;  2868	*movhi/1	[length = 1]
 301:bertos/mware/formatwr.c **** 	if (format_flag)
 2161               		.loc 1 301 0
 2162 0c0a 0023      		tst r16	 ;  1310	*cmpqi/1	[length = 1]
 2163 0c0c 01F4      		brne .+2	 ;  1311	branch	[length = 2]
 2164 0c0e 00C0      		rjmp .L109
 303:bertos/mware/formatwr.c **** 		*buf_pointer++ = format_flag;
 2165               		.loc 1 303 0
 2166 0c10 0C93      		st X,r16	 ;  1313	*movqi/3	[length = 1]
 2167               	.LVL211:
 2168 0c12 9501      		movw r18,r10	 ;  2869	*movhi/1	[length = 1]
 2169 0c14 2E5F      		subi r18,lo8(-(2))	 ;  1995	*addhi3/4	[length = 2]
 2170 0c16 3F4F      		sbci r19,hi8(-(2))
 304:bertos/mware/formatwr.c **** 		if (integral_10_log < 0)
 2171               		.loc 1 304 0
 2172 0c18 77FE      		sbrs r7,7	 ;  3057	*sbrx_and_branchhi	[length = 2]
 2173 0c1a 00C0      		rjmp .L110
 306:bertos/mware/formatwr.c **** 			*buf_pointer++ = '-';
 2174               		.loc 1 306 0
 2175 0c1c 8DE2      		ldi r24,lo8(45)	 ;  1318	*movqi/2	[length = 1]
 2176 0c1e 1196      		adiw r26,1	 ;  1319	*movqi/3	[length = 3]
 2177 0c20 8C93      		st X,r24
 2178 0c22 1197      		sbiw r26,1
 2179               	.LVL212:
 307:bertos/mware/formatwr.c **** 			integral_10_log = -integral_10_log;
 2180               		.loc 1 307 0
 2181 0c24 7094      		com r7	 ;  1322	neghi2/2	[length = 4]
 2182 0c26 6194      		neg r6
 2183 0c28 7108      		sbc r7,__zero_reg__
 2184 0c2a 7394      		inc r7
 2185               	.LVL213:
 2186 0c2c 00C0      		rjmp .L111	 ;  3248	jump	[length = 1]
 2187               	.LVL214:
 2188               	.L110:
 310:bertos/mware/formatwr.c **** 			*buf_pointer++ = '+';
 2189               		.loc 1 310 0
 2190 0c2e 8BE2      		ldi r24,lo8(43)	 ;  1328	*movqi/2	[length = 1]
 2191 0c30 F501      		movw r30,r10	 ;  2870	*movhi/1	[length = 1]
 2192 0c32 8183      		std Z+1,r24	 ;  1329	*movqi/3	[length = 1]
 2193               	.LVL215:
 2194               	.L111:
 312:bertos/mware/formatwr.c **** 		buf_pointer +=10;
 2195               		.loc 1 312 0
 2196 0c34 C901      		movw r24,r18	 ;  2871	*movhi/1	[length = 1]
 2197 0c36 0A96      		adiw r24,10	 ;  1338	*addhi3/2	[length = 1]
 311:bertos/mware/formatwr.c **** 		n = 0;
 2198               		.loc 1 311 0
 2199 0c38 CC24      		clr r12	 ;  118	*movhi/5	[length = 2]
 2200 0c3a DD24      		clr r13
 2201               	.LVL216:
 2202               	.L173:
 310:bertos/mware/formatwr.c **** 			*buf_pointer++ = '+';
 2203               		.loc 1 310 0
 2204 0c3c 5C01      		movw r10,r24	 ;  1344	*movhi/1	[length = 1]
 2205               	.LVL217:
 315:bertos/mware/formatwr.c **** 			n++;
 2206               		.loc 1 315 0
 2207 0c3e 0894      		sec	 ;  1348	*addhi3/5	[length = 3]
 2208 0c40 C11C      		adc r12,__zero_reg__
 2209 0c42 D11C      		adc r13,__zero_reg__
 2210               	.LVL218:
 316:bertos/mware/formatwr.c **** 			*buf_pointer++ = (integral_10_log % 10) + '0';
 2211               		.loc 1 316 0
 2212 0c44 C301      		movw r24,r6	 ;  2275	*movhi/1	[length = 1]
 2213               	.LVL219:
 2214 0c46 6AE0      		ldi r22,lo8(10)	 ;  2276	*movhi/4	[length = 2]
 2215 0c48 70E0      		ldi r23,hi8(10)
 2216 0c4a 0E94 0000 		call __divmodhi4	 ;  2277	*divmodhi4_call	[length = 2]
 2217 0c4e 805D      		subi r24,lo8(-(48))	 ;  1352	addqi3/2	[length = 1]
 2218 0c50 D501      		movw r26,r10	 ;  2872	*movhi/1	[length = 1]
 2219 0c52 8C93      		st X,r24	 ;  1353	*movqi/3	[length = 1]
 2220 0c54 C501      		movw r24,r10	 ;  2873	*movhi/1	[length = 1]
 2221 0c56 0196      		adiw r24,1	 ;  1354	*addhi3/2	[length = 1]
 2222               	.LVL220:
 317:bertos/mware/formatwr.c **** 			integral_10_log /= 10;
 2223               		.loc 1 317 0
 2224 0c58 3B01      		movw r6,r22	 ;  3056	*movhi/1	[length = 1]
 2225               	.LVL221:
 318:bertos/mware/formatwr.c **** 		} while ( integral_10_log || n < 2 );
 2226               		.loc 1 318 0
 2227 0c5a 6115      		cp r22,__zero_reg__	 ;  1362	*cmphi/2	[length = 2]
 2228 0c5c 7105      		cpc r23,__zero_reg__
 2229 0c5e 01F4      		brne .L173	 ;  1363	branch	[length = 1]
 2230 0c60 B2E0      		ldi r27,lo8(2)	 ;  1365	*cmphi/6	[length = 3]
 2231 0c62 CB16      		cp r12,r27
 2232 0c64 D104      		cpc r13,__zero_reg__
 2233 0c66 04F0      		brlt .L173	 ;  1366	branch	[length = 1]
 334:bertos/mware/formatwr.c **** PGM_FUNC(_formatted_write)(const char * PGM_ATTR format,
 2234               		.loc 1 334 0
 2235 0c68 D501      		movw r26,r10	 ;  2874	*movhi/1	[length = 1]
 2236 0c6a 1997      		sbiw r26,9	 ;  1369	*addhi3/3	[length = 1]
 2237 0c6c 20E0      		ldi r18,lo8(0)	 ;  119	*movhi/4	[length = 2]
 2238 0c6e 30E0      		ldi r19,hi8(0)
 2239 0c70 AC01      		movw r20,r24	 ;  2875	*movhi/1	[length = 1]
 2240 0c72 4C19      		sub r20,r12	 ;  1372	subhi3/1	[length = 2]
 2241 0c74 5D09      		sbc r21,r13
 2242               	.LVL222:
 2243               	.L114:
 2244 0c76 FA01      		movw r30,r20	 ;  2876	*movhi/1	[length = 1]
 2245 0c78 E20F      		add r30,r18	 ;  1373	*addhi3/1	[length = 2]
 2246 0c7a F31F      		adc r31,r19
 320:bertos/mware/formatwr.c **** 			*(buf_pointer - 11 - i + n) = *(buf_pointer - n);
 2247               		.loc 1 320 0
 2248 0c7c 8081      		ld r24,Z	 ;  1374	*movqi/4	[length = 1]
 2249 0c7e 8E93      		st -X,r24	 ;  1376	*movqi/3	[length = 1]
 2250 0c80 2F5F      		subi r18,lo8(-(1))	 ;  1379	*addhi3/4	[length = 2]
 2251 0c82 3F4F      		sbci r19,hi8(-(1))
 334:bertos/mware/formatwr.c **** PGM_FUNC(_formatted_write)(const char * PGM_ATTR format,
 2252               		.loc 1 334 0
 2253 0c84 C601      		movw r24,r12	 ;  2877	*movhi/1	[length = 1]
 2254 0c86 821B      		sub r24,r18	 ;  1381	subhi3/1	[length = 2]
 2255 0c88 930B      		sbc r25,r19
 319:bertos/mware/formatwr.c **** 		for ( i = n ; n > 0 ; n-- )
 2256               		.loc 1 319 0
 2257 0c8a 1816      		cp __zero_reg__,r24	 ;  1382	*reversed_tsthi	[length = 2]
 2258 0c8c 1906      		cpc __zero_reg__,r25
 2259 0c8e 04F0      		brlt .L114	 ;  1383	branch	[length = 1]
 321:bertos/mware/formatwr.c **** 		buf_pointer -= 10;
 2260               		.loc 1 321 0
 2261 0c90 D501      		movw r26,r10	 ;  2878	*movhi/1	[length = 1]
 2262 0c92 1997      		sbiw r26,9	 ;  1385	*addhi3/3	[length = 1]
 2263               	.LVL223:
 2264               	.L109:
 2265               	.LBE10:
 2266               	.LBE9:
 739:bertos/mware/formatwr.c **** 				if (flags.zeropad)
 2267               		.loc 1 739 0
 2268 0c94 C356      		subi r28,lo8(-157)	 ;  2879	*movqi/4	[length = 5]
 2269 0c96 DF4F      		sbci r29,hi8(-157)
 2270 0c98 E881      		ld r30,Y
 2271 0c9a CD59      		subi r28,lo8(157)
 2272 0c9c D040      		sbci r29,hi8(157)
 2273 0c9e EE23      		tst r30	 ;  1391	*cmpqi/1	[length = 1]
 2274 0ca0 01F4      		brne .+2	 ;  1392	branch	[length = 2]
 2275 0ca2 00C0      		rjmp .L161
 2276               	.LVL224:
 741:bertos/mware/formatwr.c **** 					precision = field_width - (flags.plus_space_flag != PSF_NONE);
 2277               		.loc 1 741 0
 2278 0ca4 1C7F      		andi r17,lo8(-4)	 ;  1403	andqi3/2	[length = 1]
 2279               	.LVL225:
 2280 0ca6 CB56      		subi r28,lo8(-149)	 ;  2880	*movqi/4	[length = 5]
 2281 0ca8 DF4F      		sbci r29,hi8(-149)
 2282 0caa F881      		ld r31,Y
 2283 0cac C559      		subi r28,lo8(149)
 2284 0cae D040      		sbci r29,hi8(149)
 2285 0cb0 1F2B      		or r17,r31	 ;  1404	iorqi3/1	[length = 1]
 2286 0cb2 CC56      		subi r28,lo8(-148)	 ;  2881	*movqi/4	[length = 5]
 2287 0cb4 DF4F      		sbci r29,hi8(-148)
 2288 0cb6 8881      		ld r24,Y
 2289 0cb8 C459      		subi r28,lo8(148)
 2290 0cba D040      		sbci r29,hi8(148)
 2291 0cbc 8170      		andi r24,lo8(1)	 ;  1406	andqi3/2	[length = 1]
 2292 0cbe 880F      		lsl r24	 ;  1407	*ashlqi3/4	[length = 2]
 2293 0cc0 880F      		lsl r24
 2294 0cc2 1B7F      		andi r17,lo8(-5)	 ;  1409	andqi3/2	[length = 1]
 2295 0cc4 182B      		or r17,r24	 ;  1410	iorqi3/1	[length = 1]
 2296 0cc6 CF56      		subi r28,lo8(-145)	 ;  2882	*movqi/4	[length = 5]
 2297 0cc8 DF4F      		sbci r29,hi8(-145)
 2298 0cca 8881      		ld r24,Y
 2299 0ccc C159      		subi r28,lo8(145)
 2300 0cce D040      		sbci r29,hi8(145)
 2301 0cd0 880F      		lsl r24	 ;  1413	*ashlqi3/5	[length = 3]
 2302 0cd2 880F      		lsl r24
 2303 0cd4 880F      		lsl r24
 2304 0cd6 177F      		andi r17,lo8(-9)	 ;  1415	andqi3/2	[length = 1]
 2305 0cd8 182B      		or r17,r24	 ;  1416	iorqi3/1	[length = 1]
 2306 0cda 822D      		mov r24,r2	 ;  2883	*movqi/1	[length = 1]
 2307 0cdc 8170      		andi r24,lo8(1)	 ;  1418	andqi3/2	[length = 1]
 2308 0cde 8295      		swap r24	 ;  2939	*rotlqi3_4	[length = 1]
 2309 0ce0 807F      		andi r24,lo8(-16)	 ;  2940	andqi3/2	[length = 1]
 2310 0ce2 1F7E      		andi r17,lo8(-17)	 ;  1421	andqi3/2	[length = 1]
 2311 0ce4 182B      		or r17,r24	 ;  1422	iorqi3/1	[length = 1]
 2312 0ce6 CA56      		subi r28,lo8(-150)	 ;  2884	*movqi/4	[length = 5]
 2313 0ce8 DF4F      		sbci r29,hi8(-150)
 2314 0cea 8881      		ld r24,Y
 2315 0cec C659      		subi r28,lo8(150)
 2316 0cee D040      		sbci r29,hi8(150)
 2317 0cf0 8170      		andi r24,lo8(1)	 ;  1424	andqi3/2	[length = 1]
 2318 0cf2 8295      		swap r24	 ;  2941	*rotlqi3_4	[length = 1]
 2319 0cf4 880F      		lsl r24	 ;  2942	*ashlqi3/3	[length = 1]
 2320 0cf6 807E      		andi r24,lo8(-32)	 ;  2943	andqi3/2	[length = 1]
 2321 0cf8 1F7D      		andi r17,lo8(-33)	 ;  1427	andqi3/2	[length = 1]
 2322 0cfa 182B      		or r17,r24	 ;  1428	iorqi3/1	[length = 1]
 2323 0cfc C056      		subi r28,lo8(-160)	 ;  2885	*movqi/4	[length = 5]
 2324 0cfe DF4F      		sbci r29,hi8(-160)
 2325 0d00 8881      		ld r24,Y
 2326 0d02 C05A      		subi r28,lo8(160)
 2327 0d04 D040      		sbci r29,hi8(160)
 2328 0d06 8295      		swap r24	 ;  2944	*rotlqi3_4	[length = 1]
 2329 0d08 880F      		lsl r24	 ;  2945	*ashlqi3/4	[length = 2]
 2330 0d0a 880F      		lsl r24
 2331 0d0c 807C      		andi r24,lo8(-64)	 ;  2946	andqi3/2	[length = 1]
 2332 0d0e 1F7B      		andi r17,lo8(-65)	 ;  1433	andqi3/2	[length = 1]
 2333 0d10 182B      		or r17,r24	 ;  1434	iorqi3/1	[length = 1]
 2334 0d12 C956      		subi r28,lo8(-151)	 ;  2886	*movqi/4	[length = 5]
 2335 0d14 DF4F      		sbci r29,hi8(-151)
 2336 0d16 8881      		ld r24,Y
 2337 0d18 C759      		subi r28,lo8(151)
 2338 0d1a D040      		sbci r29,hi8(151)
 2339 0d1c 8795      		ror r24	 ;  1436	*ashlqi3/5	[length = 3]
 2340 0d1e 8827      		clr r24
 2341 0d20 8795      		ror r24
 2342 0d22 1F77      		andi r17,lo8(127)	 ;  1438	andqi3/2	[length = 1]
 2343 0d24 182B      		or r17,r24	 ;  1439	iorqi3/1	[length = 1]
 2344 0d26 212F      		mov r18,r17	 ;  2887	*movqi/1	[length = 1]
 2345 0d28 2370      		andi r18,lo8(3)	 ;  1441	andqi3/2	[length = 1]
 2346 0d2a 81E0      		ldi r24,lo8(1)	 ;  1442	*movhi/4	[length = 2]
 2347 0d2c 90E0      		ldi r25,hi8(1)
 2348 0d2e 01F4      		brne .L115	 ;  1444	branch	[length = 1]
 2349 0d30 80E0      		ldi r24,lo8(0)	 ;  1445	*movhi/4	[length = 2]
 2350 0d32 90E0      		ldi r25,hi8(0)
 2351               	.LVL226:
 2352               	.L115:
 2353 0d34 C357      		subi r28,lo8(-141)	 ;  2888	*movhi/2	[length = 6]
 2354 0d36 DF4F      		sbci r29,hi8(-141)
 2355 0d38 2881      		ld r18,Y
 2356 0d3a 3981      		ldd r19,Y+1
 2357 0d3c CD58      		subi r28,lo8(141)
 2358 0d3e D040      		sbci r29,hi8(141)
 2359 0d40 281B      		sub r18,r24	 ;  1447	subhi3/1	[length = 2]
 2360 0d42 390B      		sbc r19,r25
 2361               	.LVL227:
 2362 0d44 F201      		movw r30,r4	 ;  1449	*movhi/1	[length = 1]
 334:bertos/mware/formatwr.c **** PGM_FUNC(_formatted_write)(const char * PGM_ATTR format,
 2363               		.loc 1 334 0
 2364 0d46 CD01      		movw r24,r26	 ;  2889	*movhi/1	[length = 1]
 2365 0d48 8419      		sub r24,r4	 ;  1450	subhi3/1	[length = 2]
 2366 0d4a 9509      		sbc r25,r5
 742:bertos/mware/formatwr.c **** 					while (precision > ptr - buf_pointer)
 2367               		.loc 1 742 0
 2368 0d4c 00C0      		rjmp .L116	 ;  3250	jump	[length = 1]
 2369               	.LVL228:
 2370               	.L117:
 743:bertos/mware/formatwr.c **** 						*--buf_pointer = '0';
 2371               		.loc 1 743 0
 2372 0d4e 40E3      		ldi r20,lo8(48)	 ;  2890	*movqi/2	[length = 1]
 2373 0d50 4293      		st -Z,r20	 ;  1457	*movqi/3	[length = 1]
 2374 0d52 0196      		adiw r24,1	 ;  1459	*addhi3/2	[length = 1]
 2375               	.LVL229:
 2376               	.L116:
 743:bertos/mware/formatwr.c **** 						*--buf_pointer = '0';
 2377               		.loc 1 743 0 is_stmt 0 discriminator 1
 2378 0d54 2F01      		movw r4,r30	 ;  1462	*movhi/1	[length = 1]
 742:bertos/mware/formatwr.c **** 					while (precision > ptr - buf_pointer)
 2379               		.loc 1 742 0 is_stmt 1 discriminator 1
 2380 0d56 8217      		cp r24,r18	 ;  1465	*cmphi/3	[length = 2]
 2381 0d58 9307      		cpc r25,r19
 2382 0d5a 04F0      		brlt .L117	 ;  1466	branch	[length = 1]
 2383               	.LVL230:
 2384 0d5c 00C0      		rjmp .L161	 ;  3253	jump	[length = 1]
 2385               	.LVL231:
 2386               	.L139:
 530:bertos/mware/formatwr.c **** 		switch (format_flag = PGM_READ_CHAR(format++))
 2387               		.loc 1 530 0
 2388 0d5e C157      		subi r28,lo8(-143)	 ;  127	*movhi/3	[length = 6]
 2389 0d60 DF4F      		sbci r29,hi8(-143)
 2390 0d62 5983      		std Y+1,r21
 2391 0d64 4883      		st Y,r20
 2392 0d66 CF58      		subi r28,lo8(143)
 2393 0d68 D040      		sbci r29,hi8(143)
 750:bertos/mware/formatwr.c **** 				format--;
 2394               		.loc 1 750 0
 2395 0d6a CE56      		subi r28,lo8(-146)	 ;  128	*movhi/3	[length = 6]
 2396 0d6c DF4F      		sbci r29,hi8(-146)
 2397 0d6e F983      		std Y+1,r31
 2398 0d70 E883      		st Y,r30
 2399 0d72 C259      		subi r28,lo8(146)
 2400 0d74 D040      		sbci r29,hi8(146)
 2401               	.L188:
 420:bertos/mware/formatwr.c **** 		flags.progmem = false;
 2402               		.loc 1 420 0
 2403 0d76 00E0      		ldi r16,lo8(0)	 ;  129	*movqi/2	[length = 1]
 2404               	.LVL232:
 755:bertos/mware/formatwr.c **** 				ptr += sizeof(bad_conversion) - 1;
 2405               		.loc 1 755 0
 2406 0d78 A0E0      		ldi r26,lo8(bad_conversion.1418+3)	 ;  2074	*movhi/4	[length = 2]
 2407 0d7a B0E0      		ldi r27,hi8(bad_conversion.1418+3)
 754:bertos/mware/formatwr.c **** 				ptr = buf_pointer = bad_conversion;
 2408               		.loc 1 754 0
 2409 0d7c 8DEF      		ldi r24,lo8(-3)	 ;  3055	*reload_inhi	[length = 4]
 2410 0d7e 482E      		mov r4,r24
 2411 0d80 8FEF      		ldi r24,hi8(-3)
 2412 0d82 582E      		mov r5,r24
 2413 0d84 4A0E      		add r4,r26	 ;  2075	*addhi3/1	[length = 2]
 2414 0d86 5B1E      		adc r5,r27
 2415 0d88 00C0      		rjmp .L31	 ;  3255	jump	[length = 1]
 2416               	.LVL233:
 2417               	.L151:
 420:bertos/mware/formatwr.c **** 		flags.progmem = false;
 2418               		.loc 1 420 0
 2419 0d8a 00E0      		ldi r16,lo8(0)	 ;  124	*movqi/2	[length = 1]
 646:bertos/mware/formatwr.c **** 				ptr = buf_pointer = &buf[FRMWRI_BUFSIZE - 1];
 2420               		.loc 1 646 0
 2421 0d8c DE01      		movw r26,r28	 ;  2892	*movhi/1	[length = 1]
 2422 0d8e AA57      		subi r26,lo8(-(134))	 ;  2057	*addhi3/4	[length = 2]
 2423 0d90 BF4F      		sbci r27,hi8(-(134))
 2424 0d92 00C0      		rjmp .L31	 ;  3257	jump	[length = 1]
 2425               	.LVL234:
 2426               	.L161:
 420:bertos/mware/formatwr.c **** 		flags.progmem = false;
 2427               		.loc 1 420 0
 2428 0d94 00E0      		ldi r16,lo8(0)	 ;  134	*movqi/2	[length = 1]
 2429               	.LVL235:
 2430               	.L31:
 765:bertos/mware/formatwr.c **** 		precision = ptr - buf_pointer;
 2431               		.loc 1 765 0
 2432 0d96 5D01      		movw r10,r26	 ;  2893	*movhi/1	[length = 1]
 2433 0d98 A418      		sub r10,r4	 ;  1477	subhi3/1	[length = 2]
 2434 0d9a B508      		sbc r11,r5
 2435               	.LVL236:
 767:bertos/mware/formatwr.c **** 		if ( precision > field_width)
 2436               		.loc 1 767 0
 2437 0d9c C357      		subi r28,lo8(-141)	 ;  2894	*movhi/2	[length = 6]
 2438 0d9e DF4F      		sbci r29,hi8(-141)
 2439 0da0 8881      		ld r24,Y
 2440 0da2 9981      		ldd r25,Y+1
 2441 0da4 CD58      		subi r28,lo8(141)
 2442 0da6 D040      		sbci r29,hi8(141)
 2443 0da8 8A15      		cp r24,r10	 ;  1479	*cmphi/3	[length = 2]
 2444 0daa 9B05      		cpc r25,r11
 2445 0dac 04F4      		brge .+2	 ;  1480	branch	[length = 2]
 2446 0dae 00C0      		rjmp .L162
 2447               	.LVL237:
 773:bertos/mware/formatwr.c **** 			n = field_width - precision - (flags.plus_space_flag != PSF_NONE);
 2448               		.loc 1 773 0
 2449 0db0 1C7F      		andi r17,lo8(-4)	 ;  1491	andqi3/2	[length = 1]
 2450               	.LVL238:
 2451 0db2 CB56      		subi r28,lo8(-149)	 ;  2895	*movqi/4	[length = 5]
 2452 0db4 DF4F      		sbci r29,hi8(-149)
 2453 0db6 9881      		ld r25,Y
 2454 0db8 C559      		subi r28,lo8(149)
 2455 0dba D040      		sbci r29,hi8(149)
 2456 0dbc 192B      		or r17,r25	 ;  1492	iorqi3/1	[length = 1]
 2457 0dbe CC56      		subi r28,lo8(-148)	 ;  2896	*movqi/4	[length = 5]
 2458 0dc0 DF4F      		sbci r29,hi8(-148)
 2459 0dc2 8881      		ld r24,Y
 2460 0dc4 C459      		subi r28,lo8(148)
 2461 0dc6 D040      		sbci r29,hi8(148)
 2462 0dc8 8170      		andi r24,lo8(1)	 ;  1494	andqi3/2	[length = 1]
 2463 0dca 880F      		lsl r24	 ;  1495	*ashlqi3/4	[length = 2]
 2464 0dcc 880F      		lsl r24
 2465 0dce 1B7F      		andi r17,lo8(-5)	 ;  1497	andqi3/2	[length = 1]
 2466 0dd0 182B      		or r17,r24	 ;  1498	iorqi3/1	[length = 1]
 2467 0dd2 CF56      		subi r28,lo8(-145)	 ;  2897	*movqi/4	[length = 5]
 2468 0dd4 DF4F      		sbci r29,hi8(-145)
 2469 0dd6 8881      		ld r24,Y
 2470 0dd8 C159      		subi r28,lo8(145)
 2471 0dda D040      		sbci r29,hi8(145)
 2472 0ddc 880F      		lsl r24	 ;  1501	*ashlqi3/5	[length = 3]
 2473 0dde 880F      		lsl r24
 2474 0de0 880F      		lsl r24
 2475 0de2 177F      		andi r17,lo8(-9)	 ;  1503	andqi3/2	[length = 1]
 2476 0de4 182B      		or r17,r24	 ;  1504	iorqi3/1	[length = 1]
 2477 0de6 822D      		mov r24,r2	 ;  2898	*movqi/1	[length = 1]
 2478 0de8 8170      		andi r24,lo8(1)	 ;  1506	andqi3/2	[length = 1]
 2479 0dea 8295      		swap r24	 ;  2931	*rotlqi3_4	[length = 1]
 2480 0dec 807F      		andi r24,lo8(-16)	 ;  2932	andqi3/2	[length = 1]
 2481 0dee 1F7E      		andi r17,lo8(-17)	 ;  1509	andqi3/2	[length = 1]
 2482 0df0 182B      		or r17,r24	 ;  1510	iorqi3/1	[length = 1]
 2483 0df2 CA56      		subi r28,lo8(-150)	 ;  2899	*movqi/4	[length = 5]
 2484 0df4 DF4F      		sbci r29,hi8(-150)
 2485 0df6 8881      		ld r24,Y
 2486 0df8 C659      		subi r28,lo8(150)
 2487 0dfa D040      		sbci r29,hi8(150)
 2488 0dfc 8170      		andi r24,lo8(1)	 ;  1512	andqi3/2	[length = 1]
 2489 0dfe 8295      		swap r24	 ;  2933	*rotlqi3_4	[length = 1]
 2490 0e00 880F      		lsl r24	 ;  2934	*ashlqi3/3	[length = 1]
 2491 0e02 807E      		andi r24,lo8(-32)	 ;  2935	andqi3/2	[length = 1]
 2492 0e04 1F7D      		andi r17,lo8(-33)	 ;  1515	andqi3/2	[length = 1]
 2493 0e06 182B      		or r17,r24	 ;  1516	iorqi3/1	[length = 1]
 2494 0e08 C056      		subi r28,lo8(-160)	 ;  2900	*movqi/4	[length = 5]
 2495 0e0a DF4F      		sbci r29,hi8(-160)
 2496 0e0c 8881      		ld r24,Y
 2497 0e0e C05A      		subi r28,lo8(160)
 2498 0e10 D040      		sbci r29,hi8(160)
 2499 0e12 8295      		swap r24	 ;  2936	*rotlqi3_4	[length = 1]
 2500 0e14 880F      		lsl r24	 ;  2937	*ashlqi3/4	[length = 2]
 2501 0e16 880F      		lsl r24
 2502 0e18 807C      		andi r24,lo8(-64)	 ;  2938	andqi3/2	[length = 1]
 2503 0e1a 1F7B      		andi r17,lo8(-65)	 ;  1521	andqi3/2	[length = 1]
 2504 0e1c 182B      		or r17,r24	 ;  1522	iorqi3/1	[length = 1]
 2505 0e1e C956      		subi r28,lo8(-151)	 ;  2901	*movqi/4	[length = 5]
 2506 0e20 DF4F      		sbci r29,hi8(-151)
 2507 0e22 8881      		ld r24,Y
 2508 0e24 C759      		subi r28,lo8(151)
 2509 0e26 D040      		sbci r29,hi8(151)
 2510 0e28 8795      		ror r24	 ;  1524	*ashlqi3/5	[length = 3]
 2511 0e2a 8827      		clr r24
 2512 0e2c 8795      		ror r24
 2513 0e2e 1F77      		andi r17,lo8(127)	 ;  1526	andqi3/2	[length = 1]
 2514 0e30 182B      		or r17,r24	 ;  1527	iorqi3/1	[length = 1]
 2515 0e32 C357      		subi r28,lo8(-141)	 ;  2902	*movhi/2	[length = 6]
 2516 0e34 DF4F      		sbci r29,hi8(-141)
 2517 0e36 C880      		ld r12,Y
 2518 0e38 D980      		ldd r13,Y+1
 2519 0e3a CD58      		subi r28,lo8(141)
 2520 0e3c D040      		sbci r29,hi8(141)
 2521 0e3e CA18      		sub r12,r10	 ;  1529	subhi3/1	[length = 2]
 2522 0e40 DB08      		sbc r13,r11
 2523 0e42 212F      		mov r18,r17	 ;  2903	*movqi/1	[length = 1]
 2524 0e44 2370      		andi r18,lo8(3)	 ;  1530	andqi3/2	[length = 1]
 2525 0e46 81E0      		ldi r24,lo8(1)	 ;  1531	*movhi/4	[length = 2]
 2526 0e48 90E0      		ldi r25,hi8(1)
 2527 0e4a 01F4      		brne .L119	 ;  1533	branch	[length = 1]
 2528 0e4c 80E0      		ldi r24,lo8(0)	 ;  1534	*movhi/4	[length = 2]
 2529 0e4e 90E0      		ldi r25,hi8(0)
 2530               	.LVL239:
 2531               	.L119:
 2532 0e50 C81A      		sub r12,r24	 ;  1536	subhi3/1	[length = 2]
 2533 0e52 D90A      		sbc r13,r25
 2534               	.LVL240:
 2535 0e54 00C0      		rjmp .L118	 ;  3259	jump	[length = 1]
 2536               	.LVL241:
 2537               	.L162:
 769:bertos/mware/formatwr.c **** 			n = 0;
 2538               		.loc 1 769 0
 2539 0e56 CC24      		clr r12	 ;  139	*movhi/5	[length = 2]
 2540 0e58 DD24      		clr r13
 2541               	.L118:
 2542               	.LVL242:
 777:bertos/mware/formatwr.c **** 		if (!flags.left_adjust)
 2543               		.loc 1 777 0
 2544 0e5a CF56      		subi r28,lo8(-145)	 ;  2904	*movqi/4	[length = 5]
 2545 0e5c DF4F      		sbci r29,hi8(-145)
 2546 0e5e A881      		ld r26,Y
 2547 0e60 C159      		subi r28,lo8(145)
 2548 0e62 D040      		sbci r29,hi8(145)
 2549               	.LVL243:
 2550 0e64 AA23      		tst r26	 ;  1541	*cmpqi/1	[length = 1]
 2551 0e66 01F4      		brne .L120	 ;  1542	branch	[length = 1]
 2552 0e68 3501      		movw r6,r10	 ;  2663	*movhi/1	[length = 1]
 2553 0e6a 802E      		mov r8,r16	 ;  2665	*movqi/1	[length = 1]
 2554 0e6c A12E      		mov r10,r17	 ;  2666	*movqi/1	[length = 1]
 2555               	.LVL244:
 2556 0e6e C557      		subi r28,lo8(-139)	 ;  2667	*movhi/2	[length = 6]
 2557 0e70 DF4F      		sbci r29,hi8(-139)
 2558 0e72 0881      		ld r16,Y
 2559 0e74 1981      		ldd r17,Y+1
 2560 0e76 CB58      		subi r28,lo8(139)
 2561 0e78 D040      		sbci r29,hi8(139)
 2562               	.LVL245:
 2563 0e7a 00C0      		rjmp .L179	 ;  3261	jump	[length = 1]
 2564               	.LVL246:
 2565               	.L122:
 780:bertos/mware/formatwr.c **** 				put_one_char(' ', secret_pointer);
 2566               		.loc 1 780 0
 2567 0e7c 80E2      		ldi r24,lo8(32)	 ;  1548	*movqi/2	[length = 1]
 2568 0e7e C656      		subi r28,lo8(-154)	 ;  1549	*movhi/2	[length = 6]
 2569 0e80 DF4F      		sbci r29,hi8(-154)
 2570 0e82 6881      		ld r22,Y
 2571 0e84 7981      		ldd r23,Y+1
 2572 0e86 CA59      		subi r28,lo8(154)
 2573 0e88 D040      		sbci r29,hi8(154)
 2574 0e8a C856      		subi r28,lo8(-152)	 ;  2905	*movhi/2	[length = 6]
 2575 0e8c DF4F      		sbci r29,hi8(-152)
 2576 0e8e E881      		ld r30,Y
 2577 0e90 F981      		ldd r31,Y+1
 2578 0e92 C859      		subi r28,lo8(152)
 2579 0e94 D040      		sbci r29,hi8(152)
 2580 0e96 0995      		icall	 ;  1550	call_insn/1	[length = 1]
 782:bertos/mware/formatwr.c **** 				nr_of_chars++;
 2581               		.loc 1 782 0
 2582 0e98 0F5F      		subi r16,lo8(-(1))	 ;  1551	*addhi3/4	[length = 2]
 2583 0e9a 1F4F      		sbci r17,hi8(-(1))
 2584               	.LVL247:
 2585               	.L179:
 778:bertos/mware/formatwr.c **** 			while (--n >= 0)
 2586               		.loc 1 778 0 discriminator 1
 2587 0e9c 0894      		sec	 ;  1557	*addhi3/6	[length = 3]
 2588 0e9e C108      		sbc r12,__zero_reg__
 2589 0ea0 D108      		sbc r13,__zero_reg__
 2590               	.LVL248:
 2591 0ea2 D7FE      		sbrs r13,7	 ;  3054	*sbrx_and_branchhi	[length = 2]
 2592 0ea4 00C0      		rjmp .L122
 2593 0ea6 C557      		subi r28,lo8(-139)	 ;  2669	*movhi/3	[length = 6]
 2594 0ea8 DF4F      		sbci r29,hi8(-139)
 2595 0eaa 1983      		std Y+1,r17
 2596 0eac 0883      		st Y,r16
 2597 0eae CB58      		subi r28,lo8(139)
 2598 0eb0 D040      		sbci r29,hi8(139)
 2599 0eb2 082D      		mov r16,r8	 ;  2672	*movqi/1	[length = 1]
 2600               	.LVL249:
 2601 0eb4 1A2D      		mov r17,r10	 ;  2673	*movqi/1	[length = 1]
 2602               	.LVL250:
 2603 0eb6 5301      		movw r10,r6	 ;  2674	*movhi/1	[length = 1]
 2604               	.LVL251:
 2605               	.L120:
 787:bertos/mware/formatwr.c **** 		if (flags.plus_space_flag)
 2606               		.loc 1 787 0
 2607 0eb8 1C7F      		andi r17,lo8(-4)	 ;  1575	andqi3/2	[length = 1]
 2608               	.LVL252:
 2609 0eba CB56      		subi r28,lo8(-149)	 ;  2906	*movqi/4	[length = 5]
 2610 0ebc DF4F      		sbci r29,hi8(-149)
 2611 0ebe F881      		ld r31,Y
 2612 0ec0 C559      		subi r28,lo8(149)
 2613 0ec2 D040      		sbci r29,hi8(149)
 2614 0ec4 1F2B      		or r17,r31	 ;  1576	iorqi3/1	[length = 1]
 2615 0ec6 CC56      		subi r28,lo8(-148)	 ;  2907	*movqi/4	[length = 5]
 2616 0ec8 DF4F      		sbci r29,hi8(-148)
 2617 0eca 8881      		ld r24,Y
 2618 0ecc C459      		subi r28,lo8(148)
 2619 0ece D040      		sbci r29,hi8(148)
 2620 0ed0 8170      		andi r24,lo8(1)	 ;  1578	andqi3/2	[length = 1]
 2621 0ed2 880F      		lsl r24	 ;  1579	*ashlqi3/4	[length = 2]
 2622 0ed4 880F      		lsl r24
 2623 0ed6 1B7F      		andi r17,lo8(-5)	 ;  1581	andqi3/2	[length = 1]
 2624 0ed8 182B      		or r17,r24	 ;  1582	iorqi3/1	[length = 1]
 2625 0eda CF56      		subi r28,lo8(-145)	 ;  2908	*movqi/4	[length = 5]
 2626 0edc DF4F      		sbci r29,hi8(-145)
 2627 0ede 8881      		ld r24,Y
 2628 0ee0 C159      		subi r28,lo8(145)
 2629 0ee2 D040      		sbci r29,hi8(145)
 2630 0ee4 880F      		lsl r24	 ;  1585	*ashlqi3/5	[length = 3]
 2631 0ee6 880F      		lsl r24
 2632 0ee8 880F      		lsl r24
 2633 0eea 177F      		andi r17,lo8(-9)	 ;  1587	andqi3/2	[length = 1]
 2634 0eec 182B      		or r17,r24	 ;  1588	iorqi3/1	[length = 1]
 2635 0eee 822D      		mov r24,r2	 ;  2909	*movqi/1	[length = 1]
 2636 0ef0 8170      		andi r24,lo8(1)	 ;  1590	andqi3/2	[length = 1]
 2637 0ef2 8295      		swap r24	 ;  2923	*rotlqi3_4	[length = 1]
 2638 0ef4 807F      		andi r24,lo8(-16)	 ;  2924	andqi3/2	[length = 1]
 2639 0ef6 1F7E      		andi r17,lo8(-17)	 ;  1593	andqi3/2	[length = 1]
 2640 0ef8 182B      		or r17,r24	 ;  1594	iorqi3/1	[length = 1]
 2641 0efa CA56      		subi r28,lo8(-150)	 ;  2910	*movqi/4	[length = 5]
 2642 0efc DF4F      		sbci r29,hi8(-150)
 2643 0efe 8881      		ld r24,Y
 2644 0f00 C659      		subi r28,lo8(150)
 2645 0f02 D040      		sbci r29,hi8(150)
 2646 0f04 8170      		andi r24,lo8(1)	 ;  1596	andqi3/2	[length = 1]
 2647 0f06 8295      		swap r24	 ;  2925	*rotlqi3_4	[length = 1]
 2648 0f08 880F      		lsl r24	 ;  2926	*ashlqi3/3	[length = 1]
 2649 0f0a 807E      		andi r24,lo8(-32)	 ;  2927	andqi3/2	[length = 1]
 2650 0f0c 1F7D      		andi r17,lo8(-33)	 ;  1599	andqi3/2	[length = 1]
 2651 0f0e 182B      		or r17,r24	 ;  1600	iorqi3/1	[length = 1]
 2652 0f10 C056      		subi r28,lo8(-160)	 ;  2911	*movqi/4	[length = 5]
 2653 0f12 DF4F      		sbci r29,hi8(-160)
 2654 0f14 8881      		ld r24,Y
 2655 0f16 C05A      		subi r28,lo8(160)
 2656 0f18 D040      		sbci r29,hi8(160)
 2657 0f1a 8295      		swap r24	 ;  2928	*rotlqi3_4	[length = 1]
 2658 0f1c 880F      		lsl r24	 ;  2929	*ashlqi3/4	[length = 2]
 2659 0f1e 880F      		lsl r24
 2660 0f20 807C      		andi r24,lo8(-64)	 ;  2930	andqi3/2	[length = 1]
 2661 0f22 1F7B      		andi r17,lo8(-65)	 ;  1605	andqi3/2	[length = 1]
 2662 0f24 182B      		or r17,r24	 ;  1606	iorqi3/1	[length = 1]
 2663 0f26 C956      		subi r28,lo8(-151)	 ;  2912	*movqi/4	[length = 5]
 2664 0f28 DF4F      		sbci r29,hi8(-151)
 2665 0f2a 8881      		ld r24,Y
 2666 0f2c C759      		subi r28,lo8(151)
 2667 0f2e D040      		sbci r29,hi8(151)
 2668 0f30 8795      		ror r24	 ;  1608	*ashlqi3/5	[length = 3]
 2669 0f32 8827      		clr r24
 2670 0f34 8795      		ror r24
 2671 0f36 1F77      		andi r17,lo8(127)	 ;  1610	andqi3/2	[length = 1]
 2672 0f38 182B      		or r17,r24	 ;  1611	iorqi3/1	[length = 1]
 2673 0f3a 812F      		mov r24,r17	 ;  2913	*movqi/1	[length = 1]
 2674 0f3c 8370      		andi r24,lo8(3)	 ;  1613	andqi3/2	[length = 1]
 2675 0f3e 01F0      		breq .L123	 ;  1615	branch	[length = 1]
 789:bertos/mware/formatwr.c **** 			put_one_char(flags.plus_space_flag == PSF_PLUS ? '+' : '-', secret_pointer);
 2676               		.loc 1 789 0
 2677 0f40 8130      		cpi r24,lo8(1)	 ;  1617	*cmpqi/3	[length = 1]
 2678 0f42 01F4      		brne .L163	 ;  1618	branch	[length = 1]
 2679 0f44 8BE2      		ldi r24,lo8(43)	 ;  140	*movqi/2	[length = 1]
 2680 0f46 00C0      		rjmp .L124	 ;  3263	jump	[length = 1]
 2681               	.L163:
 2682 0f48 8DE2      		ldi r24,lo8(45)	 ;  141	*movqi/2	[length = 1]
 2683               	.LVL253:
 2684               	.L124:
 789:bertos/mware/formatwr.c **** 			put_one_char(flags.plus_space_flag == PSF_PLUS ? '+' : '-', secret_pointer);
 2685               		.loc 1 789 0 is_stmt 0 discriminator 3
 2686 0f4a C656      		subi r28,lo8(-154)	 ;  1624	*movhi/2	[length = 6]
 2687 0f4c DF4F      		sbci r29,hi8(-154)
 2688 0f4e 6881      		ld r22,Y
 2689 0f50 7981      		ldd r23,Y+1
 2690 0f52 CA59      		subi r28,lo8(154)
 2691 0f54 D040      		sbci r29,hi8(154)
 2692 0f56 C856      		subi r28,lo8(-152)	 ;  2914	*movhi/2	[length = 6]
 2693 0f58 DF4F      		sbci r29,hi8(-152)
 2694 0f5a 2881      		ld r18,Y
 2695 0f5c 3981      		ldd r19,Y+1
 2696 0f5e C859      		subi r28,lo8(152)
 2697 0f60 D040      		sbci r29,hi8(152)
 2698 0f62 F901      		movw r30,r18	 ;  1625	call_insn/2	[length = 2]
 2699 0f64 0995      		icall
 791:bertos/mware/formatwr.c **** 			nr_of_chars++;
 2700               		.loc 1 791 0 is_stmt 1 discriminator 3
 2701 0f66 C557      		subi r28,lo8(-139)	 ;  2915	*movhi/2	[length = 6]
 2702 0f68 DF4F      		sbci r29,hi8(-139)
 2703 0f6a 8881      		ld r24,Y
 2704 0f6c 9981      		ldd r25,Y+1
 2705 0f6e CB58      		subi r28,lo8(139)
 2706 0f70 D040      		sbci r29,hi8(139)
 2707 0f72 0196      		adiw r24,1	 ;  1626	*addhi3/2	[length = 1]
 2708 0f74 C557      		subi r28,lo8(-139)	 ;  2916	*movhi/3	[length = 6]
 2709 0f76 DF4F      		sbci r29,hi8(-139)
 2710 0f78 9983      		std Y+1,r25
 2711 0f7a 8883      		st Y,r24
 2712 0f7c CB58      		subi r28,lo8(139)
 2713 0f7e D040      		sbci r29,hi8(139)
 2714               	.LVL254:
 2715               	.L123:
 796:bertos/mware/formatwr.c **** 		if (flags.progmem)
 2716               		.loc 1 796 0
 2717 0f80 0023      		tst r16	 ;  1631	*cmpqi/1	[length = 1]
 2718 0f82 01F4      		brne .L184	 ;  1632	branch	[length = 1]
 2719 0f84 4601      		movw r8,r12	 ;  2681	*movhi/1	[length = 1]
 2720 0f86 C12E      		mov r12,r17	 ;  2685	*movqi/1	[length = 1]
 2721               	.LVL255:
 2722 0f88 C557      		subi r28,lo8(-139)	 ;  2686	*movhi/2	[length = 6]
 2723 0f8a DF4F      		sbci r29,hi8(-139)
 2724 0f8c 0881      		ld r16,Y
 2725 0f8e 1981      		ldd r17,Y+1
 2726 0f90 CB58      		subi r28,lo8(139)
 2727 0f92 D040      		sbci r29,hi8(139)
 2728               	.LVL256:
 2729 0f94 00C0      		rjmp .L180	 ;  3265	jump	[length = 1]
 2730               	.LVL257:
 2731               	.L128:
 2732               	.LBB11:
 800:bertos/mware/formatwr.c **** 				put_one_char(pgm_read_char(buf_pointer++), secret_pointer);
 2733               		.loc 1 800 0
 2734 0f96 F201      		movw r30,r4	 ;  1641	*movhi/1	[length = 1]
 2735               	.LVL258:
 2736 0f98 0894      		sec	 ;  1643	*addhi3/5	[length = 3]
 2737 0f9a 411C      		adc r4,__zero_reg__
 2738 0f9c 511C      		adc r5,__zero_reg__
 2739               	.LVL259:
 2740               	/* #APP */
 2741               	 ;  800 "bertos/mware/formatwr.c" 1
 2742 0f9e 8491      		lpm r24, Z
 2743               		
 2744               	 ;  0 "" 2
 2745               	.LVL260:
 2746               	/* #NOAPP */
 2747               	.LBE11:
 2748 0fa0 C656      		subi r28,lo8(-154)	 ;  1650	*movhi/2	[length = 6]
 2749 0fa2 DF4F      		sbci r29,hi8(-154)
 2750 0fa4 6881      		ld r22,Y
 2751 0fa6 7981      		ldd r23,Y+1
 2752 0fa8 CA59      		subi r28,lo8(154)
 2753 0faa D040      		sbci r29,hi8(154)
 2754 0fac C856      		subi r28,lo8(-152)	 ;  2917	*movhi/2	[length = 6]
 2755 0fae DF4F      		sbci r29,hi8(-152)
 2756 0fb0 A881      		ld r26,Y
 2757 0fb2 B981      		ldd r27,Y+1
 2758 0fb4 C859      		subi r28,lo8(152)
 2759 0fb6 D040      		sbci r29,hi8(152)
 2760 0fb8 FD01      		movw r30,r26	 ;  1651	call_insn/2	[length = 2]
 2761 0fba 0995      		icall
 2762               	.LVL261:
 802:bertos/mware/formatwr.c **** 				nr_of_chars++;
 2763               		.loc 1 802 0
 2764 0fbc 0894      		sec	 ;  1652	*addhi3/5	[length = 3]
 2765 0fbe 811C      		adc r8,__zero_reg__
 2766 0fc0 911C      		adc r9,__zero_reg__
 2767               	.LVL262:
 2768 0fc2 00C0      		rjmp .L172	 ;  3267	jump	[length = 1]
 2769               	.LVL263:
 2770               	.L184:
 2771 0fc4 C557      		subi r28,lo8(-139)	 ;  2676	*movhi/2	[length = 6]
 2772 0fc6 DF4F      		sbci r29,hi8(-139)
 2773 0fc8 8880      		ld r8,Y
 2774 0fca 9980      		ldd r9,Y+1
 2775 0fcc CB58      		subi r28,lo8(139)
 2776 0fce D040      		sbci r29,hi8(139)
 2777               	.LVL264:
 2778               	.L172:
 798:bertos/mware/formatwr.c **** 			while (--precision >= 0)
 2779               		.loc 1 798 0 discriminator 1
 2780 0fd0 0894      		sec	 ;  1659	*addhi3/6	[length = 3]
 2781 0fd2 A108      		sbc r10,__zero_reg__
 2782 0fd4 B108      		sbc r11,__zero_reg__
 2783               	.LVL265:
 2784 0fd6 B7FE      		sbrs r11,7	 ;  3053	*sbrx_and_branchhi	[length = 2]
 2785 0fd8 00C0      		rjmp .L128
 2786 0fda C557      		subi r28,lo8(-139)	 ;  2688	*movhi/3	[length = 6]
 2787 0fdc DF4F      		sbci r29,hi8(-139)
 2788 0fde 9982      		std Y+1,r9
 2789 0fe0 8882      		st Y,r8
 2790 0fe2 CB58      		subi r28,lo8(139)
 2791 0fe4 D040      		sbci r29,hi8(139)
 2792 0fe6 00C0      		rjmp .L129	 ;  3269	jump	[length = 1]
 2793               	.LVL266:
 2794               	.L130:
 812:bertos/mware/formatwr.c **** 				put_one_char(*buf_pointer++, secret_pointer);
 2795               		.loc 1 812 0
 2796 0fe8 F201      		movw r30,r4	 ;  2918	*movhi/1	[length = 1]
 2797 0fea 8191      		ld r24,Z+	 ;  1672	*movqi/4	[length = 1]
 2798 0fec 2F01      		movw r4,r30	 ;  2919	*movhi/1	[length = 1]
 2799               	.LVL267:
 2800 0fee C656      		subi r28,lo8(-154)	 ;  1673	*movhi/2	[length = 6]
 2801 0ff0 DF4F      		sbci r29,hi8(-154)
 2802 0ff2 6881      		ld r22,Y
 2803 0ff4 7981      		ldd r23,Y+1
 2804 0ff6 CA59      		subi r28,lo8(154)
 2805 0ff8 D040      		sbci r29,hi8(154)
 2806 0ffa C856      		subi r28,lo8(-152)	 ;  2920	*movhi/2	[length = 6]
 2807 0ffc DF4F      		sbci r29,hi8(-152)
 2808 0ffe 2881      		ld r18,Y
 2809 1000 3981      		ldd r19,Y+1
 2810 1002 C859      		subi r28,lo8(152)
 2811 1004 D040      		sbci r29,hi8(152)
 2812 1006 F901      		movw r30,r18	 ;  1674	call_insn/2	[length = 2]
 2813 1008 0995      		icall
 2814               	.LVL268:
 814:bertos/mware/formatwr.c **** 				nr_of_chars++;
 2815               		.loc 1 814 0
 2816 100a 0F5F      		subi r16,lo8(-(1))	 ;  1675	*addhi3/4	[length = 2]
 2817 100c 1F4F      		sbci r17,hi8(-(1))
 2818               	.LVL269:
 2819               	.L180:
 810:bertos/mware/formatwr.c **** 			while (--precision >= 0)
 2820               		.loc 1 810 0 discriminator 1
 2821 100e 0894      		sec	 ;  1682	*addhi3/6	[length = 3]
 2822 1010 A108      		sbc r10,__zero_reg__
 2823 1012 B108      		sbc r11,__zero_reg__
 2824               	.LVL270:
 2825 1014 B7FE      		sbrs r11,7	 ;  3052	*sbrx_and_branchhi	[length = 2]
 2826 1016 00C0      		rjmp .L130
 2827 1018 C557      		subi r28,lo8(-139)	 ;  2691	*movhi/3	[length = 6]
 2828 101a DF4F      		sbci r29,hi8(-139)
 2829 101c 1983      		std Y+1,r17
 2830 101e 0883      		st Y,r16
 2831 1020 CB58      		subi r28,lo8(139)
 2832 1022 D040      		sbci r29,hi8(139)
 2833 1024 1C2D      		mov r17,r12	 ;  2693	*movqi/1	[length = 1]
 2834               	.LVL271:
 2835 1026 6401      		movw r12,r8	 ;  2694	*movhi/1	[length = 1]
 2836               	.LVL272:
 2837               	.L129:
 820:bertos/mware/formatwr.c **** 		if (flags.left_adjust)
 2838               		.loc 1 820 0
 2839 1028 CF56      		subi r28,lo8(-145)	 ;  2921	*movqi/4	[length = 5]
 2840 102a DF4F      		sbci r29,hi8(-145)
 2841 102c 3881      		ld r19,Y
 2842 102e C159      		subi r28,lo8(145)
 2843 1030 D040      		sbci r29,hi8(145)
 2844 1032 3323      		tst r19	 ;  1690	*cmpqi/1	[length = 1]
 2845 1034 01F4      		brne .+2	 ;  1691	branch	[length = 2]
 2846 1036 00C0      		rjmp .L6
 2847 1038 A12E      		mov r10,r17	 ;  2697	*movqi/1	[length = 1]
 2848               	.LVL273:
 2849 103a C557      		subi r28,lo8(-139)	 ;  2698	*movhi/2	[length = 6]
 2850 103c DF4F      		sbci r29,hi8(-139)
 2851 103e 0881      		ld r16,Y
 2852 1040 1981      		ldd r17,Y+1
 2853 1042 CB58      		subi r28,lo8(139)
 2854 1044 D040      		sbci r29,hi8(139)
 2855 1046 00C0      		rjmp .L181	 ;  3271	jump	[length = 1]
 2856               	.LVL274:
 2857               	.L132:
 823:bertos/mware/formatwr.c **** 				put_one_char(' ', secret_pointer);
 2858               		.loc 1 823 0
 2859 1048 80E2      		ldi r24,lo8(32)	 ;  1697	*movqi/2	[length = 1]
 2860 104a C656      		subi r28,lo8(-154)	 ;  1698	*movhi/2	[length = 6]
 2861 104c DF4F      		sbci r29,hi8(-154)
 2862 104e 6881      		ld r22,Y
 2863 1050 7981      		ldd r23,Y+1
 2864 1052 CA59      		subi r28,lo8(154)
 2865 1054 D040      		sbci r29,hi8(154)
 2866 1056 C856      		subi r28,lo8(-152)	 ;  2922	*movhi/2	[length = 6]
 2867 1058 DF4F      		sbci r29,hi8(-152)
 2868 105a A881      		ld r26,Y
 2869 105c B981      		ldd r27,Y+1
 2870 105e C859      		subi r28,lo8(152)
 2871 1060 D040      		sbci r29,hi8(152)
 2872 1062 FD01      		movw r30,r26	 ;  1699	call_insn/2	[length = 2]
 2873 1064 0995      		icall
 825:bertos/mware/formatwr.c **** 				nr_of_chars++;
 2874               		.loc 1 825 0
 2875 1066 0F5F      		subi r16,lo8(-(1))	 ;  1700	*addhi3/4	[length = 2]
 2876 1068 1F4F      		sbci r17,hi8(-(1))
 2877               	.LVL275:
 2878               	.L181:
 821:bertos/mware/formatwr.c **** 			while (--n >= 0)
 2879               		.loc 1 821 0 discriminator 1
 2880 106a 0894      		sec	 ;  1706	*addhi3/6	[length = 3]
 2881 106c C108      		sbc r12,__zero_reg__
 2882 106e D108      		sbc r13,__zero_reg__
 2883               	.LVL276:
 2884 1070 D7FE      		sbrs r13,7	 ;  3051	*sbrx_and_branchhi	[length = 2]
 2885 1072 00C0      		rjmp .L132
 2886 1074 C557      		subi r28,lo8(-139)	 ;  2699	*movhi/3	[length = 6]
 2887 1076 DF4F      		sbci r29,hi8(-139)
 2888 1078 1983      		std Y+1,r17
 2889 107a 0883      		st Y,r16
 2890 107c CB58      		subi r28,lo8(139)
 2891 107e D040      		sbci r29,hi8(139)
 2892 1080 1A2D      		mov r17,r10	 ;  2701	*movqi/1	[length = 1]
 2893 1082 00C0      		rjmp .L6	 ;  3273	jump	[length = 1]
 2894               		.cfi_endproc
 2895               	.LFE1:
 2897               		.section	.data.null_pointer.1419,"aw",@progbits
 2900               	null_pointer.1419:
 2901 0000 3C4E 554C 		.string	"<NULL>"
 2901      4C3E 00
 2902               		.section	.progmem.data,"a",@progbits
 2905               	__c.1502:
 2906 0000 6275 665F 		.string	"buf_pointer >= buf"
 2906      706F 696E 
 2906      7465 7220 
 2906      3E3D 2062 
 2906      7566 00
 2909               	__c.1504:
 2910 0013 6265 7274 		.string	"bertos/mware/formatwr.c"
 2910      6F73 2F6D 
 2910      7761 7265 
 2910      2F66 6F72 
 2910      6D61 7477 
 2911               		.section	.data.bad_conversion.1418,"aw",@progbits
 2914               	bad_conversion.1418:
 2915 0000 3F3F 3F00 		.string	"???"
 2916               		.text
 2917               	.Letext0:
 2918               		.file 2 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/include/stdarg.h"
 2919               		.file 3 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h"
 2920               		.file 4 "bertos/cpu/types.h"
 2921               		.file 5 "bertos/mware/hex.h"
DEFINED SYMBOLS
                            *ABS*:00000000 formatwr.c
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccUrFTP3.s:2      *ABS*:0000003f __SREG__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccUrFTP3.s:3      *ABS*:0000003e __SP_H__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccUrFTP3.s:4      *ABS*:0000003d __SP_L__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccUrFTP3.s:5      *ABS*:00000034 __CCP__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccUrFTP3.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccUrFTP3.s:7      *ABS*:00000001 __zero_reg__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccUrFTP3.s:16     .text._formatted_write:00000000 _formatted_write
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccUrFTP3.s:2900   .data.null_pointer.1419:00000000 null_pointer.1419
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccUrFTP3.s:2905   .progmem.data:00000000 __c.1502
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccUrFTP3.s:2909   .progmem.data:00000013 __c.1504
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccUrFTP3.s:2914   .data.bad_conversion.1418:00000000 bad_conversion.1418

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
HEX_tab
hex_tab
__udivmodsi4
__bassert_P
__ltsf2
__gesf2
__divsf3
__nesf2
__mulsf3
__lesf2
__fixsfsi
__floatsisf
__subsf3
__divmodhi4
