   1               		.file	"formatwr.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text._formatted_write_P,"ax",@progbits
  14               	.global	_formatted_write_P
  16               	_formatted_write_P:
  17               	.LFB1:
  18               		.file 1 "bertos/mware/formatwr.c"
   1:bertos/mware/formatwr.c **** /**
   2:bertos/mware/formatwr.c ****  * \file
   3:bertos/mware/formatwr.c ****  * <!--
   4:bertos/mware/formatwr.c ****  * This file is part of BeRTOS.
   5:bertos/mware/formatwr.c ****  *
   6:bertos/mware/formatwr.c ****  * Bertos is free software; you can redistribute it and/or modify
   7:bertos/mware/formatwr.c ****  * it under the terms of the GNU General Public License as published by
   8:bertos/mware/formatwr.c ****  * the Free Software Foundation; either version 2 of the License, or
   9:bertos/mware/formatwr.c ****  * (at your option) any later version.
  10:bertos/mware/formatwr.c ****  *
  11:bertos/mware/formatwr.c ****  * This program is distributed in the hope that it will be useful,
  12:bertos/mware/formatwr.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bertos/mware/formatwr.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bertos/mware/formatwr.c ****  * GNU General Public License for more details.
  15:bertos/mware/formatwr.c ****  *
  16:bertos/mware/formatwr.c ****  * You should have received a copy of the GNU General Public License
  17:bertos/mware/formatwr.c ****  * along with this program; if not, write to the Free Software
  18:bertos/mware/formatwr.c ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:bertos/mware/formatwr.c ****  *
  20:bertos/mware/formatwr.c ****  * As a special exception, you may use this file as part of a free software
  21:bertos/mware/formatwr.c ****  * library without restriction.  Specifically, if other files instantiate
  22:bertos/mware/formatwr.c ****  * templates or use macros or inline functions from this file, or you compile
  23:bertos/mware/formatwr.c ****  * this file and link it with other files to produce an executable, this
  24:bertos/mware/formatwr.c ****  * file does not by itself cause the resulting executable to be covered by
  25:bertos/mware/formatwr.c ****  * the GNU General Public License.  This exception does not however
  26:bertos/mware/formatwr.c ****  * invalidate any other reasons why the executable file might be covered by
  27:bertos/mware/formatwr.c ****  * the GNU General Public License.
  28:bertos/mware/formatwr.c ****  *
  29:bertos/mware/formatwr.c ****  * Copyright 2003, 2004, 2005, 2008 Develer S.r.l. (http://www.develer.com/)
  30:bertos/mware/formatwr.c ****  *
  31:bertos/mware/formatwr.c ****  * -->
  32:bertos/mware/formatwr.c ****  *
  33:bertos/mware/formatwr.c ****  * \version $Id: formatwr.c 3160 2010-01-20 16:38:52Z batt $
  34:bertos/mware/formatwr.c ****  *
  35:bertos/mware/formatwr.c ****  * \brief Basic "printf", "sprintf" and "fprintf" formatter.
  36:bertos/mware/formatwr.c ****  *
  37:bertos/mware/formatwr.c ****  * This module is 100% reentrant and can be adapted to user-defined routines
  38:bertos/mware/formatwr.c ****  * that needs formatters with special properties like different output
  39:bertos/mware/formatwr.c ****  * channels or new format specifiers.
  40:bertos/mware/formatwr.c ****  *
  41:bertos/mware/formatwr.c ****  * To reduce size in applications not using real numbers or long integers
  42:bertos/mware/formatwr.c ****  * the formatter may be compiled to exclude certain parts.  This is
  43:bertos/mware/formatwr.c ****  * controlled by giving a -D option a compilation time:
  44:bertos/mware/formatwr.c ****  *
  45:bertos/mware/formatwr.c ****  * \code
  46:bertos/mware/formatwr.c ****  *  -D CONFIG_PRINTF=PRINTF_FULL         Full ANSI printf formatter, with some C99 extensions
  47:bertos/mware/formatwr.c ****  *  -D CONFIG_PRINTF=PRINTF_NOFLOAT      Exclude support for floats
  48:bertos/mware/formatwr.c ****  *  -D CONFIG_PRINTF=PRINTF_REDUCED      Simplified formatter (see below)
  49:bertos/mware/formatwr.c ****  *  -D CONFIG_PRINTF=PRINTF_NOMODIFIERS  Exclude "l", "z" and "h" modifiers in reduced version
  50:bertos/mware/formatwr.c ****  *  -D CONFIG_PRINTF=PRINTF_DISABLED     No formatter at all
  51:bertos/mware/formatwr.c ****  * \endcode
  52:bertos/mware/formatwr.c ****  *
  53:bertos/mware/formatwr.c ****  * Code size on AVR4 with GCC 3.4.1 (-O2):
  54:bertos/mware/formatwr.c ****  * \li  PRINTF_FULL        2912byte (0xB60)
  55:bertos/mware/formatwr.c ****  * \li  PRINTF_NOFLOAT     1684byte (0x694)
  56:bertos/mware/formatwr.c ****  * \li  PRINTF_REDUCED      924byte (0x39C)
  57:bertos/mware/formatwr.c ****  * \li  PRINTF_NOMODIFIERS  416byte (0x1A0)
  58:bertos/mware/formatwr.c ****  *
  59:bertos/mware/formatwr.c ****  * Code/data size in words on DSP56K with CodeWarrior 6.0:
  60:bertos/mware/formatwr.c ****  * \li  PRINTF_FULL         1493/45
  61:bertos/mware/formatwr.c ****  * \li  PRINTF_NOFLOAT      795/45
  62:bertos/mware/formatwr.c ****  * \li  PRINTF_REDUCED      482/0
  63:bertos/mware/formatwr.c ****  * \li  PRINTF_NOMODIFIERS  301/0
  64:bertos/mware/formatwr.c ****  *
  65:bertos/mware/formatwr.c ****  * The reduced version of formatter is suitable when program size is critical
  66:bertos/mware/formatwr.c ****  * rather than formatting power.  This routine uses less than 20 bytes of
  67:bertos/mware/formatwr.c ****  * stack space which makes it practical even in systems with less than 256
  68:bertos/mware/formatwr.c ****  * bytes of user RAM.
  69:bertos/mware/formatwr.c ****  *
  70:bertos/mware/formatwr.c ****  * The only formatting specifiers supported by the reduced formatter are:
  71:bertos/mware/formatwr.c ****  * \code
  72:bertos/mware/formatwr.c ****  *    %% %c %s %d %o %x %X and %hd %ho %hx %hX %ld %lo %lx %lX
  73:bertos/mware/formatwr.c ****  * \endcode
  74:bertos/mware/formatwr.c ****  *
  75:bertos/mware/formatwr.c ****  * It means that real variables are not supported as well as field
  76:bertos/mware/formatwr.c ****  * width and precision arguments.
  77:bertos/mware/formatwr.c ****  */
  78:bertos/mware/formatwr.c **** 
  79:bertos/mware/formatwr.c **** 
  80:bertos/mware/formatwr.c **** #include "formatwr.h"
  81:bertos/mware/formatwr.c **** 
  82:bertos/mware/formatwr.c **** #include "cfg/cfg_formatwr.h"  /* CONFIG_ macros */
  83:bertos/mware/formatwr.c **** #include <cfg/debug.h>         /* ASSERT */
  84:bertos/mware/formatwr.c **** 
  85:bertos/mware/formatwr.c **** #include <cpu/pgm.h>
  86:bertos/mware/formatwr.c **** #include <mware/hex.h>
  87:bertos/mware/formatwr.c **** 
  88:bertos/mware/formatwr.c **** #ifndef CONFIG_PRINTF_N_FORMATTER
  89:bertos/mware/formatwr.c **** 	/** Disable the arcane %n formatter. */
  90:bertos/mware/formatwr.c **** 	#define CONFIG_PRINTF_N_FORMATTER 0
  91:bertos/mware/formatwr.c **** #endif
  92:bertos/mware/formatwr.c **** 
  93:bertos/mware/formatwr.c **** #ifndef CONFIG_PRINTF_OCTAL_FORMATTER
  94:bertos/mware/formatwr.c **** 	/** Disable the %o formatter. */
  95:bertos/mware/formatwr.c **** 	#define CONFIG_PRINTF_OCTAL_FORMATTER 0
  96:bertos/mware/formatwr.c **** #endif
  97:bertos/mware/formatwr.c **** 
  98:bertos/mware/formatwr.c **** /* True if we must keep a count of the number of characters we print. */
  99:bertos/mware/formatwr.c **** #define CONFIG_PRINTF_COUNT_CHARS (CONFIG_PRINTF_RETURN_COUNT || CONFIG_PRINTF_N_FORMATTER)
 100:bertos/mware/formatwr.c **** 
 101:bertos/mware/formatwr.c **** #if CONFIG_PRINTF
 102:bertos/mware/formatwr.c **** 
 103:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_NOFLOAT
 104:bertos/mware/formatwr.c **** 	#include <float.h>
 105:bertos/mware/formatwr.c **** 
 106:bertos/mware/formatwr.c **** 	/* Maximum precision for floating point values */
 107:bertos/mware/formatwr.c **** 	typedef long double max_float_t;
 108:bertos/mware/formatwr.c **** 
 109:bertos/mware/formatwr.c **** 	#if CONFIG_FRMWRI_BUFSIZE
 110:bertos/mware/formatwr.c **** 		#define FRMWRI_BUFSIZE CONFIG_FRMWRI_BUFSIZE
 111:bertos/mware/formatwr.c **** 	#else
 112:bertos/mware/formatwr.c **** 		/* Conservative estimate. Max float is 3.40282e+038, so %f (but not %e or %g) must have
 113:bertos/mware/formatwr.c **** 		 * space for: sign + all 38 digits + '.' + 6 decimal digits (default)
 114:bertos/mware/formatwr.c **** 		 * Use a high value to avoid unexpected buffer overflows.
 115:bertos/mware/formatwr.c **** 		 */
 116:bertos/mware/formatwr.c **** 		#define FRMWRI_BUFSIZE 134
 117:bertos/mware/formatwr.c **** 	#endif
 118:bertos/mware/formatwr.c **** #else
 119:bertos/mware/formatwr.c **** 	#if CONFIG_FRMWRI_BUFSIZE
 120:bertos/mware/formatwr.c **** 		#define FRMWRI_BUFSIZE CONFIG_FRMWRI_BUFSIZE
 121:bertos/mware/formatwr.c **** 	#else
 122:bertos/mware/formatwr.c **** 		/*
 123:bertos/mware/formatwr.c **** 		 * Conservative estimate. Should be (probably) 12 (which is the size necessary
 124:bertos/mware/formatwr.c **** 		 * to represent (2^32-1) in octal plus the sign bit.
 125:bertos/mware/formatwr.c **** 		 */
 126:bertos/mware/formatwr.c **** 		#define FRMWRI_BUFSIZE 16
 127:bertos/mware/formatwr.c **** 	#endif
 128:bertos/mware/formatwr.c **** #endif
 129:bertos/mware/formatwr.c **** 
 130:bertos/mware/formatwr.c **** /* Probably useful for fancy microcontrollers such as the PIC, nobody knows. */
 131:bertos/mware/formatwr.c **** #ifndef MEM_ATTRIBUTE
 132:bertos/mware/formatwr.c **** #define MEM_ATTRIBUTE
 133:bertos/mware/formatwr.c **** #endif
 134:bertos/mware/formatwr.c **** 
 135:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_NOMODIFIERS
 136:bertos/mware/formatwr.c **** 	#define IS_SHORT (h_modifier || (sizeof(int) == 2 && !l_modifier))
 137:bertos/mware/formatwr.c **** #else
 138:bertos/mware/formatwr.c **** 	#define IS_SHORT (sizeof(int) == 2)
 139:bertos/mware/formatwr.c **** #endif /* CONFIG_PRINTF > PRINTF_NOMODIFIERS */
 140:bertos/mware/formatwr.c **** 
 141:bertos/mware/formatwr.c **** 
 142:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_NOFLOAT
 143:bertos/mware/formatwr.c **** 
 144:bertos/mware/formatwr.c **** static char *float_conversion(MEM_ATTRIBUTE max_float_t value,
 145:bertos/mware/formatwr.c **** 		MEM_ATTRIBUTE short nr_of_digits,
 146:bertos/mware/formatwr.c **** 		MEM_ATTRIBUTE char *buf,
 147:bertos/mware/formatwr.c **** 		MEM_ATTRIBUTE char format_flag,
 148:bertos/mware/formatwr.c **** 		MEM_ATTRIBUTE char g_flag,
 149:bertos/mware/formatwr.c **** 		MEM_ATTRIBUTE bool alternate_flag)
 150:bertos/mware/formatwr.c **** {
 151:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE char *cp;
 152:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE char *buf_pointer;
 153:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE short n, i, dec_point_pos, integral_10_log;
 154:bertos/mware/formatwr.c **** 
 155:bertos/mware/formatwr.c **** 	buf_pointer = buf;
 156:bertos/mware/formatwr.c **** 	integral_10_log = 0;
 157:bertos/mware/formatwr.c **** 
 158:bertos/mware/formatwr.c **** 	if (value >= 1)
 159:bertos/mware/formatwr.c **** 	{
 160:bertos/mware/formatwr.c **** 		while (value >= 1e11) /* To speed up things a bit */
 161:bertos/mware/formatwr.c **** 		{
 162:bertos/mware/formatwr.c **** 			value /= 1e10;
 163:bertos/mware/formatwr.c **** 			integral_10_log += 10;
 164:bertos/mware/formatwr.c **** 		}
 165:bertos/mware/formatwr.c **** 		while (value >= 10)
 166:bertos/mware/formatwr.c **** 		{
 167:bertos/mware/formatwr.c **** 			value /= 10;
 168:bertos/mware/formatwr.c **** 			integral_10_log++;
 169:bertos/mware/formatwr.c **** 		}
 170:bertos/mware/formatwr.c **** 	}
 171:bertos/mware/formatwr.c **** 	else if (value) /* Not just 0.0 */
 172:bertos/mware/formatwr.c **** 	{
 173:bertos/mware/formatwr.c **** 		while (value <= 1e-10) /* To speed up things a bit */
 174:bertos/mware/formatwr.c **** 		{
 175:bertos/mware/formatwr.c **** 			value *= 1e10;
 176:bertos/mware/formatwr.c **** 			integral_10_log -= 10;
 177:bertos/mware/formatwr.c **** 		}
 178:bertos/mware/formatwr.c **** 		while (value < 1)
 179:bertos/mware/formatwr.c **** 		{
 180:bertos/mware/formatwr.c **** 			value *= 10;
 181:bertos/mware/formatwr.c **** 			integral_10_log--;
 182:bertos/mware/formatwr.c **** 		}
 183:bertos/mware/formatwr.c **** 	}
 184:bertos/mware/formatwr.c **** 	if (g_flag)
 185:bertos/mware/formatwr.c **** 	{
 186:bertos/mware/formatwr.c **** 		if (integral_10_log < nr_of_digits && integral_10_log >= -4)
 187:bertos/mware/formatwr.c **** 		{
 188:bertos/mware/formatwr.c **** 			format_flag = 0;
 189:bertos/mware/formatwr.c **** 			nr_of_digits -= integral_10_log;
 190:bertos/mware/formatwr.c **** 		}
 191:bertos/mware/formatwr.c **** 		nr_of_digits--;
 192:bertos/mware/formatwr.c **** 		if (alternate_flag)
 193:bertos/mware/formatwr.c **** 			/* %#G - No removal of trailing zeros */
 194:bertos/mware/formatwr.c **** 			g_flag = 0;
 195:bertos/mware/formatwr.c **** 		else
 196:bertos/mware/formatwr.c **** 			/* %G - Removal of trailing zeros */
 197:bertos/mware/formatwr.c **** 			alternate_flag = true;
 198:bertos/mware/formatwr.c **** 	}
 199:bertos/mware/formatwr.c **** 
 200:bertos/mware/formatwr.c **** 	/* %e or %E */
 201:bertos/mware/formatwr.c **** 	if (format_flag)
 202:bertos/mware/formatwr.c **** 	{
 203:bertos/mware/formatwr.c **** 		dec_point_pos = 0;
 204:bertos/mware/formatwr.c **** 	}
 205:bertos/mware/formatwr.c **** 	else
 206:bertos/mware/formatwr.c **** 	{
 207:bertos/mware/formatwr.c **** 		/* Less than one... */
 208:bertos/mware/formatwr.c **** 		if (integral_10_log < 0)
 209:bertos/mware/formatwr.c **** 		{
 210:bertos/mware/formatwr.c **** 			*buf_pointer++ = '0';
 211:bertos/mware/formatwr.c **** 			if ((n = nr_of_digits) || alternate_flag)
 212:bertos/mware/formatwr.c **** 				*buf_pointer++ = '.';
 213:bertos/mware/formatwr.c **** 			i = 0;
 214:bertos/mware/formatwr.c **** 			while (--i > integral_10_log && nr_of_digits)
 215:bertos/mware/formatwr.c **** 			{
 216:bertos/mware/formatwr.c **** 				*buf_pointer++ = '0';
 217:bertos/mware/formatwr.c **** 				nr_of_digits--;
 218:bertos/mware/formatwr.c **** 			}
 219:bertos/mware/formatwr.c **** 			if (integral_10_log < (-n - 1))
 220:bertos/mware/formatwr.c **** 				/* Nothing more to do */
 221:bertos/mware/formatwr.c **** 				goto CLEAN_UP;
 222:bertos/mware/formatwr.c **** 			dec_point_pos = 1;
 223:bertos/mware/formatwr.c **** 		}
 224:bertos/mware/formatwr.c **** 		else
 225:bertos/mware/formatwr.c **** 		{
 226:bertos/mware/formatwr.c **** 			dec_point_pos = - integral_10_log;
 227:bertos/mware/formatwr.c **** 		}
 228:bertos/mware/formatwr.c **** 	}
 229:bertos/mware/formatwr.c **** 
 230:bertos/mware/formatwr.c **** 	i = dec_point_pos;
 231:bertos/mware/formatwr.c **** 	while (i <= nr_of_digits )
 232:bertos/mware/formatwr.c **** 	{
 233:bertos/mware/formatwr.c **** 		value -= (max_float_t)(n = (short)value); /* n=Digit value=Remainder */
 234:bertos/mware/formatwr.c **** 		value *= 10; /* Prepare for next shot */
 235:bertos/mware/formatwr.c **** 		*buf_pointer++ = n + '0';
 236:bertos/mware/formatwr.c **** 		if ( ! i++ && (nr_of_digits || alternate_flag))
 237:bertos/mware/formatwr.c **** 			*buf_pointer++ = '.';
 238:bertos/mware/formatwr.c **** 	}
 239:bertos/mware/formatwr.c **** 
 240:bertos/mware/formatwr.c **** 	/* Rounding possible */
 241:bertos/mware/formatwr.c **** 	if (value >= 5)
 242:bertos/mware/formatwr.c **** 	{
 243:bertos/mware/formatwr.c **** 		n = 1; /* Carry */
 244:bertos/mware/formatwr.c **** 		cp = buf_pointer - 1;
 245:bertos/mware/formatwr.c **** 		do
 246:bertos/mware/formatwr.c **** 		{
 247:bertos/mware/formatwr.c **** 			if (*cp != '.')
 248:bertos/mware/formatwr.c **** 			{
 249:bertos/mware/formatwr.c **** 				if ( (*cp += n) == ('9' + 1) )
 250:bertos/mware/formatwr.c **** 				{
 251:bertos/mware/formatwr.c **** 					*cp = '0';
 252:bertos/mware/formatwr.c **** 					n = 1;
 253:bertos/mware/formatwr.c **** 				}
 254:bertos/mware/formatwr.c **** 				else
 255:bertos/mware/formatwr.c **** 					n = 0;
 256:bertos/mware/formatwr.c **** 			}
 257:bertos/mware/formatwr.c **** 		} while (cp-- > buf);
 258:bertos/mware/formatwr.c **** 		if (n)
 259:bertos/mware/formatwr.c **** 		{
 260:bertos/mware/formatwr.c **** 			/* %e or %E */
 261:bertos/mware/formatwr.c **** 			if (format_flag)
 262:bertos/mware/formatwr.c **** 			{
 263:bertos/mware/formatwr.c **** 				cp = buf_pointer;
 264:bertos/mware/formatwr.c **** 				while (cp > buf)
 265:bertos/mware/formatwr.c **** 				{
 266:bertos/mware/formatwr.c **** 					if (*(cp - 1) == '.')
 267:bertos/mware/formatwr.c **** 					{
 268:bertos/mware/formatwr.c **** 						*cp = *(cp - 2);
 269:bertos/mware/formatwr.c **** 						cp--;
 270:bertos/mware/formatwr.c **** 					}
 271:bertos/mware/formatwr.c **** 					else
 272:bertos/mware/formatwr.c **** 						*cp = *(cp - 1);
 273:bertos/mware/formatwr.c **** 					cp--;
 274:bertos/mware/formatwr.c **** 				}
 275:bertos/mware/formatwr.c **** 				integral_10_log++;
 276:bertos/mware/formatwr.c **** 			}
 277:bertos/mware/formatwr.c **** 			else
 278:bertos/mware/formatwr.c **** 			{
 279:bertos/mware/formatwr.c **** 				cp = ++buf_pointer;
 280:bertos/mware/formatwr.c **** 				while (cp > buf)
 281:bertos/mware/formatwr.c **** 				{
 282:bertos/mware/formatwr.c **** 					*cp = *(cp - 1);
 283:bertos/mware/formatwr.c **** 					cp--;
 284:bertos/mware/formatwr.c **** 				}
 285:bertos/mware/formatwr.c **** 			}
 286:bertos/mware/formatwr.c **** 			*buf = '1';
 287:bertos/mware/formatwr.c **** 		}
 288:bertos/mware/formatwr.c **** 	}
 289:bertos/mware/formatwr.c **** 
 290:bertos/mware/formatwr.c **** CLEAN_UP:
 291:bertos/mware/formatwr.c **** 	/* %G - Remove trailing zeros */
 292:bertos/mware/formatwr.c **** 	if (g_flag)
 293:bertos/mware/formatwr.c **** 	{
 294:bertos/mware/formatwr.c **** 		while (*(buf_pointer - 1) == '0')
 295:bertos/mware/formatwr.c **** 			buf_pointer--;
 296:bertos/mware/formatwr.c **** 		if (*(buf_pointer - 1) == '.')
 297:bertos/mware/formatwr.c **** 			buf_pointer--;
 298:bertos/mware/formatwr.c **** 	}
 299:bertos/mware/formatwr.c **** 
 300:bertos/mware/formatwr.c **** 	/* %e or %E */
 301:bertos/mware/formatwr.c **** 	if (format_flag)
 302:bertos/mware/formatwr.c **** 	{
 303:bertos/mware/formatwr.c **** 		*buf_pointer++ = format_flag;
 304:bertos/mware/formatwr.c **** 		if (integral_10_log < 0)
 305:bertos/mware/formatwr.c **** 		{
 306:bertos/mware/formatwr.c **** 			*buf_pointer++ = '-';
 307:bertos/mware/formatwr.c **** 			integral_10_log = -integral_10_log;
 308:bertos/mware/formatwr.c **** 		}
 309:bertos/mware/formatwr.c **** 		else
 310:bertos/mware/formatwr.c **** 			*buf_pointer++ = '+';
 311:bertos/mware/formatwr.c **** 		n = 0;
 312:bertos/mware/formatwr.c **** 		buf_pointer +=10;
 313:bertos/mware/formatwr.c **** 		do
 314:bertos/mware/formatwr.c **** 		{
 315:bertos/mware/formatwr.c **** 			n++;
 316:bertos/mware/formatwr.c **** 			*buf_pointer++ = (integral_10_log % 10) + '0';
 317:bertos/mware/formatwr.c **** 			integral_10_log /= 10;
 318:bertos/mware/formatwr.c **** 		} while ( integral_10_log || n < 2 );
 319:bertos/mware/formatwr.c **** 		for ( i = n ; n > 0 ; n-- )
 320:bertos/mware/formatwr.c **** 			*(buf_pointer - 11 - i + n) = *(buf_pointer - n);
 321:bertos/mware/formatwr.c **** 		buf_pointer -= 10;
 322:bertos/mware/formatwr.c **** 	}
 323:bertos/mware/formatwr.c **** 	return (buf_pointer);
 324:bertos/mware/formatwr.c **** }
 325:bertos/mware/formatwr.c **** 
 326:bertos/mware/formatwr.c **** #endif /* CONFIG_PRINTF > PRINTF_NOFLOAT */
 327:bertos/mware/formatwr.c **** 
 328:bertos/mware/formatwr.c **** /**
 329:bertos/mware/formatwr.c ****  * This routine forms the core and entry of the formatter.
 330:bertos/mware/formatwr.c ****  *
 331:bertos/mware/formatwr.c ****  * The conversion performed conforms to the ANSI specification for "printf".
 332:bertos/mware/formatwr.c ****  */
 333:bertos/mware/formatwr.c **** int
 334:bertos/mware/formatwr.c **** PGM_FUNC(_formatted_write)(const char * PGM_ATTR format,
 335:bertos/mware/formatwr.c **** 		void put_one_char(char, void *),
 336:bertos/mware/formatwr.c **** 		void *secret_pointer,
 337:bertos/mware/formatwr.c **** 		va_list ap)
 338:bertos/mware/formatwr.c **** {
  19               		.loc 1 338 0
  20               		.cfi_startproc
  21               	.LVL0:
  22 0000 2F92      		push r2	 ;  3032	*pushqi/1	[length = 1]
  23               	.LCFI0:
  24               		.cfi_def_cfa_offset 3
  25               		.cfi_offset 2, -2
  26 0002 3F92      		push r3	 ;  3033	*pushqi/1	[length = 1]
  27               	.LCFI1:
  28               		.cfi_def_cfa_offset 4
  29               		.cfi_offset 3, -3
  30 0004 4F92      		push r4	 ;  3034	*pushqi/1	[length = 1]
  31               	.LCFI2:
  32               		.cfi_def_cfa_offset 5
  33               		.cfi_offset 4, -4
  34 0006 5F92      		push r5	 ;  3035	*pushqi/1	[length = 1]
  35               	.LCFI3:
  36               		.cfi_def_cfa_offset 6
  37               		.cfi_offset 5, -5
  38 0008 6F92      		push r6	 ;  3036	*pushqi/1	[length = 1]
  39               	.LCFI4:
  40               		.cfi_def_cfa_offset 7
  41               		.cfi_offset 6, -6
  42 000a 7F92      		push r7	 ;  3037	*pushqi/1	[length = 1]
  43               	.LCFI5:
  44               		.cfi_def_cfa_offset 8
  45               		.cfi_offset 7, -7
  46 000c 8F92      		push r8	 ;  3038	*pushqi/1	[length = 1]
  47               	.LCFI6:
  48               		.cfi_def_cfa_offset 9
  49               		.cfi_offset 8, -8
  50 000e 9F92      		push r9	 ;  3039	*pushqi/1	[length = 1]
  51               	.LCFI7:
  52               		.cfi_def_cfa_offset 10
  53               		.cfi_offset 9, -9
  54 0010 AF92      		push r10	 ;  3040	*pushqi/1	[length = 1]
  55               	.LCFI8:
  56               		.cfi_def_cfa_offset 11
  57               		.cfi_offset 10, -10
  58 0012 BF92      		push r11	 ;  3041	*pushqi/1	[length = 1]
  59               	.LCFI9:
  60               		.cfi_def_cfa_offset 12
  61               		.cfi_offset 11, -11
  62 0014 CF92      		push r12	 ;  3042	*pushqi/1	[length = 1]
  63               	.LCFI10:
  64               		.cfi_def_cfa_offset 13
  65               		.cfi_offset 12, -12
  66 0016 DF92      		push r13	 ;  3043	*pushqi/1	[length = 1]
  67               	.LCFI11:
  68               		.cfi_def_cfa_offset 14
  69               		.cfi_offset 13, -13
  70 0018 EF92      		push r14	 ;  3044	*pushqi/1	[length = 1]
  71               	.LCFI12:
  72               		.cfi_def_cfa_offset 15
  73               		.cfi_offset 14, -14
  74 001a FF92      		push r15	 ;  3045	*pushqi/1	[length = 1]
  75               	.LCFI13:
  76               		.cfi_def_cfa_offset 16
  77               		.cfi_offset 15, -15
  78 001c 0F93      		push r16	 ;  3046	*pushqi/1	[length = 1]
  79               	.LCFI14:
  80               		.cfi_def_cfa_offset 17
  81               		.cfi_offset 16, -16
  82 001e 1F93      		push r17	 ;  3047	*pushqi/1	[length = 1]
  83               	.LCFI15:
  84               		.cfi_def_cfa_offset 18
  85               		.cfi_offset 17, -17
  86 0020 CF93      		push r28	 ;  3048	*pushqi/1	[length = 1]
  87               	.LCFI16:
  88               		.cfi_def_cfa_offset 19
  89               		.cfi_offset 28, -18
  90 0022 DF93      		push r29	 ;  3049	*pushqi/1	[length = 1]
  91               	.LCFI17:
  92               		.cfi_def_cfa_offset 20
  93               		.cfi_offset 29, -19
  94 0024 CDB7      		in r28,__SP_L__	 ;  3050	*movhi_sp/2	[length = 2]
  95 0026 DEB7      		in r29,__SP_H__
  96 0028 C45A      		subi r28,lo8(-(-164))	 ;  3051	*addhi3/4	[length = 2]
  97 002a D040      		sbci r29,hi8(-(-164))
  98               	.LCFI18:
  99               		.cfi_def_cfa 28, 184
 100 002c 0FB6      		in __tmp_reg__,__SREG__	 ;  3052	*movhi_sp/1	[length = 5]
 101 002e F894      		cli
 102 0030 DEBF      		out __SP_H__,r29
 103 0032 0FBE      		out __SREG__,__tmp_reg__
 104 0034 CDBF      		out __SP_L__,r28
 105               	/* prologue: function */
 106               	/* frame size = 164 */
 107               	/* stack size = 182 */
 108               	.L__stack_usage = 182
 109 0036 C956      		subi r28,lo8(-151)	 ;  30	*movhi/3	[length = 6]
 110 0038 DF4F      		sbci r29,hi8(-151)
 111 003a 9983      		std Y+1,r25
 112 003c 8883      		st Y,r24
 113 003e C759      		subi r28,lo8(151)
 114 0040 D040      		sbci r29,hi8(151)
 115 0042 C756      		subi r28,lo8(-153)	 ;  31	*movhi/3	[length = 6]
 116 0044 DF4F      		sbci r29,hi8(-153)
 117 0046 7983      		std Y+1,r23
 118 0048 6883      		st Y,r22
 119 004a C959      		subi r28,lo8(153)
 120 004c D040      		sbci r29,hi8(153)
 121 004e C556      		subi r28,lo8(-155)	 ;  32	*movhi/3	[length = 6]
 122 0050 DF4F      		sbci r29,hi8(-155)
 123 0052 5983      		std Y+1,r21
 124 0054 4883      		st Y,r20
 125 0056 CB59      		subi r28,lo8(155)
 126 0058 D040      		sbci r29,hi8(155)
 127               	.LVL1:
 339:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_REDUCED
 340:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE static char bad_conversion[] = "???";
 341:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE static char null_pointer[] = "<NULL>";
 342:bertos/mware/formatwr.c **** 
 343:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE int precision;
 344:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE int n;
 345:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 346:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE int nr_of_chars;
 347:bertos/mware/formatwr.c **** #endif
 348:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE int field_width;
 349:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE char format_flag;
 350:bertos/mware/formatwr.c **** 	enum PLUS_SPACE_FLAGS {
 351:bertos/mware/formatwr.c **** 		PSF_NONE, PSF_PLUS, PSF_MINUS
 352:bertos/mware/formatwr.c **** 	};
 353:bertos/mware/formatwr.c **** 	enum DIV_FACTOR {
 354:bertos/mware/formatwr.c **** 		DIV_DEC, DIV_HEX,
 355:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_OCTAL_FORMATTER
 356:bertos/mware/formatwr.c **** 		DIV_OCT,
 357:bertos/mware/formatwr.c **** #endif
 358:bertos/mware/formatwr.c **** 	};
 359:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE struct {
 360:bertos/mware/formatwr.c **** 		enum PLUS_SPACE_FLAGS plus_space_flag : 2;
 361:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_OCTAL_FORMATTER
 362:bertos/mware/formatwr.c **** 		enum DIV_FACTOR div_factor : 2;
 363:bertos/mware/formatwr.c **** #else
 364:bertos/mware/formatwr.c **** 		enum DIV_FACTOR div_factor : 1;
 365:bertos/mware/formatwr.c **** #endif
 366:bertos/mware/formatwr.c **** 		bool left_adjust : 1;
 367:bertos/mware/formatwr.c **** 		bool l_L_modifier : 1;
 368:bertos/mware/formatwr.c **** 		bool h_modifier : 1;
 369:bertos/mware/formatwr.c **** 		bool alternate_flag : 1;
 370:bertos/mware/formatwr.c **** 		bool nonzero_value : 1;
 371:bertos/mware/formatwr.c **** 		bool zeropad : 1;
 372:bertos/mware/formatwr.c **** #if CPU_HARVARD
 373:bertos/mware/formatwr.c **** 		bool progmem : 1;
 374:bertos/mware/formatwr.c **** #endif
 375:bertos/mware/formatwr.c **** 	} flags;
 376:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE unsigned long ulong;
 377:bertos/mware/formatwr.c **** 
 378:bertos/mware/formatwr.c **** #if CONFIG_PRINTF >  PRINTF_NOFLOAT
 379:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE max_float_t fvalue;
 380:bertos/mware/formatwr.c **** #endif
 381:bertos/mware/formatwr.c **** 
 382:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE char *buf_pointer;
 383:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE char *ptr;
 384:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE const char *hex;
 385:bertos/mware/formatwr.c **** 	MEM_ATTRIBUTE char buf[FRMWRI_BUFSIZE];
 386:bertos/mware/formatwr.c **** 
 387:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 388:bertos/mware/formatwr.c **** 	nr_of_chars = 0;
 128               		.loc 1 388 0
 129 005a C557      		subi r28,lo8(-139)	 ;  39	*movhi/3	[length = 6]
 130 005c DF4F      		sbci r29,hi8(-139)
 131 005e 1982      		std Y+1,__zero_reg__
 132 0060 1882      		st Y,__zero_reg__
 133 0062 CB58      		subi r28,lo8(139)
 134 0064 D040      		sbci r29,hi8(139)
 389:bertos/mware/formatwr.c **** #endif
 390:bertos/mware/formatwr.c **** 	for (;;)    /* Until full format string read */
 391:bertos/mware/formatwr.c **** 	{
 392:bertos/mware/formatwr.c **** 		while ((format_flag = PGM_READ_CHAR(format++)) != '%')    /* Until '%' or '\0' */
 393:bertos/mware/formatwr.c **** 		{
 394:bertos/mware/formatwr.c **** 			if (!format_flag)
 395:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_RETURN_COUNT
 396:bertos/mware/formatwr.c **** 				return (nr_of_chars);
 397:bertos/mware/formatwr.c **** #else
 398:bertos/mware/formatwr.c **** 				return 0;
 399:bertos/mware/formatwr.c **** #endif
 400:bertos/mware/formatwr.c **** 			put_one_char(format_flag, secret_pointer);
 401:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 402:bertos/mware/formatwr.c **** 			nr_of_chars++;
 403:bertos/mware/formatwr.c **** #endif
 404:bertos/mware/formatwr.c **** 		}
 405:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '%')    /* %% prints as % */
 406:bertos/mware/formatwr.c **** 		{
 407:bertos/mware/formatwr.c **** 			format++;
 408:bertos/mware/formatwr.c **** 			put_one_char('%', secret_pointer);
 409:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 410:bertos/mware/formatwr.c **** 			nr_of_chars++;
 411:bertos/mware/formatwr.c **** #endif
 412:bertos/mware/formatwr.c **** 			continue;
 413:bertos/mware/formatwr.c **** 		}
 414:bertos/mware/formatwr.c **** 
 415:bertos/mware/formatwr.c **** 		flags.left_adjust = false;
 416:bertos/mware/formatwr.c **** 		flags.alternate_flag = false;
 417:bertos/mware/formatwr.c **** 		flags.plus_space_flag = PSF_NONE;
 418:bertos/mware/formatwr.c **** 		flags.zeropad = false;
 419:bertos/mware/formatwr.c **** #if CPU_HARVARD
 420:bertos/mware/formatwr.c **** 		flags.progmem = false;
 421:bertos/mware/formatwr.c **** #endif
 422:bertos/mware/formatwr.c **** 		ptr = buf_pointer = &buf[0];
 423:bertos/mware/formatwr.c **** 		hex = HEX_tab;
 424:bertos/mware/formatwr.c **** 
 425:bertos/mware/formatwr.c **** 		/* check for leading '-', '+', ' ','#' or '0' flags  */
 426:bertos/mware/formatwr.c **** 		for (;;)
 427:bertos/mware/formatwr.c **** 		{
 428:bertos/mware/formatwr.c **** 			switch (PGM_READ_CHAR(format))
 429:bertos/mware/formatwr.c **** 			{
 430:bertos/mware/formatwr.c **** 				case ' ':
 431:bertos/mware/formatwr.c **** 					if (flags.plus_space_flag)
 432:bertos/mware/formatwr.c **** 						goto NEXT_FLAG;
 433:bertos/mware/formatwr.c **** 				case '+':
 434:bertos/mware/formatwr.c **** 					flags.plus_space_flag = PSF_PLUS;
 435:bertos/mware/formatwr.c **** 					goto NEXT_FLAG;
 436:bertos/mware/formatwr.c **** 				case '-':
 437:bertos/mware/formatwr.c **** 					flags.left_adjust = true;
 438:bertos/mware/formatwr.c **** 					goto NEXT_FLAG;
 439:bertos/mware/formatwr.c **** 				case '#':
 440:bertos/mware/formatwr.c **** 					flags.alternate_flag = true;
 441:bertos/mware/formatwr.c **** 					goto NEXT_FLAG;
 442:bertos/mware/formatwr.c **** 				case '0':
 443:bertos/mware/formatwr.c **** 					flags.zeropad = true;
 444:bertos/mware/formatwr.c **** 					goto NEXT_FLAG;
 445:bertos/mware/formatwr.c **** 			}
 446:bertos/mware/formatwr.c **** 			break;
 447:bertos/mware/formatwr.c **** NEXT_FLAG:
 448:bertos/mware/formatwr.c **** 			format++;
 449:bertos/mware/formatwr.c **** 		}
 450:bertos/mware/formatwr.c **** 
 451:bertos/mware/formatwr.c **** 		/* Optional field width (may be '*') */
 452:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '*')
 453:bertos/mware/formatwr.c **** 		{
 454:bertos/mware/formatwr.c **** 			field_width = va_arg(ap, int);
 455:bertos/mware/formatwr.c **** 			if (field_width < 0)
 456:bertos/mware/formatwr.c **** 			{
 457:bertos/mware/formatwr.c **** 				field_width = -field_width;
 458:bertos/mware/formatwr.c **** 				flags.left_adjust = true;
 459:bertos/mware/formatwr.c **** 			}
 460:bertos/mware/formatwr.c **** 			format++;
 461:bertos/mware/formatwr.c **** 		}
 462:bertos/mware/formatwr.c **** 		else
 463:bertos/mware/formatwr.c **** 		{
 464:bertos/mware/formatwr.c **** 			field_width = 0;
 465:bertos/mware/formatwr.c **** 			while (PGM_READ_CHAR(format) >= '0' && PGM_READ_CHAR(format) <= '9')
 466:bertos/mware/formatwr.c **** 				field_width = field_width * 10 + (PGM_READ_CHAR(format++) - '0');
 467:bertos/mware/formatwr.c **** 		}
 468:bertos/mware/formatwr.c **** 
 469:bertos/mware/formatwr.c **** 		if (flags.left_adjust)
 470:bertos/mware/formatwr.c **** 			flags.zeropad = false;
 471:bertos/mware/formatwr.c **** 
 472:bertos/mware/formatwr.c **** 		/* Optional precision (or '*') */
 473:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '.')
 474:bertos/mware/formatwr.c **** 		{
 475:bertos/mware/formatwr.c **** 			if (PGM_READ_CHAR(++format) == '*')
 476:bertos/mware/formatwr.c **** 			{
 477:bertos/mware/formatwr.c **** 				precision = va_arg(ap, int);
 478:bertos/mware/formatwr.c **** 				format++;
 479:bertos/mware/formatwr.c **** 			}
 480:bertos/mware/formatwr.c **** 			else
 481:bertos/mware/formatwr.c **** 			{
 482:bertos/mware/formatwr.c **** 				precision = 0;
 483:bertos/mware/formatwr.c **** 				while (PGM_READ_CHAR(format) >= '0' && PGM_READ_CHAR(format) <= '9')
 484:bertos/mware/formatwr.c **** 					precision = precision * 10 + (PGM_READ_CHAR(format++) - '0');
 485:bertos/mware/formatwr.c **** 			}
 486:bertos/mware/formatwr.c **** 		}
 487:bertos/mware/formatwr.c **** 		else
 488:bertos/mware/formatwr.c **** 			precision = -1;
 489:bertos/mware/formatwr.c **** 
 490:bertos/mware/formatwr.c **** 		/* At this point, "left_adjust" is nonzero if there was
 491:bertos/mware/formatwr.c **** 		 * a sign, "zeropad" is 1 if there was a leading zero
 492:bertos/mware/formatwr.c **** 		 * and 0 otherwise, "field_width" and "precision"
 493:bertos/mware/formatwr.c **** 		 * contain numbers corresponding to the digit strings
 494:bertos/mware/formatwr.c **** 		 * before and after the decimal point, respectively,
 495:bertos/mware/formatwr.c **** 		 * and "plus_space_flag" is either 0 (no flag) or
 496:bertos/mware/formatwr.c **** 		 * contains a plus or space character. If there was no
 497:bertos/mware/formatwr.c **** 		 * decimal point, "precision" will be -1.
 498:bertos/mware/formatwr.c **** 		 */
 499:bertos/mware/formatwr.c **** 
 500:bertos/mware/formatwr.c **** 		flags.l_L_modifier = false;
 501:bertos/mware/formatwr.c **** 		flags.h_modifier = false;
 502:bertos/mware/formatwr.c **** 
 503:bertos/mware/formatwr.c **** 		/* Optional 'l','L','z' or 'h' modifier? */
 504:bertos/mware/formatwr.c **** 		switch (PGM_READ_CHAR(format))
 505:bertos/mware/formatwr.c **** 		{
 506:bertos/mware/formatwr.c **** 			case 'l':
 507:bertos/mware/formatwr.c **** 			case 'L':
 508:bertos/mware/formatwr.c **** 		#if SIZEOF_SIZE_T == SIZEOF_LONG
 509:bertos/mware/formatwr.c **** 			case 'z':
 510:bertos/mware/formatwr.c **** 				flags.l_L_modifier = true;
 511:bertos/mware/formatwr.c **** 		#elif SIZEOF_SIZE_T == SIZEOF_INT
 512:bertos/mware/formatwr.c **** 				flags.l_L_modifier = true;
 513:bertos/mware/formatwr.c **** 			case 'z':
 514:bertos/mware/formatwr.c **** 		#endif
 515:bertos/mware/formatwr.c **** 				format++;
 516:bertos/mware/formatwr.c **** 				break;
 517:bertos/mware/formatwr.c **** 
 518:bertos/mware/formatwr.c **** 			case 'h':
 519:bertos/mware/formatwr.c **** 				flags.h_modifier = true;
 520:bertos/mware/formatwr.c **** 				format++;
 521:bertos/mware/formatwr.c **** 				break;
 522:bertos/mware/formatwr.c **** 
 523:bertos/mware/formatwr.c **** 		}
 524:bertos/mware/formatwr.c **** 
 525:bertos/mware/formatwr.c **** 		/*
 526:bertos/mware/formatwr.c **** 		 * At exit from the following switch, we will emit
 527:bertos/mware/formatwr.c **** 		 * the characters starting at "buf_pointer" and
 528:bertos/mware/formatwr.c **** 		 * ending at "ptr"-1
 529:bertos/mware/formatwr.c **** 		 */
 530:bertos/mware/formatwr.c **** 		switch (format_flag = PGM_READ_CHAR(format++))
 531:bertos/mware/formatwr.c **** 		{
 532:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_N_FORMATTER
 533:bertos/mware/formatwr.c **** 			case 'n':
 534:bertos/mware/formatwr.c **** 				if (sizeof(short) != sizeof(int))
 535:bertos/mware/formatwr.c **** 				{
 536:bertos/mware/formatwr.c **** 					if (sizeof(int) != sizeof(long))
 537:bertos/mware/formatwr.c **** 					{
 538:bertos/mware/formatwr.c **** 						if (h_modifier)
 539:bertos/mware/formatwr.c **** 							*va_arg(ap, short *) = nr_of_chars;
 540:bertos/mware/formatwr.c **** 						else if (flags.l_L_modifier)
 541:bertos/mware/formatwr.c **** 							*va_arg(ap, long *) = nr_of_chars;
 542:bertos/mware/formatwr.c **** 						else
 543:bertos/mware/formatwr.c **** 							*va_arg(ap, int *) = nr_of_chars;
 544:bertos/mware/formatwr.c **** 					}
 545:bertos/mware/formatwr.c **** 					else
 546:bertos/mware/formatwr.c **** 					{
 547:bertos/mware/formatwr.c **** 						if (h_modifier)
 548:bertos/mware/formatwr.c **** 							*va_arg(ap, short *) = nr_of_chars;
 549:bertos/mware/formatwr.c **** 						else
 550:bertos/mware/formatwr.c **** 							*va_arg(ap, int *) = nr_of_chars;
 551:bertos/mware/formatwr.c **** 					}
 552:bertos/mware/formatwr.c **** 				}
 553:bertos/mware/formatwr.c **** 				else
 554:bertos/mware/formatwr.c **** 				{
 555:bertos/mware/formatwr.c **** 					if (flags.l_L_modifier)
 556:bertos/mware/formatwr.c **** 						*va_arg(ap, long *) = nr_of_chars;
 557:bertos/mware/formatwr.c **** 					else
 558:bertos/mware/formatwr.c **** 						*va_arg(ap, int *) = nr_of_chars;
 559:bertos/mware/formatwr.c **** 				}
 560:bertos/mware/formatwr.c **** 				continue;
 561:bertos/mware/formatwr.c **** #endif
 562:bertos/mware/formatwr.c **** 			case 'c':
 563:bertos/mware/formatwr.c **** 				buf[0] = va_arg(ap, int);
 564:bertos/mware/formatwr.c **** 				ptr++;
 565:bertos/mware/formatwr.c **** 				break;
 566:bertos/mware/formatwr.c **** 
 567:bertos/mware/formatwr.c **** 			/* Custom formatter for strings in program memory. */
 568:bertos/mware/formatwr.c **** 			case 'S':
 569:bertos/mware/formatwr.c **** #if CPU_HARVARD
 570:bertos/mware/formatwr.c **** 				flags.progmem = true;
 571:bertos/mware/formatwr.c **** #endif
 572:bertos/mware/formatwr.c **** 				/* Fall trough */
 573:bertos/mware/formatwr.c **** 
 574:bertos/mware/formatwr.c **** 			case 's':
 575:bertos/mware/formatwr.c **** 				if ( !(buf_pointer = va_arg(ap, char *)) )
 576:bertos/mware/formatwr.c **** 					buf_pointer = null_pointer;
 577:bertos/mware/formatwr.c **** 				if (precision < 0)
 578:bertos/mware/formatwr.c **** 					precision = 10000;
 579:bertos/mware/formatwr.c **** 
 580:bertos/mware/formatwr.c **** 				/*
 581:bertos/mware/formatwr.c **** 				 * Move `ptr' to the last character of the
 582:bertos/mware/formatwr.c **** 				 * string that will be actually printed.
 583:bertos/mware/formatwr.c **** 				 */
 584:bertos/mware/formatwr.c **** 				ptr = buf_pointer;
 585:bertos/mware/formatwr.c **** #if CPU_HARVARD
 586:bertos/mware/formatwr.c **** 				if (flags.progmem)
 587:bertos/mware/formatwr.c **** 				{
 588:bertos/mware/formatwr.c **** 					for (n=0; pgm_read_char(ptr) && n < precision; n++)
 589:bertos/mware/formatwr.c **** 						++ptr;
 590:bertos/mware/formatwr.c **** 				}
 591:bertos/mware/formatwr.c **** 				else
 592:bertos/mware/formatwr.c **** #endif
 593:bertos/mware/formatwr.c **** 				for (n=0; *ptr && n < precision; n++)
 594:bertos/mware/formatwr.c **** 					++ptr;
 595:bertos/mware/formatwr.c **** 				break;
 596:bertos/mware/formatwr.c **** 
 597:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_OCTAL_FORMATTER
 598:bertos/mware/formatwr.c **** 			case 'o':
 599:bertos/mware/formatwr.c **** 				if (flags.alternate_flag && !precision)
 600:bertos/mware/formatwr.c **** 					precision++;
 601:bertos/mware/formatwr.c **** #endif
 602:bertos/mware/formatwr.c **** 			case 'x':
 603:bertos/mware/formatwr.c **** 				hex = hex_tab;
 604:bertos/mware/formatwr.c **** 			case 'u':
 605:bertos/mware/formatwr.c **** 			case 'p':
 606:bertos/mware/formatwr.c **** 			case 'X':
 607:bertos/mware/formatwr.c **** 				if (format_flag == 'p')
 608:bertos/mware/formatwr.c **** #if defined(__AVR__) || defined(__I196__) /* 16bit pointers */
 609:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(unsigned short)va_arg(ap, char *);
 610:bertos/mware/formatwr.c **** #else /* 32bit pointers */
 611:bertos/mware/formatwr.c **** 					ulong = (unsigned long)va_arg(ap, char *);
 612:bertos/mware/formatwr.c **** #endif /* 32bit pointers */
 613:bertos/mware/formatwr.c **** 				else if (flags.l_L_modifier)
 614:bertos/mware/formatwr.c **** 					ulong = va_arg(ap, unsigned long);
 615:bertos/mware/formatwr.c **** 				else if (flags.h_modifier)
 616:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(unsigned short)va_arg(ap, unsigned int);
 617:bertos/mware/formatwr.c **** 				else
 618:bertos/mware/formatwr.c **** 					ulong = va_arg(ap, unsigned int);
 619:bertos/mware/formatwr.c **** 
 620:bertos/mware/formatwr.c **** 				flags.div_factor =
 621:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_OCTAL_FORMATTER
 622:bertos/mware/formatwr.c **** 					(format_flag == 'o') ? DIV_OCT :
 623:bertos/mware/formatwr.c **** #endif
 624:bertos/mware/formatwr.c **** 					(format_flag == 'u') ? DIV_DEC : DIV_HEX;
 625:bertos/mware/formatwr.c **** 				flags.plus_space_flag = PSF_NONE;
 626:bertos/mware/formatwr.c **** 				goto INTEGRAL_CONVERSION;
 627:bertos/mware/formatwr.c **** 
 628:bertos/mware/formatwr.c **** 			case 'd':
 629:bertos/mware/formatwr.c **** 			case 'i':
 630:bertos/mware/formatwr.c **** 				if (flags.l_L_modifier)
 631:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(long)va_arg(ap, long);
 632:bertos/mware/formatwr.c **** 				else
 633:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(long)va_arg(ap, int);
 634:bertos/mware/formatwr.c **** 
 635:bertos/mware/formatwr.c **** 				/* Extract sign */
 636:bertos/mware/formatwr.c **** 				if ((signed long)ulong < 0)
 637:bertos/mware/formatwr.c **** 				{
 638:bertos/mware/formatwr.c **** 					flags.plus_space_flag = PSF_MINUS;
 639:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(-((signed long)ulong));
 640:bertos/mware/formatwr.c **** 				}
 641:bertos/mware/formatwr.c **** 
 642:bertos/mware/formatwr.c **** 				flags.div_factor = DIV_DEC;
 643:bertos/mware/formatwr.c **** 
 644:bertos/mware/formatwr.c **** 				/* Now convert to digits */
 645:bertos/mware/formatwr.c **** INTEGRAL_CONVERSION:
 646:bertos/mware/formatwr.c **** 				ptr = buf_pointer = &buf[FRMWRI_BUFSIZE - 1];
 647:bertos/mware/formatwr.c **** 				flags.nonzero_value = (ulong != 0);
 648:bertos/mware/formatwr.c **** 
 649:bertos/mware/formatwr.c **** 				/* No char if zero and zero precision */
 650:bertos/mware/formatwr.c **** 				if (precision != 0 || flags.nonzero_value)
 651:bertos/mware/formatwr.c **** 				{
 652:bertos/mware/formatwr.c **** 					switch (flags.div_factor)
 653:bertos/mware/formatwr.c **** 					{
 654:bertos/mware/formatwr.c **** 					case DIV_DEC:
 655:bertos/mware/formatwr.c **** 						do
 656:bertos/mware/formatwr.c **** 							*--buf_pointer = hex[ulong % 10];
 657:bertos/mware/formatwr.c **** 						while (ulong /= 10);
 658:bertos/mware/formatwr.c **** 						break;
 659:bertos/mware/formatwr.c **** 
 660:bertos/mware/formatwr.c **** 					case DIV_HEX:
 661:bertos/mware/formatwr.c **** 						do
 662:bertos/mware/formatwr.c **** 							*--buf_pointer = hex[ulong % 16];
 663:bertos/mware/formatwr.c **** 						while (ulong /= 16);
 664:bertos/mware/formatwr.c **** 						break;
 665:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_OCTAL_FORMATTER
 666:bertos/mware/formatwr.c **** 					case DIV_OCT:
 667:bertos/mware/formatwr.c **** 						do
 668:bertos/mware/formatwr.c **** 							*--buf_pointer = hex[ulong % 8];
 669:bertos/mware/formatwr.c **** 						while (ulong /= 8);
 670:bertos/mware/formatwr.c **** 						break;
 671:bertos/mware/formatwr.c **** #endif
 672:bertos/mware/formatwr.c **** 					}
 673:bertos/mware/formatwr.c **** 				}
 674:bertos/mware/formatwr.c **** 
 675:bertos/mware/formatwr.c **** 				/* "precision" takes precedence */
 676:bertos/mware/formatwr.c **** 				if (precision < 0)
 677:bertos/mware/formatwr.c **** 					if (flags.zeropad)
 678:bertos/mware/formatwr.c **** 						precision = field_width - (flags.plus_space_flag != PSF_NONE);
 679:bertos/mware/formatwr.c **** 				while (precision > (int)(ptr - buf_pointer))
 680:bertos/mware/formatwr.c **** 					*--buf_pointer = '0';
 681:bertos/mware/formatwr.c **** 
 682:bertos/mware/formatwr.c **** 				if (flags.alternate_flag && flags.nonzero_value)
 683:bertos/mware/formatwr.c **** 				{
 684:bertos/mware/formatwr.c **** 					if (format_flag == 'x' || format_flag == 'X')
 685:bertos/mware/formatwr.c **** 					{
 686:bertos/mware/formatwr.c **** 						*--buf_pointer = format_flag;
 687:bertos/mware/formatwr.c **** 						*--buf_pointer = '0';
 688:bertos/mware/formatwr.c **** 					}
 689:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_OCTAL_FORMATTER
 690:bertos/mware/formatwr.c **** 					else if ((format_flag == 'o') && (*buf_pointer != '0'))
 691:bertos/mware/formatwr.c **** 					{
 692:bertos/mware/formatwr.c **** 						*--buf_pointer = '0';
 693:bertos/mware/formatwr.c **** 					}
 694:bertos/mware/formatwr.c **** #endif
 695:bertos/mware/formatwr.c **** 				}
 696:bertos/mware/formatwr.c **** 				ASSERT(buf_pointer >= buf);
 697:bertos/mware/formatwr.c **** 				break;
 698:bertos/mware/formatwr.c **** 
 699:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_NOFLOAT
 700:bertos/mware/formatwr.c **** 			case 'g':
 701:bertos/mware/formatwr.c **** 			case 'G':
 702:bertos/mware/formatwr.c **** 				n = 1;
 703:bertos/mware/formatwr.c **** 				format_flag -= 2;
 704:bertos/mware/formatwr.c **** 				if (! precision)
 705:bertos/mware/formatwr.c **** 				{
 706:bertos/mware/formatwr.c **** 					precision = 1;
 707:bertos/mware/formatwr.c **** 				}
 708:bertos/mware/formatwr.c **** 				goto FLOATING_CONVERSION;
 709:bertos/mware/formatwr.c **** 			case 'f':
 710:bertos/mware/formatwr.c **** 				format_flag = 0;
 711:bertos/mware/formatwr.c **** 			case 'e':
 712:bertos/mware/formatwr.c **** 			case 'E':
 713:bertos/mware/formatwr.c **** 				n = 0;
 714:bertos/mware/formatwr.c **** FLOATING_CONVERSION:
 715:bertos/mware/formatwr.c **** 				if (precision < 0)
 716:bertos/mware/formatwr.c **** 				{
 717:bertos/mware/formatwr.c **** 					precision = 6;
 718:bertos/mware/formatwr.c **** 				}
 719:bertos/mware/formatwr.c **** 
 720:bertos/mware/formatwr.c **** 				if (sizeof(double) != sizeof(max_float_t))
 721:bertos/mware/formatwr.c **** 				{
 722:bertos/mware/formatwr.c **** 					fvalue = flags.l_L_modifier ?
 723:bertos/mware/formatwr.c **** 						va_arg(ap,max_float_t) : va_arg(ap,double);
 724:bertos/mware/formatwr.c **** 				}
 725:bertos/mware/formatwr.c **** 				else
 726:bertos/mware/formatwr.c **** 					fvalue = va_arg(ap,max_float_t);
 727:bertos/mware/formatwr.c **** 
 728:bertos/mware/formatwr.c **** 				if (fvalue < 0)
 729:bertos/mware/formatwr.c **** 				{
 730:bertos/mware/formatwr.c **** 					flags.plus_space_flag = PSF_MINUS;
 731:bertos/mware/formatwr.c **** 					fvalue = -fvalue;
 732:bertos/mware/formatwr.c **** 				}
 733:bertos/mware/formatwr.c **** 				ptr = float_conversion (fvalue,
 135               		.loc 1 733 0
 136 0066 AE01      		movw r20,r28	 ;  2783	*movhi/1	[length = 1]
 137               	.LVL2:
 138 0068 4F5F      		subi r20,lo8(-(1))	 ;  1948	*addhi3/4	[length = 2]
 139 006a 5F4F      		sbci r21,hi8(-(1))
 140 006c C957      		subi r28,lo8(-135)	 ;  2784	*movhi/3	[length = 6]
 141 006e DF4F      		sbci r29,hi8(-135)
 142 0070 5983      		std Y+1,r21
 143 0072 4883      		st Y,r20
 144 0074 C758      		subi r28,lo8(135)
 145 0076 D040      		sbci r29,hi8(135)
 146 0078 CE01      		movw r24,r28	 ;  2785	*movhi/1	[length = 1]
 147               	.LVL3:
 148 007a 8A57      		subi r24,lo8(-(134))	 ;  2034	*addhi3/4	[length = 2]
 149 007c 9F4F      		sbci r25,hi8(-(134))
 150 007e C757      		subi r28,lo8(-137)	 ;  2786	*movhi/3	[length = 6]
 151 0080 DF4F      		sbci r29,hi8(-137)
 152 0082 9983      		std Y+1,r25
 153 0084 8883      		st Y,r24
 154 0086 C958      		subi r28,lo8(137)
 155 0088 D040      		sbci r29,hi8(137)
 156 008a 00C0      		rjmp .L2	 ;  3172	jump	[length = 1]
 157               	.LVL4:
 158               	.L4:
 394:bertos/mware/formatwr.c **** 			if (!format_flag)
 159               		.loc 1 394 0
 160 008c 8823      		tst r24	 ;  150	*cmpqi/1	[length = 1]
 161 008e 01F4      		brne .L3	 ;  151	branch	[length = 1]
 734:bertos/mware/formatwr.c **** 						(short)precision,
 735:bertos/mware/formatwr.c **** 						buf_pointer += field_width,
 736:bertos/mware/formatwr.c **** 						format_flag,
 737:bertos/mware/formatwr.c **** 						(char)n,
 738:bertos/mware/formatwr.c **** 						flags.alternate_flag);
 739:bertos/mware/formatwr.c **** 				if (flags.zeropad)
 740:bertos/mware/formatwr.c **** 				{
 741:bertos/mware/formatwr.c **** 					precision = field_width - (flags.plus_space_flag != PSF_NONE);
 742:bertos/mware/formatwr.c **** 					while (precision > ptr - buf_pointer)
 743:bertos/mware/formatwr.c **** 						*--buf_pointer = '0';
 744:bertos/mware/formatwr.c **** 				}
 745:bertos/mware/formatwr.c **** 				break;
 746:bertos/mware/formatwr.c **** 
 747:bertos/mware/formatwr.c **** #endif /* CONFIG_PRINTF <= PRINTF_NOFLOAT */
 748:bertos/mware/formatwr.c **** 
 749:bertos/mware/formatwr.c **** 			case '\0': /* Really bad place to find NUL in */
 750:bertos/mware/formatwr.c **** 				format--;
 751:bertos/mware/formatwr.c **** 
 752:bertos/mware/formatwr.c **** 			default:
 753:bertos/mware/formatwr.c **** 				/* Undefined conversion! */
 754:bertos/mware/formatwr.c **** 				ptr = buf_pointer = bad_conversion;
 755:bertos/mware/formatwr.c **** 				ptr += sizeof(bad_conversion) - 1;
 756:bertos/mware/formatwr.c **** 				break;
 757:bertos/mware/formatwr.c **** 
 758:bertos/mware/formatwr.c **** 		}
 759:bertos/mware/formatwr.c **** 
 760:bertos/mware/formatwr.c **** 		/*
 761:bertos/mware/formatwr.c **** 		 * This part emittes the formatted string to "put_one_char".
 762:bertos/mware/formatwr.c **** 		 */
 763:bertos/mware/formatwr.c **** 
 764:bertos/mware/formatwr.c **** 		/* If field_width == 0 then nothing should be written. */
 765:bertos/mware/formatwr.c **** 		precision = ptr - buf_pointer;
 766:bertos/mware/formatwr.c **** 
 767:bertos/mware/formatwr.c **** 		if ( precision > field_width)
 768:bertos/mware/formatwr.c **** 		{
 769:bertos/mware/formatwr.c **** 			n = 0;
 770:bertos/mware/formatwr.c **** 		}
 771:bertos/mware/formatwr.c **** 		else
 772:bertos/mware/formatwr.c **** 		{
 773:bertos/mware/formatwr.c **** 			n = field_width - precision - (flags.plus_space_flag != PSF_NONE);
 774:bertos/mware/formatwr.c **** 		}
 775:bertos/mware/formatwr.c **** 
 776:bertos/mware/formatwr.c **** 		/* emit any leading pad characters */
 777:bertos/mware/formatwr.c **** 		if (!flags.left_adjust)
 778:bertos/mware/formatwr.c **** 			while (--n >= 0)
 779:bertos/mware/formatwr.c **** 			{
 780:bertos/mware/formatwr.c **** 				put_one_char(' ', secret_pointer);
 781:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 782:bertos/mware/formatwr.c **** 				nr_of_chars++;
 783:bertos/mware/formatwr.c **** #endif
 784:bertos/mware/formatwr.c **** 			}
 785:bertos/mware/formatwr.c **** 
 786:bertos/mware/formatwr.c **** 		/* emit flag characters (if any) */
 787:bertos/mware/formatwr.c **** 		if (flags.plus_space_flag)
 788:bertos/mware/formatwr.c **** 		{
 789:bertos/mware/formatwr.c **** 			put_one_char(flags.plus_space_flag == PSF_PLUS ? '+' : '-', secret_pointer);
 790:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 791:bertos/mware/formatwr.c **** 			nr_of_chars++;
 792:bertos/mware/formatwr.c **** #endif
 793:bertos/mware/formatwr.c **** 		}
 794:bertos/mware/formatwr.c **** 
 795:bertos/mware/formatwr.c **** #if CPU_HARVARD
 796:bertos/mware/formatwr.c **** 		if (flags.progmem)
 797:bertos/mware/formatwr.c **** 		{
 798:bertos/mware/formatwr.c **** 			while (--precision >= 0)
 799:bertos/mware/formatwr.c **** 			{
 800:bertos/mware/formatwr.c **** 				put_one_char(pgm_read_char(buf_pointer++), secret_pointer);
 801:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 802:bertos/mware/formatwr.c **** 				nr_of_chars++;
 803:bertos/mware/formatwr.c **** #endif
 804:bertos/mware/formatwr.c **** 			}
 805:bertos/mware/formatwr.c **** 		}
 806:bertos/mware/formatwr.c **** 		else
 807:bertos/mware/formatwr.c **** #endif /* CPU_HARVARD */
 808:bertos/mware/formatwr.c **** 		{
 809:bertos/mware/formatwr.c **** 			/* emit the string itself */
 810:bertos/mware/formatwr.c **** 			while (--precision >= 0)
 811:bertos/mware/formatwr.c **** 			{
 812:bertos/mware/formatwr.c **** 				put_one_char(*buf_pointer++, secret_pointer);
 813:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 814:bertos/mware/formatwr.c **** 				nr_of_chars++;
 815:bertos/mware/formatwr.c **** #endif
 816:bertos/mware/formatwr.c **** 			}
 817:bertos/mware/formatwr.c **** 		}
 818:bertos/mware/formatwr.c **** 
 819:bertos/mware/formatwr.c **** 		/* emit trailing space characters */
 820:bertos/mware/formatwr.c **** 		if (flags.left_adjust)
 821:bertos/mware/formatwr.c **** 			while (--n >= 0)
 822:bertos/mware/formatwr.c **** 			{
 823:bertos/mware/formatwr.c **** 				put_one_char(' ', secret_pointer);
 824:bertos/mware/formatwr.c **** #if CONFIG_PRINTF_COUNT_CHARS
 825:bertos/mware/formatwr.c **** 				nr_of_chars++;
 826:bertos/mware/formatwr.c **** #endif
 827:bertos/mware/formatwr.c **** 			}
 828:bertos/mware/formatwr.c **** 	}
 829:bertos/mware/formatwr.c **** 
 830:bertos/mware/formatwr.c **** #else /* PRINTF_REDUCED starts here */
 831:bertos/mware/formatwr.c **** 
 832:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_NOMODIFIERS
 833:bertos/mware/formatwr.c **** 	bool l_modifier, h_modifier;
 834:bertos/mware/formatwr.c **** 	unsigned long u_val, div_val;
 835:bertos/mware/formatwr.c **** #else
 836:bertos/mware/formatwr.c **** 	unsigned int u_val, div_val;
 837:bertos/mware/formatwr.c **** #endif /* CONFIG_PRINTF > PRINTF_NOMODIFIERS */
 838:bertos/mware/formatwr.c **** 
 839:bertos/mware/formatwr.c **** 	char format_flag;
 840:bertos/mware/formatwr.c **** 	unsigned int nr_of_chars, base;
 841:bertos/mware/formatwr.c **** 	char outChar;
 842:bertos/mware/formatwr.c **** 	char *ptr;
 843:bertos/mware/formatwr.c **** 
 844:bertos/mware/formatwr.c **** 	nr_of_chars = 0;
 845:bertos/mware/formatwr.c **** 	for (;;)    /* Until full format string read */
 846:bertos/mware/formatwr.c **** 	{
 847:bertos/mware/formatwr.c **** 		while ((format_flag = PGM_READ_CHAR(format++)) != '%')    /* Until '%' or '\0' */
 848:bertos/mware/formatwr.c **** 		{
 849:bertos/mware/formatwr.c **** 			if (!format_flag)
 850:bertos/mware/formatwr.c **** 				return (nr_of_chars);
 851:bertos/mware/formatwr.c **** 			put_one_char(format_flag, secret_pointer);
 852:bertos/mware/formatwr.c **** 			nr_of_chars++;
 853:bertos/mware/formatwr.c **** 		}
 854:bertos/mware/formatwr.c **** 
 855:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_NOMODIFIERS
 856:bertos/mware/formatwr.c **** 		/*
 857:bertos/mware/formatwr.c **** 		 * Optional 'l', 'z' or 'h' modifiers?
 858:bertos/mware/formatwr.c **** 		 */
 859:bertos/mware/formatwr.c **** 		l_modifier = h_modifier = false;
 860:bertos/mware/formatwr.c **** 		switch (PGM_READ_CHAR(format))
 861:bertos/mware/formatwr.c **** 		{
 862:bertos/mware/formatwr.c **** 			case 'l':
 863:bertos/mware/formatwr.c **** 		#if SIZEOF_SIZE_T == SIZEOF_LONG
 864:bertos/mware/formatwr.c **** 			case 'z':
 865:bertos/mware/formatwr.c **** 				l_modifier = true;
 866:bertos/mware/formatwr.c **** 		#elif SIZEOF_SIZE_T == SIZEOF_INT
 867:bertos/mware/formatwr.c **** 				l_modifier = true;
 868:bertos/mware/formatwr.c **** 			case 'z':
 869:bertos/mware/formatwr.c **** 		#endif
 870:bertos/mware/formatwr.c **** 				format++;
 871:bertos/mware/formatwr.c **** 				break;
 872:bertos/mware/formatwr.c **** 
 873:bertos/mware/formatwr.c **** 			case 'h':
 874:bertos/mware/formatwr.c **** 				h_modifier = true;
 875:bertos/mware/formatwr.c **** 				format++;
 876:bertos/mware/formatwr.c **** 				break;
 877:bertos/mware/formatwr.c **** 		}
 878:bertos/mware/formatwr.c **** #endif /* CONFIG_PRINTF > PRINTF_NOMODIFIERS */
 879:bertos/mware/formatwr.c **** 
 880:bertos/mware/formatwr.c **** 		switch (format_flag = PGM_READ_CHAR(format++))
 881:bertos/mware/formatwr.c **** 		{
 882:bertos/mware/formatwr.c **** 			case 'c':
 883:bertos/mware/formatwr.c **** 				format_flag = va_arg(ap, int);
 884:bertos/mware/formatwr.c **** 			default:
 885:bertos/mware/formatwr.c **** 				put_one_char(format_flag, secret_pointer);
 886:bertos/mware/formatwr.c **** 				nr_of_chars++;
 887:bertos/mware/formatwr.c **** 				continue;
 888:bertos/mware/formatwr.c **** 
 889:bertos/mware/formatwr.c **** 			case 's':
 890:bertos/mware/formatwr.c **** 				ptr = va_arg(ap, char *);
 891:bertos/mware/formatwr.c **** 				while ((format_flag = *ptr++))
 892:bertos/mware/formatwr.c **** 				{
 893:bertos/mware/formatwr.c **** 					put_one_char(format_flag, secret_pointer);
 894:bertos/mware/formatwr.c **** 					nr_of_chars++;
 895:bertos/mware/formatwr.c **** 				}
 896:bertos/mware/formatwr.c **** 				continue;
 897:bertos/mware/formatwr.c **** 
 898:bertos/mware/formatwr.c **** 			case 'o':
 899:bertos/mware/formatwr.c **** 				base = 8;
 900:bertos/mware/formatwr.c **** 				if (IS_SHORT)
 901:bertos/mware/formatwr.c **** 					div_val = 0x8000;
 902:bertos/mware/formatwr.c **** 				else
 903:bertos/mware/formatwr.c **** 					div_val = 0x40000000;
 904:bertos/mware/formatwr.c **** 				goto CONVERSION_LOOP;
 905:bertos/mware/formatwr.c **** 
 906:bertos/mware/formatwr.c **** 			case 'd':
 907:bertos/mware/formatwr.c **** 				base = 10;
 908:bertos/mware/formatwr.c **** 				if (IS_SHORT)
 909:bertos/mware/formatwr.c **** 					div_val = 10000;
 910:bertos/mware/formatwr.c **** 				else
 911:bertos/mware/formatwr.c **** 					div_val = 1000000000;
 912:bertos/mware/formatwr.c **** 				goto CONVERSION_LOOP;
 913:bertos/mware/formatwr.c **** 
 914:bertos/mware/formatwr.c **** 			case 'X':
 915:bertos/mware/formatwr.c **** 			case 'x':
 916:bertos/mware/formatwr.c **** 				base = 16;
 917:bertos/mware/formatwr.c **** 				if (IS_SHORT)
 918:bertos/mware/formatwr.c **** 					div_val = 0x1000;
 919:bertos/mware/formatwr.c **** 				else
 920:bertos/mware/formatwr.c **** 					div_val = 0x10000000;
 921:bertos/mware/formatwr.c **** 
 922:bertos/mware/formatwr.c **** CONVERSION_LOOP:
 923:bertos/mware/formatwr.c **** #if CONFIG_PRINTF > PRINTF_NOMODIFIERS
 924:bertos/mware/formatwr.c **** 				if (h_modifier)
 925:bertos/mware/formatwr.c **** 				{
 926:bertos/mware/formatwr.c **** 					if (format_flag == 'd')
 927:bertos/mware/formatwr.c **** 						u_val = (short)va_arg(ap, int);
 928:bertos/mware/formatwr.c **** 					else
 929:bertos/mware/formatwr.c **** 						u_val = (unsigned short)va_arg(ap, int);
 930:bertos/mware/formatwr.c **** 				}
 931:bertos/mware/formatwr.c **** 				else if (l_modifier)
 932:bertos/mware/formatwr.c **** 					u_val = va_arg(ap, long);
 933:bertos/mware/formatwr.c **** 				else
 934:bertos/mware/formatwr.c **** 				{
 935:bertos/mware/formatwr.c **** 					if (format_flag == 'd')
 936:bertos/mware/formatwr.c **** 						u_val = va_arg(ap, int);
 937:bertos/mware/formatwr.c **** 					else
 938:bertos/mware/formatwr.c **** 						u_val = va_arg(ap, unsigned int);
 939:bertos/mware/formatwr.c **** 				}
 940:bertos/mware/formatwr.c **** 
 941:bertos/mware/formatwr.c **** #else /* CONFIG_PRINTF > PRINTF_NOMODIFIERS */
 942:bertos/mware/formatwr.c **** 				u_val = va_arg(ap,int);
 943:bertos/mware/formatwr.c **** #endif /* CONFIG_PRINTF > PRINTF_NOMODIFIERS */
 944:bertos/mware/formatwr.c **** 				if (format_flag == 'd')
 945:bertos/mware/formatwr.c **** 				{
 946:bertos/mware/formatwr.c **** 					if (((int)u_val) < 0)
 947:bertos/mware/formatwr.c **** 					{
 948:bertos/mware/formatwr.c **** 						u_val = - u_val;
 949:bertos/mware/formatwr.c **** 						put_one_char('-', secret_pointer);
 950:bertos/mware/formatwr.c **** 						nr_of_chars++;
 951:bertos/mware/formatwr.c **** 					}
 952:bertos/mware/formatwr.c **** 				}
 953:bertos/mware/formatwr.c **** 				while (div_val > 1 && div_val > u_val)
 954:bertos/mware/formatwr.c **** 				{
 955:bertos/mware/formatwr.c **** 					div_val /= base;
 956:bertos/mware/formatwr.c **** 				}
 957:bertos/mware/formatwr.c **** 				do
 958:bertos/mware/formatwr.c **** 				{
 959:bertos/mware/formatwr.c **** 					outChar = (u_val / div_val) + '0';
 960:bertos/mware/formatwr.c **** 					if (outChar > '9')
 961:bertos/mware/formatwr.c **** 					{
 962:bertos/mware/formatwr.c **** 						if (format_flag == 'x')
 963:bertos/mware/formatwr.c **** 							outChar += 'a'-'9'-1;
 964:bertos/mware/formatwr.c **** 						else
 965:bertos/mware/formatwr.c **** 							outChar += 'A'-'9'-1;
 966:bertos/mware/formatwr.c **** 					}
 967:bertos/mware/formatwr.c **** 					put_one_char(outChar, secret_pointer);
 968:bertos/mware/formatwr.c **** 					nr_of_chars++;
 969:bertos/mware/formatwr.c **** 					u_val %= div_val;
 970:bertos/mware/formatwr.c **** 					div_val /= base;
 971:bertos/mware/formatwr.c **** 				}
 972:bertos/mware/formatwr.c **** 				while (div_val);
 973:bertos/mware/formatwr.c **** 
 974:bertos/mware/formatwr.c **** 		} /* end switch(format_flag...) */
 975:bertos/mware/formatwr.c **** 	}
 976:bertos/mware/formatwr.c **** #endif /* CONFIG_PRINTF > PRINTF_REDUCED */
 977:bertos/mware/formatwr.c **** }
 162               		.loc 1 977 0
 163 0090 C557      		subi r28,lo8(-139)	 ;  1960	*movqi/4	[length = 5]
 164 0092 DF4F      		sbci r29,hi8(-139)
 165 0094 8881      		ld r24,Y
 166 0096 CB58      		subi r28,lo8(139)
 167 0098 D040      		sbci r29,hi8(139)
 168               	.LVL5:
 169 009a C457      		subi r28,lo8(-140)	 ;  1961	*movqi/4	[length = 5]
 170 009c DF4F      		sbci r29,hi8(-140)
 171 009e 9881      		ld r25,Y
 172 00a0 CC58      		subi r28,lo8(140)
 173 00a2 D040      		sbci r29,hi8(140)
 174               	/* epilogue start */
 175 00a4 CC55      		subi r28,lo8(-(164))	 ;  3055	*addhi3/4	[length = 2]
 176 00a6 DF4F      		sbci r29,hi8(-(164))
 177 00a8 0FB6      		in __tmp_reg__,__SREG__	 ;  3056	*movhi_sp/1	[length = 5]
 178 00aa F894      		cli
 179 00ac DEBF      		out __SP_H__,r29
 180 00ae 0FBE      		out __SREG__,__tmp_reg__
 181 00b0 CDBF      		out __SP_L__,r28
 182 00b2 DF91      		pop r29	 ;  3057	popqi	[length = 1]
 183 00b4 CF91      		pop r28	 ;  3058	popqi	[length = 1]
 184 00b6 1F91      		pop r17	 ;  3059	popqi	[length = 1]
 185 00b8 0F91      		pop r16	 ;  3060	popqi	[length = 1]
 186 00ba FF90      		pop r15	 ;  3061	popqi	[length = 1]
 187 00bc EF90      		pop r14	 ;  3062	popqi	[length = 1]
 188               	.LVL6:
 189 00be DF90      		pop r13	 ;  3063	popqi	[length = 1]
 190 00c0 CF90      		pop r12	 ;  3064	popqi	[length = 1]
 191               	.LVL7:
 192 00c2 BF90      		pop r11	 ;  3065	popqi	[length = 1]
 193 00c4 AF90      		pop r10	 ;  3066	popqi	[length = 1]
 194 00c6 9F90      		pop r9	 ;  3067	popqi	[length = 1]
 195 00c8 8F90      		pop r8	 ;  3068	popqi	[length = 1]
 196 00ca 7F90      		pop r7	 ;  3069	popqi	[length = 1]
 197 00cc 6F90      		pop r6	 ;  3070	popqi	[length = 1]
 198 00ce 5F90      		pop r5	 ;  3071	popqi	[length = 1]
 199 00d0 4F90      		pop r4	 ;  3072	popqi	[length = 1]
 200 00d2 3F90      		pop r3	 ;  3073	popqi	[length = 1]
 201 00d4 2F90      		pop r2	 ;  3074	popqi	[length = 1]
 202 00d6 0895      		ret	 ;  3075	return_from_epilogue	[length = 1]
 203               	.LVL8:
 204               	.L3:
 400:bertos/mware/formatwr.c **** 			put_one_char(format_flag, secret_pointer);
 205               		.loc 1 400 0
 206 00d8 C556      		subi r28,lo8(-155)	 ;  160	*movhi/2	[length = 6]
 207 00da DF4F      		sbci r29,hi8(-155)
 208 00dc 6881      		ld r22,Y
 209 00de 7981      		ldd r23,Y+1
 210 00e0 CB59      		subi r28,lo8(155)
 211 00e2 D040      		sbci r29,hi8(155)
 212 00e4 CD55      		subi r28,lo8(-163)	 ;  2775	*movqi/3	[length = 5]
 213 00e6 DF4F      		sbci r29,hi8(-163)
 214 00e8 2883      		st Y,r18
 215 00ea C35A      		subi r28,lo8(163)
 216 00ec D040      		sbci r29,hi8(163)
 217 00ee CC55      		subi r28,lo8(-164)	 ;  2776	*movqi/3	[length = 5]
 218 00f0 DF4F      		sbci r29,hi8(-164)
 219 00f2 3883      		st Y,r19
 220 00f4 C45A      		subi r28,lo8(164)
 221 00f6 D040      		sbci r29,hi8(164)
 222 00f8 C756      		subi r28,lo8(-153)	 ;  2787	*movhi/2	[length = 6]
 223 00fa DF4F      		sbci r29,hi8(-153)
 224 00fc E881      		ld r30,Y
 225 00fe F981      		ldd r31,Y+1
 226 0100 C959      		subi r28,lo8(153)
 227 0102 D040      		sbci r29,hi8(153)
 228               	.LVL9:
 229 0104 0995      		icall	 ;  161	call_insn/1	[length = 1]
 230               	.LVL10:
 402:bertos/mware/formatwr.c **** 			nr_of_chars++;
 231               		.loc 1 402 0
 232 0106 C557      		subi r28,lo8(-139)	 ;  2788	*movhi/2	[length = 6]
 233 0108 DF4F      		sbci r29,hi8(-139)
 234 010a 4881      		ld r20,Y
 235 010c 5981      		ldd r21,Y+1
 236 010e CB58      		subi r28,lo8(139)
 237 0110 D040      		sbci r29,hi8(139)
 238 0112 4F5F      		subi r20,lo8(-(1))	 ;  162	*addhi3/4	[length = 2]
 239 0114 5F4F      		sbci r21,hi8(-(1))
 240 0116 C557      		subi r28,lo8(-139)	 ;  2789	*movhi/3	[length = 6]
 241 0118 DF4F      		sbci r29,hi8(-139)
 242 011a 5983      		std Y+1,r21
 243 011c 4883      		st Y,r20
 244 011e CB58      		subi r28,lo8(139)
 245 0120 D040      		sbci r29,hi8(139)
 246               	.LVL11:
 247 0122 CD55      		subi r28,lo8(-163)	 ;  2777	*movqi/4	[length = 5]
 248 0124 DF4F      		sbci r29,hi8(-163)
 249 0126 2881      		ld r18,Y
 250 0128 C35A      		subi r28,lo8(163)
 251 012a D040      		sbci r29,hi8(163)
 252 012c CC55      		subi r28,lo8(-164)	 ;  2778	*movqi/4	[length = 5]
 253 012e DF4F      		sbci r29,hi8(-164)
 254 0130 3881      		ld r19,Y
 255 0132 C45A      		subi r28,lo8(164)
 256 0134 D040      		sbci r29,hi8(164)
 257 0136 C157      		subi r28,lo8(-143)	 ;  35	*movhi/3	[length = 6]
 258 0138 DF4F      		sbci r29,hi8(-143)
 259 013a 3983      		std Y+1,r19
 260 013c 2883      		st Y,r18
 261 013e CF58      		subi r28,lo8(143)
 262 0140 D040      		sbci r29,hi8(143)
 392:bertos/mware/formatwr.c **** 		while ((format_flag = PGM_READ_CHAR(format++)) != '%')    /* Until '%' or '\0' */
 263               		.loc 1 392 0
 264 0142 C956      		subi r28,lo8(-151)	 ;  36	*movhi/3	[length = 6]
 265 0144 DF4F      		sbci r29,hi8(-151)
 266 0146 F982      		std Y+1,r15
 267 0148 E882      		st Y,r14
 268 014a C759      		subi r28,lo8(151)
 269 014c D040      		sbci r29,hi8(151)
 270               	.LVL12:
 271               	.L6:
 412:bertos/mware/formatwr.c **** 			continue;
 272               		.loc 1 412 0 discriminator 1
 273 014e C157      		subi r28,lo8(-143)	 ;  38	*movhi/2	[length = 6]
 274 0150 DF4F      		sbci r29,hi8(-143)
 275 0152 2881      		ld r18,Y
 276 0154 3981      		ldd r19,Y+1
 277 0156 CF58      		subi r28,lo8(143)
 278 0158 D040      		sbci r29,hi8(143)
 279               	.LVL13:
 280               	.L2:
 281               	.LBB22:
 392:bertos/mware/formatwr.c **** 		while ((format_flag = PGM_READ_CHAR(format++)) != '%')    /* Until '%' or '\0' */
 282               		.loc 1 392 0 discriminator 1
 283 015a C956      		subi r28,lo8(-151)	 ;  2790	*movhi/2	[length = 6]
 284 015c DF4F      		sbci r29,hi8(-151)
 285 015e E880      		ld r14,Y
 286 0160 F980      		ldd r15,Y+1
 287 0162 C759      		subi r28,lo8(151)
 288 0164 D040      		sbci r29,hi8(151)
 289 0166 0894      		sec	 ;  175	*addhi3/5	[length = 3]
 290 0168 E11C      		adc r14,__zero_reg__
 291 016a F11C      		adc r15,__zero_reg__
 292               	.LVL14:
 293 016c C956      		subi r28,lo8(-151)	 ;  2791	*movhi/2	[length = 6]
 294 016e DF4F      		sbci r29,hi8(-151)
 295 0170 E881      		ld r30,Y
 296 0172 F981      		ldd r31,Y+1
 297 0174 C759      		subi r28,lo8(151)
 298 0176 D040      		sbci r29,hi8(151)
 299               	/* #APP */
 300               	 ;  392 "bertos/mware/formatwr.c" 1
 301 0178 8491      		lpm r24, Z
 302               		
 303               	 ;  0 "" 2
 304               	.LVL15:
 305               	/* #NOAPP */
 306               	.LBE22:
 307 017a 8532      		cpi r24,lo8(37)	 ;  183	*cmpqi/3	[length = 1]
 308 017c 01F0      		breq .+2	 ;  184	branch	[length = 2]
 309 017e 00C0      		rjmp .L4
 310               	.LVL16:
 311               	.LBB23:
 405:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '%')    /* %% prints as % */
 312               		.loc 1 405 0
 313 0180 F701      		movw r30,r14	 ;  2792	*movhi/1	[length = 1]
 314               	/* #APP */
 315               	 ;  405 "bertos/mware/formatwr.c" 1
 316 0182 8491      		lpm r24, Z
 317               		
 318               	 ;  0 "" 2
 319               	.LVL17:
 320               	/* #NOAPP */
 321               	.LBE23:
 322 0184 8532      		cpi r24,lo8(37)	 ;  190	*cmpqi/3	[length = 1]
 323 0186 01F0      		breq .+2	 ;  191	branch	[length = 2]
 324 0188 00C0      		rjmp .L130
 407:bertos/mware/formatwr.c **** 			format++;
 325               		.loc 1 407 0
 326 018a C956      		subi r28,lo8(-151)	 ;  2793	*movhi/2	[length = 6]
 327 018c DF4F      		sbci r29,hi8(-151)
 328 018e 4881      		ld r20,Y
 329 0190 5981      		ldd r21,Y+1
 330 0192 C759      		subi r28,lo8(151)
 331 0194 D040      		sbci r29,hi8(151)
 332 0196 4E5F      		subi r20,lo8(-(2))	 ;  193	*addhi3/4	[length = 2]
 333 0198 5F4F      		sbci r21,hi8(-(2))
 334 019a C956      		subi r28,lo8(-151)	 ;  2794	*movhi/3	[length = 6]
 335 019c DF4F      		sbci r29,hi8(-151)
 336 019e 5983      		std Y+1,r21
 337 01a0 4883      		st Y,r20
 338 01a2 C759      		subi r28,lo8(151)
 339 01a4 D040      		sbci r29,hi8(151)
 340               	.LVL18:
 408:bertos/mware/formatwr.c **** 			put_one_char('%', secret_pointer);
 341               		.loc 1 408 0
 342 01a6 C556      		subi r28,lo8(-155)	 ;  197	*movhi/2	[length = 6]
 343 01a8 DF4F      		sbci r29,hi8(-155)
 344 01aa 6881      		ld r22,Y
 345 01ac 7981      		ldd r23,Y+1
 346 01ae CB59      		subi r28,lo8(155)
 347 01b0 D040      		sbci r29,hi8(155)
 348 01b2 CD55      		subi r28,lo8(-163)	 ;  2779	*movqi/3	[length = 5]
 349 01b4 DF4F      		sbci r29,hi8(-163)
 350 01b6 2883      		st Y,r18
 351 01b8 C35A      		subi r28,lo8(163)
 352 01ba D040      		sbci r29,hi8(163)
 353 01bc CC55      		subi r28,lo8(-164)	 ;  2780	*movqi/3	[length = 5]
 354 01be DF4F      		sbci r29,hi8(-164)
 355 01c0 3883      		st Y,r19
 356 01c2 C45A      		subi r28,lo8(164)
 357 01c4 D040      		sbci r29,hi8(164)
 358 01c6 C756      		subi r28,lo8(-153)	 ;  2795	*movhi/2	[length = 6]
 359 01c8 DF4F      		sbci r29,hi8(-153)
 360 01ca E881      		ld r30,Y
 361 01cc F981      		ldd r31,Y+1
 362 01ce C959      		subi r28,lo8(153)
 363 01d0 D040      		sbci r29,hi8(153)
 364 01d2 0995      		icall	 ;  198	call_insn/1	[length = 1]
 365               	.LVL19:
 410:bertos/mware/formatwr.c **** 			nr_of_chars++;
 366               		.loc 1 410 0
 367 01d4 C557      		subi r28,lo8(-139)	 ;  2796	*movhi/2	[length = 6]
 368 01d6 DF4F      		sbci r29,hi8(-139)
 369 01d8 4881      		ld r20,Y
 370 01da 5981      		ldd r21,Y+1
 371 01dc CB58      		subi r28,lo8(139)
 372 01de D040      		sbci r29,hi8(139)
 373 01e0 4F5F      		subi r20,lo8(-(1))	 ;  199	*addhi3/4	[length = 2]
 374 01e2 5F4F      		sbci r21,hi8(-(1))
 375 01e4 C557      		subi r28,lo8(-139)	 ;  2797	*movhi/3	[length = 6]
 376 01e6 DF4F      		sbci r29,hi8(-139)
 377 01e8 5983      		std Y+1,r21
 378 01ea 4883      		st Y,r20
 379 01ec CB58      		subi r28,lo8(139)
 380 01ee D040      		sbci r29,hi8(139)
 381               	.LVL20:
 412:bertos/mware/formatwr.c **** 			continue;
 382               		.loc 1 412 0
 383 01f0 CD55      		subi r28,lo8(-163)	 ;  2781	*movqi/4	[length = 5]
 384 01f2 DF4F      		sbci r29,hi8(-163)
 385 01f4 2881      		ld r18,Y
 386 01f6 C35A      		subi r28,lo8(163)
 387 01f8 D040      		sbci r29,hi8(163)
 388 01fa CC55      		subi r28,lo8(-164)	 ;  2782	*movqi/4	[length = 5]
 389 01fc DF4F      		sbci r29,hi8(-164)
 390 01fe 3881      		ld r19,Y
 391 0200 C45A      		subi r28,lo8(164)
 392 0202 D040      		sbci r29,hi8(164)
 393 0204 C157      		subi r28,lo8(-143)	 ;  37	*movhi/3	[length = 6]
 394 0206 DF4F      		sbci r29,hi8(-143)
 395 0208 3983      		std Y+1,r19
 396 020a 2883      		st Y,r18
 397 020c CF58      		subi r28,lo8(143)
 398 020e D040      		sbci r29,hi8(143)
 399 0210 00C0      		rjmp .L6	 ;  3174	jump	[length = 1]
 400               	.LVL21:
 401               	.L130:
 405:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '%')    /* %% prints as % */
 402               		.loc 1 405 0
 403 0212 C356      		subi r28,lo8(-157)	 ;  40	*movqi/3	[length = 5]
 404 0214 DF4F      		sbci r29,hi8(-157)
 405 0216 1882      		st Y,__zero_reg__
 406 0218 CD59      		subi r28,lo8(157)
 407 021a D040      		sbci r29,hi8(157)
 408 021c 3324      		clr r3	 ;  42	*movqi/7	[length = 1]
 431:bertos/mware/formatwr.c **** 					if (flags.plus_space_flag)
 409               		.loc 1 431 0
 410 021e CD56      		subi r28,lo8(-147)	 ;  2798	*movqi/4	[length = 5]
 411 0220 DF4F      		sbci r29,hi8(-147)
 412 0222 4881      		ld r20,Y
 413 0224 C359      		subi r28,lo8(147)
 414 0226 D040      		sbci r29,hi8(147)
 415 0228 4170      		andi r20,lo8(1)	 ;  251	andqi3/2	[length = 1]
 416 022a 440F      		lsl r20	 ;  252	*ashlqi3/4	[length = 2]
 417 022c 440F      		lsl r20
 418 022e CF56      		subi r28,lo8(-145)	 ;  2799	*movqi/4	[length = 5]
 419 0230 DF4F      		sbci r29,hi8(-145)
 420 0232 9881      		ld r25,Y
 421 0234 C159      		subi r28,lo8(145)
 422 0236 D040      		sbci r29,hi8(145)
 423 0238 9170      		andi r25,lo8(1)	 ;  263	andqi3/2	[length = 1]
 424 023a 9295      		swap r25	 ;  3027	*rotlqi3_4	[length = 1]
 425 023c 907F      		andi r25,lo8(-16)	 ;  3028	andqi3/2	[length = 1]
 426 023e CB56      		subi r28,lo8(-149)	 ;  2800	*movqi/4	[length = 5]
 427 0240 DF4F      		sbci r29,hi8(-149)
 428 0242 8881      		ld r24,Y
 429 0244 C559      		subi r28,lo8(149)
 430 0246 D040      		sbci r29,hi8(149)
 431               	.LVL22:
 432 0248 8170      		andi r24,lo8(1)	 ;  269	andqi3/2	[length = 1]
 433 024a 8295      		swap r24	 ;  3029	*rotlqi3_4	[length = 1]
 434 024c 880F      		lsl r24	 ;  3030	*ashlqi3/3	[length = 1]
 435 024e 807E      		andi r24,lo8(-32)	 ;  3031	andqi3/2	[length = 1]
 436 0250 CA56      		subi r28,lo8(-150)	 ;  2801	*movqi/4	[length = 5]
 437 0252 DF4F      		sbci r29,hi8(-150)
 438 0254 5881      		ld r21,Y
 439 0256 C659      		subi r28,lo8(150)
 440 0258 D040      		sbci r29,hi8(150)
 441 025a 5795      		ror r21	 ;  281	*ashlqi3/5	[length = 3]
 442 025c 5527      		clr r21
 443 025e 5795      		ror r21
 444 0260 60E0      		ldi r22,lo8(0)	 ;  2417	*movqi/2	[length = 1]
 445 0262 70E0      		ldi r23,lo8(0)	 ;  2419	*movqi/2	[length = 1]
 446               	.LVL23:
 447               	.L5:
 448               	.LBB24:
 428:bertos/mware/formatwr.c **** 			switch (PGM_READ_CHAR(format))
 449               		.loc 1 428 0
 450 0264 F701      		movw r30,r14	 ;  2802	*movhi/1	[length = 1]
 451               	/* #APP */
 452               	 ;  428 "bertos/mware/formatwr.c" 1
 453 0266 A491      		lpm r26, Z
 454               		
 455               	 ;  0 "" 2
 456               	.LVL24:
 457               	/* #NOAPP */
 458               	.LBE24:
 459 0268 AB32      		cpi r26,lo8(43)	 ;  216	*cmpqi/3	[length = 1]
 460 026a 01F0      		breq .L132	 ;  217	branch	[length = 1]
 461 026c AC32      		cpi r26,lo8(44)	 ;  218	*cmpqi/3	[length = 1]
 462 026e 00F4      		brsh .L13	 ;  219	branch	[length = 1]
 463 0270 A032      		cpi r26,lo8(32)	 ;  220	*cmpqi/3	[length = 1]
 464 0272 01F0      		breq .L8	 ;  221	branch	[length = 1]
 465 0274 A332      		cpi r26,lo8(35)	 ;  222	*cmpqi/3	[length = 1]
 466 0276 01F4      		brne .L7	 ;  223	branch	[length = 1]
 467 0278 00C0      		rjmp .L190	 ;  3178	jump	[length = 1]
 468               	.L13:
 469 027a AD32      		cpi r26,lo8(45)	 ;  227	*cmpqi/3	[length = 1]
 470 027c 01F0      		breq .L11	 ;  228	branch	[length = 1]
 471 027e A033      		cpi r26,lo8(48)	 ;  229	*cmpqi/3	[length = 1]
 472 0280 01F4      		brne .L7	 ;  230	branch	[length = 1]
 473 0282 00C0      		rjmp .L191	 ;  3182	jump	[length = 1]
 474               	.L11:
 437:bertos/mware/formatwr.c **** 					flags.left_adjust = true;
 475               		.loc 1 437 0
 476 0284 71E0      		ldi r23,lo8(1)	 ;  2135	*movqi/2	[length = 1]
 477               	.LVL25:
 478 0286 00C0      		rjmp .L10	 ;  3184	jump	[length = 1]
 479               	.LVL26:
 480               	.L8:
 431:bertos/mware/formatwr.c **** 					if (flags.plus_space_flag)
 481               		.loc 1 431 0
 482 0288 1C7F      		andi r17,lo8(-4)	 ;  248	andqi3/2	[length = 1]
 483               	.LVL27:
 484 028a 162B      		or r17,r22	 ;  249	iorqi3/1	[length = 1]
 485 028c 1B7F      		andi r17,lo8(-5)	 ;  254	andqi3/2	[length = 1]
 486 028e 142B      		or r17,r20	 ;  255	iorqi3/1	[length = 1]
 487 0290 E72F      		mov r30,r23	 ;  2803	*movqi/1	[length = 1]
 488 0292 EE0F      		lsl r30	 ;  258	*ashlqi3/5	[length = 3]
 489 0294 EE0F      		lsl r30
 490 0296 EE0F      		lsl r30
 491 0298 177F      		andi r17,lo8(-9)	 ;  260	andqi3/2	[length = 1]
 492 029a 1E2B      		or r17,r30	 ;  261	iorqi3/1	[length = 1]
 493 029c 1F7E      		andi r17,lo8(-17)	 ;  266	andqi3/2	[length = 1]
 494 029e 192B      		or r17,r25	 ;  267	iorqi3/1	[length = 1]
 495 02a0 1F7D      		andi r17,lo8(-33)	 ;  272	andqi3/2	[length = 1]
 496 02a2 182B      		or r17,r24	 ;  273	iorqi3/1	[length = 1]
 497 02a4 E32D      		mov r30,r3	 ;  2804	*movqi/1	[length = 1]
 498 02a6 E295      		swap r30	 ;  3024	*rotlqi3_4	[length = 1]
 499 02a8 EE0F      		lsl r30	 ;  3025	*ashlqi3/4	[length = 2]
 500 02aa EE0F      		lsl r30
 501 02ac E07C      		andi r30,lo8(-64)	 ;  3026	andqi3/2	[length = 1]
 502 02ae 1F7B      		andi r17,lo8(-65)	 ;  278	andqi3/2	[length = 1]
 503 02b0 1E2B      		or r17,r30	 ;  279	iorqi3/1	[length = 1]
 504 02b2 1F77      		andi r17,lo8(127)	 ;  283	andqi3/2	[length = 1]
 505 02b4 152B      		or r17,r21	 ;  284	iorqi3/1	[length = 1]
 506 02b6 E12F      		mov r30,r17	 ;  2805	*movqi/1	[length = 1]
 507 02b8 E370      		andi r30,lo8(3)	 ;  286	andqi3/2	[length = 1]
 508 02ba 01F0      		breq .L132	 ;  288	branch	[length = 1]
 509 02bc 00C0      		rjmp .L10	 ;  3187	jump	[length = 1]
 510               	.LVL28:
 511               	.L190:
 440:bertos/mware/formatwr.c **** 					flags.alternate_flag = true;
 512               		.loc 1 440 0
 513 02be 3324      		clr r3	 ;  2138	*movqi/7	[length = 2]
 514 02c0 3394      		inc r3
 441:bertos/mware/formatwr.c **** 					goto NEXT_FLAG;
 515               		.loc 1 441 0
 516 02c2 00C0      		rjmp .L10	 ;  3189	jump	[length = 1]
 517               	.LVL29:
 518               	.L191:
 443:bertos/mware/formatwr.c **** 					flags.zeropad = true;
 519               		.loc 1 443 0
 520 02c4 F1E0      		ldi r31,lo8(1)	 ;  2136	*movqi/2	[length = 1]
 521 02c6 C356      		subi r28,lo8(-157)	 ;  2806	*movqi/3	[length = 5]
 522 02c8 DF4F      		sbci r29,hi8(-157)
 523 02ca F883      		st Y,r31
 524 02cc CD59      		subi r28,lo8(157)
 525 02ce D040      		sbci r29,hi8(157)
 444:bertos/mware/formatwr.c **** 					goto NEXT_FLAG;
 526               		.loc 1 444 0
 527 02d0 00C0      		rjmp .L10	 ;  3191	jump	[length = 1]
 528               	.LVL30:
 529               	.L132:
 434:bertos/mware/formatwr.c **** 					flags.plus_space_flag = PSF_PLUS;
 530               		.loc 1 434 0
 531 02d2 61E0      		ldi r22,lo8(1)	 ;  2137	*movqi/2	[length = 1]
 532               	.LVL31:
 533               	.L10:
 448:bertos/mware/formatwr.c **** 			format++;
 534               		.loc 1 448 0
 535 02d4 0894      		sec	 ;  306	*addhi3/5	[length = 3]
 536 02d6 E11C      		adc r14,__zero_reg__
 537 02d8 F11C      		adc r15,__zero_reg__
 538               	.LVL32:
 449:bertos/mware/formatwr.c **** 		}
 539               		.loc 1 449 0
 540 02da 00C0      		rjmp .L5	 ;  3193	jump	[length = 1]
 541               	.LVL33:
 542               	.L7:
 543 02dc CC56      		subi r28,lo8(-148)	 ;  2427	*movqi/3	[length = 5]
 544 02de DF4F      		sbci r29,hi8(-148)
 545 02e0 6883      		st Y,r22
 546 02e2 C459      		subi r28,lo8(148)
 547 02e4 D040      		sbci r29,hi8(148)
 548 02e6 CE56      		subi r28,lo8(-146)	 ;  2429	*movqi/3	[length = 5]
 549 02e8 DF4F      		sbci r29,hi8(-146)
 550 02ea 7883      		st Y,r23
 551 02ec C259      		subi r28,lo8(146)
 552 02ee D040      		sbci r29,hi8(146)
 428:bertos/mware/formatwr.c **** 			switch (PGM_READ_CHAR(format))
 553               		.loc 1 428 0
 554 02f0 C056      		subi r28,lo8(-160)	 ;  49	*movqi/3	[length = 5]
 555 02f2 DF4F      		sbci r29,hi8(-160)
 556 02f4 3882      		st Y,r3
 557 02f6 C05A      		subi r28,lo8(160)
 558 02f8 D040      		sbci r29,hi8(160)
 559               	.LVL34:
 560               	.LBB25:
 452:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '*')
 561               		.loc 1 452 0
 562 02fa F701      		movw r30,r14	 ;  2807	*movhi/1	[length = 1]
 563               	/* #APP */
 564               	 ;  452 "bertos/mware/formatwr.c" 1
 565 02fc 8491      		lpm r24, Z
 566               		
 567               	 ;  0 "" 2
 568               	.LVL35:
 569               	/* #NOAPP */
 570               	.LBE25:
 571 02fe 8A32      		cpi r24,lo8(42)	 ;  316	*cmpqi/3	[length = 1]
 572 0300 01F4      		brne .L133	 ;  317	branch	[length = 1]
 454:bertos/mware/formatwr.c **** 			field_width = va_arg(ap, int);
 573               		.loc 1 454 0
 574 0302 C901      		movw r24,r18	 ;  2808	*movhi/1	[length = 1]
 575               	.LVL36:
 576 0304 0296      		adiw r24,2	 ;  319	*addhi3/2	[length = 1]
 577               	.LVL37:
 578 0306 F901      		movw r30,r18	 ;  2809	*movhi/1	[length = 1]
 579 0308 0190      		ld __tmp_reg__,Z+	 ;  321	*movhi/2	[length = 3]
 580 030a F081      		ld r31,Z
 581 030c E02D      		mov r30,__tmp_reg__
 582 030e C357      		subi r28,lo8(-141)	 ;  2810	*movhi/3	[length = 6]
 583 0310 DF4F      		sbci r29,hi8(-141)
 584 0312 F983      		std Y+1,r31
 585 0314 E883      		st Y,r30
 586 0316 CD58      		subi r28,lo8(141)
 587 0318 D040      		sbci r29,hi8(141)
 588               	.LVL38:
 455:bertos/mware/formatwr.c **** 			if (field_width < 0)
 589               		.loc 1 455 0
 590 031a F7FF      		sbrs r31,7	 ;  3171	*sbrx_and_branchhi	[length = 2]
 591 031c 00C0      		rjmp .L15
 457:bertos/mware/formatwr.c **** 				field_width = -field_width;
 592               		.loc 1 457 0
 593 031e F095      		com r31	 ;  326	neghi2/1	[length = 3]
 594 0320 E195      		neg r30
 595 0322 FF4F      		sbci r31,lo8(-1)
 596 0324 C357      		subi r28,lo8(-141)	 ;  2811	*movhi/3	[length = 6]
 597 0326 DF4F      		sbci r29,hi8(-141)
 598 0328 F983      		std Y+1,r31
 599 032a E883      		st Y,r30
 600 032c CD58      		subi r28,lo8(141)
 601 032e D040      		sbci r29,hi8(141)
 602               	.LVL39:
 458:bertos/mware/formatwr.c **** 				flags.left_adjust = true;
 603               		.loc 1 458 0
 604 0330 F1E0      		ldi r31,lo8(1)	 ;  2134	*movqi/2	[length = 1]
 605 0332 CE56      		subi r28,lo8(-146)	 ;  2812	*movqi/3	[length = 5]
 606 0334 DF4F      		sbci r29,hi8(-146)
 607 0336 F883      		st Y,r31
 608 0338 C259      		subi r28,lo8(146)
 609 033a D040      		sbci r29,hi8(146)
 610               	.LVL40:
 611               	.L15:
 460:bertos/mware/formatwr.c **** 			format++;
 612               		.loc 1 460 0
 613 033c 0894      		sec	 ;  333	*addhi3/5	[length = 3]
 614 033e E11C      		adc r14,__zero_reg__
 615 0340 F11C      		adc r15,__zero_reg__
 616               	.LVL41:
 454:bertos/mware/formatwr.c **** 			field_width = va_arg(ap, int);
 617               		.loc 1 454 0
 618 0342 9C01      		movw r18,r24	 ;  53	*movhi/1	[length = 1]
 619 0344 00C0      		rjmp .L16	 ;  3195	jump	[length = 1]
 620               	.LVL42:
 621               	.L17:
 622               	.LBB26:
 466:bertos/mware/formatwr.c **** 				field_width = field_width * 10 + (PGM_READ_CHAR(format++) - '0');
 623               		.loc 1 466 0
 624 0346 0894      		sec	 ;  339	*addhi3/5	[length = 3]
 625 0348 E11C      		adc r14,__zero_reg__
 626 034a F11C      		adc r15,__zero_reg__
 627               	.LVL43:
 628 034c FC01      		movw r30,r24	 ;  2813	*movhi/1	[length = 1]
 629               	/* #APP */
 630               	 ;  466 "bertos/mware/formatwr.c" 1
 631 034e 6491      		lpm r22, Z
 632               		
 633               	 ;  0 "" 2
 634               	.LVL44:
 635               	/* #NOAPP */
 636               	.LBE26:
 637 0350 C901      		movw r24,r18	 ;  2814	*movhi/1	[length = 1]
 638               	.LVL45:
 639 0352 880F      		lsl r24	 ;  3169	*ashlhi3_const/2	[length = 2]
 640 0354 991F      		rol r25
 641 0356 73E0      		ldi r23,3	 ;  3170	*ashlhi3_const/5	[length = 5]
 642 0358 220F      	1:	lsl r18
 643 035a 331F      		rol r19
 644 035c 7A95      		dec r23
 645 035e 01F4      		brne 1b
 646               	.LVL46:
 647 0360 280F      		add r18,r24	 ;  348	*addhi3/1	[length = 2]
 648 0362 391F      		adc r19,r25
 649 0364 2053      		subi r18,lo8(-(-48))	 ;  349	*addhi3/4	[length = 2]
 650 0366 3040      		sbci r19,hi8(-(-48))
 651 0368 260F      		add r18,r22	 ;  351	*addhi3_zero_extend	[length = 2]
 652 036a 311D      		adc r19,__zero_reg__
 653               	.LVL47:
 654 036c 00C0      		rjmp .L14	 ;  3197	jump	[length = 1]
 655               	.LVL48:
 656               	.L133:
 452:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '*')
 657               		.loc 1 452 0
 658 036e A901      		movw r20,r18	 ;  2434	*movhi/1	[length = 1]
 659 0370 20E0      		ldi r18,lo8(0)	 ;  2435	*movhi/4	[length = 2]
 660 0372 30E0      		ldi r19,hi8(0)
 661               	.LVL49:
 662               	.L14:
 663               	.LBB27:
 465:bertos/mware/formatwr.c **** 			while (PGM_READ_CHAR(format) >= '0' && PGM_READ_CHAR(format) <= '9')
 664               		.loc 1 465 0 discriminator 1
 665 0374 C701      		movw r24,r14	 ;  357	*movhi/1	[length = 1]
 666               	.LVL50:
 667 0376 F701      		movw r30,r14	 ;  2815	*movhi/1	[length = 1]
 668               	/* #APP */
 669               	 ;  465 "bertos/mware/formatwr.c" 1
 670 0378 6491      		lpm r22, Z
 671               		
 672               	 ;  0 "" 2
 673               	.LVL51:
 674               	/* #NOAPP */
 675               	.LBE27:
 676 037a 6033      		cpi r22,lo8(48)	 ;  362	*cmpqi/3	[length = 1]
 677 037c 00F0      		brlo .L181	 ;  363	branch	[length = 1]
 678               	.LVL52:
 465:bertos/mware/formatwr.c **** 			while (PGM_READ_CHAR(format) >= '0' && PGM_READ_CHAR(format) <= '9')
 679               		.loc 1 465 0 is_stmt 0 discriminator 2
 680 037e 6A33      		cpi r22,lo8(58)	 ;  370	*cmpqi/3	[length = 1]
 681 0380 00F0      		brlo .L17	 ;  371	branch	[length = 1]
 682               	.LVL53:
 683               	.L181:
 684 0382 C357      		subi r28,lo8(-141)	 ;  2438	*movhi/3	[length = 6]
 685 0384 DF4F      		sbci r29,hi8(-141)
 686 0386 3983      		std Y+1,r19
 687 0388 2883      		st Y,r18
 688 038a CD58      		subi r28,lo8(141)
 689 038c D040      		sbci r29,hi8(141)
 690 038e 9A01      		movw r18,r20	 ;  2440	*movhi/1	[length = 1]
 691               	.LVL54:
 692               	.L16:
 469:bertos/mware/formatwr.c **** 		if (flags.left_adjust)
 693               		.loc 1 469 0 is_stmt 1
 694 0390 CE56      		subi r28,lo8(-146)	 ;  2816	*movqi/4	[length = 5]
 695 0392 DF4F      		sbci r29,hi8(-146)
 696 0394 F881      		ld r31,Y
 697 0396 C259      		subi r28,lo8(146)
 698 0398 D040      		sbci r29,hi8(146)
 699 039a FF23      		tst r31	 ;  378	*cmpqi/1	[length = 1]
 700 039c 01F0      		breq .L18	 ;  379	branch	[length = 1]
 470:bertos/mware/formatwr.c **** 			flags.zeropad = false;
 701               		.loc 1 470 0
 702 039e C356      		subi r28,lo8(-157)	 ;  54	*movqi/3	[length = 5]
 703 03a0 DF4F      		sbci r29,hi8(-157)
 704 03a2 1882      		st Y,__zero_reg__
 705 03a4 CD59      		subi r28,lo8(157)
 706 03a6 D040      		sbci r29,hi8(157)
 707               	.L18:
 708               	.LVL55:
 709               	.LBB28:
 473:bertos/mware/formatwr.c **** 		if (PGM_READ_CHAR(format) == '.')
 710               		.loc 1 473 0
 711 03a8 F701      		movw r30,r14	 ;  2817	*movhi/1	[length = 1]
 712               	/* #APP */
 713               	 ;  473 "bertos/mware/formatwr.c" 1
 714 03aa 8491      		lpm r24, Z
 715               		
 716               	 ;  0 "" 2
 717               	.LVL56:
 718               	/* #NOAPP */
 719               	.LBE28:
 720 03ac 8E32      		cpi r24,lo8(46)	 ;  388	*cmpqi/3	[length = 1]
 721 03ae 01F4      		brne .L135	 ;  389	branch	[length = 1]
 722               	.LBB29:
 475:bertos/mware/formatwr.c **** 			if (PGM_READ_CHAR(++format) == '*')
 723               		.loc 1 475 0
 724 03b0 3196      		adiw r30,1	 ;  391	*addhi3/2	[length = 1]
 725               	.LVL57:
 726               	/* #APP */
 727               	 ;  475 "bertos/mware/formatwr.c" 1
 728 03b2 8491      		lpm r24, Z
 729               		
 730               	 ;  0 "" 2
 731               	.LVL58:
 732               	/* #NOAPP */
 733               	.LBE29:
 734 03b4 8A32      		cpi r24,lo8(42)	 ;  397	*cmpqi/3	[length = 1]
 735 03b6 01F4      		brne .L136	 ;  398	branch	[length = 1]
 736               	.LVL59:
 477:bertos/mware/formatwr.c **** 				precision = va_arg(ap, int);
 737               		.loc 1 477 0
 738 03b8 F901      		movw r30,r18	 ;  2819	*movhi/1	[length = 1]
 739               	.LVL60:
 740 03ba A080      		ld r10,Z	 ;  402	*movhi/2	[length = 2]
 741 03bc B180      		ldd r11,Z+1
 742               	.LVL61:
 478:bertos/mware/formatwr.c **** 				format++;
 743               		.loc 1 478 0
 744 03be 42E0      		ldi r20,lo8(2)	 ;  2820	*movhi/4	[length = 2]
 745 03c0 50E0      		ldi r21,hi8(2)
 746 03c2 E40E      		add r14,r20	 ;  404	*addhi3/1	[length = 2]
 747 03c4 F51E      		adc r15,r21
 748               	.LVL62:
 477:bertos/mware/formatwr.c **** 				precision = va_arg(ap, int);
 749               		.loc 1 477 0
 750 03c6 2E5F      		subi r18,lo8(-(2))	 ;  58	*addhi3/4	[length = 2]
 751 03c8 3F4F      		sbci r19,hi8(-(2))
 752               	.LVL63:
 753 03ca 00C0      		rjmp .L19	 ;  3199	jump	[length = 1]
 754               	.LVL64:
 755               	.L21:
 756               	.LBB30:
 484:bertos/mware/formatwr.c **** 					precision = precision * 10 + (PGM_READ_CHAR(format++) - '0');
 757               		.loc 1 484 0
 758 03cc 0894      		sec	 ;  410	*addhi3/5	[length = 3]
 759 03ce E11C      		adc r14,__zero_reg__
 760 03d0 F11C      		adc r15,__zero_reg__
 761               	.LVL65:
 762 03d2 FC01      		movw r30,r24	 ;  2821	*movhi/1	[length = 1]
 763               	/* #APP */
 764               	 ;  484 "bertos/mware/formatwr.c" 1
 765 03d4 6491      		lpm r22, Z
 766               		
 767               	 ;  0 "" 2
 768               	.LVL66:
 769               	/* #NOAPP */
 770               	.LBE30:
 771 03d6 C901      		movw r24,r18	 ;  2822	*movhi/1	[length = 1]
 772               	.LVL67:
 773 03d8 880F      		lsl r24	 ;  3167	*ashlhi3_const/2	[length = 2]
 774 03da 991F      		rol r25
 775 03dc B3E0      		ldi r27,3	 ;  3168	*ashlhi3_const/5	[length = 5]
 776 03de 220F      	1:	lsl r18
 777 03e0 331F      		rol r19
 778 03e2 BA95      		dec r27
 779 03e4 01F4      		brne 1b
 780               	.LVL68:
 781 03e6 280F      		add r18,r24	 ;  419	*addhi3/1	[length = 2]
 782 03e8 391F      		adc r19,r25
 783 03ea 2053      		subi r18,lo8(-(-48))	 ;  420	*addhi3/4	[length = 2]
 784 03ec 3040      		sbci r19,hi8(-(-48))
 785 03ee 260F      		add r18,r22	 ;  422	*addhi3_zero_extend	[length = 2]
 786 03f0 311D      		adc r19,__zero_reg__
 787               	.LVL69:
 788 03f2 00C0      		rjmp .L20	 ;  3201	jump	[length = 1]
 789               	.LVL70:
 790               	.L136:
 475:bertos/mware/formatwr.c **** 			if (PGM_READ_CHAR(++format) == '*')
 791               		.loc 1 475 0
 792 03f4 7F01      		movw r14,r30	 ;  55	*movhi/1	[length = 1]
 793               	.LVL71:
 794 03f6 AA24      		clr r10	 ;  56	*movhi/5	[length = 2]
 795 03f8 BB24      		clr r11
 796 03fa A901      		movw r20,r18	 ;  2449	*movhi/1	[length = 1]
 797 03fc 9501      		movw r18,r10	 ;  2450	*movhi/1	[length = 1]
 798               	.LVL72:
 799               	.L20:
 800               	.LBB31:
 483:bertos/mware/formatwr.c **** 				while (PGM_READ_CHAR(format) >= '0' && PGM_READ_CHAR(format) <= '9')
 801               		.loc 1 483 0 discriminator 1
 802 03fe C701      		movw r24,r14	 ;  428	*movhi/1	[length = 1]
 803               	.LVL73:
 804 0400 F701      		movw r30,r14	 ;  2823	*movhi/1	[length = 1]
 805               	/* #APP */
 806               	 ;  483 "bertos/mware/formatwr.c" 1
 807 0402 6491      		lpm r22, Z
 808               		
 809               	 ;  0 "" 2
 810               	.LVL74:
 811               	/* #NOAPP */
 812               	.LBE31:
 813 0404 6033      		cpi r22,lo8(48)	 ;  433	*cmpqi/3	[length = 1]
 814 0406 00F0      		brlo .L182	 ;  434	branch	[length = 1]
 815               	.LVL75:
 483:bertos/mware/formatwr.c **** 				while (PGM_READ_CHAR(format) >= '0' && PGM_READ_CHAR(format) <= '9')
 816               		.loc 1 483 0 is_stmt 0 discriminator 2
 817 0408 6A33      		cpi r22,lo8(58)	 ;  441	*cmpqi/3	[length = 1]
 818 040a 00F0      		brlo .L21	 ;  442	branch	[length = 1]
 819 040c 00C0      		rjmp .L182	 ;  3204	jump	[length = 1]
 820               	.LVL76:
 821               	.L135:
 488:bertos/mware/formatwr.c **** 			precision = -1;
 822               		.loc 1 488 0 is_stmt 1
 823 040e AA24      		clr r10	 ;  57	*movhi/5	[length = 3]
 824 0410 AA94      		dec r10
 825 0412 BA2C      		mov r11,r10
 826 0414 00C0      		rjmp .L19	 ;  3206	jump	[length = 1]
 827               	.LVL77:
 828               	.L182:
 829 0416 5901      		movw r10,r18	 ;  2454	*movhi/1	[length = 1]
 830 0418 9A01      		movw r18,r20	 ;  2455	*movhi/1	[length = 1]
 831               	.LVL78:
 832               	.L19:
 833               	.LBB32:
 504:bertos/mware/formatwr.c **** 		switch (PGM_READ_CHAR(format))
 834               		.loc 1 504 0
 835 041a F701      		movw r30,r14	 ;  2824	*movhi/1	[length = 1]
 836               	/* #APP */
 837               	 ;  504 "bertos/mware/formatwr.c" 1
 838 041c 8491      		lpm r24, Z
 839               		
 840               	 ;  0 "" 2
 841               	.LVL79:
 842               	/* #NOAPP */
 843               	.LBE32:
 844 041e 8836      		cpi r24,lo8(104)	 ;  454	*cmpqi/3	[length = 1]
 845 0420 01F0      		breq .L24	 ;  455	branch	[length = 1]
 846 0422 8936      		cpi r24,lo8(105)	 ;  456	*cmpqi/3	[length = 1]
 847 0424 00F4      		brsh .L26	 ;  457	branch	[length = 1]
 848 0426 8C34      		cpi r24,lo8(76)	 ;  458	*cmpqi/3	[length = 1]
 849 0428 01F4      		brne .L137	 ;  459	branch	[length = 1]
 850 042a 00C0      		rjmp .L138	 ;  3209	jump	[length = 1]
 851               	.L26:
 852 042c 8C36      		cpi r24,lo8(108)	 ;  463	*cmpqi/3	[length = 1]
 853 042e 01F0      		breq .L138	 ;  464	branch	[length = 1]
 854 0430 8A37      		cpi r24,lo8(122)	 ;  465	*cmpqi/3	[length = 1]
 855 0432 01F4      		brne .L137	 ;  466	branch	[length = 1]
 500:bertos/mware/formatwr.c **** 		flags.l_L_modifier = false;
 856               		.loc 1 500 0
 857 0434 CF56      		subi r28,lo8(-145)	 ;  59	*movqi/3	[length = 5]
 858 0436 DF4F      		sbci r29,hi8(-145)
 859 0438 1882      		st Y,__zero_reg__
 860 043a C159      		subi r28,lo8(145)
 861 043c D040      		sbci r29,hi8(145)
 862 043e 00C0      		rjmp .L23	 ;  3211	jump	[length = 1]
 863               	.L138:
 512:bertos/mware/formatwr.c **** 				flags.l_L_modifier = true;
 864               		.loc 1 512 0
 865 0440 F1E0      		ldi r31,lo8(1)	 ;  2133	*movqi/2	[length = 1]
 866 0442 CF56      		subi r28,lo8(-145)	 ;  2825	*movqi/3	[length = 5]
 867 0444 DF4F      		sbci r29,hi8(-145)
 868 0446 F883      		st Y,r31
 869 0448 C159      		subi r28,lo8(145)
 870 044a D040      		sbci r29,hi8(145)
 871               	.L23:
 872               	.LVL80:
 515:bertos/mware/formatwr.c **** 				format++;
 873               		.loc 1 515 0
 874 044c 0894      		sec	 ;  474	*addhi3/5	[length = 3]
 875 044e E11C      		adc r14,__zero_reg__
 876 0450 F11C      		adc r15,__zero_reg__
 877               	.LVL81:
 501:bertos/mware/formatwr.c **** 		flags.h_modifier = false;
 878               		.loc 1 501 0
 879 0452 CB56      		subi r28,lo8(-149)	 ;  63	*movqi/3	[length = 5]
 880 0454 DF4F      		sbci r29,hi8(-149)
 881 0456 1882      		st Y,__zero_reg__
 882 0458 C559      		subi r28,lo8(149)
 883 045a D040      		sbci r29,hi8(149)
 516:bertos/mware/formatwr.c **** 				break;
 884               		.loc 1 516 0
 885 045c 00C0      		rjmp .L22	 ;  3213	jump	[length = 1]
 886               	.LVL82:
 887               	.L24:
 520:bertos/mware/formatwr.c **** 				format++;
 888               		.loc 1 520 0
 889 045e 0894      		sec	 ;  481	*addhi3/5	[length = 3]
 890 0460 E11C      		adc r14,__zero_reg__
 891 0462 F11C      		adc r15,__zero_reg__
 892               	.LVL83:
 519:bertos/mware/formatwr.c **** 				flags.h_modifier = true;
 893               		.loc 1 519 0
 894 0464 41E0      		ldi r20,lo8(1)	 ;  2132	*movqi/2	[length = 1]
 895 0466 CB56      		subi r28,lo8(-149)	 ;  2826	*movqi/3	[length = 5]
 896 0468 DF4F      		sbci r29,hi8(-149)
 897 046a 4883      		st Y,r20
 898 046c C559      		subi r28,lo8(149)
 899 046e D040      		sbci r29,hi8(149)
 900 0470 00C0      		rjmp .L186	 ;  3215	jump	[length = 1]
 901               	.LVL84:
 902               	.L137:
 501:bertos/mware/formatwr.c **** 		flags.h_modifier = false;
 903               		.loc 1 501 0
 904 0472 CB56      		subi r28,lo8(-149)	 ;  61	*movqi/3	[length = 5]
 905 0474 DF4F      		sbci r29,hi8(-149)
 906 0476 1882      		st Y,__zero_reg__
 907 0478 C559      		subi r28,lo8(149)
 908 047a D040      		sbci r29,hi8(149)
 909               	.LVL85:
 910               	.L186:
 500:bertos/mware/formatwr.c **** 		flags.l_L_modifier = false;
 911               		.loc 1 500 0
 912 047c CF56      		subi r28,lo8(-145)	 ;  62	*movqi/3	[length = 5]
 913 047e DF4F      		sbci r29,hi8(-145)
 914 0480 1882      		st Y,__zero_reg__
 915 0482 C159      		subi r28,lo8(145)
 916 0484 D040      		sbci r29,hi8(145)
 917               	.LVL86:
 918               	.L22:
 919               	.LBB33:
 530:bertos/mware/formatwr.c **** 		switch (format_flag = PGM_READ_CHAR(format++))
 920               		.loc 1 530 0
 921 0486 C701      		movw r24,r14	 ;  2827	*movhi/1	[length = 1]
 922               	.LVL87:
 923 0488 0196      		adiw r24,1	 ;  489	*addhi3/2	[length = 1]
 924 048a C956      		subi r28,lo8(-151)	 ;  2828	*movhi/3	[length = 6]
 925 048c DF4F      		sbci r29,hi8(-151)
 926 048e 9983      		std Y+1,r25
 927 0490 8883      		st Y,r24
 928 0492 C759      		subi r28,lo8(151)
 929 0494 D040      		sbci r29,hi8(151)
 930               	.LVL88:
 931 0496 F701      		movw r30,r14	 ;  2829	*movhi/1	[length = 1]
 932               	.LVL89:
 933               	/* #APP */
 934               	 ;  530 "bertos/mware/formatwr.c" 1
 935 0498 0491      		lpm r16, Z
 936               		
 937               	 ;  0 "" 2
 938               	.LVL90:
 939               	/* #NOAPP */
 940               	.LBE33:
 941 049a 202E      		mov r2,r16	 ;  494	*movqi/1	[length = 1]
 942               	.LVL91:
 943 049c 0536      		cpi r16,lo8(101)	 ;  496	*cmpqi/3	[length = 1]
 944 049e 01F4      		brne .+2	 ;  497	branch	[length = 2]
 945 04a0 00C0      		rjmp .L188
 946 04a2 0636      		cpi r16,lo8(102)	 ;  498	*cmpqi/3	[length = 1]
 947 04a4 04F4      		brge .L38	 ;  499	branch	[length = 1]
 948 04a6 0335      		cpi r16,lo8(83)	 ;  500	*cmpqi/3	[length = 1]
 949 04a8 01F4      		brne .+2	 ;  501	branch	[length = 2]
 950 04aa 00C0      		rjmp .L140
 951 04ac 0435      		cpi r16,lo8(84)	 ;  502	*cmpqi/3	[length = 1]
 952 04ae 04F4      		brge .L39	 ;  503	branch	[length = 1]
 953 04b0 0534      		cpi r16,lo8(69)	 ;  504	*cmpqi/3	[length = 1]
 954 04b2 01F4      		brne .+2	 ;  505	branch	[length = 2]
 955 04b4 00C0      		rjmp .L188
 956 04b6 0734      		cpi r16,lo8(71)	 ;  506	*cmpqi/3	[length = 1]
 957 04b8 01F4      		brne .+2	 ;  507	branch	[length = 2]
 958 04ba 00C0      		rjmp .L30
 959 04bc 0023      		tst r16	 ;  508	*cmpqi/1	[length = 1]
 960 04be 01F4      		brne .+2	 ;  509	branch	[length = 2]
 961 04c0 00C0      		rjmp .L139
 962 04c2 00C0      		rjmp .L27	 ;  3218	jump	[length = 1]
 963               	.L39:
 964 04c4 0336      		cpi r16,lo8(99)	 ;  513	*cmpqi/3	[length = 1]
 965 04c6 01F0      		breq .L33	 ;  514	branch	[length = 1]
 966 04c8 0436      		cpi r16,lo8(100)	 ;  515	*cmpqi/3	[length = 1]
 967 04ca 04F0      		brlt .+2	 ;  516	branch	[length = 2]
 968 04cc 00C0      		rjmp .L34
 969 04ce 0835      		cpi r16,lo8(88)	 ;  517	*cmpqi/3	[length = 1]
 970 04d0 01F4      		brne .L27	 ;  518	branch	[length = 1]
 971 04d2 00C0      		rjmp .L32	 ;  3221	jump	[length = 1]
 972               	.L38:
 973 04d4 0037      		cpi r16,lo8(112)	 ;  522	*cmpqi/3	[length = 1]
 974 04d6 01F4      		brne .+2	 ;  523	branch	[length = 2]
 975 04d8 00C0      		rjmp .L32
 976 04da 0137      		cpi r16,lo8(113)	 ;  524	*cmpqi/3	[length = 1]
 977 04dc 04F4      		brge .L40	 ;  525	branch	[length = 1]
 978 04de 0736      		cpi r16,lo8(103)	 ;  526	*cmpqi/3	[length = 1]
 979 04e0 01F4      		brne .+2	 ;  527	branch	[length = 2]
 980 04e2 00C0      		rjmp .L30
 981 04e4 0736      		cpi r16,lo8(103)	 ;  528	*cmpqi/3	[length = 1]
 982 04e6 04F4      		brge .+2	 ;  529	branch	[length = 2]
 983 04e8 00C0      		rjmp .L141
 984 04ea 0936      		cpi r16,lo8(105)	 ;  530	*cmpqi/3	[length = 1]
 985 04ec 01F4      		brne .L27	 ;  531	branch	[length = 1]
 986 04ee 00C0      		rjmp .L34	 ;  3224	jump	[length = 1]
 987               	.L40:
 988 04f0 0537      		cpi r16,lo8(117)	 ;  535	*cmpqi/3	[length = 1]
 989 04f2 01F4      		brne .+2	 ;  536	branch	[length = 2]
 990 04f4 00C0      		rjmp .L32
 991 04f6 0837      		cpi r16,lo8(120)	 ;  537	*cmpqi/3	[length = 1]
 992 04f8 01F4      		brne .+2	 ;  538	branch	[length = 2]
 993 04fa 00C0      		rjmp .L142
 994 04fc 0337      		cpi r16,lo8(115)	 ;  539	*cmpqi/3	[length = 1]
 995 04fe 01F4      		brne .L27	 ;  540	branch	[length = 1]
 420:bertos/mware/formatwr.c **** 		flags.progmem = false;
 996               		.loc 1 420 0
 997 0500 00E0      		ldi r16,lo8(0)	 ;  66	*movqi/2	[length = 1]
 998               	.LVL92:
 999 0502 00C0      		rjmp .L31	 ;  3226	jump	[length = 1]
 1000               	.L27:
 530:bertos/mware/formatwr.c **** 		switch (format_flag = PGM_READ_CHAR(format++))
 1001               		.loc 1 530 0
 1002 0504 C157      		subi r28,lo8(-143)	 ;  137	*movhi/3	[length = 6]
 1003 0506 DF4F      		sbci r29,hi8(-143)
 1004 0508 3983      		std Y+1,r19
 1005 050a 2883      		st Y,r18
 1006 050c CF58      		subi r28,lo8(143)
 1007 050e D040      		sbci r29,hi8(143)
 1008 0510 00C0      		rjmp .L189	 ;  3228	jump	[length = 1]
 1009               	.L33:
 563:bertos/mware/formatwr.c **** 				buf[0] = va_arg(ap, int);
 1010               		.loc 1 563 0
 1011 0512 A901      		movw r20,r18	 ;  2831	*movhi/1	[length = 1]
 1012 0514 4E5F      		subi r20,lo8(-(2))	 ;  557	*addhi3/4	[length = 2]
 1013 0516 5F4F      		sbci r21,hi8(-(2))
 1014 0518 C157      		subi r28,lo8(-143)	 ;  2832	*movhi/3	[length = 6]
 1015 051a DF4F      		sbci r29,hi8(-143)
 1016 051c 5983      		std Y+1,r21
 1017 051e 4883      		st Y,r20
 1018 0520 CF58      		subi r28,lo8(143)
 1019 0522 D040      		sbci r29,hi8(143)
 1020               	.LVL93:
 1021 0524 F901      		movw r30,r18	 ;  2833	*movhi/1	[length = 1]
 1022 0526 8081      		ld r24,Z	 ;  559	*movqi/4	[length = 1]
 1023               	.LVL94:
 1024 0528 8983      		std Y+1,r24	 ;  560	*movqi/3	[length = 1]
 1025               	.LVL95:
 420:bertos/mware/formatwr.c **** 		flags.progmem = false;
 1026               		.loc 1 420 0
 1027 052a 00E0      		ldi r16,lo8(0)	 ;  123	*movqi/2	[length = 1]
 564:bertos/mware/formatwr.c **** 				ptr++;
 1028               		.loc 1 564 0
 1029 052c DE01      		movw r26,r28	 ;  2834	*movhi/1	[length = 1]
 1030 052e 1296      		adiw r26,2	 ;  2128	*addhi3/2	[length = 1]
 422:bertos/mware/formatwr.c **** 		ptr = buf_pointer = &buf[0];
 1031               		.loc 1 422 0
 1032 0530 2E01      		movw r4,r28	 ;  2835	*movhi/1	[length = 1]
 1033 0532 0894      		sec	 ;  2129	*addhi3/5	[length = 3]
 1034 0534 411C      		adc r4,__zero_reg__
 1035 0536 511C      		adc r5,__zero_reg__
 565:bertos/mware/formatwr.c **** 				break;
 1036               		.loc 1 565 0
 1037 0538 00C0      		rjmp .L28	 ;  3230	jump	[length = 1]
 1038               	.LVL96:
 1039               	.L140:
 570:bertos/mware/formatwr.c **** 				flags.progmem = true;
 1040               		.loc 1 570 0
 1041 053a 01E0      		ldi r16,lo8(1)	 ;  2127	*movqi/2	[length = 1]
 1042               	.L31:
 1043               	.LVL97:
 575:bertos/mware/formatwr.c **** 				if ( !(buf_pointer = va_arg(ap, char *)) )
 1044               		.loc 1 575 0
 1045 053c A901      		movw r20,r18	 ;  2836	*movhi/1	[length = 1]
 1046 053e 4E5F      		subi r20,lo8(-(2))	 ;  567	*addhi3/4	[length = 2]
 1047 0540 5F4F      		sbci r21,hi8(-(2))
 1048 0542 C157      		subi r28,lo8(-143)	 ;  2837	*movhi/3	[length = 6]
 1049 0544 DF4F      		sbci r29,hi8(-143)
 1050 0546 5983      		std Y+1,r21
 1051 0548 4883      		st Y,r20
 1052 054a CF58      		subi r28,lo8(143)
 1053 054c D040      		sbci r29,hi8(143)
 1054               	.LVL98:
 1055 054e F901      		movw r30,r18	 ;  2838	*movhi/1	[length = 1]
 1056 0550 4080      		ld r4,Z	 ;  569	*movhi/2	[length = 2]
 1057 0552 5180      		ldd r5,Z+1
 1058               	.LVL99:
 1059 0554 4114      		cp r4,__zero_reg__	 ;  571	*cmphi/2	[length = 2]
 1060 0556 5104      		cpc r5,__zero_reg__
 1061 0558 01F4      		brne .L41	 ;  572	branch	[length = 1]
 576:bertos/mware/formatwr.c **** 					buf_pointer = null_pointer;
 1062               		.loc 1 576 0
 1063 055a E0E0      		ldi r30,lo8(null_pointer.1419)	 ;  3166	*reload_inhi	[length = 4]
 1064 055c 4E2E      		mov r4,r30
 1065 055e E0E0      		ldi r30,hi8(null_pointer.1419)
 1066 0560 5E2E      		mov r5,r30
 1067               	.L41:
 1068               	.LVL100:
 577:bertos/mware/formatwr.c **** 				if (precision < 0)
 1069               		.loc 1 577 0
 1070 0562 B7FE      		sbrs r11,7	 ;  3165	*sbrx_and_branchhi	[length = 2]
 1071 0564 00C0      		rjmp .L42
 578:bertos/mware/formatwr.c **** 					precision = 10000;
 1072               		.loc 1 578 0
 1073 0566 70E1      		ldi r23,lo8(10000)	 ;  3164	*reload_inhi	[length = 4]
 1074 0568 A72E      		mov r10,r23
 1075 056a 77E2      		ldi r23,hi8(10000)
 1076 056c B72E      		mov r11,r23
 1077               	.LVL101:
 1078               	.L42:
 586:bertos/mware/formatwr.c **** 				if (flags.progmem)
 1079               		.loc 1 586 0
 1080 056e 0023      		tst r16	 ;  584	*cmpqi/1	[length = 1]
 1081 0570 01F4      		brne .L145	 ;  585	branch	[length = 1]
 1082 0572 9201      		movw r18,r4	 ;  587	*movhi/1	[length = 1]
 1083 0574 40E0      		ldi r20,lo8(0)	 ;  72	*movhi/4	[length = 2]
 1084 0576 50E0      		ldi r21,hi8(0)
 1085               	.LVL102:
 1086 0578 00C0      		rjmp .L44	 ;  3232	jump	[length = 1]
 1087               	.LVL103:
 1088               	.L45:
 589:bertos/mware/formatwr.c **** 						++ptr;
 1089               		.loc 1 589 0 discriminator 1
 1090 057a 1196      		adiw r26,1	 ;  591	*addhi3/2	[length = 1]
 1091               	.LVL104:
 588:bertos/mware/formatwr.c **** 					for (n=0; pgm_read_char(ptr) && n < precision; n++)
 1092               		.loc 1 588 0 discriminator 1
 1093 057c 2F5F      		subi r18,lo8(-(1))	 ;  593	*addhi3/4	[length = 2]
 1094 057e 3F4F      		sbci r19,hi8(-(1))
 1095               	.LVL105:
 1096 0580 00C0      		rjmp .L43	 ;  3234	jump	[length = 1]
 1097               	.LVL106:
 1098               	.L145:
 586:bertos/mware/formatwr.c **** 				if (flags.progmem)
 1099               		.loc 1 586 0
 1100 0582 D201      		movw r26,r4	 ;  70	*movhi/1	[length = 1]
 1101 0584 20E0      		ldi r18,lo8(0)	 ;  71	*movhi/4	[length = 2]
 1102 0586 30E0      		ldi r19,hi8(0)
 1103               	.LVL107:
 1104               	.L43:
 1105               	.LBB34:
 588:bertos/mware/formatwr.c **** 					for (n=0; pgm_read_char(ptr) && n < precision; n++)
 1106               		.loc 1 588 0 discriminator 1
 1107 0588 FD01      		movw r30,r26	 ;  2839	*movhi/1	[length = 1]
 1108               	/* #APP */
 1109               	 ;  588 "bertos/mware/formatwr.c" 1
 1110 058a 8491      		lpm r24, Z
 1111               		
 1112               	 ;  0 "" 2
 1113               	.LVL108:
 1114               	/* #NOAPP */
 1115               	.LBE34:
 1116 058c 8823      		tst r24	 ;  603	*cmpqi/1	[length = 1]
 1117 058e 01F4      		brne .+2	 ;  604	branch	[length = 2]
 1118 0590 00C0      		rjmp .L28
 588:bertos/mware/formatwr.c **** 					for (n=0; pgm_read_char(ptr) && n < precision; n++)
 1119               		.loc 1 588 0 is_stmt 0 discriminator 2
 1120 0592 2A15      		cp r18,r10	 ;  607	*cmphi/3	[length = 2]
 1121 0594 3B05      		cpc r19,r11
 1122 0596 04F0      		brlt .L45	 ;  608	branch	[length = 1]
 1123 0598 00C0      		rjmp .L28	 ;  3237	jump	[length = 1]
 1124               	.LVL109:
 1125               	.L46:
 593:bertos/mware/formatwr.c **** 				for (n=0; *ptr && n < precision; n++)
 1126               		.loc 1 593 0 is_stmt 1 discriminator 1
 1127 059a 4F5F      		subi r20,lo8(-(1))	 ;  614	*addhi3/4	[length = 2]
 1128 059c 5F4F      		sbci r21,hi8(-(1))
 1129               	.LVL110:
 1130               	.L44:
 1131 059e D901      		movw r26,r18	 ;  618	*movhi/1	[length = 1]
 1132               	.LVL111:
 1133 05a0 2F5F      		subi r18,lo8(-(1))	 ;  621	*addhi3/4	[length = 2]
 1134 05a2 3F4F      		sbci r19,hi8(-(1))
 1135               	.LVL112:
 1136 05a4 8C91      		ld r24,X	 ;  622	*movqi/4	[length = 1]
 1137 05a6 8823      		tst r24	 ;  623	*cmpqi/1	[length = 1]
 1138 05a8 01F4      		brne .+2	 ;  624	branch	[length = 2]
 1139 05aa 00C0      		rjmp .L28
 593:bertos/mware/formatwr.c **** 				for (n=0; *ptr && n < precision; n++)
 1140               		.loc 1 593 0 is_stmt 0 discriminator 2
 1141 05ac 4A15      		cp r20,r10	 ;  627	*cmphi/3	[length = 2]
 1142 05ae 5B05      		cpc r21,r11
 1143 05b0 04F0      		brlt .L46	 ;  628	branch	[length = 1]
 1144 05b2 00C0      		rjmp .L28	 ;  3240	jump	[length = 1]
 1145               	.LVL113:
 1146               	.L32:
 607:bertos/mware/formatwr.c **** 				if (format_flag == 'p')
 1147               		.loc 1 607 0 is_stmt 1
 1148 05b4 0037      		cpi r16,lo8(112)	 ;  635	*cmpqi/3	[length = 1]
 1149 05b6 01F4      		brne .L146	 ;  636	branch	[length = 1]
 609:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(unsigned short)va_arg(ap, char *);
 1150               		.loc 1 609 0
 1151 05b8 A901      		movw r20,r18	 ;  2840	*movhi/1	[length = 1]
 1152 05ba 4E5F      		subi r20,lo8(-(2))	 ;  638	*addhi3/4	[length = 2]
 1153 05bc 5F4F      		sbci r21,hi8(-(2))
 1154 05be C157      		subi r28,lo8(-143)	 ;  2841	*movhi/3	[length = 6]
 1155 05c0 DF4F      		sbci r29,hi8(-143)
 1156 05c2 5983      		std Y+1,r21
 1157 05c4 4883      		st Y,r20
 1158 05c6 CF58      		subi r28,lo8(143)
 1159 05c8 D040      		sbci r29,hi8(143)
 1160               	.LVL114:
 1161 05ca F901      		movw r30,r18	 ;  2842	*movhi/1	[length = 1]
 1162 05cc 8081      		ld r24,Z	 ;  640	*movhi/2	[length = 2]
 1163 05ce 9181      		ldd r25,Z+1
 1164 05d0 A0E0      		ldi r26,lo8(0)	 ;  3023	*movhi/4	[length = 2]
 1165 05d2 B0E0      		ldi r27,hi8(0)
 1166               	.LVL115:
 423:bertos/mware/formatwr.c **** 		hex = HEX_tab;
 1167               		.loc 1 423 0
 1168 05d4 60E0      		ldi r22,lo8(HEX_tab)	 ;  3163	*reload_inhi	[length = 4]
 1169 05d6 C62E      		mov r12,r22
 1170 05d8 60E0      		ldi r22,hi8(HEX_tab)
 1171 05da D62E      		mov r13,r22
 1172 05dc 00C0      		rjmp .L47	 ;  3242	jump	[length = 1]
 1173               	.LVL116:
 1174               	.L142:
 603:bertos/mware/formatwr.c **** 				hex = hex_tab;
 1175               		.loc 1 603 0
 1176 05de E0E0      		ldi r30,lo8(hex_tab)	 ;  3162	*reload_inhi	[length = 4]
 1177 05e0 CE2E      		mov r12,r30
 1178 05e2 E0E0      		ldi r30,hi8(hex_tab)
 1179 05e4 DE2E      		mov r13,r30
 1180 05e6 00C0      		rjmp .L37	 ;  3244	jump	[length = 1]
 1181               	.LVL117:
 1182               	.L146:
 423:bertos/mware/formatwr.c **** 		hex = HEX_tab;
 1183               		.loc 1 423 0
 1184 05e8 70E0      		ldi r23,lo8(HEX_tab)	 ;  3161	*reload_inhi	[length = 4]
 1185 05ea C72E      		mov r12,r23
 1186 05ec 70E0      		ldi r23,hi8(HEX_tab)
 1187 05ee D72E      		mov r13,r23
 1188               	.LVL118:
 1189               	.L37:
 613:bertos/mware/formatwr.c **** 				else if (flags.l_L_modifier)
 1190               		.loc 1 613 0
 1191 05f0 CF56      		subi r28,lo8(-145)	 ;  2843	*movqi/4	[length = 5]
 1192 05f2 DF4F      		sbci r29,hi8(-145)
 1193 05f4 F881      		ld r31,Y
 1194 05f6 C159      		subi r28,lo8(145)
 1195 05f8 D040      		sbci r29,hi8(145)
 614:bertos/mware/formatwr.c **** 					ulong = va_arg(ap, unsigned long);
 1196               		.loc 1 614 0
 1197 05fa A901      		movw r20,r18	 ;  2844	*movhi/1	[length = 1]
 613:bertos/mware/formatwr.c **** 				else if (flags.l_L_modifier)
 1198               		.loc 1 613 0
 1199 05fc FF23      		tst r31	 ;  647	*cmpqi/1	[length = 1]
 1200 05fe 01F0      		breq .L48	 ;  648	branch	[length = 1]
 614:bertos/mware/formatwr.c **** 					ulong = va_arg(ap, unsigned long);
 1201               		.loc 1 614 0
 1202 0600 4C5F      		subi r20,lo8(-(4))	 ;  650	*addhi3/4	[length = 2]
 1203 0602 5F4F      		sbci r21,hi8(-(4))
 1204 0604 C157      		subi r28,lo8(-143)	 ;  2845	*movhi/3	[length = 6]
 1205 0606 DF4F      		sbci r29,hi8(-143)
 1206 0608 5983      		std Y+1,r21
 1207 060a 4883      		st Y,r20
 1208 060c CF58      		subi r28,lo8(143)
 1209 060e D040      		sbci r29,hi8(143)
 1210               	.LVL119:
 1211 0610 F901      		movw r30,r18	 ;  2846	*movhi/1	[length = 1]
 1212 0612 8081      		ld r24,Z	 ;  652	*movsi/3	[length = 4]
 1213 0614 9181      		ldd r25,Z+1
 1214 0616 A281      		ldd r26,Z+2
 1215 0618 B381      		ldd r27,Z+3
 1216               	.LVL120:
 1217 061a 00C0      		rjmp .L47	 ;  3246	jump	[length = 1]
 1218               	.LVL121:
 1219               	.L48:
 1220 061c 4E5F      		subi r20,lo8(-(2))	 ;  2041	*addhi3/4	[length = 2]
 1221 061e 5F4F      		sbci r21,hi8(-(2))
 1222 0620 F901      		movw r30,r18	 ;  2848	*movhi/1	[length = 1]
 1223 0622 8081      		ld r24,Z	 ;  2044	*movhi/2	[length = 2]
 1224 0624 9181      		ldd r25,Z+1
 616:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(unsigned short)va_arg(ap, unsigned int);
 1225               		.loc 1 616 0
 1226 0626 C157      		subi r28,lo8(-143)	 ;  2042	*movhi/3	[length = 6]
 1227 0628 DF4F      		sbci r29,hi8(-143)
 1228 062a 5983      		std Y+1,r21
 1229 062c 4883      		st Y,r20
 1230 062e CF58      		subi r28,lo8(143)
 1231 0630 D040      		sbci r29,hi8(143)
 1232               	.LVL122:
 1233 0632 A0E0      		ldi r26,lo8(0)	 ;  3021	*movhi/4	[length = 2]
 1234 0634 B0E0      		ldi r27,hi8(0)
 1235               	.L47:
 1236               	.LVL123:
 624:bertos/mware/formatwr.c **** 					(format_flag == 'u') ? DIV_DEC : DIV_HEX;
 1237               		.loc 1 624 0
 1238 0636 21E0      		ldi r18,lo8(1)	 ;  2120	*movqi/2	[length = 1]
 1239 0638 CD56      		subi r28,lo8(-147)	 ;  2850	*movqi/3	[length = 5]
 1240 063a DF4F      		sbci r29,hi8(-147)
 1241 063c 2883      		st Y,r18
 1242 063e C359      		subi r28,lo8(147)
 1243 0640 D040      		sbci r29,hi8(147)
 1244 0642 0537      		cpi r16,lo8(117)	 ;  680	*cmpqi/3	[length = 1]
 1245 0644 01F4      		brne .L50	 ;  681	branch	[length = 1]
 1246 0646 CD56      		subi r28,lo8(-147)	 ;  682	*movqi/3	[length = 5]
 1247 0648 DF4F      		sbci r29,hi8(-147)
 1248 064a 1882      		st Y,__zero_reg__
 1249 064c C359      		subi r28,lo8(147)
 1250 064e D040      		sbci r29,hi8(147)
 1251               	.L50:
 1252               	.LVL124:
 625:bertos/mware/formatwr.c **** 				flags.plus_space_flag = PSF_NONE;
 1253               		.loc 1 625 0
 1254 0650 CC56      		subi r28,lo8(-148)	 ;  76	*movqi/3	[length = 5]
 1255 0652 DF4F      		sbci r29,hi8(-148)
 1256 0654 1882      		st Y,__zero_reg__
 1257 0656 C459      		subi r28,lo8(148)
 1258 0658 D040      		sbci r29,hi8(148)
 626:bertos/mware/formatwr.c **** 				goto INTEGRAL_CONVERSION;
 1259               		.loc 1 626 0
 1260 065a 00C0      		rjmp .L51	 ;  3248	jump	[length = 1]
 1261               	.LVL125:
 1262               	.L34:
 630:bertos/mware/formatwr.c **** 				if (flags.l_L_modifier)
 1263               		.loc 1 630 0
 1264 065c CF56      		subi r28,lo8(-145)	 ;  2851	*movqi/4	[length = 5]
 1265 065e DF4F      		sbci r29,hi8(-145)
 1266 0660 4881      		ld r20,Y
 1267 0662 C159      		subi r28,lo8(145)
 1268 0664 D040      		sbci r29,hi8(145)
 1269 0666 4423      		tst r20	 ;  690	*cmpqi/1	[length = 1]
 1270 0668 01F0      		breq .L52	 ;  691	branch	[length = 1]
 631:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(long)va_arg(ap, long);
 1271               		.loc 1 631 0
 1272 066a C901      		movw r24,r18	 ;  2852	*movhi/1	[length = 1]
 1273 066c 0496      		adiw r24,4	 ;  693	*addhi3/2	[length = 1]
 1274 066e C157      		subi r28,lo8(-143)	 ;  2853	*movhi/3	[length = 6]
 1275 0670 DF4F      		sbci r29,hi8(-143)
 1276 0672 9983      		std Y+1,r25
 1277 0674 8883      		st Y,r24
 1278 0676 CF58      		subi r28,lo8(143)
 1279 0678 D040      		sbci r29,hi8(143)
 1280               	.LVL126:
 1281 067a F901      		movw r30,r18	 ;  2854	*movhi/1	[length = 1]
 1282 067c 8081      		ld r24,Z	 ;  695	*movsi/3	[length = 4]
 1283 067e 9181      		ldd r25,Z+1
 1284 0680 A281      		ldd r26,Z+2
 1285 0682 B381      		ldd r27,Z+3
 1286               	.LVL127:
 1287 0684 00C0      		rjmp .L53	 ;  3250	jump	[length = 1]
 1288               	.LVL128:
 1289               	.L52:
 633:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(long)va_arg(ap, int);
 1290               		.loc 1 633 0
 1291 0686 A901      		movw r20,r18	 ;  2855	*movhi/1	[length = 1]
 1292 0688 4E5F      		subi r20,lo8(-(2))	 ;  701	*addhi3/4	[length = 2]
 1293 068a 5F4F      		sbci r21,hi8(-(2))
 1294 068c C157      		subi r28,lo8(-143)	 ;  2856	*movhi/3	[length = 6]
 1295 068e DF4F      		sbci r29,hi8(-143)
 1296 0690 5983      		std Y+1,r21
 1297 0692 4883      		st Y,r20
 1298 0694 CF58      		subi r28,lo8(143)
 1299 0696 D040      		sbci r29,hi8(143)
 1300               	.LVL129:
 1301 0698 F901      		movw r30,r18	 ;  2857	*movhi/1	[length = 1]
 1302 069a 8081      		ld r24,Z	 ;  703	*movhi/2	[length = 2]
 1303 069c 9181      		ldd r25,Z+1
 1304 069e AA27      		clr r26	 ;  704	extendhisi2/1	[length = 4]
 1305 06a0 97FD      		sbrc r25,7
 1306 06a2 A095      		com r26
 1307 06a4 BA2F      		mov r27,r26
 1308               	.LVL130:
 1309               	.L53:
 636:bertos/mware/formatwr.c **** 				if ((signed long)ulong < 0)
 1310               		.loc 1 636 0
 1311 06a6 B7FF      		sbrs r27,7	 ;  3160	*sbrx_and_branchsi	[length = 2]
 1312 06a8 00C0      		rjmp .L147
 1313               	.LVL131:
 639:bertos/mware/formatwr.c **** 					ulong = (unsigned long)(-((signed long)ulong));
 1314               		.loc 1 639 0
 1315 06aa B095      		com r27	 ;  715	negsi2/1	[length = 7]
 1316 06ac A095      		com r26
 1317 06ae 9095      		com r25
 1318 06b0 8195      		neg r24
 1319 06b2 9F4F      		sbci r25,lo8(-1)
 1320 06b4 AF4F      		sbci r26,lo8(-1)
 1321 06b6 BF4F      		sbci r27,lo8(-1)
 1322               	.LVL132:
 642:bertos/mware/formatwr.c **** 				flags.div_factor = DIV_DEC;
 1323               		.loc 1 642 0
 1324 06b8 CD56      		subi r28,lo8(-147)	 ;  77	*movqi/3	[length = 5]
 1325 06ba DF4F      		sbci r29,hi8(-147)
 1326 06bc 1882      		st Y,__zero_reg__
 1327 06be C359      		subi r28,lo8(147)
 1328 06c0 D040      		sbci r29,hi8(147)
 638:bertos/mware/formatwr.c **** 					flags.plus_space_flag = PSF_MINUS;
 1329               		.loc 1 638 0
 1330 06c2 F2E0      		ldi r31,lo8(2)	 ;  78	*movqi/2	[length = 1]
 1331 06c4 CC56      		subi r28,lo8(-148)	 ;  2858	*movqi/3	[length = 5]
 1332 06c6 DF4F      		sbci r29,hi8(-148)
 1333 06c8 F883      		st Y,r31
 1334 06ca C459      		subi r28,lo8(148)
 1335 06cc D040      		sbci r29,hi8(148)
 1336 06ce 00C0      		rjmp .L187	 ;  3252	jump	[length = 1]
 1337               	.LVL133:
 1338               	.L147:
 642:bertos/mware/formatwr.c **** 				flags.div_factor = DIV_DEC;
 1339               		.loc 1 642 0
 1340 06d0 CD56      		subi r28,lo8(-147)	 ;  80	*movqi/3	[length = 5]
 1341 06d2 DF4F      		sbci r29,hi8(-147)
 1342 06d4 1882      		st Y,__zero_reg__
 1343 06d6 C359      		subi r28,lo8(147)
 1344 06d8 D040      		sbci r29,hi8(147)
 1345               	.LVL134:
 1346               	.L187:
 423:bertos/mware/formatwr.c **** 		hex = HEX_tab;
 1347               		.loc 1 423 0
 1348 06da 60E0      		ldi r22,lo8(HEX_tab)	 ;  3159	*reload_inhi	[length = 4]
 1349 06dc C62E      		mov r12,r22
 1350 06de 60E0      		ldi r22,hi8(HEX_tab)
 1351 06e0 D62E      		mov r13,r22
 1352               	.L51:
 1353               	.LVL135:
 647:bertos/mware/formatwr.c **** 				flags.nonzero_value = (ulong != 0);
 1354               		.loc 1 647 0
 1355 06e2 21E0      		ldi r18,lo8(1)	 ;  2105	*movqi/2	[length = 1]
 1356 06e4 CA56      		subi r28,lo8(-150)	 ;  2859	*movqi/3	[length = 5]
 1357 06e6 DF4F      		sbci r29,hi8(-150)
 1358 06e8 2883      		st Y,r18
 1359 06ea C659      		subi r28,lo8(150)
 1360 06ec D040      		sbci r29,hi8(150)
 1361 06ee 0097      		sbiw r24,0	 ;  727	*cmpsi/1	[length = 4]
 1362 06f0 A105      		cpc r26,__zero_reg__
 1363 06f2 B105      		cpc r27,__zero_reg__
 1364 06f4 01F4      		brne .L54	 ;  728	branch	[length = 1]
 1365 06f6 CA56      		subi r28,lo8(-150)	 ;  729	*movqi/3	[length = 5]
 1366 06f8 DF4F      		sbci r29,hi8(-150)
 1367 06fa 1882      		st Y,__zero_reg__
 1368 06fc C659      		subi r28,lo8(150)
 1369 06fe D040      		sbci r29,hi8(150)
 1370               	.L54:
 1371               	.LVL136:
 650:bertos/mware/formatwr.c **** 				if (precision != 0 || flags.nonzero_value)
 1372               		.loc 1 650 0
 1373 0700 A114      		cp r10,__zero_reg__	 ;  732	*cmphi/2	[length = 2]
 1374 0702 B104      		cpc r11,__zero_reg__
 1375 0704 01F4      		brne .L55	 ;  733	branch	[length = 1]
 650:bertos/mware/formatwr.c **** 				if (precision != 0 || flags.nonzero_value)
 1376               		.loc 1 650 0 is_stmt 0 discriminator 1
 1377 0706 CA56      		subi r28,lo8(-150)	 ;  2860	*movqi/4	[length = 5]
 1378 0708 DF4F      		sbci r29,hi8(-150)
 1379 070a 3881      		ld r19,Y
 1380 070c C659      		subi r28,lo8(150)
 1381 070e D040      		sbci r29,hi8(150)
 1382 0710 3323      		tst r19	 ;  735	*cmpqi/1	[length = 1]
 1383 0712 01F4      		brne .+2	 ;  736	branch	[length = 2]
 1384 0714 00C0      		rjmp .L148
 1385               	.L55:
 652:bertos/mware/formatwr.c **** 					switch (flags.div_factor)
 1386               		.loc 1 652 0 is_stmt 1
 1387 0716 CD56      		subi r28,lo8(-147)	 ;  2861	*movqi/4	[length = 5]
 1388 0718 DF4F      		sbci r29,hi8(-147)
 1389 071a 4881      		ld r20,Y
 1390 071c C359      		subi r28,lo8(147)
 1391 071e D040      		sbci r29,hi8(147)
 646:bertos/mware/formatwr.c **** 				ptr = buf_pointer = &buf[FRMWRI_BUFSIZE - 1];
 1392               		.loc 1 646 0
 1393 0720 56E8      		ldi r21,lo8(134)	 ;  3158	*reload_inhi	[length = 3]
 1394 0722 E52E      		mov r14,r21
 1395 0724 F12C      		mov r15,__zero_reg__
 1396               	.LVL137:
 1397 0726 EC0E      		add r14,r28	 ;  2115	*addhi3/1	[length = 2]
 1398 0728 FD1E      		adc r15,r29
 652:bertos/mware/formatwr.c **** 					switch (flags.div_factor)
 1399               		.loc 1 652 0
 1400 072a 4130      		cpi r20,lo8(1)	 ;  740	*cmpqi/3	[length = 1]
 1401 072c 01F0      		breq .L58	 ;  741	branch	[length = 1]
 656:bertos/mware/formatwr.c **** 							*--buf_pointer = hex[ulong % 10];
 1402               		.loc 1 656 0
 1403 072e 3AE0      		ldi r19,lo8(10)	 ;  3157	*reload_insi	[length = 5]
 1404 0730 432E      		mov r4,r19
 1405 0732 512C      		mov r5,__zero_reg__
 1406 0734 612C      		mov r6,__zero_reg__
 1407 0736 712C      		mov r7,__zero_reg__
 1408               	.L57:
 1409               	.LVL138:
 656:bertos/mware/formatwr.c **** 							*--buf_pointer = hex[ulong % 10];
 1410               		.loc 1 656 0 is_stmt 0 discriminator 1
 1411 0738 BC01      		movw r22,r24	 ;  2339	*movsi/1	[length = 2]
 1412 073a CD01      		movw r24,r26
 1413 073c A301      		movw r20,r6	 ;  2340	*movsi/1	[length = 2]
 1414 073e 9201      		movw r18,r4
 1415 0740 0E94 0000 		call __udivmodsi4	 ;  2341	*udivmodsi4_call	[length = 2]
 1416 0744 DC01      		movw r26,r24	 ;  2343	*movsi/1	[length = 2]
 1417 0746 CB01      		movw r24,r22
 1418               	.LVL139:
 1419 0748 8C0D      		add r24,r12	 ;  752	*addhi3/1	[length = 2]
 1420 074a 9D1D      		adc r25,r13
 1421 074c FC01      		movw r30,r24	 ;  2863	*movhi/1	[length = 1]
 1422 074e 8081      		ld r24,Z	 ;  753	*movqi/4	[length = 1]
 1423 0750 F701      		movw r30,r14	 ;  2864	*movhi/1	[length = 1]
 1424 0752 8293      		st -Z,r24	 ;  754	*movqi/3	[length = 1]
 1425 0754 7F01      		movw r14,r30	 ;  2865	*movhi/1	[length = 1]
 1426               	.LVL140:
 657:bertos/mware/formatwr.c **** 						while (ulong /= 10);
 1427               		.loc 1 657 0 is_stmt 1 discriminator 1
 1428 0756 C901      		movw r24,r18	 ;  3155	*movhi/1	[length = 1]
 1429 0758 DA01      		movw r26,r20	 ;  3156	*movhi/1	[length = 1]
 1430               	.LVL141:
 1431 075a 0097      		sbiw r24,0	 ;  759	*cmpsi/1	[length = 4]
 1432 075c A105      		cpc r26,__zero_reg__
 1433 075e B105      		cpc r27,__zero_reg__
 1434 0760 01F4      		brne .L57	 ;  760	branch	[length = 1]
 1435 0762 00C0      		rjmp .L59	 ;  3255	jump	[length = 1]
 1436               	.LVL142:
 1437               	.L58:
 662:bertos/mware/formatwr.c **** 							*--buf_pointer = hex[ulong % 16];
 1438               		.loc 1 662 0 discriminator 1
 1439 0764 FC01      		movw r30,r24	 ;  2867	*movhi/1	[length = 1]
 1440 0766 EF70      		andi r30,lo8(15)	 ;  770	andhi3/2	[length = 2]
 1441 0768 F070      		andi r31,hi8(15)
 1442 076a EC0D      		add r30,r12	 ;  771	*addhi3/1	[length = 2]
 1443 076c FD1D      		adc r31,r13
 1444 076e 2081      		ld r18,Z	 ;  772	*movqi/4	[length = 1]
 1445 0770 F701      		movw r30,r14	 ;  2868	*movhi/1	[length = 1]
 1446 0772 2293      		st -Z,r18	 ;  773	*movqi/3	[length = 1]
 1447 0774 7F01      		movw r14,r30	 ;  2869	*movhi/1	[length = 1]
 1448               	.LVL143:
 663:bertos/mware/formatwr.c **** 						while (ulong /= 16);
 1449               		.loc 1 663 0 discriminator 1
 1450 0776 24E0      		ldi r18,4	 ;  3154	*lshrsi3_const/4	[length = 7]
 1451 0778 B695      	1:	lsr r27
 1452 077a A795      		ror r26
 1453 077c 9795      		ror r25
 1454 077e 8795      		ror r24
 1455 0780 2A95      		dec r18
 1456 0782 01F4      		brne 1b
 1457               	.LVL144:
 1458 0784 0097      		sbiw r24,0	 ;  776	*cmpsi/1	[length = 4]
 1459 0786 A105      		cpc r26,__zero_reg__
 1460 0788 B105      		cpc r27,__zero_reg__
 1461 078a 01F4      		brne .L58	 ;  777	branch	[length = 1]
 1462               	.LVL145:
 1463               	.L59:
 676:bertos/mware/formatwr.c **** 				if (precision < 0)
 1464               		.loc 1 676 0
 1465 078c B7FE      		sbrs r11,7	 ;  3153	*sbrx_and_branchhi	[length = 2]
 1466 078e 00C0      		rjmp .L56
 677:bertos/mware/formatwr.c **** 					if (flags.zeropad)
 1467               		.loc 1 677 0
 1468 0790 C356      		subi r28,lo8(-157)	 ;  2870	*movqi/4	[length = 5]
 1469 0792 DF4F      		sbci r29,hi8(-157)
 1470 0794 F881      		ld r31,Y
 1471 0796 CD59      		subi r28,lo8(157)
 1472 0798 D040      		sbci r29,hi8(157)
 1473 079a FF23      		tst r31	 ;  784	*cmpqi/1	[length = 1]
 1474 079c 01F4      		brne .+2	 ;  785	branch	[length = 2]
 1475 079e 00C0      		rjmp .L56
 678:bertos/mware/formatwr.c **** 						precision = field_width - (flags.plus_space_flag != PSF_NONE);
 1476               		.loc 1 678 0
 1477 07a0 1C7F      		andi r17,lo8(-4)	 ;  796	andqi3/2	[length = 1]
 1478               	.LVL146:
 1479 07a2 CC56      		subi r28,lo8(-148)	 ;  2871	*movqi/4	[length = 5]
 1480 07a4 DF4F      		sbci r29,hi8(-148)
 1481 07a6 2881      		ld r18,Y
 1482 07a8 C459      		subi r28,lo8(148)
 1483 07aa D040      		sbci r29,hi8(148)
 1484 07ac 122B      		or r17,r18	 ;  797	iorqi3/1	[length = 1]
 1485 07ae CD56      		subi r28,lo8(-147)	 ;  2872	*movqi/4	[length = 5]
 1486 07b0 DF4F      		sbci r29,hi8(-147)
 1487 07b2 8881      		ld r24,Y
 1488 07b4 C359      		subi r28,lo8(147)
 1489 07b6 D040      		sbci r29,hi8(147)
 1490               	.LVL147:
 1491 07b8 8170      		andi r24,lo8(1)	 ;  799	andqi3/2	[length = 1]
 1492 07ba 880F      		lsl r24	 ;  800	*ashlqi3/4	[length = 2]
 1493 07bc 880F      		lsl r24
 1494 07be 1B7F      		andi r17,lo8(-5)	 ;  802	andqi3/2	[length = 1]
 1495 07c0 182B      		or r17,r24	 ;  803	iorqi3/1	[length = 1]
 1496 07c2 CE56      		subi r28,lo8(-146)	 ;  2873	*movqi/4	[length = 5]
 1497 07c4 DF4F      		sbci r29,hi8(-146)
 1498 07c6 8881      		ld r24,Y
 1499 07c8 C259      		subi r28,lo8(146)
 1500 07ca D040      		sbci r29,hi8(146)
 1501 07cc 880F      		lsl r24	 ;  806	*ashlqi3/5	[length = 3]
 1502 07ce 880F      		lsl r24
 1503 07d0 880F      		lsl r24
 1504 07d2 177F      		andi r17,lo8(-9)	 ;  808	andqi3/2	[length = 1]
 1505 07d4 182B      		or r17,r24	 ;  809	iorqi3/1	[length = 1]
 1506 07d6 CF56      		subi r28,lo8(-145)	 ;  2874	*movqi/4	[length = 5]
 1507 07d8 DF4F      		sbci r29,hi8(-145)
 1508 07da 8881      		ld r24,Y
 1509 07dc C159      		subi r28,lo8(145)
 1510 07de D040      		sbci r29,hi8(145)
 1511 07e0 8170      		andi r24,lo8(1)	 ;  811	andqi3/2	[length = 1]
 1512 07e2 8295      		swap r24	 ;  3010	*rotlqi3_4	[length = 1]
 1513 07e4 807F      		andi r24,lo8(-16)	 ;  3011	andqi3/2	[length = 1]
 1514 07e6 1F7E      		andi r17,lo8(-17)	 ;  814	andqi3/2	[length = 1]
 1515 07e8 182B      		or r17,r24	 ;  815	iorqi3/1	[length = 1]
 1516 07ea CB56      		subi r28,lo8(-149)	 ;  2875	*movqi/4	[length = 5]
 1517 07ec DF4F      		sbci r29,hi8(-149)
 1518 07ee 8881      		ld r24,Y
 1519 07f0 C559      		subi r28,lo8(149)
 1520 07f2 D040      		sbci r29,hi8(149)
 1521 07f4 8170      		andi r24,lo8(1)	 ;  817	andqi3/2	[length = 1]
 1522 07f6 8295      		swap r24	 ;  3012	*rotlqi3_4	[length = 1]
 1523 07f8 880F      		lsl r24	 ;  3013	*ashlqi3/3	[length = 1]
 1524 07fa 807E      		andi r24,lo8(-32)	 ;  3014	andqi3/2	[length = 1]
 1525 07fc 1F7D      		andi r17,lo8(-33)	 ;  820	andqi3/2	[length = 1]
 1526 07fe 182B      		or r17,r24	 ;  821	iorqi3/1	[length = 1]
 1527 0800 832D      		mov r24,r3	 ;  2876	*movqi/1	[length = 1]
 1528 0802 8295      		swap r24	 ;  3015	*rotlqi3_4	[length = 1]
 1529 0804 880F      		lsl r24	 ;  3016	*ashlqi3/4	[length = 2]
 1530 0806 880F      		lsl r24
 1531 0808 807C      		andi r24,lo8(-64)	 ;  3017	andqi3/2	[length = 1]
 1532 080a 1F7B      		andi r17,lo8(-65)	 ;  826	andqi3/2	[length = 1]
 1533 080c 182B      		or r17,r24	 ;  827	iorqi3/1	[length = 1]
 1534 080e CA56      		subi r28,lo8(-150)	 ;  2877	*movqi/4	[length = 5]
 1535 0810 DF4F      		sbci r29,hi8(-150)
 1536 0812 8881      		ld r24,Y
 1537 0814 C659      		subi r28,lo8(150)
 1538 0816 D040      		sbci r29,hi8(150)
 1539 0818 8795      		ror r24	 ;  829	*ashlqi3/5	[length = 3]
 1540 081a 8827      		clr r24
 1541 081c 8795      		ror r24
 1542 081e 1F77      		andi r17,lo8(127)	 ;  831	andqi3/2	[length = 1]
 1543 0820 182B      		or r17,r24	 ;  832	iorqi3/1	[length = 1]
 1544 0822 212F      		mov r18,r17	 ;  2878	*movqi/1	[length = 1]
 1545 0824 2370      		andi r18,lo8(3)	 ;  834	andqi3/2	[length = 1]
 1546 0826 81E0      		ldi r24,lo8(1)	 ;  835	*movhi/4	[length = 2]
 1547 0828 90E0      		ldi r25,hi8(1)
 1548 082a 01F4      		brne .L60	 ;  837	branch	[length = 1]
 1549 082c 80E0      		ldi r24,lo8(0)	 ;  838	*movhi/4	[length = 2]
 1550 082e 90E0      		ldi r25,hi8(0)
 1551               	.LVL148:
 1552               	.L60:
 1553 0830 C357      		subi r28,lo8(-141)	 ;  2879	*movhi/2	[length = 6]
 1554 0832 DF4F      		sbci r29,hi8(-141)
 1555 0834 A880      		ld r10,Y
 1556 0836 B980      		ldd r11,Y+1
 1557 0838 CD58      		subi r28,lo8(141)
 1558 083a D040      		sbci r29,hi8(141)
 1559               	.LVL149:
 1560 083c A81A      		sub r10,r24	 ;  840	subhi3/1	[length = 2]
 1561 083e B90A      		sbc r11,r25
 1562               	.LVL150:
 1563 0840 00C0      		rjmp .L56	 ;  3257	jump	[length = 1]
 1564               	.LVL151:
 1565               	.L148:
 646:bertos/mware/formatwr.c **** 				ptr = buf_pointer = &buf[FRMWRI_BUFSIZE - 1];
 1566               		.loc 1 646 0
 1567 0842 86E8      		ldi r24,lo8(134)	 ;  3152	*reload_inhi	[length = 3]
 1568 0844 E82E      		mov r14,r24
 1569 0846 F12C      		mov r15,__zero_reg__
 1570               	.LVL152:
 1571 0848 EC0E      		add r14,r28	 ;  2117	*addhi3/1	[length = 2]
 1572 084a FD1E      		adc r15,r29
 1573               	.L56:
 678:bertos/mware/formatwr.c **** 						precision = field_width - (flags.plus_space_flag != PSF_NONE);
 1574               		.loc 1 678 0 discriminator 1
 1575 084c D701      		movw r26,r14	 ;  844	*movhi/1	[length = 1]
 334:bertos/mware/formatwr.c **** PGM_FUNC(_formatted_write)(const char * PGM_ATTR format,
 1576               		.loc 1 334 0 discriminator 1
 1577 084e C757      		subi r28,lo8(-137)	 ;  2881	*movhi/2	[length = 6]
 1578 0850 DF4F      		sbci r29,hi8(-137)
 1579 0852 8881      		ld r24,Y
 1580 0854 9981      		ldd r25,Y+1
 1581 0856 C958      		subi r28,lo8(137)
 1582 0858 D040      		sbci r29,hi8(137)
 1583 085a 8E19      		sub r24,r14	 ;  846	subhi3/1	[length = 2]
 1584 085c 9F09      		sbc r25,r15
 1585 085e 00C0      		rjmp .L61	 ;  3259	jump	[length = 1]
 1586               	.LVL153:
 1587               	.L62:
 680:bertos/mware/formatwr.c **** 					*--buf_pointer = '0';
 1588               		.loc 1 680 0
 1589 0860 30E3      		ldi r19,lo8(48)	 ;  2882	*movqi/2	[length = 1]
 1590 0862 3E93      		st -X,r19	 ;  853	*movqi/3	[length = 1]
 1591 0864 0196      		adiw r24,1	 ;  855	*addhi3/2	[length = 1]
 1592               	.LVL154:
 1593               	.L61:
 680:bertos/mware/formatwr.c **** 					*--buf_pointer = '0';
 1594               		.loc 1 680 0 is_stmt 0 discriminator 1
 1595 0866 2D01      		movw r4,r26	 ;  858	*movhi/1	[length = 1]
 1596               	.LVL155:
 679:bertos/mware/formatwr.c **** 				while (precision > (int)(ptr - buf_pointer))
 1597               		.loc 1 679 0 is_stmt 1 discriminator 1
 1598 0868 8A15      		cp r24,r10	 ;  862	*cmphi/3	[length = 2]
 1599 086a 9B05      		cpc r25,r11
 1600 086c 04F0      		brlt .L62	 ;  863	branch	[length = 1]
 682:bertos/mware/formatwr.c **** 				if (flags.alternate_flag && flags.nonzero_value)
 1601               		.loc 1 682 0
 1602 086e 3320      		tst r3	 ;  865	*cmpqi/1	[length = 1]
 1603 0870 01F0      		breq .L63	 ;  866	branch	[length = 1]
 682:bertos/mware/formatwr.c **** 				if (flags.alternate_flag && flags.nonzero_value)
 1604               		.loc 1 682 0 is_stmt 0 discriminator 1
 1605 0872 CA56      		subi r28,lo8(-150)	 ;  2883	*movqi/4	[length = 5]
 1606 0874 DF4F      		sbci r29,hi8(-150)
 1607 0876 4881      		ld r20,Y
 1608 0878 C659      		subi r28,lo8(150)
 1609 087a D040      		sbci r29,hi8(150)
 1610 087c 4423      		tst r20	 ;  868	*cmpqi/1	[length = 1]
 1611 087e 01F0      		breq .L63	 ;  869	branch	[length = 1]
 684:bertos/mware/formatwr.c **** 					if (format_flag == 'x' || format_flag == 'X')
 1612               		.loc 1 684 0 is_stmt 1
 1613 0880 0837      		cpi r16,lo8(120)	 ;  871	*cmpqi/3	[length = 1]
 1614 0882 01F0      		breq .L64	 ;  872	branch	[length = 1]
 684:bertos/mware/formatwr.c **** 					if (format_flag == 'x' || format_flag == 'X')
 1615               		.loc 1 684 0 is_stmt 0 discriminator 1
 1616 0884 0835      		cpi r16,lo8(88)	 ;  874	*cmpqi/3	[length = 1]
 1617 0886 01F4      		brne .L63	 ;  875	branch	[length = 1]
 1618               	.L64:
 1619               	.LVL156:
 686:bertos/mware/formatwr.c **** 						*--buf_pointer = format_flag;
 1620               		.loc 1 686 0 is_stmt 1
 1621 0888 FD01      		movw r30,r26	 ;  2884	*movhi/1	[length = 1]
 1622 088a 3197      		sbiw r30,1	 ;  880	*addhi3/3	[length = 1]
 1623 088c 0083      		st Z,r16	 ;  881	*movqi/3	[length = 1]
 687:bertos/mware/formatwr.c **** 						*--buf_pointer = '0';
 1624               		.loc 1 687 0
 1625 088e 0EEF      		ldi r16,lo8(-2)	 ;  3151	*reload_inhi	[length = 4]
 1626 0890 402E      		mov r4,r16
 1627 0892 0FEF      		ldi r16,hi8(-2)
 1628 0894 502E      		mov r5,r16
 1629 0896 4A0E      		add r4,r26	 ;  882	*addhi3/1	[length = 2]
 1630 0898 5B1E      		adc r5,r27
 1631               	.LVL157:
 1632 089a 20E3      		ldi r18,lo8(48)	 ;  2887	*movqi/2	[length = 1]
 1633 089c F201      		movw r30,r4	 ;  2886	*movhi/1	[length = 1]
 1634 089e 2083      		st Z,r18	 ;  887	*movqi/3	[length = 1]
 1635               	.L63:
 696:bertos/mware/formatwr.c **** 				ASSERT(buf_pointer >= buf);
 1636               		.loc 1 696 0
 1637 08a0 C957      		subi r28,lo8(-135)	 ;  2888	*movhi/2	[length = 6]
 1638 08a2 DF4F      		sbci r29,hi8(-135)
 1639 08a4 4881      		ld r20,Y
 1640 08a6 5981      		ldd r21,Y+1
 1641 08a8 C758      		subi r28,lo8(135)
 1642 08aa D040      		sbci r29,hi8(135)
 1643 08ac 4416      		cp r4,r20	 ;  891	*cmphi/3	[length = 2]
 1644 08ae 5506      		cpc r5,r21
 1645 08b0 00F0      		brlo .+2	 ;  892	branch	[length = 2]
 1646 08b2 00C0      		rjmp .L151
 696:bertos/mware/formatwr.c **** 				ASSERT(buf_pointer >= buf);
 1647               		.loc 1 696 0 is_stmt 0 discriminator 1
 1648 08b4 80E0      		ldi r24,lo8(__c.1544)	 ;  897	*movhi/4	[length = 2]
 1649 08b6 90E0      		ldi r25,hi8(__c.1544)
 1650 08b8 60E0      		ldi r22,lo8(__c.1546)	 ;  898	*movhi/4	[length = 2]
 1651 08ba 70E0      		ldi r23,hi8(__c.1546)
 1652 08bc 48EB      		ldi r20,lo8(696)	 ;  899	*movhi/4	[length = 2]
 1653 08be 52E0      		ldi r21,hi8(696)
 1654 08c0 0E94 0000 		call __bassert_P	 ;  900	call_value_insn/3	[length = 2]
 1655 08c4 00C0      		rjmp .L151	 ;  3261	jump	[length = 1]
 1656               	.LVL158:
 1657               	.L30:
 703:bertos/mware/formatwr.c **** 				format_flag -= 2;
 1658               		.loc 1 703 0 is_stmt 1
 1659 08c6 6EEF      		ldi r22,lo8(-2)	 ;  3149	*reload_inqi	[length = 2]
 1660 08c8 262E      		mov r2,r22
 1661               	.LVL159:
 1662 08ca 200E      		add r2,r16	 ;  906	addqi3/1	[length = 1]
 1663               	.LVL160:
 702:bertos/mware/formatwr.c **** 				n = 1;
 1664               		.loc 1 702 0
 1665 08cc 71E0      		ldi r23,lo8(1)	 ;  3150	*reload_inhi	[length = 3]
 1666 08ce 872E      		mov r8,r23
 1667 08d0 912C      		mov r9,__zero_reg__
 704:bertos/mware/formatwr.c **** 				if (! precision)
 1668               		.loc 1 704 0
 1669 08d2 A114      		cp r10,__zero_reg__	 ;  908	*cmphi/2	[length = 2]
 1670 08d4 B104      		cpc r11,__zero_reg__
 1671 08d6 01F0      		breq .L152	 ;  909	branch	[length = 1]
 1672 08d8 00C0      		rjmp .L35	 ;  3264	jump	[length = 1]
 1673               	.LVL161:
 1674               	.L141:
 710:bertos/mware/formatwr.c **** 				format_flag = 0;
 1675               		.loc 1 710 0
 1676 08da 2224      		clr r2	 ;  87	*movqi/7	[length = 1]
 1677               	.L188:
 713:bertos/mware/formatwr.c **** 				n = 0;
 1678               		.loc 1 713 0
 1679 08dc 8824      		clr r8	 ;  88	*movhi/5	[length = 2]
 1680 08de 9924      		clr r9
 1681               	.LVL162:
 1682               	.L35:
 715:bertos/mware/formatwr.c **** 				if (precision < 0)
 1683               		.loc 1 715 0
 1684 08e0 B7FE      		sbrs r11,7	 ;  3148	*sbrx_and_branchhi	[length = 2]
 1685 08e2 00C0      		rjmp .L66
 1686 08e4 00C0      		rjmp .L192	 ;  3268	jump	[length = 1]
 1687               	.LVL163:
 1688               	.L152:
 706:bertos/mware/formatwr.c **** 					precision = 1;
 1689               		.loc 1 706 0
 1690 08e6 51E0      		ldi r21,lo8(1)	 ;  3147	*reload_inhi	[length = 3]
 1691 08e8 A52E      		mov r10,r21
 1692 08ea B12C      		mov r11,__zero_reg__
 1693               	.LVL164:
 1694 08ec 00C0      		rjmp .L66	 ;  3270	jump	[length = 1]
 1695               	.LVL165:
 1696               	.L192:
 717:bertos/mware/formatwr.c **** 					precision = 6;
 1697               		.loc 1 717 0
 1698 08ee 46E0      		ldi r20,lo8(6)	 ;  3146	*reload_inhi	[length = 3]
 1699 08f0 A42E      		mov r10,r20
 1700 08f2 B12C      		mov r11,__zero_reg__
 1701               	.LVL166:
 1702               	.L66:
 726:bertos/mware/formatwr.c **** 					fvalue = va_arg(ap,max_float_t);
 1703               		.loc 1 726 0
 1704 08f4 C901      		movw r24,r18	 ;  2891	*movhi/1	[length = 1]
 1705 08f6 0496      		adiw r24,4	 ;  922	*addhi3/2	[length = 1]
 1706 08f8 C157      		subi r28,lo8(-143)	 ;  2892	*movhi/3	[length = 6]
 1707 08fa DF4F      		sbci r29,hi8(-143)
 1708 08fc 9983      		std Y+1,r25
 1709 08fe 8883      		st Y,r24
 1710 0900 CF58      		subi r28,lo8(143)
 1711 0902 D040      		sbci r29,hi8(143)
 1712               	.LVL167:
 1713 0904 F901      		movw r30,r18	 ;  2893	*movhi/1	[length = 1]
 1714 0906 C080      		ld r12,Z	 ;  924	*movsf/3	[length = 4]
 1715 0908 D180      		ldd r13,Z+1
 1716 090a E280      		ldd r14,Z+2
 1717 090c F380      		ldd r15,Z+3
 1718               	.LVL168:
 728:bertos/mware/formatwr.c **** 				if (fvalue < 0)
 1719               		.loc 1 728 0
 1720 090e C701      		movw r24,r14	 ;  926	*movsf/1	[length = 2]
 1721 0910 B601      		movw r22,r12
 1722 0912 20E0      		ldi r18,lo8(0x0)	 ;  927	*movsf/2	[length = 3]
 1723 0914 30E0      		ldi r19,hi8(0x0)
 1724 0916 A901      		movw r20,r18
 1725               	.LVL169:
 1726 0918 0E94 0000 		call __ltsf2	 ;  928	call_value_insn/3	[length = 2]
 1727               	.LVL170:
 1728 091c 87FF      		sbrs r24,7	 ;  3145	*sbrx_branchhi	[length = 2]
 1729 091e 00C0      		rjmp .L67
 1730               	.LVL171:
 731:bertos/mware/formatwr.c **** 					fvalue = -fvalue;
 1731               		.loc 1 731 0
 1732 0920 F7FA      		bst r15,7	 ;  937	negsf2/2	[length = 4]
 1733 0922 F094      		com r15
 1734 0924 F7F8      		bld r15,7
 1735 0926 F094      		com r15
 1736               	.LVL172:
 730:bertos/mware/formatwr.c **** 					flags.plus_space_flag = PSF_MINUS;
 1737               		.loc 1 730 0
 1738 0928 F2E0      		ldi r31,lo8(2)	 ;  93	*movqi/2	[length = 1]
 1739 092a CC56      		subi r28,lo8(-148)	 ;  2894	*movqi/3	[length = 5]
 1740 092c DF4F      		sbci r29,hi8(-148)
 1741 092e F883      		st Y,r31
 1742 0930 C459      		subi r28,lo8(148)
 1743 0932 D040      		sbci r29,hi8(148)
 1744               	.LVL173:
 1745               	.L67:
 733:bertos/mware/formatwr.c **** 				ptr = float_conversion (fvalue,
 1746               		.loc 1 733 0
 1747 0934 21E0      		ldi r18,lo8(1)	 ;  3143	*reload_inhi	[length = 3]
 1748 0936 422E      		mov r4,r18
 1749 0938 512C      		mov r5,__zero_reg__
 1750 093a 4C0E      		add r4,r28	 ;  2897	*addhi3/1	[length = 2]
 1751 093c 5D1E      		adc r5,r29
 1752 093e C357      		subi r28,lo8(-141)	 ;  2898	*movhi/2	[length = 6]
 1753 0940 DF4F      		sbci r29,hi8(-141)
 1754 0942 2881      		ld r18,Y
 1755 0944 3981      		ldd r19,Y+1
 1756 0946 CD58      		subi r28,lo8(141)
 1757 0948 D040      		sbci r29,hi8(141)
 1758 094a 420E      		add r4,r18	 ;  944	*addhi3/1	[length = 2]
 1759 094c 531E      		adc r5,r19
 1760               	.LVL174:
 1761 094e 082D      		mov r16,r8	 ;  946	*movqi/1	[length = 1]
 1762               	.LVL175:
 1763               	.LBB35:
 1764               	.LBB36:
 158:bertos/mware/formatwr.c **** 	if (value >= 1)
 1765               		.loc 1 158 0
 1766 0950 C701      		movw r24,r14	 ;  955	*movsf/1	[length = 2]
 1767 0952 B601      		movw r22,r12
 1768 0954 20E0      		ldi r18,lo8(0x3f800000)	 ;  956	*movsf/5	[length = 4]
 1769 0956 30E0      		ldi r19,hi8(0x3f800000)
 1770 0958 40E8      		ldi r20,hlo8(0x3f800000)
 1771 095a 5FE3      		ldi r21,hhi8(0x3f800000)
 1772 095c 0E94 0000 		call __gesf2	 ;  957	call_value_insn/3	[length = 2]
 1773 0960 87FF      		sbrs r24,7	 ;  3144	*sbrx_branchhi	[length = 2]
 1774 0962 00C0      		rjmp .L154
 1775 0964 00C0      		rjmp .L193	 ;  3274	jump	[length = 1]
 1776               	.LVL176:
 1777               	.L71:
 162:bertos/mware/formatwr.c **** 			value /= 1e10;
 1778               		.loc 1 162 0
 1779 0966 C701      		movw r24,r14	 ;  965	*movsf/1	[length = 2]
 1780 0968 B601      		movw r22,r12
 1781 096a 29EF      		ldi r18,lo8(0x501502f9)	 ;  966	*movsf/5	[length = 4]
 1782 096c 32E0      		ldi r19,hi8(0x501502f9)
 1783 096e 45E1      		ldi r20,hlo8(0x501502f9)
 1784 0970 50E5      		ldi r21,hhi8(0x501502f9)
 1785 0972 0E94 0000 		call __divsf3	 ;  967	call_value_insn/3	[length = 2]
 1786 0976 6B01      		movw r12,r22	 ;  3142	*movhi/1	[length = 1]
 1787               	.LVL177:
 1788 0978 E82E      		mov r14,r24	 ;  2359	*movqi/1	[length = 1]
 1789 097a F92E      		mov r15,r25	 ;  2360	*movqi/1	[length = 1]
 1790               	.LVL178:
 163:bertos/mware/formatwr.c **** 			integral_10_log += 10;
 1791               		.loc 1 163 0
 1792 097c 4AE0      		ldi r20,lo8(10)	 ;  2899	*movhi/4	[length = 2]
 1793 097e 50E0      		ldi r21,hi8(10)
 1794 0980 640E      		add r6,r20	 ;  971	*addhi3/1	[length = 2]
 1795 0982 751E      		adc r7,r21
 1796               	.LVL179:
 1797 0984 00C0      		rjmp .L69	 ;  3276	jump	[length = 1]
 1798               	.LVL180:
 1799               	.L154:
 158:bertos/mware/formatwr.c **** 	if (value >= 1)
 1800               		.loc 1 158 0
 1801 0986 6624      		clr r6	 ;  94	*movhi/5	[length = 2]
 1802 0988 7724      		clr r7
 1803               	.LVL181:
 1804               	.L69:
 160:bertos/mware/formatwr.c **** 		while (value >= 1e11) /* To speed up things a bit */
 1805               		.loc 1 160 0
 1806 098a C701      		movw r24,r14	 ;  978	*movsf/1	[length = 2]
 1807 098c B601      		movw r22,r12
 1808 098e 27EB      		ldi r18,lo8(0x51ba43b7)	 ;  979	*movsf/5	[length = 4]
 1809 0990 33E4      		ldi r19,hi8(0x51ba43b7)
 1810 0992 4AEB      		ldi r20,hlo8(0x51ba43b7)
 1811 0994 51E5      		ldi r21,hhi8(0x51ba43b7)
 1812 0996 0E94 0000 		call __gesf2	 ;  980	call_value_insn/3	[length = 2]
 1813 099a 87FF      		sbrs r24,7	 ;  3140	*sbrx_branchhi	[length = 2]
 1814 099c 00C0      		rjmp .L71
 1815 099e 00C0      		rjmp .L175	 ;  3279	jump	[length = 1]
 1816               	.L73:
 167:bertos/mware/formatwr.c **** 			value /= 10;
 1817               		.loc 1 167 0
 1818 09a0 C701      		movw r24,r14	 ;  988	*movsf/1	[length = 2]
 1819 09a2 B601      		movw r22,r12
 1820 09a4 20E0      		ldi r18,lo8(0x41200000)	 ;  989	*movsf/5	[length = 4]
 1821 09a6 30E0      		ldi r19,hi8(0x41200000)
 1822 09a8 40E2      		ldi r20,hlo8(0x41200000)
 1823 09aa 51E4      		ldi r21,hhi8(0x41200000)
 1824 09ac 0E94 0000 		call __divsf3	 ;  990	call_value_insn/3	[length = 2]
 1825 09b0 6B01      		movw r12,r22	 ;  3139	*movhi/1	[length = 1]
 1826               	.LVL182:
 1827 09b2 E82E      		mov r14,r24	 ;  2368	*movqi/1	[length = 1]
 1828 09b4 F92E      		mov r15,r25	 ;  2369	*movqi/1	[length = 1]
 1829               	.LVL183:
 168:bertos/mware/formatwr.c **** 			integral_10_log++;
 1830               		.loc 1 168 0
 1831 09b6 0894      		sec	 ;  994	*addhi3/5	[length = 3]
 1832 09b8 611C      		adc r6,__zero_reg__
 1833 09ba 711C      		adc r7,__zero_reg__
 1834               	.LVL184:
 1835               	.L175:
 165:bertos/mware/formatwr.c **** 		while (value >= 10)
 1836               		.loc 1 165 0
 1837 09bc C701      		movw r24,r14	 ;  1001	*movsf/1	[length = 2]
 1838 09be B601      		movw r22,r12
 1839 09c0 20E0      		ldi r18,lo8(0x41200000)	 ;  1002	*movsf/5	[length = 4]
 1840 09c2 30E0      		ldi r19,hi8(0x41200000)
 1841 09c4 40E2      		ldi r20,hlo8(0x41200000)
 1842 09c6 51E4      		ldi r21,hhi8(0x41200000)
 1843 09c8 0E94 0000 		call __gesf2	 ;  1003	call_value_insn/3	[length = 2]
 1844 09cc 87FF      		sbrs r24,7	 ;  3137	*sbrx_branchhi	[length = 2]
 1845 09ce 00C0      		rjmp .L73
 1846 09d0 00C0      		rjmp .L74	 ;  3282	jump	[length = 1]
 1847               	.LVL185:
 1848               	.L193:
 171:bertos/mware/formatwr.c **** 	else if (value) /* Not just 0.0 */
 1849               		.loc 1 171 0
 1850 09d2 C701      		movw r24,r14	 ;  1012	*movsf/1	[length = 2]
 1851 09d4 B601      		movw r22,r12
 1852 09d6 20E0      		ldi r18,lo8(0x0)	 ;  1013	*movsf/2	[length = 3]
 1853 09d8 30E0      		ldi r19,hi8(0x0)
 1854 09da A901      		movw r20,r18
 1855 09dc 0E94 0000 		call __nesf2	 ;  1014	call_value_insn/3	[length = 2]
 1856 09e0 6624      		clr r6	 ;  95	*movhi/5	[length = 2]
 1857 09e2 7724      		clr r7
 1858 09e4 8823      		tst r24	 ;  1016	*cmpqi/1	[length = 1]
 1859 09e6 01F4      		brne .L75	 ;  1017	branch	[length = 1]
 1860 09e8 00C0      		rjmp .L74	 ;  3285	jump	[length = 1]
 1861               	.LVL186:
 1862               	.L76:
 175:bertos/mware/formatwr.c **** 			value *= 1e10;
 1863               		.loc 1 175 0
 1864 09ea C701      		movw r24,r14	 ;  1022	*movsf/1	[length = 2]
 1865 09ec B601      		movw r22,r12
 1866 09ee 29EF      		ldi r18,lo8(0x501502f9)	 ;  1023	*movsf/5	[length = 4]
 1867 09f0 32E0      		ldi r19,hi8(0x501502f9)
 1868 09f2 45E1      		ldi r20,hlo8(0x501502f9)
 1869 09f4 50E5      		ldi r21,hhi8(0x501502f9)
 1870 09f6 0E94 0000 		call __mulsf3	 ;  1024	call_value_insn/3	[length = 2]
 1871 09fa 6B01      		movw r12,r22	 ;  3136	*movhi/1	[length = 1]
 1872               	.LVL187:
 1873 09fc E82E      		mov r14,r24	 ;  2377	*movqi/1	[length = 1]
 1874 09fe F92E      		mov r15,r25	 ;  2378	*movqi/1	[length = 1]
 1875               	.LVL188:
 176:bertos/mware/formatwr.c **** 			integral_10_log -= 10;
 1876               		.loc 1 176 0
 1877 0a00 86EF      		ldi r24,lo8(-10)	 ;  2900	*movhi/4	[length = 2]
 1878 0a02 9FEF      		ldi r25,hi8(-10)
 1879 0a04 680E      		add r6,r24	 ;  1028	*addhi3/1	[length = 2]
 1880 0a06 791E      		adc r7,r25
 1881               	.LVL189:
 1882               	.L75:
 173:bertos/mware/formatwr.c **** 		while (value <= 1e-10) /* To speed up things a bit */
 1883               		.loc 1 173 0
 1884 0a08 C701      		movw r24,r14	 ;  1035	*movsf/1	[length = 2]
 1885 0a0a B601      		movw r22,r12
 1886 0a0c 2FEF      		ldi r18,lo8(0x2edbe6ff)	 ;  1036	*movsf/5	[length = 4]
 1887 0a0e 36EE      		ldi r19,hi8(0x2edbe6ff)
 1888 0a10 4BED      		ldi r20,hlo8(0x2edbe6ff)
 1889 0a12 5EE2      		ldi r21,hhi8(0x2edbe6ff)
 1890 0a14 0E94 0000 		call __lesf2	 ;  1037	call_value_insn/3	[length = 2]
 1891 0a18 1816      		cp __zero_reg__,r24	 ;  1039	*reversed_tstqi	[length = 2]
 1892 0a1a 04F4      		brge .L76	 ;  1040	branch	[length = 1]
 1893 0a1c 00C0      		rjmp .L176	 ;  3288	jump	[length = 1]
 1894               	.L78:
 180:bertos/mware/formatwr.c **** 			value *= 10;
 1895               		.loc 1 180 0
 1896 0a1e C701      		movw r24,r14	 ;  1045	*movsf/1	[length = 2]
 1897 0a20 B601      		movw r22,r12
 1898 0a22 20E0      		ldi r18,lo8(0x41200000)	 ;  1046	*movsf/5	[length = 4]
 1899 0a24 30E0      		ldi r19,hi8(0x41200000)
 1900 0a26 40E2      		ldi r20,hlo8(0x41200000)
 1901 0a28 51E4      		ldi r21,hhi8(0x41200000)
 1902 0a2a 0E94 0000 		call __mulsf3	 ;  1047	call_value_insn/3	[length = 2]
 1903 0a2e 6B01      		movw r12,r22	 ;  3134	*movhi/1	[length = 1]
 1904               	.LVL190:
 1905 0a30 E82E      		mov r14,r24	 ;  2386	*movqi/1	[length = 1]
 1906 0a32 F92E      		mov r15,r25	 ;  2387	*movqi/1	[length = 1]
 1907               	.LVL191:
 181:bertos/mware/formatwr.c **** 			integral_10_log--;
 1908               		.loc 1 181 0
 1909 0a34 0894      		sec	 ;  1051	*addhi3/6	[length = 3]
 1910 0a36 6108      		sbc r6,__zero_reg__
 1911 0a38 7108      		sbc r7,__zero_reg__
 1912               	.LVL192:
 1913               	.L176:
 178:bertos/mware/formatwr.c **** 		while (value < 1)
 1914               		.loc 1 178 0
 1915 0a3a C701      		movw r24,r14	 ;  1058	*movsf/1	[length = 2]
 1916 0a3c B601      		movw r22,r12
 1917 0a3e 20E0      		ldi r18,lo8(0x3f800000)	 ;  1059	*movsf/5	[length = 4]
 1918 0a40 30E0      		ldi r19,hi8(0x3f800000)
 1919 0a42 40E8      		ldi r20,hlo8(0x3f800000)
 1920 0a44 5FE3      		ldi r21,hhi8(0x3f800000)
 1921 0a46 0E94 0000 		call __ltsf2	 ;  1060	call_value_insn/3	[length = 2]
 1922 0a4a 87FD      		sbrc r24,7	 ;  3132	*sbrx_branchhi	[length = 2]
 1923 0a4c 00C0      		rjmp .L78
 1924               	.LVL193:
 1925               	.L74:
 184:bertos/mware/formatwr.c **** 	if (g_flag)
 1926               		.loc 1 184 0
 1927 0a4e 0023      		tst r16	 ;  1068	*cmpqi/1	[length = 1]
 1928 0a50 01F0      		breq .L79	 ;  1069	branch	[length = 1]
 186:bertos/mware/formatwr.c **** 		if (integral_10_log < nr_of_digits && integral_10_log >= -4)
 1929               		.loc 1 186 0
 1930 0a52 6A14      		cp r6,r10	 ;  1071	*cmphi/3	[length = 2]
 1931 0a54 7B04      		cpc r7,r11
 1932 0a56 04F4      		brge .L80	 ;  1072	branch	[length = 1]
 1933 0a58 9CEF      		ldi r25,lo8(-4)	 ;  1074	*cmphi/7	[length = 4]
 1934 0a5a 6916      		cp r6,r25
 1935 0a5c 9FEF      		ldi r25,hi8(-4)
 1936 0a5e 7906      		cpc r7,r25
 1937 0a60 04F0      		brlt .L80	 ;  1075	branch	[length = 1]
 1938               	.LVL194:
 189:bertos/mware/formatwr.c **** 			nr_of_digits -= integral_10_log;
 1939               		.loc 1 189 0
 1940 0a62 A618      		sub r10,r6	 ;  1078	subhi3/1	[length = 2]
 1941 0a64 B708      		sbc r11,r7
 1942               	.LVL195:
 188:bertos/mware/formatwr.c **** 			format_flag = 0;
 1943               		.loc 1 188 0
 1944 0a66 2224      		clr r2	 ;  97	*movqi/7	[length = 1]
 1945               	.LVL196:
 1946               	.L80:
 191:bertos/mware/formatwr.c **** 		nr_of_digits--;
 1947               		.loc 1 191 0
 1948 0a68 0894      		sec	 ;  1084	*addhi3/6	[length = 3]
 1949 0a6a A108      		sbc r10,__zero_reg__
 1950 0a6c B108      		sbc r11,__zero_reg__
 1951               	.LVL197:
 192:bertos/mware/formatwr.c **** 		if (alternate_flag)
 1952               		.loc 1 192 0
 1953 0a6e 3320      		tst r3	 ;  1086	*cmpqi/1	[length = 1]
 1954 0a70 01F0      		breq .L156	 ;  1087	branch	[length = 1]
 194:bertos/mware/formatwr.c **** 			g_flag = 0;
 1955               		.loc 1 194 0
 1956 0a72 00E0      		ldi r16,lo8(0)	 ;  99	*movqi/2	[length = 1]
 1957 0a74 00C0      		rjmp .L79	 ;  3290	jump	[length = 1]
 1958               	.L156:
 197:bertos/mware/formatwr.c **** 			alternate_flag = true;
 1959               		.loc 1 197 0
 1960 0a76 3324      		clr r3	 ;  2103	*movqi/7	[length = 2]
 1961 0a78 3394      		inc r3
 1962               	.LVL198:
 192:bertos/mware/formatwr.c **** 		if (alternate_flag)
 1963               		.loc 1 192 0
 1964 0a7a 01E0      		ldi r16,lo8(1)	 ;  2104	*movqi/2	[length = 1]
 1965               	.L79:
 1966               	.LVL199:
 201:bertos/mware/formatwr.c **** 	if (format_flag)
 1967               		.loc 1 201 0
 1968 0a7c 2220      		tst r2	 ;  1095	*cmpqi/1	[length = 1]
 1969 0a7e 01F0      		breq .+2	 ;  1096	branch	[length = 2]
 1970 0a80 00C0      		rjmp .L157
 208:bertos/mware/formatwr.c **** 		if (integral_10_log < 0)
 1971               		.loc 1 208 0
 1972 0a82 77FE      		sbrs r7,7	 ;  3131	*sbrx_and_branchhi	[length = 2]
 1973 0a84 00C0      		rjmp .L82
 210:bertos/mware/formatwr.c **** 			*buf_pointer++ = '0';
 1974               		.loc 1 210 0
 1975 0a86 E1E0      		ldi r30,lo8(1)	 ;  2902	*movhi/4	[length = 2]
 1976 0a88 F0E0      		ldi r31,hi8(1)
 1977 0a8a EC0F      		add r30,r28	 ;  2903	*addhi3/1	[length = 2]
 1978 0a8c FD1F      		adc r31,r29
 1979 0a8e C357      		subi r28,lo8(-141)	 ;  2904	*movhi/2	[length = 6]
 1980 0a90 DF4F      		sbci r29,hi8(-141)
 1981 0a92 2881      		ld r18,Y
 1982 0a94 3981      		ldd r19,Y+1
 1983 0a96 CD58      		subi r28,lo8(141)
 1984 0a98 D040      		sbci r29,hi8(141)
 1985 0a9a E20F      		add r30,r18	 ;  1101	*addhi3/1	[length = 2]
 1986 0a9c F31F      		adc r31,r19
 1987 0a9e 30E3      		ldi r19,lo8(48)	 ;  2905	*movqi/2	[length = 1]
 1988 0aa0 3083      		st Z,r19	 ;  1103	*movqi/3	[length = 1]
 1989               	.LVL200:
 211:bertos/mware/formatwr.c **** 			if ((n = nr_of_digits) || alternate_flag)
 1990               		.loc 1 211 0
 1991 0aa2 A114      		cp r10,__zero_reg__	 ;  1106	*cmphi/2	[length = 2]
 1992 0aa4 B104      		cpc r11,__zero_reg__
 1993 0aa6 01F4      		brne .L83	 ;  1107	branch	[length = 1]
 1994 0aa8 3320      		tst r3	 ;  1109	*cmpqi/1	[length = 1]
 1995 0aaa 01F4      		brne .L83	 ;  1110	branch	[length = 1]
 210:bertos/mware/formatwr.c **** 			*buf_pointer++ = '0';
 1996               		.loc 1 210 0
 1997 0aac 4201      		movw r8,r4	 ;  2906	*movhi/1	[length = 1]
 1998 0aae 0894      		sec	 ;  1112	*addhi3/5	[length = 3]
 1999 0ab0 811C      		adc r8,__zero_reg__
 2000 0ab2 911C      		adc r9,__zero_reg__
 2001 0ab4 20E0      		ldi r18,lo8(0)	 ;  103	*movhi/4	[length = 2]
 2002 0ab6 30E0      		ldi r19,hi8(0)
 2003 0ab8 00C0      		rjmp .L84	 ;  3292	jump	[length = 1]
 2004               	.L83:
 212:bertos/mware/formatwr.c **** 				*buf_pointer++ = '.';
 2005               		.loc 1 212 0
 2006 0aba E2E0      		ldi r30,lo8(2)	 ;  2908	*movhi/4	[length = 2]
 2007 0abc F0E0      		ldi r31,hi8(2)
 2008 0abe EC0F      		add r30,r28	 ;  2909	*addhi3/1	[length = 2]
 2009 0ac0 FD1F      		adc r31,r29
 2010 0ac2 C357      		subi r28,lo8(-141)	 ;  2910	*movhi/2	[length = 6]
 2011 0ac4 DF4F      		sbci r29,hi8(-141)
 2012 0ac6 4881      		ld r20,Y
 2013 0ac8 5981      		ldd r21,Y+1
 2014 0aca CD58      		subi r28,lo8(141)
 2015 0acc D040      		sbci r29,hi8(141)
 2016 0ace E40F      		add r30,r20	 ;  1118	*addhi3/1	[length = 2]
 2017 0ad0 F51F      		adc r31,r21
 2018 0ad2 8EE2      		ldi r24,lo8(46)	 ;  1119	*movqi/2	[length = 1]
 2019 0ad4 8083      		st Z,r24	 ;  1120	*movqi/3	[length = 1]
 2020 0ad6 92E0      		ldi r25,lo8(2)	 ;  3130	*reload_inhi	[length = 3]
 2021 0ad8 892E      		mov r8,r25
 2022 0ada 912C      		mov r9,__zero_reg__
 2023 0adc 840C      		add r8,r4	 ;  1121	*addhi3/1	[length = 2]
 2024 0ade 951C      		adc r9,r5
 2025               	.LVL201:
 2026 0ae0 9501      		movw r18,r10	 ;  102	*movhi/1	[length = 1]
 2027               	.L84:
 210:bertos/mware/formatwr.c **** 			*buf_pointer++ = '0';
 2028               		.loc 1 210 0
 2029 0ae2 80E0      		ldi r24,lo8(0)	 ;  104	*movhi/4	[length = 2]
 2030 0ae4 90E0      		ldi r25,hi8(0)
 2031 0ae6 F401      		movw r30,r8	 ;  2596	*movhi/1	[length = 1]
 2032 0ae8 00C0      		rjmp .L85	 ;  3294	jump	[length = 1]
 2033               	.LVL202:
 2034               	.L87:
 216:bertos/mware/formatwr.c **** 				*buf_pointer++ = '0';
 2035               		.loc 1 216 0
 2036 0aea 50E3      		ldi r21,lo8(48)	 ;  2912	*movqi/2	[length = 1]
 2037 0aec 5193      		st Z+,r21	 ;  1129	*movqi/3	[length = 1]
 2038               	.LVL203:
 217:bertos/mware/formatwr.c **** 				nr_of_digits--;
 2039               		.loc 1 217 0
 2040 0aee 2150      		subi r18,lo8(-(-1))	 ;  1132	*addhi3/4	[length = 2]
 2041 0af0 3040      		sbci r19,hi8(-(-1))
 2042               	.LVL204:
 2043               	.L85:
 214:bertos/mware/formatwr.c **** 			while (--i > integral_10_log && nr_of_digits)
 2044               		.loc 1 214 0
 2045 0af2 0197      		sbiw r24,1	 ;  1139	*addhi3/3	[length = 1]
 2046               	.LVL205:
 2047 0af4 8615      		cp r24,r6	 ;  1141	*cmphi/3	[length = 2]
 2048 0af6 9705      		cpc r25,r7
 2049 0af8 01F0      		breq .L86	 ;  1142	branch	[length = 1]
 2050 0afa 2115      		cp r18,__zero_reg__	 ;  1145	*cmphi/2	[length = 2]
 2051 0afc 3105      		cpc r19,__zero_reg__
 2052 0afe 01F4      		brne .L87	 ;  1146	branch	[length = 1]
 2053               	.L86:
 2054 0b00 4F01      		movw r8,r30	 ;  2607	*movhi/1	[length = 1]
 219:bertos/mware/formatwr.c **** 			if (integral_10_log < (-n - 1))
 2055               		.loc 1 219 0
 2056 0b02 C501      		movw r24,r10	 ;  2913	*movhi/1	[length = 1]
 2057               	.LVL206:
 2058 0b04 8095      		com r24	 ;  1149	one_cmplhi2	[length = 2]
 2059 0b06 9095      		com r25
 2060 0b08 6816      		cp r6,r24	 ;  1150	*cmphi/3	[length = 2]
 2061 0b0a 7906      		cpc r7,r25
 2062 0b0c 04F4      		brge .+2	 ;  1151	branch	[length = 2]
 2063 0b0e 00C0      		rjmp .L88
 2064 0b10 5901      		movw r10,r18	 ;  107	*movhi/1	[length = 1]
 2065               	.LVL207:
 222:bertos/mware/formatwr.c **** 			dec_point_pos = 1;
 2066               		.loc 1 222 0
 2067 0b12 81E0      		ldi r24,lo8(1)	 ;  108	*movhi/4	[length = 2]
 2068 0b14 90E0      		ldi r25,hi8(1)
 2069               	.LVL208:
 2070 0b16 00C0      		rjmp .L81	 ;  3296	jump	[length = 1]
 2071               	.LVL209:
 2072               	.L82:
 226:bertos/mware/formatwr.c **** 			dec_point_pos = - integral_10_log;
 2073               		.loc 1 226 0
 2074 0b18 8827      		clr r24	 ;  1157	neghi2/3	[length = 4]
 2075 0b1a 9927      		clr r25
 2076 0b1c 8619      		sub r24,r6
 2077 0b1e 9709      		sbc r25,r7
 2078               	.LVL210:
 733:bertos/mware/formatwr.c **** 				ptr = float_conversion (fvalue,
 2079               		.loc 1 733 0
 2080 0b20 4201      		movw r8,r4	 ;  109	*movhi/1	[length = 1]
 2081 0b22 00C0      		rjmp .L81	 ;  3298	jump	[length = 1]
 2082               	.LVL211:
 2083               	.L157:
 2084 0b24 4201      		movw r8,r4	 ;  105	*movhi/1	[length = 1]
 203:bertos/mware/formatwr.c **** 		dec_point_pos = 0;
 2085               		.loc 1 203 0
 2086 0b26 80E0      		ldi r24,lo8(0)	 ;  106	*movhi/4	[length = 2]
 2087 0b28 90E0      		ldi r25,hi8(0)
 2088               	.LVL212:
 2089               	.L81:
 226:bertos/mware/formatwr.c **** 			dec_point_pos = - integral_10_log;
 2090               		.loc 1 226 0
 2091 0b2a C256      		subi r28,lo8(-158)	 ;  1165	*movhi/3	[length = 6]
 2092 0b2c DF4F      		sbci r29,hi8(-158)
 2093 0b2e 9983      		std Y+1,r25
 2094 0b30 8883      		st Y,r24
 2095 0b32 CE59      		subi r28,lo8(158)
 2096 0b34 D040      		sbci r29,hi8(158)
 2097 0b36 00C0      		rjmp .L89	 ;  3300	jump	[length = 1]
 2098               	.LVL213:
 2099               	.L92:
 233:bertos/mware/formatwr.c **** 		value -= (max_float_t)(n = (short)value); /* n=Digit value=Remainder */
 2100               		.loc 1 233 0
 2101 0b38 C701      		movw r24,r14	 ;  1169	*movsf/1	[length = 2]
 2102 0b3a B601      		movw r22,r12
 2103 0b3c 0E94 0000 		call __fixsfsi	 ;  1170	call_value_insn/3	[length = 2]
 2104 0b40 DC01      		movw r26,r24	 ;  1171	*movsi/1	[length = 2]
 2105 0b42 CB01      		movw r24,r22
 2106 0b44 CF55      		subi r28,lo8(-161)	 ;  1172	*movhi/3	[length = 6]
 2107 0b46 DF4F      		sbci r29,hi8(-161)
 2108 0b48 9983      		std Y+1,r25
 2109 0b4a 8883      		st Y,r24
 2110 0b4c C15A      		subi r28,lo8(161)
 2111 0b4e D040      		sbci r29,hi8(161)
 2112               	.LVL214:
 2113 0b50 FC01      		movw r30,r24	 ;  2914	*movhi/1	[length = 1]
 2114 0b52 BF01      		movw r22,r30	 ;  1174	extendhisi2/2	[length = 5]
 2115 0b54 8827      		clr r24
 2116 0b56 77FD      		sbrc r23,7
 2117 0b58 8095      		com r24
 2118 0b5a 982F      		mov r25,r24
 2119 0b5c 0E94 0000 		call __floatsisf	 ;  1176	call_value_insn/3	[length = 2]
 2120               	.LVL215:
 2121 0b60 9B01      		movw r18,r22	 ;  1177	*movsf/1	[length = 2]
 2122 0b62 AC01      		movw r20,r24
 2123 0b64 C701      		movw r24,r14	 ;  1178	*movsf/1	[length = 2]
 2124 0b66 B601      		movw r22,r12
 2125 0b68 0E94 0000 		call __subsf3	 ;  1180	call_value_insn/3	[length = 2]
 2126               	.LVL216:
 234:bertos/mware/formatwr.c **** 		value *= 10; /* Prepare for next shot */
 2127               		.loc 1 234 0
 2128 0b6c 9C01      		movw r18,r24	 ;  3123	*movhi/1	[length = 1]
 2129 0b6e CB01      		movw r24,r22	 ;  3124	*movhi/1	[length = 1]
 2130               	.LVL217:
 2131 0b70 D901      		movw r26,r18	 ;  3125	*movhi/1	[length = 1]
 2132 0b72 BC01      		movw r22,r24	 ;  2397	*movsf/1	[length = 2]
 2133 0b74 CD01      		movw r24,r26
 2134 0b76 20E0      		ldi r18,lo8(0x41200000)	 ;  1185	*movsf/5	[length = 4]
 2135 0b78 30E0      		ldi r19,hi8(0x41200000)
 2136 0b7a 40E2      		ldi r20,hlo8(0x41200000)
 2137 0b7c 51E4      		ldi r21,hhi8(0x41200000)
 2138 0b7e 0E94 0000 		call __mulsf3	 ;  1186	call_value_insn/3	[length = 2]
 2139 0b82 6B01      		movw r12,r22	 ;  3128	*movhi/1	[length = 1]
 2140 0b84 7C01      		movw r14,r24	 ;  3129	*movhi/1	[length = 1]
 2141               	.LVL218:
 235:bertos/mware/formatwr.c **** 		*buf_pointer++ = n + '0';
 2142               		.loc 1 235 0
 2143 0b86 CF55      		subi r28,lo8(-161)	 ;  2915	*movqi/4	[length = 5]
 2144 0b88 DF4F      		sbci r29,hi8(-161)
 2145 0b8a 8881      		ld r24,Y
 2146 0b8c C15A      		subi r28,lo8(161)
 2147 0b8e D040      		sbci r29,hi8(161)
 2148 0b90 805D      		subi r24,lo8(-(48))	 ;  1190	addqi3/2	[length = 1]
 2149 0b92 F401      		movw r30,r8	 ;  2145	*movhi/1	[length = 1]
 2150 0b94 8193      		st Z+,r24	 ;  1191	*movqi/3	[length = 1]
 2151               	.LVL219:
 236:bertos/mware/formatwr.c **** 		if ( ! i++ && (nr_of_digits || alternate_flag))
 2152               		.loc 1 236 0
 2153 0b96 C256      		subi r28,lo8(-158)	 ;  2916	*movhi/2	[length = 6]
 2154 0b98 DF4F      		sbci r29,hi8(-158)
 2155 0b9a 2881      		ld r18,Y
 2156 0b9c 3981      		ldd r19,Y+1
 2157 0b9e CE59      		subi r28,lo8(158)
 2158 0ba0 D040      		sbci r29,hi8(158)
 2159 0ba2 2115      		cp r18,__zero_reg__	 ;  1195	*cmphi/2	[length = 2]
 2160 0ba4 3105      		cpc r19,__zero_reg__
 2161 0ba6 01F4      		brne .L90	 ;  1196	branch	[length = 1]
 2162 0ba8 A114      		cp r10,__zero_reg__	 ;  1198	*cmphi/2	[length = 2]
 2163 0baa B104      		cpc r11,__zero_reg__
 2164 0bac 01F4      		brne .L91	 ;  1199	branch	[length = 1]
 2165 0bae 3320      		tst r3	 ;  1201	*cmpqi/1	[length = 1]
 2166 0bb0 01F0      		breq .L90	 ;  1202	branch	[length = 1]
 2167               	.L91:
 237:bertos/mware/formatwr.c **** 			*buf_pointer++ = '.';
 2168               		.loc 1 237 0
 2169 0bb2 2EE2      		ldi r18,lo8(46)	 ;  2918	*movqi/2	[length = 1]
 2170 0bb4 F401      		movw r30,r8	 ;  2917	*movhi/1	[length = 1]
 2171               	.LVL220:
 2172 0bb6 2183      		std Z+1,r18	 ;  1206	*movqi/3	[length = 1]
 2173 0bb8 3296      		adiw r30,2	 ;  1207	*addhi3/2	[length = 1]
 2174               	.LVL221:
 2175               	.L90:
 2176 0bba C256      		subi r28,lo8(-158)	 ;  2920	*movhi/2	[length = 6]
 2177 0bbc DF4F      		sbci r29,hi8(-158)
 2178 0bbe 4881      		ld r20,Y
 2179 0bc0 5981      		ldd r21,Y+1
 2180 0bc2 CE59      		subi r28,lo8(158)
 2181 0bc4 D040      		sbci r29,hi8(158)
 2182 0bc6 4F5F      		subi r20,lo8(-(1))	 ;  1211	*addhi3/4	[length = 2]
 2183 0bc8 5F4F      		sbci r21,hi8(-(1))
 2184 0bca C256      		subi r28,lo8(-158)	 ;  2921	*movhi/3	[length = 6]
 2185 0bcc DF4F      		sbci r29,hi8(-158)
 2186 0bce 5983      		std Y+1,r21
 2187 0bd0 4883      		st Y,r20
 2188 0bd2 CE59      		subi r28,lo8(158)
 2189 0bd4 D040      		sbci r29,hi8(158)
 733:bertos/mware/formatwr.c **** 				ptr = float_conversion (fvalue,
 2190               		.loc 1 733 0
 2191 0bd6 4F01      		movw r8,r30	 ;  110	*movhi/1	[length = 1]
 2192               	.LVL222:
 2193               	.L89:
 231:bertos/mware/formatwr.c **** 	while (i <= nr_of_digits )
 2194               		.loc 1 231 0
 2195 0bd8 C256      		subi r28,lo8(-158)	 ;  2922	*movhi/2	[length = 6]
 2196 0bda DF4F      		sbci r29,hi8(-158)
 2197 0bdc 8881      		ld r24,Y
 2198 0bde 9981      		ldd r25,Y+1
 2199 0be0 CE59      		subi r28,lo8(158)
 2200 0be2 D040      		sbci r29,hi8(158)
 2201 0be4 A816      		cp r10,r24	 ;  1219	*cmphi/3	[length = 2]
 2202 0be6 B906      		cpc r11,r25
 2203 0be8 04F0      		brlt .+2	 ;  1220	branch	[length = 2]
 2204 0bea 00C0      		rjmp .L92
 241:bertos/mware/formatwr.c **** 	if (value >= 5)
 2205               		.loc 1 241 0
 2206 0bec C701      		movw r24,r14	 ;  1222	*movsf/1	[length = 2]
 2207 0bee B601      		movw r22,r12
 2208 0bf0 20E0      		ldi r18,lo8(0x40a00000)	 ;  1223	*movsf/5	[length = 4]
 2209 0bf2 30E0      		ldi r19,hi8(0x40a00000)
 2210 0bf4 40EA      		ldi r20,hlo8(0x40a00000)
 2211 0bf6 50E4      		ldi r21,hhi8(0x40a00000)
 2212 0bf8 0E94 0000 		call __gesf2	 ;  1224	call_value_insn/3	[length = 2]
 2213 0bfc 87FD      		sbrc r24,7	 ;  3121	*sbrx_branchhi	[length = 2]
 2214 0bfe 00C0      		rjmp .L88
 2215               	.LVL223:
 2216 0c00 F401      		movw r30,r8	 ;  1234	*movhi/1	[length = 1]
 243:bertos/mware/formatwr.c **** 		n = 1; /* Carry */
 2217               		.loc 1 243 0
 2218 0c02 81E0      		ldi r24,lo8(1)	 ;  112	*movhi/4	[length = 2]
 2219 0c04 90E0      		ldi r25,hi8(1)
 2220               	.LVL224:
 2221               	.L95:
 247:bertos/mware/formatwr.c **** 			if (*cp != '.')
 2222               		.loc 1 247 0
 2223 0c06 2291      		ld r18,-Z	 ;  1240	*movqi/4	[length = 1]
 2224 0c08 2E32      		cpi r18,lo8(46)	 ;  1241	*cmpqi/3	[length = 1]
 2225 0c0a 01F0      		breq .L94	 ;  1242	branch	[length = 1]
 249:bertos/mware/formatwr.c **** 				if ( (*cp += n) == ('9' + 1) )
 2226               		.loc 1 249 0
 2227 0c0c 820F      		add r24,r18	 ;  1244	addqi3/1	[length = 1]
 2228               	.LVL225:
 2229 0c0e 8083      		st Z,r24	 ;  1245	*movqi/3	[length = 1]
 2230 0c10 8A33      		cpi r24,lo8(58)	 ;  1246	*cmpqi/3	[length = 1]
 2231 0c12 01F4      		brne .L158	 ;  1247	branch	[length = 1]
 251:bertos/mware/formatwr.c **** 					*cp = '0';
 2232               		.loc 1 251 0
 2233 0c14 90E3      		ldi r25,lo8(48)	 ;  2923	*movqi/2	[length = 1]
 2234 0c16 9083      		st Z,r25	 ;  1250	*movqi/3	[length = 1]
 2235               	.LVL226:
 252:bertos/mware/formatwr.c **** 					n = 1;
 2236               		.loc 1 252 0
 2237 0c18 81E0      		ldi r24,lo8(1)	 ;  2073	*movhi/4	[length = 2]
 2238 0c1a 90E0      		ldi r25,hi8(1)
 2239 0c1c 00C0      		rjmp .L94	 ;  3302	jump	[length = 1]
 2240               	.LVL227:
 2241               	.L158:
 255:bertos/mware/formatwr.c **** 					n = 0;
 2242               		.loc 1 255 0
 2243 0c1e 80E0      		ldi r24,lo8(0)	 ;  2071	*movhi/4	[length = 2]
 2244 0c20 90E0      		ldi r25,hi8(0)
 2245               	.L94:
 2246               	.LVL228:
 257:bertos/mware/formatwr.c **** 		} while (cp-- > buf);
 2247               		.loc 1 257 0
 2248 0c22 4E16      		cp r4,r30	 ;  1257	*cmphi/3	[length = 2]
 2249 0c24 5F06      		cpc r5,r31
 2250 0c26 00F0      		brlo .L95	 ;  1258	branch	[length = 1]
 258:bertos/mware/formatwr.c **** 		if (n)
 2251               		.loc 1 258 0
 2252 0c28 0097      		sbiw r24,0	 ;  1260	*cmphi/1	[length = 1]
 2253 0c2a 01F0      		breq .L88	 ;  1261	branch	[length = 1]
 261:bertos/mware/formatwr.c **** 			if (format_flag)
 2254               		.loc 1 261 0
 2255 0c2c 2220      		tst r2	 ;  1263	*cmpqi/1	[length = 1]
 2256 0c2e 01F0      		breq .L96	 ;  1264	branch	[length = 1]
 2257 0c30 D401      		movw r26,r8	 ;  115	*movhi/1	[length = 1]
 2258 0c32 00C0      		rjmp .L97	 ;  3304	jump	[length = 1]
 2259               	.LVL229:
 2260               	.L100:
 266:bertos/mware/formatwr.c **** 					if (*(cp - 1) == '.')
 2261               		.loc 1 266 0
 2262 0c34 FD01      		movw r30,r26	 ;  2924	*movhi/1	[length = 1]
 2263 0c36 8291      		ld r24,-Z	 ;  1271	*movqi/4	[length = 1]
 2264 0c38 9F01      		movw r18,r30	 ;  2925	*movhi/1	[length = 1]
 2265 0c3a 8E32      		cpi r24,lo8(46)	 ;  1272	*cmpqi/3	[length = 1]
 2266 0c3c 01F4      		brne .L98	 ;  1273	branch	[length = 1]
 268:bertos/mware/formatwr.c **** 						*cp = *(cp - 2);
 2267               		.loc 1 268 0
 2268 0c3e FD01      		movw r30,r26	 ;  2926	*movhi/1	[length = 1]
 2269 0c40 3297      		sbiw r30,2	 ;  1276	*addhi3/3	[length = 1]
 2270 0c42 8081      		ld r24,Z	 ;  1277	*movqi/4	[length = 1]
 2271 0c44 8C93      		st X,r24	 ;  1278	*movqi/3	[length = 1]
 269:bertos/mware/formatwr.c **** 						cp--;
 2272               		.loc 1 269 0
 2273 0c46 D901      		movw r26,r18	 ;  1279	*movhi/1	[length = 1]
 2274               	.LVL230:
 2275 0c48 00C0      		rjmp .L99	 ;  3306	jump	[length = 1]
 2276               	.LVL231:
 2277               	.L98:
 272:bertos/mware/formatwr.c **** 						*cp = *(cp - 1);
 2278               		.loc 1 272 0
 2279 0c4a 8C93      		st X,r24	 ;  1288	*movqi/3	[length = 1]
 2280               	.LVL232:
 2281               	.L99:
 273:bertos/mware/formatwr.c **** 					cp--;
 2282               		.loc 1 273 0
 2283 0c4c 1197      		sbiw r26,1	 ;  1292	*addhi3/3	[length = 1]
 2284               	.LVL233:
 2285               	.L97:
 264:bertos/mware/formatwr.c **** 				while (cp > buf)
 2286               		.loc 1 264 0
 2287 0c4e 4A16      		cp r4,r26	 ;  1298	*cmphi/3	[length = 2]
 2288 0c50 5B06      		cpc r5,r27
 2289 0c52 00F0      		brlo .L100	 ;  1299	branch	[length = 1]
 275:bertos/mware/formatwr.c **** 				integral_10_log++;
 2290               		.loc 1 275 0
 2291 0c54 0894      		sec	 ;  1301	*addhi3/5	[length = 3]
 2292 0c56 611C      		adc r6,__zero_reg__
 2293 0c58 711C      		adc r7,__zero_reg__
 2294               	.LVL234:
 2295 0c5a 00C0      		rjmp .L101	 ;  3308	jump	[length = 1]
 2296               	.LVL235:
 2297               	.L96:
 279:bertos/mware/formatwr.c **** 				cp = ++buf_pointer;
 2298               		.loc 1 279 0
 2299 0c5c 0894      		sec	 ;  1307	*addhi3/5	[length = 3]
 2300 0c5e 811C      		adc r8,__zero_reg__
 2301 0c60 911C      		adc r9,__zero_reg__
 2302               	.LVL236:
 2303 0c62 D401      		movw r26,r8	 ;  116	*movhi/1	[length = 1]
 2304 0c64 00C0      		rjmp .L102	 ;  3310	jump	[length = 1]
 2305               	.LVL237:
 2306               	.L103:
 334:bertos/mware/formatwr.c **** PGM_FUNC(_formatted_write)(const char * PGM_ATTR format,
 2307               		.loc 1 334 0
 2308 0c66 FD01      		movw r30,r26	 ;  2147	*movhi/1	[length = 1]
 282:bertos/mware/formatwr.c **** 					*cp = *(cp - 1);
 2309               		.loc 1 282 0
 2310 0c68 8291      		ld r24,-Z	 ;  1314	*movqi/4	[length = 1]
 2311 0c6a 8C93      		st X,r24	 ;  1315	*movqi/3	[length = 1]
 2312               	.LVL238:
 283:bertos/mware/formatwr.c **** 					cp--;
 2313               		.loc 1 283 0
 2314 0c6c DF01      		movw r26,r30	 ;  117	*movhi/1	[length = 1]
 2315               	.LVL239:
 2316               	.L102:
 280:bertos/mware/formatwr.c **** 				while (cp > buf)
 2317               		.loc 1 280 0
 2318 0c6e 4A16      		cp r4,r26	 ;  1321	*cmphi/3	[length = 2]
 2319 0c70 5B06      		cpc r5,r27
 2320 0c72 00F0      		brlo .L103	 ;  1322	branch	[length = 1]
 2321               	.L101:
 286:bertos/mware/formatwr.c **** 			*buf = '1';
 2322               		.loc 1 286 0
 2323 0c74 E1E0      		ldi r30,lo8(1)	 ;  2928	*movhi/4	[length = 2]
 2324 0c76 F0E0      		ldi r31,hi8(1)
 2325 0c78 EC0F      		add r30,r28	 ;  2929	*addhi3/1	[length = 2]
 2326 0c7a FD1F      		adc r31,r29
 2327 0c7c C357      		subi r28,lo8(-141)	 ;  2930	*movhi/2	[length = 6]
 2328 0c7e DF4F      		sbci r29,hi8(-141)
 2329 0c80 2881      		ld r18,Y
 2330 0c82 3981      		ldd r19,Y+1
 2331 0c84 CD58      		subi r28,lo8(141)
 2332 0c86 D040      		sbci r29,hi8(141)
 2333 0c88 E20F      		add r30,r18	 ;  1327	*addhi3/1	[length = 2]
 2334 0c8a F31F      		adc r31,r19
 2335 0c8c 81E3      		ldi r24,lo8(49)	 ;  1328	*movqi/2	[length = 1]
 2336 0c8e 8083      		st Z,r24	 ;  1329	*movqi/3	[length = 1]
 2337               	.LVL240:
 2338               	.L88:
 292:bertos/mware/formatwr.c **** 	if (g_flag)
 2339               		.loc 1 292 0
 2340 0c90 0023      		tst r16	 ;  1334	*cmpqi/1	[length = 1]
 2341 0c92 01F0      		breq .L104	 ;  1335	branch	[length = 1]
 2342 0c94 00C0      		rjmp .L177	 ;  3313	jump	[length = 1]
 2343               	.L159:
 295:bertos/mware/formatwr.c **** 			buf_pointer--;
 2344               		.loc 1 295 0
 2345 0c96 4F01      		movw r8,r30	 ;  118	*movhi/1	[length = 1]
 2346               	.LVL241:
 2347               	.L177:
 334:bertos/mware/formatwr.c **** PGM_FUNC(_formatted_write)(const char * PGM_ATTR format,
 2348               		.loc 1 334 0
 2349 0c98 F401      		movw r30,r8	 ;  2148	*movhi/1	[length = 1]
 294:bertos/mware/formatwr.c **** 		while (*(buf_pointer - 1) == '0')
 2350               		.loc 1 294 0
 2351 0c9a 8291      		ld r24,-Z	 ;  1340	*movqi/4	[length = 1]
 2352 0c9c 8033      		cpi r24,lo8(48)	 ;  1342	*cmpqi/3	[length = 1]
 2353 0c9e 01F0      		breq .L159	 ;  1343	branch	[length = 1]
 296:bertos/mware/formatwr.c **** 		if (*(buf_pointer - 1) == '.')
 2354               		.loc 1 296 0
 2355 0ca0 8E32      		cpi r24,lo8(46)	 ;  1345	*cmpqi/3	[length = 1]
 2356 0ca2 01F4      		brne .L104	 ;  1346	branch	[length = 1]
 297:bertos/mware/formatwr.c **** 			buf_pointer--;
 2357               		.loc 1 297 0
 2358 0ca4 4F01      		movw r8,r30	 ;  1348	*movhi/1	[length = 1]
 2359               	.LVL242:
 2360               	.L104:
 301:bertos/mware/formatwr.c **** 	if (format_flag)
 2361               		.loc 1 301 0
 2362 0ca6 2220      		tst r2	 ;  1353	*cmpqi/1	[length = 1]
 2363 0ca8 01F4      		brne .+2	 ;  1354	branch	[length = 2]
 2364 0caa 00C0      		rjmp .L160
 303:bertos/mware/formatwr.c **** 		*buf_pointer++ = format_flag;
 2365               		.loc 1 303 0
 2366 0cac F401      		movw r30,r8	 ;  2931	*movhi/1	[length = 1]
 2367 0cae 2082      		st Z,r2	 ;  1356	*movqi/3	[length = 1]
 2368               	.LVL243:
 2369 0cb0 9401      		movw r18,r8	 ;  2932	*movhi/1	[length = 1]
 2370 0cb2 2E5F      		subi r18,lo8(-(2))	 ;  2047	*addhi3/4	[length = 2]
 2371 0cb4 3F4F      		sbci r19,hi8(-(2))
 304:bertos/mware/formatwr.c **** 		if (integral_10_log < 0)
 2372               		.loc 1 304 0
 2373 0cb6 77FE      		sbrs r7,7	 ;  3120	*sbrx_and_branchhi	[length = 2]
 2374 0cb8 00C0      		rjmp .L107
 306:bertos/mware/formatwr.c **** 			*buf_pointer++ = '-';
 2375               		.loc 1 306 0
 2376 0cba 8DE2      		ldi r24,lo8(45)	 ;  1361	*movqi/2	[length = 1]
 2377 0cbc 8183      		std Z+1,r24	 ;  1362	*movqi/3	[length = 1]
 2378               	.LVL244:
 307:bertos/mware/formatwr.c **** 			integral_10_log = -integral_10_log;
 2379               		.loc 1 307 0
 2380 0cbe 7094      		com r7	 ;  1365	neghi2/2	[length = 4]
 2381 0cc0 6194      		neg r6
 2382 0cc2 7108      		sbc r7,__zero_reg__
 2383 0cc4 7394      		inc r7
 2384               	.LVL245:
 2385 0cc6 00C0      		rjmp .L108	 ;  3315	jump	[length = 1]
 2386               	.LVL246:
 2387               	.L107:
 310:bertos/mware/formatwr.c **** 			*buf_pointer++ = '+';
 2388               		.loc 1 310 0
 2389 0cc8 8BE2      		ldi r24,lo8(43)	 ;  1371	*movqi/2	[length = 1]
 2390 0cca F401      		movw r30,r8	 ;  2933	*movhi/1	[length = 1]
 2391 0ccc 8183      		std Z+1,r24	 ;  1372	*movqi/3	[length = 1]
 2392               	.LVL247:
 2393               	.L108:
 312:bertos/mware/formatwr.c **** 		buf_pointer +=10;
 2394               		.loc 1 312 0
 2395 0cce C901      		movw r24,r18	 ;  2934	*movhi/1	[length = 1]
 2396 0cd0 0A96      		adiw r24,10	 ;  1381	*addhi3/2	[length = 1]
 311:bertos/mware/formatwr.c **** 		n = 0;
 2397               		.loc 1 311 0
 2398 0cd2 EE24      		clr r14	 ;  120	*movhi/5	[length = 2]
 2399 0cd4 FF24      		clr r15
 316:bertos/mware/formatwr.c **** 			*buf_pointer++ = (integral_10_log % 10) + '0';
 2400               		.loc 1 316 0
 2401 0cd6 2AE0      		ldi r18,lo8(10)	 ;  1393	*movhi/4	[length = 2]
 2402 0cd8 30E0      		ldi r19,hi8(10)
 2403               	.LVL248:
 2404               	.L173:
 310:bertos/mware/formatwr.c **** 			*buf_pointer++ = '+';
 2405               		.loc 1 310 0
 2406 0cda 6C01      		movw r12,r24	 ;  1387	*movhi/1	[length = 1]
 2407               	.LVL249:
 315:bertos/mware/formatwr.c **** 			n++;
 2408               		.loc 1 315 0
 2409 0cdc 0894      		sec	 ;  1391	*addhi3/5	[length = 3]
 2410 0cde E11C      		adc r14,__zero_reg__
 2411 0ce0 F11C      		adc r15,__zero_reg__
 2412               	.LVL250:
 316:bertos/mware/formatwr.c **** 			*buf_pointer++ = (integral_10_log % 10) + '0';
 2413               		.loc 1 316 0
 2414 0ce2 C301      		movw r24,r6	 ;  2334	*movhi/1	[length = 1]
 2415               	.LVL251:
 2416 0ce4 B901      		movw r22,r18	 ;  2335	*movhi/1	[length = 1]
 2417 0ce6 0E94 0000 		call __divmodhi4	 ;  2336	*divmodhi4_call	[length = 2]
 2418 0cea 805D      		subi r24,lo8(-(48))	 ;  1395	addqi3/2	[length = 1]
 2419 0cec F601      		movw r30,r12	 ;  2935	*movhi/1	[length = 1]
 2420 0cee 8083      		st Z,r24	 ;  1396	*movqi/3	[length = 1]
 2421 0cf0 C601      		movw r24,r12	 ;  2936	*movhi/1	[length = 1]
 2422 0cf2 0196      		adiw r24,1	 ;  1397	*addhi3/2	[length = 1]
 2423               	.LVL252:
 317:bertos/mware/formatwr.c **** 			integral_10_log /= 10;
 2424               		.loc 1 317 0
 2425 0cf4 3B01      		movw r6,r22	 ;  3119	*movhi/1	[length = 1]
 2426               	.LVL253:
 318:bertos/mware/formatwr.c **** 		} while ( integral_10_log || n < 2 );
 2427               		.loc 1 318 0
 2428 0cf6 6115      		cp r22,__zero_reg__	 ;  1405	*cmphi/2	[length = 2]
 2429 0cf8 7105      		cpc r23,__zero_reg__
 2430 0cfa 01F4      		brne .L173	 ;  1406	branch	[length = 1]
 2431 0cfc F2E0      		ldi r31,lo8(2)	 ;  1408	*cmphi/6	[length = 3]
 2432 0cfe EF16      		cp r14,r31
 2433 0d00 F104      		cpc r15,__zero_reg__
 2434 0d02 04F0      		brlt .L173	 ;  1409	branch	[length = 1]
 334:bertos/mware/formatwr.c **** PGM_FUNC(_formatted_write)(const char * PGM_ATTR format,
 2435               		.loc 1 334 0
 2436 0d04 D601      		movw r26,r12	 ;  2937	*movhi/1	[length = 1]
 2437 0d06 1997      		sbiw r26,9	 ;  1412	*addhi3/3	[length = 1]
 2438 0d08 20E0      		ldi r18,lo8(0)	 ;  121	*movhi/4	[length = 2]
 2439 0d0a 30E0      		ldi r19,hi8(0)
 2440 0d0c AC01      		movw r20,r24	 ;  2938	*movhi/1	[length = 1]
 2441 0d0e 4E19      		sub r20,r14	 ;  1415	subhi3/1	[length = 2]
 2442 0d10 5F09      		sbc r21,r15
 2443               	.LVL254:
 2444               	.L111:
 2445 0d12 FA01      		movw r30,r20	 ;  2939	*movhi/1	[length = 1]
 2446 0d14 E20F      		add r30,r18	 ;  1416	*addhi3/1	[length = 2]
 2447 0d16 F31F      		adc r31,r19
 320:bertos/mware/formatwr.c **** 			*(buf_pointer - 11 - i + n) = *(buf_pointer - n);
 2448               		.loc 1 320 0
 2449 0d18 8081      		ld r24,Z	 ;  1417	*movqi/4	[length = 1]
 2450 0d1a 8E93      		st -X,r24	 ;  1419	*movqi/3	[length = 1]
 2451 0d1c 2F5F      		subi r18,lo8(-(1))	 ;  1422	*addhi3/4	[length = 2]
 2452 0d1e 3F4F      		sbci r19,hi8(-(1))
 334:bertos/mware/formatwr.c **** PGM_FUNC(_formatted_write)(const char * PGM_ATTR format,
 2453               		.loc 1 334 0
 2454 0d20 C701      		movw r24,r14	 ;  2940	*movhi/1	[length = 1]
 2455 0d22 821B      		sub r24,r18	 ;  1424	subhi3/1	[length = 2]
 2456 0d24 930B      		sbc r25,r19
 319:bertos/mware/formatwr.c **** 		for ( i = n ; n > 0 ; n-- )
 2457               		.loc 1 319 0
 2458 0d26 1816      		cp __zero_reg__,r24	 ;  1425	*reversed_tsthi	[length = 2]
 2459 0d28 1906      		cpc __zero_reg__,r25
 2460 0d2a 04F0      		brlt .L111	 ;  1426	branch	[length = 1]
 321:bertos/mware/formatwr.c **** 		buf_pointer -= 10;
 2461               		.loc 1 321 0
 2462 0d2c D601      		movw r26,r12	 ;  2941	*movhi/1	[length = 1]
 2463 0d2e 1997      		sbiw r26,9	 ;  1428	*addhi3/3	[length = 1]
 2464               	.LVL255:
 2465 0d30 00C0      		rjmp .L106	 ;  3317	jump	[length = 1]
 2466               	.LVL256:
 2467               	.L160:
 301:bertos/mware/formatwr.c **** 	if (format_flag)
 2468               		.loc 1 301 0
 2469 0d32 D401      		movw r26,r8	 ;  122	*movhi/1	[length = 1]
 2470               	.LVL257:
 2471               	.L106:
 2472               	.LBE36:
 2473               	.LBE35:
 739:bertos/mware/formatwr.c **** 				if (flags.zeropad)
 2474               		.loc 1 739 0
 2475 0d34 C356      		subi r28,lo8(-157)	 ;  2942	*movqi/4	[length = 5]
 2476 0d36 DF4F      		sbci r29,hi8(-157)
 2477 0d38 2881      		ld r18,Y
 2478 0d3a CD59      		subi r28,lo8(157)
 2479 0d3c D040      		sbci r29,hi8(157)
 2480 0d3e 2223      		tst r18	 ;  1434	*cmpqi/1	[length = 1]
 2481 0d40 01F4      		brne .+2	 ;  1435	branch	[length = 2]
 2482 0d42 00C0      		rjmp .L161
 2483               	.LVL258:
 741:bertos/mware/formatwr.c **** 					precision = field_width - (flags.plus_space_flag != PSF_NONE);
 2484               		.loc 1 741 0
 2485 0d44 1C7F      		andi r17,lo8(-4)	 ;  1446	andqi3/2	[length = 1]
 2486               	.LVL259:
 2487 0d46 CC56      		subi r28,lo8(-148)	 ;  2943	*movqi/4	[length = 5]
 2488 0d48 DF4F      		sbci r29,hi8(-148)
 2489 0d4a 3881      		ld r19,Y
 2490 0d4c C459      		subi r28,lo8(148)
 2491 0d4e D040      		sbci r29,hi8(148)
 2492 0d50 132B      		or r17,r19	 ;  1447	iorqi3/1	[length = 1]
 2493 0d52 CD56      		subi r28,lo8(-147)	 ;  2944	*movqi/4	[length = 5]
 2494 0d54 DF4F      		sbci r29,hi8(-147)
 2495 0d56 8881      		ld r24,Y
 2496 0d58 C359      		subi r28,lo8(147)
 2497 0d5a D040      		sbci r29,hi8(147)
 2498 0d5c 8170      		andi r24,lo8(1)	 ;  1449	andqi3/2	[length = 1]
 2499 0d5e 880F      		lsl r24	 ;  1450	*ashlqi3/4	[length = 2]
 2500 0d60 880F      		lsl r24
 2501 0d62 1B7F      		andi r17,lo8(-5)	 ;  1452	andqi3/2	[length = 1]
 2502 0d64 182B      		or r17,r24	 ;  1453	iorqi3/1	[length = 1]
 2503 0d66 CE56      		subi r28,lo8(-146)	 ;  2945	*movqi/4	[length = 5]
 2504 0d68 DF4F      		sbci r29,hi8(-146)
 2505 0d6a 8881      		ld r24,Y
 2506 0d6c C259      		subi r28,lo8(146)
 2507 0d6e D040      		sbci r29,hi8(146)
 2508 0d70 880F      		lsl r24	 ;  1456	*ashlqi3/5	[length = 3]
 2509 0d72 880F      		lsl r24
 2510 0d74 880F      		lsl r24
 2511 0d76 177F      		andi r17,lo8(-9)	 ;  1458	andqi3/2	[length = 1]
 2512 0d78 182B      		or r17,r24	 ;  1459	iorqi3/1	[length = 1]
 2513 0d7a CF56      		subi r28,lo8(-145)	 ;  2946	*movqi/4	[length = 5]
 2514 0d7c DF4F      		sbci r29,hi8(-145)
 2515 0d7e 8881      		ld r24,Y
 2516 0d80 C159      		subi r28,lo8(145)
 2517 0d82 D040      		sbci r29,hi8(145)
 2518 0d84 8170      		andi r24,lo8(1)	 ;  1461	andqi3/2	[length = 1]
 2519 0d86 8295      		swap r24	 ;  3002	*rotlqi3_4	[length = 1]
 2520 0d88 807F      		andi r24,lo8(-16)	 ;  3003	andqi3/2	[length = 1]
 2521 0d8a 1F7E      		andi r17,lo8(-17)	 ;  1464	andqi3/2	[length = 1]
 2522 0d8c 182B      		or r17,r24	 ;  1465	iorqi3/1	[length = 1]
 2523 0d8e CB56      		subi r28,lo8(-149)	 ;  2947	*movqi/4	[length = 5]
 2524 0d90 DF4F      		sbci r29,hi8(-149)
 2525 0d92 8881      		ld r24,Y
 2526 0d94 C559      		subi r28,lo8(149)
 2527 0d96 D040      		sbci r29,hi8(149)
 2528 0d98 8170      		andi r24,lo8(1)	 ;  1467	andqi3/2	[length = 1]
 2529 0d9a 8295      		swap r24	 ;  3004	*rotlqi3_4	[length = 1]
 2530 0d9c 880F      		lsl r24	 ;  3005	*ashlqi3/3	[length = 1]
 2531 0d9e 807E      		andi r24,lo8(-32)	 ;  3006	andqi3/2	[length = 1]
 2532 0da0 1F7D      		andi r17,lo8(-33)	 ;  1470	andqi3/2	[length = 1]
 2533 0da2 182B      		or r17,r24	 ;  1471	iorqi3/1	[length = 1]
 2534 0da4 C056      		subi r28,lo8(-160)	 ;  2948	*movqi/4	[length = 5]
 2535 0da6 DF4F      		sbci r29,hi8(-160)
 2536 0da8 8881      		ld r24,Y
 2537 0daa C05A      		subi r28,lo8(160)
 2538 0dac D040      		sbci r29,hi8(160)
 2539 0dae 8295      		swap r24	 ;  3007	*rotlqi3_4	[length = 1]
 2540 0db0 880F      		lsl r24	 ;  3008	*ashlqi3/4	[length = 2]
 2541 0db2 880F      		lsl r24
 2542 0db4 807C      		andi r24,lo8(-64)	 ;  3009	andqi3/2	[length = 1]
 2543 0db6 1F7B      		andi r17,lo8(-65)	 ;  1476	andqi3/2	[length = 1]
 2544 0db8 182B      		or r17,r24	 ;  1477	iorqi3/1	[length = 1]
 2545 0dba CA56      		subi r28,lo8(-150)	 ;  2949	*movqi/4	[length = 5]
 2546 0dbc DF4F      		sbci r29,hi8(-150)
 2547 0dbe 8881      		ld r24,Y
 2548 0dc0 C659      		subi r28,lo8(150)
 2549 0dc2 D040      		sbci r29,hi8(150)
 2550 0dc4 8795      		ror r24	 ;  1479	*ashlqi3/5	[length = 3]
 2551 0dc6 8827      		clr r24
 2552 0dc8 8795      		ror r24
 2553 0dca 1F77      		andi r17,lo8(127)	 ;  1481	andqi3/2	[length = 1]
 2554 0dcc 182B      		or r17,r24	 ;  1482	iorqi3/1	[length = 1]
 2555 0dce 212F      		mov r18,r17	 ;  2950	*movqi/1	[length = 1]
 2556 0dd0 2370      		andi r18,lo8(3)	 ;  1484	andqi3/2	[length = 1]
 2557 0dd2 81E0      		ldi r24,lo8(1)	 ;  1485	*movhi/4	[length = 2]
 2558 0dd4 90E0      		ldi r25,hi8(1)
 2559 0dd6 01F4      		brne .L112	 ;  1487	branch	[length = 1]
 2560 0dd8 80E0      		ldi r24,lo8(0)	 ;  1488	*movhi/4	[length = 2]
 2561 0dda 90E0      		ldi r25,hi8(0)
 2562               	.L112:
 2563 0ddc C357      		subi r28,lo8(-141)	 ;  2951	*movhi/2	[length = 6]
 2564 0dde DF4F      		sbci r29,hi8(-141)
 2565 0de0 2881      		ld r18,Y
 2566 0de2 3981      		ldd r19,Y+1
 2567 0de4 CD58      		subi r28,lo8(141)
 2568 0de6 D040      		sbci r29,hi8(141)
 2569 0de8 281B      		sub r18,r24	 ;  1490	subhi3/1	[length = 2]
 2570 0dea 390B      		sbc r19,r25
 2571               	.LVL260:
 2572 0dec F201      		movw r30,r4	 ;  1492	*movhi/1	[length = 1]
 334:bertos/mware/formatwr.c **** PGM_FUNC(_formatted_write)(const char * PGM_ATTR format,
 2573               		.loc 1 334 0
 2574 0dee CD01      		movw r24,r26	 ;  2952	*movhi/1	[length = 1]
 2575 0df0 8419      		sub r24,r4	 ;  1493	subhi3/1	[length = 2]
 2576 0df2 9509      		sbc r25,r5
 742:bertos/mware/formatwr.c **** 					while (precision > ptr - buf_pointer)
 2577               		.loc 1 742 0
 2578 0df4 00C0      		rjmp .L113	 ;  3319	jump	[length = 1]
 2579               	.LVL261:
 2580               	.L114:
 743:bertos/mware/formatwr.c **** 						*--buf_pointer = '0';
 2581               		.loc 1 743 0
 2582 0df6 40E3      		ldi r20,lo8(48)	 ;  2953	*movqi/2	[length = 1]
 2583 0df8 4293      		st -Z,r20	 ;  1500	*movqi/3	[length = 1]
 2584 0dfa 0196      		adiw r24,1	 ;  1502	*addhi3/2	[length = 1]
 2585               	.LVL262:
 2586               	.L113:
 743:bertos/mware/formatwr.c **** 						*--buf_pointer = '0';
 2587               		.loc 1 743 0 is_stmt 0 discriminator 1
 2588 0dfc 2F01      		movw r4,r30	 ;  1505	*movhi/1	[length = 1]
 742:bertos/mware/formatwr.c **** 					while (precision > ptr - buf_pointer)
 2589               		.loc 1 742 0 is_stmt 1 discriminator 1
 2590 0dfe 8217      		cp r24,r18	 ;  1508	*cmphi/3	[length = 2]
 2591 0e00 9307      		cpc r25,r19
 2592 0e02 04F0      		brlt .L114	 ;  1509	branch	[length = 1]
 2593               	.LVL263:
 2594 0e04 00C0      		rjmp .L161	 ;  3322	jump	[length = 1]
 2595               	.LVL264:
 2596               	.L139:
 530:bertos/mware/formatwr.c **** 		switch (format_flag = PGM_READ_CHAR(format++))
 2597               		.loc 1 530 0
 2598 0e06 C157      		subi r28,lo8(-143)	 ;  129	*movhi/3	[length = 6]
 2599 0e08 DF4F      		sbci r29,hi8(-143)
 2600 0e0a 3983      		std Y+1,r19
 2601 0e0c 2883      		st Y,r18
 2602 0e0e CF58      		subi r28,lo8(143)
 2603 0e10 D040      		sbci r29,hi8(143)
 750:bertos/mware/formatwr.c **** 				format--;
 2604               		.loc 1 750 0
 2605 0e12 C956      		subi r28,lo8(-151)	 ;  130	*movhi/3	[length = 6]
 2606 0e14 DF4F      		sbci r29,hi8(-151)
 2607 0e16 F982      		std Y+1,r15
 2608 0e18 E882      		st Y,r14
 2609 0e1a C759      		subi r28,lo8(151)
 2610 0e1c D040      		sbci r29,hi8(151)
 2611               	.L189:
 420:bertos/mware/formatwr.c **** 		flags.progmem = false;
 2612               		.loc 1 420 0
 2613 0e1e 00E0      		ldi r16,lo8(0)	 ;  131	*movqi/2	[length = 1]
 755:bertos/mware/formatwr.c **** 				ptr += sizeof(bad_conversion) - 1;
 2614               		.loc 1 755 0
 2615 0e20 A0E0      		ldi r26,lo8(bad_conversion.1418+3)	 ;  2130	*movhi/4	[length = 2]
 2616 0e22 B0E0      		ldi r27,hi8(bad_conversion.1418+3)
 754:bertos/mware/formatwr.c **** 				ptr = buf_pointer = bad_conversion;
 2617               		.loc 1 754 0
 2618 0e24 8DEF      		ldi r24,lo8(-3)	 ;  3118	*reload_inhi	[length = 4]
 2619 0e26 482E      		mov r4,r24
 2620 0e28 8FEF      		ldi r24,hi8(-3)
 2621 0e2a 582E      		mov r5,r24
 2622 0e2c 4A0E      		add r4,r26	 ;  2131	*addhi3/1	[length = 2]
 2623 0e2e 5B1E      		adc r5,r27
 2624 0e30 00C0      		rjmp .L28	 ;  3324	jump	[length = 1]
 2625               	.LVL265:
 2626               	.L151:
 420:bertos/mware/formatwr.c **** 		flags.progmem = false;
 2627               		.loc 1 420 0
 2628 0e32 00E0      		ldi r16,lo8(0)	 ;  126	*movqi/2	[length = 1]
 646:bertos/mware/formatwr.c **** 				ptr = buf_pointer = &buf[FRMWRI_BUFSIZE - 1];
 2629               		.loc 1 646 0
 2630 0e34 DE01      		movw r26,r28	 ;  2955	*movhi/1	[length = 1]
 2631 0e36 AA57      		subi r26,lo8(-(134))	 ;  2111	*addhi3/4	[length = 2]
 2632 0e38 BF4F      		sbci r27,hi8(-(134))
 2633 0e3a 00C0      		rjmp .L28	 ;  3326	jump	[length = 1]
 2634               	.LVL266:
 2635               	.L161:
 420:bertos/mware/formatwr.c **** 		flags.progmem = false;
 2636               		.loc 1 420 0
 2637 0e3c 00E0      		ldi r16,lo8(0)	 ;  136	*movqi/2	[length = 1]
 2638               	.LVL267:
 2639               	.L28:
 765:bertos/mware/formatwr.c **** 		precision = ptr - buf_pointer;
 2640               		.loc 1 765 0
 2641 0e3e 6D01      		movw r12,r26	 ;  2956	*movhi/1	[length = 1]
 2642 0e40 C418      		sub r12,r4	 ;  1520	subhi3/1	[length = 2]
 2643 0e42 D508      		sbc r13,r5
 2644               	.LVL268:
 767:bertos/mware/formatwr.c **** 		if ( precision > field_width)
 2645               		.loc 1 767 0
 2646 0e44 C357      		subi r28,lo8(-141)	 ;  2957	*movhi/2	[length = 6]
 2647 0e46 DF4F      		sbci r29,hi8(-141)
 2648 0e48 8881      		ld r24,Y
 2649 0e4a 9981      		ldd r25,Y+1
 2650 0e4c CD58      		subi r28,lo8(141)
 2651 0e4e D040      		sbci r29,hi8(141)
 2652 0e50 8C15      		cp r24,r12	 ;  1522	*cmphi/3	[length = 2]
 2653 0e52 9D05      		cpc r25,r13
 2654 0e54 04F4      		brge .+2	 ;  1523	branch	[length = 2]
 2655 0e56 00C0      		rjmp .L162
 2656               	.LVL269:
 773:bertos/mware/formatwr.c **** 			n = field_width - precision - (flags.plus_space_flag != PSF_NONE);
 2657               		.loc 1 773 0
 2658 0e58 1C7F      		andi r17,lo8(-4)	 ;  1534	andqi3/2	[length = 1]
 2659               	.LVL270:
 2660 0e5a CC56      		subi r28,lo8(-148)	 ;  2958	*movqi/4	[length = 5]
 2661 0e5c DF4F      		sbci r29,hi8(-148)
 2662 0e5e 9881      		ld r25,Y
 2663 0e60 C459      		subi r28,lo8(148)
 2664 0e62 D040      		sbci r29,hi8(148)
 2665 0e64 192B      		or r17,r25	 ;  1535	iorqi3/1	[length = 1]
 2666 0e66 CD56      		subi r28,lo8(-147)	 ;  2959	*movqi/4	[length = 5]
 2667 0e68 DF4F      		sbci r29,hi8(-147)
 2668 0e6a 8881      		ld r24,Y
 2669 0e6c C359      		subi r28,lo8(147)
 2670 0e6e D040      		sbci r29,hi8(147)
 2671 0e70 8170      		andi r24,lo8(1)	 ;  1537	andqi3/2	[length = 1]
 2672 0e72 880F      		lsl r24	 ;  1538	*ashlqi3/4	[length = 2]
 2673 0e74 880F      		lsl r24
 2674 0e76 1B7F      		andi r17,lo8(-5)	 ;  1540	andqi3/2	[length = 1]
 2675 0e78 182B      		or r17,r24	 ;  1541	iorqi3/1	[length = 1]
 2676 0e7a CE56      		subi r28,lo8(-146)	 ;  2960	*movqi/4	[length = 5]
 2677 0e7c DF4F      		sbci r29,hi8(-146)
 2678 0e7e 8881      		ld r24,Y
 2679 0e80 C259      		subi r28,lo8(146)
 2680 0e82 D040      		sbci r29,hi8(146)
 2681 0e84 880F      		lsl r24	 ;  1544	*ashlqi3/5	[length = 3]
 2682 0e86 880F      		lsl r24
 2683 0e88 880F      		lsl r24
 2684 0e8a 177F      		andi r17,lo8(-9)	 ;  1546	andqi3/2	[length = 1]
 2685 0e8c 182B      		or r17,r24	 ;  1547	iorqi3/1	[length = 1]
 2686 0e8e CF56      		subi r28,lo8(-145)	 ;  2961	*movqi/4	[length = 5]
 2687 0e90 DF4F      		sbci r29,hi8(-145)
 2688 0e92 8881      		ld r24,Y
 2689 0e94 C159      		subi r28,lo8(145)
 2690 0e96 D040      		sbci r29,hi8(145)
 2691 0e98 8170      		andi r24,lo8(1)	 ;  1549	andqi3/2	[length = 1]
 2692 0e9a 8295      		swap r24	 ;  2994	*rotlqi3_4	[length = 1]
 2693 0e9c 807F      		andi r24,lo8(-16)	 ;  2995	andqi3/2	[length = 1]
 2694 0e9e 1F7E      		andi r17,lo8(-17)	 ;  1552	andqi3/2	[length = 1]
 2695 0ea0 182B      		or r17,r24	 ;  1553	iorqi3/1	[length = 1]
 2696 0ea2 CB56      		subi r28,lo8(-149)	 ;  2962	*movqi/4	[length = 5]
 2697 0ea4 DF4F      		sbci r29,hi8(-149)
 2698 0ea6 8881      		ld r24,Y
 2699 0ea8 C559      		subi r28,lo8(149)
 2700 0eaa D040      		sbci r29,hi8(149)
 2701 0eac 8170      		andi r24,lo8(1)	 ;  1555	andqi3/2	[length = 1]
 2702 0eae 8295      		swap r24	 ;  2996	*rotlqi3_4	[length = 1]
 2703 0eb0 880F      		lsl r24	 ;  2997	*ashlqi3/3	[length = 1]
 2704 0eb2 807E      		andi r24,lo8(-32)	 ;  2998	andqi3/2	[length = 1]
 2705 0eb4 1F7D      		andi r17,lo8(-33)	 ;  1558	andqi3/2	[length = 1]
 2706 0eb6 182B      		or r17,r24	 ;  1559	iorqi3/1	[length = 1]
 2707 0eb8 C056      		subi r28,lo8(-160)	 ;  2963	*movqi/4	[length = 5]
 2708 0eba DF4F      		sbci r29,hi8(-160)
 2709 0ebc 8881      		ld r24,Y
 2710 0ebe C05A      		subi r28,lo8(160)
 2711 0ec0 D040      		sbci r29,hi8(160)
 2712 0ec2 8295      		swap r24	 ;  2999	*rotlqi3_4	[length = 1]
 2713 0ec4 880F      		lsl r24	 ;  3000	*ashlqi3/4	[length = 2]
 2714 0ec6 880F      		lsl r24
 2715 0ec8 807C      		andi r24,lo8(-64)	 ;  3001	andqi3/2	[length = 1]
 2716 0eca 1F7B      		andi r17,lo8(-65)	 ;  1564	andqi3/2	[length = 1]
 2717 0ecc 182B      		or r17,r24	 ;  1565	iorqi3/1	[length = 1]
 2718 0ece CA56      		subi r28,lo8(-150)	 ;  2964	*movqi/4	[length = 5]
 2719 0ed0 DF4F      		sbci r29,hi8(-150)
 2720 0ed2 8881      		ld r24,Y
 2721 0ed4 C659      		subi r28,lo8(150)
 2722 0ed6 D040      		sbci r29,hi8(150)
 2723 0ed8 8795      		ror r24	 ;  1567	*ashlqi3/5	[length = 3]
 2724 0eda 8827      		clr r24
 2725 0edc 8795      		ror r24
 2726 0ede 1F77      		andi r17,lo8(127)	 ;  1569	andqi3/2	[length = 1]
 2727 0ee0 182B      		or r17,r24	 ;  1570	iorqi3/1	[length = 1]
 2728 0ee2 C357      		subi r28,lo8(-141)	 ;  2965	*movhi/2	[length = 6]
 2729 0ee4 DF4F      		sbci r29,hi8(-141)
 2730 0ee6 E880      		ld r14,Y
 2731 0ee8 F980      		ldd r15,Y+1
 2732 0eea CD58      		subi r28,lo8(141)
 2733 0eec D040      		sbci r29,hi8(141)
 2734 0eee EC18      		sub r14,r12	 ;  1572	subhi3/1	[length = 2]
 2735 0ef0 FD08      		sbc r15,r13
 2736 0ef2 212F      		mov r18,r17	 ;  2966	*movqi/1	[length = 1]
 2737 0ef4 2370      		andi r18,lo8(3)	 ;  1573	andqi3/2	[length = 1]
 2738 0ef6 81E0      		ldi r24,lo8(1)	 ;  1574	*movhi/4	[length = 2]
 2739 0ef8 90E0      		ldi r25,hi8(1)
 2740 0efa 01F4      		brne .L116	 ;  1576	branch	[length = 1]
 2741 0efc 80E0      		ldi r24,lo8(0)	 ;  1577	*movhi/4	[length = 2]
 2742 0efe 90E0      		ldi r25,hi8(0)
 2743               	.L116:
 2744 0f00 E81A      		sub r14,r24	 ;  1579	subhi3/1	[length = 2]
 2745 0f02 F90A      		sbc r15,r25
 2746               	.LVL271:
 2747 0f04 00C0      		rjmp .L115	 ;  3328	jump	[length = 1]
 2748               	.LVL272:
 2749               	.L162:
 769:bertos/mware/formatwr.c **** 			n = 0;
 2750               		.loc 1 769 0
 2751 0f06 EE24      		clr r14	 ;  141	*movhi/5	[length = 2]
 2752 0f08 FF24      		clr r15
 2753               	.L115:
 2754               	.LVL273:
 777:bertos/mware/formatwr.c **** 		if (!flags.left_adjust)
 2755               		.loc 1 777 0
 2756 0f0a CE56      		subi r28,lo8(-146)	 ;  2967	*movqi/4	[length = 5]
 2757 0f0c DF4F      		sbci r29,hi8(-146)
 2758 0f0e E881      		ld r30,Y
 2759 0f10 C259      		subi r28,lo8(146)
 2760 0f12 D040      		sbci r29,hi8(146)
 2761 0f14 EE23      		tst r30	 ;  1584	*cmpqi/1	[length = 1]
 2762 0f16 01F4      		brne .L117	 ;  1585	branch	[length = 1]
 2763 0f18 4601      		movw r8,r12	 ;  2709	*movhi/1	[length = 1]
 2764 0f1a A02E      		mov r10,r16	 ;  2710	*movqi/1	[length = 1]
 2765 0f1c C12E      		mov r12,r17	 ;  2711	*movqi/1	[length = 1]
 2766               	.LVL274:
 2767 0f1e C557      		subi r28,lo8(-139)	 ;  2712	*movhi/2	[length = 6]
 2768 0f20 DF4F      		sbci r29,hi8(-139)
 2769 0f22 0881      		ld r16,Y
 2770 0f24 1981      		ldd r17,Y+1
 2771 0f26 CB58      		subi r28,lo8(139)
 2772 0f28 D040      		sbci r29,hi8(139)
 2773               	.LVL275:
 2774 0f2a 00C0      		rjmp .L178	 ;  3330	jump	[length = 1]
 2775               	.LVL276:
 2776               	.L119:
 780:bertos/mware/formatwr.c **** 				put_one_char(' ', secret_pointer);
 2777               		.loc 1 780 0
 2778 0f2c 80E2      		ldi r24,lo8(32)	 ;  1591	*movqi/2	[length = 1]
 2779 0f2e C556      		subi r28,lo8(-155)	 ;  1592	*movhi/2	[length = 6]
 2780 0f30 DF4F      		sbci r29,hi8(-155)
 2781 0f32 6881      		ld r22,Y
 2782 0f34 7981      		ldd r23,Y+1
 2783 0f36 CB59      		subi r28,lo8(155)
 2784 0f38 D040      		sbci r29,hi8(155)
 2785 0f3a C756      		subi r28,lo8(-153)	 ;  2968	*movhi/2	[length = 6]
 2786 0f3c DF4F      		sbci r29,hi8(-153)
 2787 0f3e 2881      		ld r18,Y
 2788 0f40 3981      		ldd r19,Y+1
 2789 0f42 C959      		subi r28,lo8(153)
 2790 0f44 D040      		sbci r29,hi8(153)
 2791 0f46 F901      		movw r30,r18	 ;  1593	call_insn/2	[length = 2]
 2792 0f48 0995      		icall
 782:bertos/mware/formatwr.c **** 				nr_of_chars++;
 2793               		.loc 1 782 0
 2794 0f4a 0F5F      		subi r16,lo8(-(1))	 ;  1594	*addhi3/4	[length = 2]
 2795 0f4c 1F4F      		sbci r17,hi8(-(1))
 2796               	.LVL277:
 2797               	.L178:
 778:bertos/mware/formatwr.c **** 			while (--n >= 0)
 2798               		.loc 1 778 0 discriminator 1
 2799 0f4e 0894      		sec	 ;  1600	*addhi3/6	[length = 3]
 2800 0f50 E108      		sbc r14,__zero_reg__
 2801 0f52 F108      		sbc r15,__zero_reg__
 2802               	.LVL278:
 2803 0f54 F7FE      		sbrs r15,7	 ;  3117	*sbrx_and_branchhi	[length = 2]
 2804 0f56 00C0      		rjmp .L119
 2805 0f58 C557      		subi r28,lo8(-139)	 ;  2714	*movhi/3	[length = 6]
 2806 0f5a DF4F      		sbci r29,hi8(-139)
 2807 0f5c 1983      		std Y+1,r17
 2808 0f5e 0883      		st Y,r16
 2809 0f60 CB58      		subi r28,lo8(139)
 2810 0f62 D040      		sbci r29,hi8(139)
 2811 0f64 0A2D      		mov r16,r10	 ;  2716	*movqi/1	[length = 1]
 2812               	.LVL279:
 2813 0f66 1C2D      		mov r17,r12	 ;  2717	*movqi/1	[length = 1]
 2814               	.LVL280:
 2815 0f68 6401      		movw r12,r8	 ;  2718	*movhi/1	[length = 1]
 2816               	.LVL281:
 2817               	.L117:
 787:bertos/mware/formatwr.c **** 		if (flags.plus_space_flag)
 2818               		.loc 1 787 0
 2819 0f6a 1C7F      		andi r17,lo8(-4)	 ;  1618	andqi3/2	[length = 1]
 2820               	.LVL282:
 2821 0f6c CC56      		subi r28,lo8(-148)	 ;  2969	*movqi/4	[length = 5]
 2822 0f6e DF4F      		sbci r29,hi8(-148)
 2823 0f70 3881      		ld r19,Y
 2824 0f72 C459      		subi r28,lo8(148)
 2825 0f74 D040      		sbci r29,hi8(148)
 2826 0f76 132B      		or r17,r19	 ;  1619	iorqi3/1	[length = 1]
 2827 0f78 CD56      		subi r28,lo8(-147)	 ;  2970	*movqi/4	[length = 5]
 2828 0f7a DF4F      		sbci r29,hi8(-147)
 2829 0f7c 8881      		ld r24,Y
 2830 0f7e C359      		subi r28,lo8(147)
 2831 0f80 D040      		sbci r29,hi8(147)
 2832 0f82 8170      		andi r24,lo8(1)	 ;  1621	andqi3/2	[length = 1]
 2833 0f84 880F      		lsl r24	 ;  1622	*ashlqi3/4	[length = 2]
 2834 0f86 880F      		lsl r24
 2835 0f88 1B7F      		andi r17,lo8(-5)	 ;  1624	andqi3/2	[length = 1]
 2836 0f8a 182B      		or r17,r24	 ;  1625	iorqi3/1	[length = 1]
 2837 0f8c CE56      		subi r28,lo8(-146)	 ;  2971	*movqi/4	[length = 5]
 2838 0f8e DF4F      		sbci r29,hi8(-146)
 2839 0f90 8881      		ld r24,Y
 2840 0f92 C259      		subi r28,lo8(146)
 2841 0f94 D040      		sbci r29,hi8(146)
 2842 0f96 880F      		lsl r24	 ;  1628	*ashlqi3/5	[length = 3]
 2843 0f98 880F      		lsl r24
 2844 0f9a 880F      		lsl r24
 2845 0f9c 177F      		andi r17,lo8(-9)	 ;  1630	andqi3/2	[length = 1]
 2846 0f9e 182B      		or r17,r24	 ;  1631	iorqi3/1	[length = 1]
 2847 0fa0 CF56      		subi r28,lo8(-145)	 ;  2972	*movqi/4	[length = 5]
 2848 0fa2 DF4F      		sbci r29,hi8(-145)
 2849 0fa4 8881      		ld r24,Y
 2850 0fa6 C159      		subi r28,lo8(145)
 2851 0fa8 D040      		sbci r29,hi8(145)
 2852 0faa 8170      		andi r24,lo8(1)	 ;  1633	andqi3/2	[length = 1]
 2853 0fac 8295      		swap r24	 ;  2986	*rotlqi3_4	[length = 1]
 2854 0fae 807F      		andi r24,lo8(-16)	 ;  2987	andqi3/2	[length = 1]
 2855 0fb0 1F7E      		andi r17,lo8(-17)	 ;  1636	andqi3/2	[length = 1]
 2856 0fb2 182B      		or r17,r24	 ;  1637	iorqi3/1	[length = 1]
 2857 0fb4 CB56      		subi r28,lo8(-149)	 ;  2973	*movqi/4	[length = 5]
 2858 0fb6 DF4F      		sbci r29,hi8(-149)
 2859 0fb8 8881      		ld r24,Y
 2860 0fba C559      		subi r28,lo8(149)
 2861 0fbc D040      		sbci r29,hi8(149)
 2862 0fbe 8170      		andi r24,lo8(1)	 ;  1639	andqi3/2	[length = 1]
 2863 0fc0 8295      		swap r24	 ;  2988	*rotlqi3_4	[length = 1]
 2864 0fc2 880F      		lsl r24	 ;  2989	*ashlqi3/3	[length = 1]
 2865 0fc4 807E      		andi r24,lo8(-32)	 ;  2990	andqi3/2	[length = 1]
 2866 0fc6 1F7D      		andi r17,lo8(-33)	 ;  1642	andqi3/2	[length = 1]
 2867 0fc8 182B      		or r17,r24	 ;  1643	iorqi3/1	[length = 1]
 2868 0fca C056      		subi r28,lo8(-160)	 ;  2974	*movqi/4	[length = 5]
 2869 0fcc DF4F      		sbci r29,hi8(-160)
 2870 0fce 8881      		ld r24,Y
 2871 0fd0 C05A      		subi r28,lo8(160)
 2872 0fd2 D040      		sbci r29,hi8(160)
 2873 0fd4 8295      		swap r24	 ;  2991	*rotlqi3_4	[length = 1]
 2874 0fd6 880F      		lsl r24	 ;  2992	*ashlqi3/4	[length = 2]
 2875 0fd8 880F      		lsl r24
 2876 0fda 807C      		andi r24,lo8(-64)	 ;  2993	andqi3/2	[length = 1]
 2877 0fdc 1F7B      		andi r17,lo8(-65)	 ;  1648	andqi3/2	[length = 1]
 2878 0fde 182B      		or r17,r24	 ;  1649	iorqi3/1	[length = 1]
 2879 0fe0 CA56      		subi r28,lo8(-150)	 ;  2975	*movqi/4	[length = 5]
 2880 0fe2 DF4F      		sbci r29,hi8(-150)
 2881 0fe4 8881      		ld r24,Y
 2882 0fe6 C659      		subi r28,lo8(150)
 2883 0fe8 D040      		sbci r29,hi8(150)
 2884 0fea 8795      		ror r24	 ;  1651	*ashlqi3/5	[length = 3]
 2885 0fec 8827      		clr r24
 2886 0fee 8795      		ror r24
 2887 0ff0 1F77      		andi r17,lo8(127)	 ;  1653	andqi3/2	[length = 1]
 2888 0ff2 182B      		or r17,r24	 ;  1654	iorqi3/1	[length = 1]
 2889 0ff4 812F      		mov r24,r17	 ;  2976	*movqi/1	[length = 1]
 2890 0ff6 8370      		andi r24,lo8(3)	 ;  1656	andqi3/2	[length = 1]
 2891 0ff8 01F0      		breq .L120	 ;  1658	branch	[length = 1]
 789:bertos/mware/formatwr.c **** 			put_one_char(flags.plus_space_flag == PSF_PLUS ? '+' : '-', secret_pointer);
 2892               		.loc 1 789 0
 2893 0ffa 8130      		cpi r24,lo8(1)	 ;  1660	*cmpqi/3	[length = 1]
 2894 0ffc 01F4      		brne .L163	 ;  1661	branch	[length = 1]
 2895 0ffe 8BE2      		ldi r24,lo8(43)	 ;  142	*movqi/2	[length = 1]
 2896 1000 00C0      		rjmp .L121	 ;  3332	jump	[length = 1]
 2897               	.L163:
 2898 1002 8DE2      		ldi r24,lo8(45)	 ;  143	*movqi/2	[length = 1]
 2899               	.L121:
 789:bertos/mware/formatwr.c **** 			put_one_char(flags.plus_space_flag == PSF_PLUS ? '+' : '-', secret_pointer);
 2900               		.loc 1 789 0 is_stmt 0 discriminator 3
 2901 1004 C556      		subi r28,lo8(-155)	 ;  1667	*movhi/2	[length = 6]
 2902 1006 DF4F      		sbci r29,hi8(-155)
 2903 1008 6881      		ld r22,Y
 2904 100a 7981      		ldd r23,Y+1
 2905 100c CB59      		subi r28,lo8(155)
 2906 100e D040      		sbci r29,hi8(155)
 2907 1010 C756      		subi r28,lo8(-153)	 ;  2977	*movhi/2	[length = 6]
 2908 1012 DF4F      		sbci r29,hi8(-153)
 2909 1014 4881      		ld r20,Y
 2910 1016 5981      		ldd r21,Y+1
 2911 1018 C959      		subi r28,lo8(153)
 2912 101a D040      		sbci r29,hi8(153)
 2913 101c FA01      		movw r30,r20	 ;  1668	call_insn/2	[length = 2]
 2914 101e 0995      		icall
 791:bertos/mware/formatwr.c **** 			nr_of_chars++;
 2915               		.loc 1 791 0 is_stmt 1 discriminator 3
 2916 1020 C557      		subi r28,lo8(-139)	 ;  2978	*movhi/2	[length = 6]
 2917 1022 DF4F      		sbci r29,hi8(-139)
 2918 1024 8881      		ld r24,Y
 2919 1026 9981      		ldd r25,Y+1
 2920 1028 CB58      		subi r28,lo8(139)
 2921 102a D040      		sbci r29,hi8(139)
 2922 102c 0196      		adiw r24,1	 ;  1669	*addhi3/2	[length = 1]
 2923 102e C557      		subi r28,lo8(-139)	 ;  2979	*movhi/3	[length = 6]
 2924 1030 DF4F      		sbci r29,hi8(-139)
 2925 1032 9983      		std Y+1,r25
 2926 1034 8883      		st Y,r24
 2927 1036 CB58      		subi r28,lo8(139)
 2928 1038 D040      		sbci r29,hi8(139)
 2929               	.LVL283:
 2930               	.L120:
 796:bertos/mware/formatwr.c **** 		if (flags.progmem)
 2931               		.loc 1 796 0
 2932 103a 0023      		tst r16	 ;  1674	*cmpqi/1	[length = 1]
 2933 103c 01F4      		brne .L185	 ;  1675	branch	[length = 1]
 2934 103e 5701      		movw r10,r14	 ;  2724	*movhi/1	[length = 1]
 2935 1040 E12E      		mov r14,r17	 ;  2727	*movqi/1	[length = 1]
 2936               	.LVL284:
 2937 1042 C557      		subi r28,lo8(-139)	 ;  2728	*movhi/2	[length = 6]
 2938 1044 DF4F      		sbci r29,hi8(-139)
 2939 1046 0881      		ld r16,Y
 2940 1048 1981      		ldd r17,Y+1
 2941 104a CB58      		subi r28,lo8(139)
 2942 104c D040      		sbci r29,hi8(139)
 2943               	.LVL285:
 2944 104e 00C0      		rjmp .L179	 ;  3334	jump	[length = 1]
 2945               	.LVL286:
 2946               	.L125:
 2947               	.LBB37:
 800:bertos/mware/formatwr.c **** 				put_one_char(pgm_read_char(buf_pointer++), secret_pointer);
 2948               		.loc 1 800 0
 2949 1050 F201      		movw r30,r4	 ;  1684	*movhi/1	[length = 1]
 2950               	.LVL287:
 2951 1052 0894      		sec	 ;  1686	*addhi3/5	[length = 3]
 2952 1054 411C      		adc r4,__zero_reg__
 2953 1056 511C      		adc r5,__zero_reg__
 2954               	.LVL288:
 2955               	/* #APP */
 2956               	 ;  800 "bertos/mware/formatwr.c" 1
 2957 1058 8491      		lpm r24, Z
 2958               		
 2959               	 ;  0 "" 2
 2960               	.LVL289:
 2961               	/* #NOAPP */
 2962               	.LBE37:
 2963 105a C556      		subi r28,lo8(-155)	 ;  1693	*movhi/2	[length = 6]
 2964 105c DF4F      		sbci r29,hi8(-155)
 2965 105e 6881      		ld r22,Y
 2966 1060 7981      		ldd r23,Y+1
 2967 1062 CB59      		subi r28,lo8(155)
 2968 1064 D040      		sbci r29,hi8(155)
 2969 1066 C756      		subi r28,lo8(-153)	 ;  2980	*movhi/2	[length = 6]
 2970 1068 DF4F      		sbci r29,hi8(-153)
 2971 106a E881      		ld r30,Y
 2972 106c F981      		ldd r31,Y+1
 2973 106e C959      		subi r28,lo8(153)
 2974 1070 D040      		sbci r29,hi8(153)
 2975               	.LVL290:
 2976 1072 0995      		icall	 ;  1694	call_insn/1	[length = 1]
 2977               	.LVL291:
 802:bertos/mware/formatwr.c **** 				nr_of_chars++;
 2978               		.loc 1 802 0
 2979 1074 0894      		sec	 ;  1695	*addhi3/5	[length = 3]
 2980 1076 A11C      		adc r10,__zero_reg__
 2981 1078 B11C      		adc r11,__zero_reg__
 2982               	.LVL292:
 2983 107a 00C0      		rjmp .L172	 ;  3336	jump	[length = 1]
 2984               	.LVL293:
 2985               	.L185:
 2986 107c C557      		subi r28,lo8(-139)	 ;  2720	*movhi/2	[length = 6]
 2987 107e DF4F      		sbci r29,hi8(-139)
 2988 1080 A880      		ld r10,Y
 2989 1082 B980      		ldd r11,Y+1
 2990 1084 CB58      		subi r28,lo8(139)
 2991 1086 D040      		sbci r29,hi8(139)
 2992               	.LVL294:
 2993               	.L172:
 798:bertos/mware/formatwr.c **** 			while (--precision >= 0)
 2994               		.loc 1 798 0 discriminator 1
 2995 1088 0894      		sec	 ;  1702	*addhi3/6	[length = 3]
 2996 108a C108      		sbc r12,__zero_reg__
 2997 108c D108      		sbc r13,__zero_reg__
 2998               	.LVL295:
 2999 108e D7FE      		sbrs r13,7	 ;  3116	*sbrx_and_branchhi	[length = 2]
 3000 1090 00C0      		rjmp .L125
 3001 1092 C557      		subi r28,lo8(-139)	 ;  2730	*movhi/3	[length = 6]
 3002 1094 DF4F      		sbci r29,hi8(-139)
 3003 1096 B982      		std Y+1,r11
 3004 1098 A882      		st Y,r10
 3005 109a CB58      		subi r28,lo8(139)
 3006 109c D040      		sbci r29,hi8(139)
 3007 109e 00C0      		rjmp .L126	 ;  3338	jump	[length = 1]
 3008               	.LVL296:
 3009               	.L127:
 812:bertos/mware/formatwr.c **** 				put_one_char(*buf_pointer++, secret_pointer);
 3010               		.loc 1 812 0
 3011 10a0 F201      		movw r30,r4	 ;  2981	*movhi/1	[length = 1]
 3012 10a2 8191      		ld r24,Z+	 ;  1715	*movqi/4	[length = 1]
 3013 10a4 2F01      		movw r4,r30	 ;  2982	*movhi/1	[length = 1]
 3014               	.LVL297:
 3015 10a6 C556      		subi r28,lo8(-155)	 ;  1716	*movhi/2	[length = 6]
 3016 10a8 DF4F      		sbci r29,hi8(-155)
 3017 10aa 6881      		ld r22,Y
 3018 10ac 7981      		ldd r23,Y+1
 3019 10ae CB59      		subi r28,lo8(155)
 3020 10b0 D040      		sbci r29,hi8(155)
 3021 10b2 C756      		subi r28,lo8(-153)	 ;  2983	*movhi/2	[length = 6]
 3022 10b4 DF4F      		sbci r29,hi8(-153)
 3023 10b6 2881      		ld r18,Y
 3024 10b8 3981      		ldd r19,Y+1
 3025 10ba C959      		subi r28,lo8(153)
 3026 10bc D040      		sbci r29,hi8(153)
 3027 10be F901      		movw r30,r18	 ;  1717	call_insn/2	[length = 2]
 3028 10c0 0995      		icall
 3029               	.LVL298:
 814:bertos/mware/formatwr.c **** 				nr_of_chars++;
 3030               		.loc 1 814 0
 3031 10c2 0F5F      		subi r16,lo8(-(1))	 ;  1718	*addhi3/4	[length = 2]
 3032 10c4 1F4F      		sbci r17,hi8(-(1))
 3033               	.LVL299:
 3034               	.L179:
 810:bertos/mware/formatwr.c **** 			while (--precision >= 0)
 3035               		.loc 1 810 0 discriminator 1
 3036 10c6 0894      		sec	 ;  1725	*addhi3/6	[length = 3]
 3037 10c8 C108      		sbc r12,__zero_reg__
 3038 10ca D108      		sbc r13,__zero_reg__
 3039               	.LVL300:
 3040 10cc D7FE      		sbrs r13,7	 ;  3115	*sbrx_and_branchhi	[length = 2]
 3041 10ce 00C0      		rjmp .L127
 3042 10d0 C557      		subi r28,lo8(-139)	 ;  2732	*movhi/3	[length = 6]
 3043 10d2 DF4F      		sbci r29,hi8(-139)
 3044 10d4 1983      		std Y+1,r17
 3045 10d6 0883      		st Y,r16
 3046 10d8 CB58      		subi r28,lo8(139)
 3047 10da D040      		sbci r29,hi8(139)
 3048 10dc 1E2D      		mov r17,r14	 ;  2733	*movqi/1	[length = 1]
 3049               	.LVL301:
 3050 10de 7501      		movw r14,r10	 ;  2734	*movhi/1	[length = 1]
 3051               	.LVL302:
 3052               	.L126:
 820:bertos/mware/formatwr.c **** 		if (flags.left_adjust)
 3053               		.loc 1 820 0
 3054 10e0 CE56      		subi r28,lo8(-146)	 ;  2984	*movqi/4	[length = 5]
 3055 10e2 DF4F      		sbci r29,hi8(-146)
 3056 10e4 3881      		ld r19,Y
 3057 10e6 C259      		subi r28,lo8(146)
 3058 10e8 D040      		sbci r29,hi8(146)
 3059 10ea 3323      		tst r19	 ;  1733	*cmpqi/1	[length = 1]
 3060 10ec 01F4      		brne .+4	 ;  1734	branch	[length = 3]
 3061 10ee 0C94 0000 		jmp .L6
 3062 10f2 C12E      		mov r12,r17	 ;  2736	*movqi/1	[length = 1]
 3063               	.LVL303:
 3064 10f4 C557      		subi r28,lo8(-139)	 ;  2737	*movhi/2	[length = 6]
 3065 10f6 DF4F      		sbci r29,hi8(-139)
 3066 10f8 0881      		ld r16,Y
 3067 10fa 1981      		ldd r17,Y+1
 3068 10fc CB58      		subi r28,lo8(139)
 3069 10fe D040      		sbci r29,hi8(139)
 3070 1100 00C0      		rjmp .L180	 ;  3340	jump	[length = 1]
 3071               	.LVL304:
 3072               	.L129:
 823:bertos/mware/formatwr.c **** 				put_one_char(' ', secret_pointer);
 3073               		.loc 1 823 0
 3074 1102 80E2      		ldi r24,lo8(32)	 ;  1740	*movqi/2	[length = 1]
 3075 1104 C556      		subi r28,lo8(-155)	 ;  1741	*movhi/2	[length = 6]
 3076 1106 DF4F      		sbci r29,hi8(-155)
 3077 1108 6881      		ld r22,Y
 3078 110a 7981      		ldd r23,Y+1
 3079 110c CB59      		subi r28,lo8(155)
 3080 110e D040      		sbci r29,hi8(155)
 3081 1110 C756      		subi r28,lo8(-153)	 ;  2985	*movhi/2	[length = 6]
 3082 1112 DF4F      		sbci r29,hi8(-153)
 3083 1114 4881      		ld r20,Y
 3084 1116 5981      		ldd r21,Y+1
 3085 1118 C959      		subi r28,lo8(153)
 3086 111a D040      		sbci r29,hi8(153)
 3087 111c FA01      		movw r30,r20	 ;  1742	call_insn/2	[length = 2]
 3088 111e 0995      		icall
 825:bertos/mware/formatwr.c **** 				nr_of_chars++;
 3089               		.loc 1 825 0
 3090 1120 0F5F      		subi r16,lo8(-(1))	 ;  1743	*addhi3/4	[length = 2]
 3091 1122 1F4F      		sbci r17,hi8(-(1))
 3092               	.LVL305:
 3093               	.L180:
 821:bertos/mware/formatwr.c **** 			while (--n >= 0)
 3094               		.loc 1 821 0 discriminator 1
 3095 1124 0894      		sec	 ;  1749	*addhi3/6	[length = 3]
 3096 1126 E108      		sbc r14,__zero_reg__
 3097 1128 F108      		sbc r15,__zero_reg__
 3098               	.LVL306:
 3099 112a F7FE      		sbrs r15,7	 ;  3114	*sbrx_and_branchhi	[length = 2]
 3100 112c 00C0      		rjmp .L129
 3101 112e C557      		subi r28,lo8(-139)	 ;  2738	*movhi/3	[length = 6]
 3102 1130 DF4F      		sbci r29,hi8(-139)
 3103 1132 1983      		std Y+1,r17
 3104 1134 0883      		st Y,r16
 3105 1136 CB58      		subi r28,lo8(139)
 3106 1138 D040      		sbci r29,hi8(139)
 3107 113a 1C2D      		mov r17,r12	 ;  2739	*movqi/1	[length = 1]
 3108 113c 0C94 0000 		jmp .L6	 ;  3342	jump	[length = 2]
 3109               		.cfi_endproc
 3110               	.LFE1:
 3112               		.section	.data.null_pointer.1419,"aw",@progbits
 3115               	null_pointer.1419:
 3116 0000 3C4E 554C 		.string	"<NULL>"
 3116      4C3E 00
 3117               		.section	.progmem.data,"a",@progbits
 3120               	__c.1544:
 3121 0000 6275 665F 		.string	"buf_pointer >= buf"
 3121      706F 696E 
 3121      7465 7220 
 3121      3E3D 2062 
 3121      7566 00
 3124               	__c.1546:
 3125 0013 6265 7274 		.string	"bertos/mware/formatwr.c"
 3125      6F73 2F6D 
 3125      7761 7265 
 3125      2F66 6F72 
 3125      6D61 7477 
 3126               		.section	.data.bad_conversion.1418,"aw",@progbits
 3129               	bad_conversion.1418:
 3130 0000 3F3F 3F00 		.string	"???"
 3131               		.text
 3132               	.Letext0:
 3133               		.file 2 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/include/stdarg.h"
 3134               		.file 3 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h"
 3135               		.file 4 "bertos/cpu/types.h"
 3136               		.file 5 "bertos/mware/hex.h"
DEFINED SYMBOLS
                            *ABS*:00000000 formatwr.c
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccAJaQb3.s:2      *ABS*:0000003f __SREG__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccAJaQb3.s:3      *ABS*:0000003e __SP_H__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccAJaQb3.s:4      *ABS*:0000003d __SP_L__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccAJaQb3.s:5      *ABS*:00000034 __CCP__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccAJaQb3.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccAJaQb3.s:7      *ABS*:00000001 __zero_reg__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccAJaQb3.s:16     .text._formatted_write_P:00000000 _formatted_write_P
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccAJaQb3.s:3115   .data.null_pointer.1419:00000000 null_pointer.1419
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccAJaQb3.s:3120   .progmem.data:00000000 __c.1544
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccAJaQb3.s:3124   .progmem.data:00000013 __c.1546
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccAJaQb3.s:3129   .data.bad_conversion.1418:00000000 bad_conversion.1418

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
HEX_tab
hex_tab
__udivmodsi4
__bassert_P
__ltsf2
__gesf2
__divsf3
__nesf2
__mulsf3
__lesf2
__fixsfsi
__floatsisf
__subsf3
__divmodhi4
