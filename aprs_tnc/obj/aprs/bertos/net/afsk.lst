   1               		.file	"afsk.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text.afsk_read,"ax",@progbits
  15               	afsk_read:
  16               	.LFB52:
  17               		.file 1 "bertos/net/afsk.c"
   1:bertos/net/afsk.c **** /**
   2:bertos/net/afsk.c ****  * \file
   3:bertos/net/afsk.c ****  * <!--
   4:bertos/net/afsk.c ****  * This file is part of BeRTOS.
   5:bertos/net/afsk.c ****  *
   6:bertos/net/afsk.c ****  * Bertos is free software; you can redistribute it and/or modify
   7:bertos/net/afsk.c ****  * it under the terms of the GNU General Public License as published by
   8:bertos/net/afsk.c ****  * the Free Software Foundation; either version 2 of the License, or
   9:bertos/net/afsk.c ****  * (at your option) any later version.
  10:bertos/net/afsk.c ****  *
  11:bertos/net/afsk.c ****  * This program is distributed in the hope that it will be useful,
  12:bertos/net/afsk.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bertos/net/afsk.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bertos/net/afsk.c ****  * GNU General Public License for more details.
  15:bertos/net/afsk.c ****  *
  16:bertos/net/afsk.c ****  * You should have received a copy of the GNU General Public License
  17:bertos/net/afsk.c ****  * along with this program; if not, write to the Free Software
  18:bertos/net/afsk.c ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:bertos/net/afsk.c ****  *
  20:bertos/net/afsk.c ****  * As a special exception, you may use this file as part of a free software
  21:bertos/net/afsk.c ****  * library without restriction.  Specifically, if other files instantiate
  22:bertos/net/afsk.c ****  * templates or use macros or inline functions from this file, or you compile
  23:bertos/net/afsk.c ****  * this file and link it with other files to produce an executable, this
  24:bertos/net/afsk.c ****  * file does not by itself cause the resulting executable to be covered by
  25:bertos/net/afsk.c ****  * the GNU General Public License.  This exception does not however
  26:bertos/net/afsk.c ****  * invalidate any other reasons why the executable file might be covered by
  27:bertos/net/afsk.c ****  * the GNU General Public License.
  28:bertos/net/afsk.c ****  *
  29:bertos/net/afsk.c ****  * Copyright 2008 Develer S.r.l. (http://www.develer.com/)
  30:bertos/net/afsk.c ****  *
  31:bertos/net/afsk.c ****  * -->
  32:bertos/net/afsk.c ****  *
  33:bertos/net/afsk.c ****  * \brief AFSK1200 modem.
  34:bertos/net/afsk.c ****  *
  35:bertos/net/afsk.c ****  * \author Francesco Sacchi <asterix@develer.com>
  36:bertos/net/afsk.c ****  */
  37:bertos/net/afsk.c **** 
  38:bertos/net/afsk.c **** #include "afsk.h"
  39:bertos/net/afsk.c **** #include <net/ax25.h>
  40:bertos/net/afsk.c **** 
  41:bertos/net/afsk.c **** #include "cfg/cfg_afsk.h"
  42:bertos/net/afsk.c **** #include "hw/hw_afsk.h"
  43:bertos/net/afsk.c **** 
  44:bertos/net/afsk.c **** #include <drv/timer.h>
  45:bertos/net/afsk.c **** 
  46:bertos/net/afsk.c **** #include <cfg/module.h>
  47:bertos/net/afsk.c **** 
  48:bertos/net/afsk.c **** #define LOG_LEVEL   AFSK_LOG_LEVEL
  49:bertos/net/afsk.c **** #define LOG_FORMAT  AFSK_LOG_FORMAT
  50:bertos/net/afsk.c **** #include <cfg/log.h>
  51:bertos/net/afsk.c **** 
  52:bertos/net/afsk.c **** #include <cpu/power.h>
  53:bertos/net/afsk.c **** #include <cpu/pgm.h>
  54:bertos/net/afsk.c **** #include <struct/fifobuf.h>
  55:bertos/net/afsk.c **** 
  56:bertos/net/afsk.c **** #include <string.h> /* memset */
  57:bertos/net/afsk.c **** 
  58:bertos/net/afsk.c **** #define PHASE_BIT    8
  59:bertos/net/afsk.c **** #define PHASE_INC    1
  60:bertos/net/afsk.c **** 
  61:bertos/net/afsk.c **** #define PHASE_MAX    (SAMPLEPERBIT * PHASE_BIT)
  62:bertos/net/afsk.c **** #define PHASE_THRES  (PHASE_MAX / 2) // - PHASE_BIT / 2)
  63:bertos/net/afsk.c **** 
  64:bertos/net/afsk.c **** // Modulator constants
  65:bertos/net/afsk.c **** #define MARK_FREQ  1200
  66:bertos/net/afsk.c **** #define MARK_INC   (uint16_t)(DIV_ROUND(SIN_LEN * (uint32_t)MARK_FREQ, CONFIG_AFSK_DAC_SAMPLERATE))
  67:bertos/net/afsk.c **** 
  68:bertos/net/afsk.c **** #define SPACE_FREQ 2200
  69:bertos/net/afsk.c **** #define SPACE_INC  (uint16_t)(DIV_ROUND(SIN_LEN * (uint32_t)SPACE_FREQ, CONFIG_AFSK_DAC_SAMPLERATE)
  70:bertos/net/afsk.c **** 
  71:bertos/net/afsk.c **** //Ensure sample rate is a multiple of bit rate
  72:bertos/net/afsk.c **** STATIC_ASSERT(!(CONFIG_AFSK_DAC_SAMPLERATE % BITRATE));
  73:bertos/net/afsk.c **** 
  74:bertos/net/afsk.c **** #define DAC_SAMPLEPERBIT (CONFIG_AFSK_DAC_SAMPLERATE / BITRATE)
  75:bertos/net/afsk.c **** 
  76:bertos/net/afsk.c **** /**
  77:bertos/net/afsk.c ****  * Sine table for the first quarter of wave.
  78:bertos/net/afsk.c ****  * The rest of the wave is computed from this first quarter.
  79:bertos/net/afsk.c ****  * This table is used to generate the modulated data.
  80:bertos/net/afsk.c ****  */
  81:bertos/net/afsk.c **** static const uint8_t PROGMEM sin_table[] =
  82:bertos/net/afsk.c **** {
  83:bertos/net/afsk.c **** 	128, 129, 131, 132, 134, 135, 137, 138, 140, 142, 143, 145, 146, 148, 149, 151,
  84:bertos/net/afsk.c **** 	152, 154, 155, 157, 158, 160, 162, 163, 165, 166, 167, 169, 170, 172, 173, 175,
  85:bertos/net/afsk.c **** 	176, 178, 179, 181, 182, 183, 185, 186, 188, 189, 190, 192, 193, 194, 196, 197,
  86:bertos/net/afsk.c **** 	198, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217,
  87:bertos/net/afsk.c **** 	218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  88:bertos/net/afsk.c **** 	234, 234, 235, 236, 237, 238, 238, 239, 240, 241, 241, 242, 243, 243, 244, 245,
  89:bertos/net/afsk.c **** 	245, 246, 246, 247, 248, 248, 249, 249, 250, 250, 250, 251, 251, 252, 252, 252,
  90:bertos/net/afsk.c **** 	253, 253, 253, 253, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255,
  91:bertos/net/afsk.c **** };
  92:bertos/net/afsk.c **** 
  93:bertos/net/afsk.c **** #define SIN_LEN 512 ///< Full wave length
  94:bertos/net/afsk.c **** 
  95:bertos/net/afsk.c **** STATIC_ASSERT(sizeof(sin_table) == SIN_LEN / 4);
  96:bertos/net/afsk.c **** 
  97:bertos/net/afsk.c **** 
  98:bertos/net/afsk.c **** /**
  99:bertos/net/afsk.c ****  * Given the index, this function computes the correct sine sample
 100:bertos/net/afsk.c ****  * based only on the first quarter of wave.
 101:bertos/net/afsk.c ****  */
 102:bertos/net/afsk.c **** INLINE uint8_t sin_sample(uint16_t idx)
 103:bertos/net/afsk.c **** {
 104:bertos/net/afsk.c **** 	ASSERT(idx < SIN_LEN);
 105:bertos/net/afsk.c **** 	uint16_t new_idx = idx % (SIN_LEN / 2);
 106:bertos/net/afsk.c **** 	new_idx = (new_idx >= (SIN_LEN / 4)) ? (SIN_LEN / 2 - new_idx - 1) : new_idx;
 107:bertos/net/afsk.c **** 
 108:bertos/net/afsk.c **** 	#if CPU_HARVARD
 109:bertos/net/afsk.c **** 		uint8_t data = pgm_read_char(&sin_table[new_idx]);
 110:bertos/net/afsk.c **** 	#else
 111:bertos/net/afsk.c **** 		uint8_t data = sin_table[new_idx];
 112:bertos/net/afsk.c **** 	#endif
 113:bertos/net/afsk.c **** 
 114:bertos/net/afsk.c **** 	return (idx >= (SIN_LEN / 2)) ? (255 - data) : data;
 115:bertos/net/afsk.c **** }
 116:bertos/net/afsk.c **** 
 117:bertos/net/afsk.c **** 
 118:bertos/net/afsk.c **** #define BIT_DIFFER(bitline1, bitline2) (((bitline1) ^ (bitline2)) & 0x01)
 119:bertos/net/afsk.c **** #define EDGE_FOUND(bitline)            BIT_DIFFER((bitline), (bitline) >> 1)
 120:bertos/net/afsk.c **** 
 121:bertos/net/afsk.c **** /**
 122:bertos/net/afsk.c ****  * High-Level Data Link Control parsing function.
 123:bertos/net/afsk.c ****  * Parse bitstream in order to find characters.
 124:bertos/net/afsk.c ****  *
 125:bertos/net/afsk.c ****  * \param hdlc HDLC context.
 126:bertos/net/afsk.c ****  * \param bit  current bit to be parsed.
 127:bertos/net/afsk.c ****  * \param fifo FIFO buffer used to push characters.
 128:bertos/net/afsk.c ****  *
 129:bertos/net/afsk.c ****  * \return true if all is ok, false if the fifo is full.
 130:bertos/net/afsk.c ****  */
 131:bertos/net/afsk.c **** static bool hdlc_parse(Hdlc *hdlc, bool bit, FIFOBuffer *fifo)
 132:bertos/net/afsk.c **** {
 133:bertos/net/afsk.c **** 	bool ret = true;
 134:bertos/net/afsk.c **** 
 135:bertos/net/afsk.c **** 	hdlc->demod_bits <<= 1;
 136:bertos/net/afsk.c **** 	hdlc->demod_bits |= bit ? 1 : 0;
 137:bertos/net/afsk.c **** 
 138:bertos/net/afsk.c **** 	/* HDLC Flag */
 139:bertos/net/afsk.c **** 	if (hdlc->demod_bits == HDLC_FLAG)
 140:bertos/net/afsk.c **** 	{
 141:bertos/net/afsk.c **** 		if (!fifo_isfull(fifo))
 142:bertos/net/afsk.c **** 		{
 143:bertos/net/afsk.c **** 			fifo_push(fifo, HDLC_FLAG);
 144:bertos/net/afsk.c **** 			hdlc->rxstart = true;
 145:bertos/net/afsk.c **** 		}
 146:bertos/net/afsk.c **** 		else
 147:bertos/net/afsk.c **** 		{
 148:bertos/net/afsk.c **** 			ret = false;
 149:bertos/net/afsk.c **** 			hdlc->rxstart = false;
 150:bertos/net/afsk.c **** 		}
 151:bertos/net/afsk.c **** 
 152:bertos/net/afsk.c **** 		hdlc->currchar = 0;
 153:bertos/net/afsk.c **** 		hdlc->bit_idx = 0;
 154:bertos/net/afsk.c **** 		return ret;
 155:bertos/net/afsk.c **** 	}
 156:bertos/net/afsk.c **** 
 157:bertos/net/afsk.c **** 	/* Reset */
 158:bertos/net/afsk.c **** 	if ((hdlc->demod_bits & HDLC_RESET) == HDLC_RESET)
 159:bertos/net/afsk.c **** 	{
 160:bertos/net/afsk.c **** 		hdlc->rxstart = false;
 161:bertos/net/afsk.c **** 		return ret;
 162:bertos/net/afsk.c **** 	}
 163:bertos/net/afsk.c **** 
 164:bertos/net/afsk.c **** 	if (!hdlc->rxstart)
 165:bertos/net/afsk.c **** 		return ret;
 166:bertos/net/afsk.c **** 
 167:bertos/net/afsk.c **** 	/* Stuffed bit */
 168:bertos/net/afsk.c **** 	if ((hdlc->demod_bits & 0x3f) == 0x3e)
 169:bertos/net/afsk.c **** 		return ret;
 170:bertos/net/afsk.c **** 
 171:bertos/net/afsk.c **** 	if (hdlc->demod_bits & 0x01)
 172:bertos/net/afsk.c **** 		hdlc->currchar |= 0x80;
 173:bertos/net/afsk.c **** 
 174:bertos/net/afsk.c **** 	if (++hdlc->bit_idx >= 8)
 175:bertos/net/afsk.c **** 	{
 176:bertos/net/afsk.c **** 		if ((hdlc->currchar == HDLC_FLAG
 177:bertos/net/afsk.c **** 			|| hdlc->currchar == HDLC_RESET
 178:bertos/net/afsk.c **** 			|| hdlc->currchar == AX25_ESC))
 179:bertos/net/afsk.c **** 		{
 180:bertos/net/afsk.c **** 			if (!fifo_isfull(fifo))
 181:bertos/net/afsk.c **** 				fifo_push(fifo, AX25_ESC);
 182:bertos/net/afsk.c **** 			else
 183:bertos/net/afsk.c **** 			{
 184:bertos/net/afsk.c **** 				hdlc->rxstart = false;
 185:bertos/net/afsk.c **** 				ret = false;
 186:bertos/net/afsk.c **** 			}
 187:bertos/net/afsk.c **** 		}
 188:bertos/net/afsk.c **** 
 189:bertos/net/afsk.c **** 		if (!fifo_isfull(fifo))
 190:bertos/net/afsk.c **** 			fifo_push(fifo, hdlc->currchar);
 191:bertos/net/afsk.c **** 		else
 192:bertos/net/afsk.c **** 		{
 193:bertos/net/afsk.c **** 			hdlc->rxstart = false;
 194:bertos/net/afsk.c **** 			ret = false;
 195:bertos/net/afsk.c **** 		}
 196:bertos/net/afsk.c **** 
 197:bertos/net/afsk.c **** 		hdlc->currchar = 0;
 198:bertos/net/afsk.c **** 		hdlc->bit_idx = 0;
 199:bertos/net/afsk.c **** 	}
 200:bertos/net/afsk.c **** 	else
 201:bertos/net/afsk.c **** 		hdlc->currchar >>= 1;
 202:bertos/net/afsk.c **** 
 203:bertos/net/afsk.c **** 	return ret;
 204:bertos/net/afsk.c **** }
 205:bertos/net/afsk.c **** 
 206:bertos/net/afsk.c **** 
 207:bertos/net/afsk.c **** /**
 208:bertos/net/afsk.c ****  * ADC ISR callback.
 209:bertos/net/afsk.c ****  * This function has to be called by the ADC ISR when a sample of the configured
 210:bertos/net/afsk.c ****  * channel is available.
 211:bertos/net/afsk.c ****  * \param af Afsk context to operate on.
 212:bertos/net/afsk.c ****  * \param curr_sample current sample from the ADC.
 213:bertos/net/afsk.c ****  */
 214:bertos/net/afsk.c **** void afsk_adc_isr(Afsk *af, int8_t curr_sample)
 215:bertos/net/afsk.c **** {
 216:bertos/net/afsk.c **** 	AFSK_STROBE_ON();
 217:bertos/net/afsk.c **** 
 218:bertos/net/afsk.c **** 	/*
 219:bertos/net/afsk.c **** 	 * Frequency discriminator and LP IIR filter.
 220:bertos/net/afsk.c **** 	 * This filter is designed to work
 221:bertos/net/afsk.c **** 	 * at the given sample rate and bit rate.
 222:bertos/net/afsk.c **** 	 */
 223:bertos/net/afsk.c **** 	STATIC_ASSERT(SAMPLERATE == 9600);
 224:bertos/net/afsk.c **** 	STATIC_ASSERT(BITRATE == 1200);
 225:bertos/net/afsk.c **** 
 226:bertos/net/afsk.c **** 	/*
 227:bertos/net/afsk.c **** 	 * Frequency discrimination is achieved by simply multiplying
 228:bertos/net/afsk.c **** 	 * the sample with a delayed sample of (samples per bit) / 2.
 229:bertos/net/afsk.c **** 	 * Then the signal is lowpass filtered with a first order,
 230:bertos/net/afsk.c **** 	 * 600 Hz filter. The filter implementation is selectable
 231:bertos/net/afsk.c **** 	 * through the CONFIG_AFSK_FILTER config variable.
 232:bertos/net/afsk.c **** 	 */
 233:bertos/net/afsk.c **** 
 234:bertos/net/afsk.c **** 	af->iir_x[0] = af->iir_x[1];
 235:bertos/net/afsk.c **** 
 236:bertos/net/afsk.c **** 	#if (CONFIG_AFSK_FILTER == AFSK_BUTTERWORTH)
 237:bertos/net/afsk.c **** 		af->iir_x[1] = ((int8_t)fifo_pop(&af->delay_fifo) * curr_sample) >> 2;
 238:bertos/net/afsk.c **** 		//af->iir_x[1] = ((int8_t)fifo_pop(&af->delay_fifo) * curr_sample) / 6.027339492;
 239:bertos/net/afsk.c **** 	#elif (CONFIG_AFSK_FILTER == AFSK_CHEBYSHEV)
 240:bertos/net/afsk.c **** 		af->iir_x[1] = ((int8_t)fifo_pop(&af->delay_fifo) * curr_sample) >> 2;
 241:bertos/net/afsk.c **** 		//af->iir_x[1] = ((int8_t)fifo_pop(&af->delay_fifo) * curr_sample) / 3.558147322;
 242:bertos/net/afsk.c **** 	#else
 243:bertos/net/afsk.c **** 		#error Filter type not found!
 244:bertos/net/afsk.c **** 	#endif
 245:bertos/net/afsk.c **** 
 246:bertos/net/afsk.c **** 	af->iir_y[0] = af->iir_y[1];
 247:bertos/net/afsk.c **** 
 248:bertos/net/afsk.c **** 	#if CONFIG_AFSK_FILTER == AFSK_BUTTERWORTH
 249:bertos/net/afsk.c **** 		/*
 250:bertos/net/afsk.c **** 		 * This strange sum + shift is an optimization for af->iir_y[0] * 0.668.
 251:bertos/net/afsk.c **** 		 * iir * 0.668 ~= (iir * 21) / 32 =
 252:bertos/net/afsk.c **** 		 * = (iir * 16) / 32 + (iir * 4) / 32 + iir / 32 =
 253:bertos/net/afsk.c **** 		 * = iir / 2 + iir / 8 + iir / 32 =
 254:bertos/net/afsk.c **** 		 * = iir >> 1 + iir >> 3 + iir >> 5
 255:bertos/net/afsk.c **** 		 */
 256:bertos/net/afsk.c **** 		af->iir_y[1] = af->iir_x[0] + af->iir_x[1] + (af->iir_y[0] >> 1) + (af->iir_y[0] >> 3) + (af->iir
 257:bertos/net/afsk.c **** 		//af->iir_y[1] = af->iir_x[0] + af->iir_x[1] + af->iir_y[0] * 0.6681786379;
 258:bertos/net/afsk.c **** 	#elif CONFIG_AFSK_FILTER == AFSK_CHEBYSHEV
 259:bertos/net/afsk.c **** 		/*
 260:bertos/net/afsk.c **** 		 * This should be (af->iir_y[0] * 0.438) but
 261:bertos/net/afsk.c **** 		 * (af->iir_y[0] >> 1) is a faster approximation :-)
 262:bertos/net/afsk.c **** 		 */
 263:bertos/net/afsk.c **** 		af->iir_y[1] = af->iir_x[0] + af->iir_x[1] + (af->iir_y[0] >> 1);
 264:bertos/net/afsk.c **** 		//af->iir_y[1] = af->iir_x[0] + af->iir_x[1] + af->iir_y[0] * 0.4379097269;
 265:bertos/net/afsk.c **** 	#endif
 266:bertos/net/afsk.c **** 
 267:bertos/net/afsk.c **** 	/* Save this sampled bit in a delay line */
 268:bertos/net/afsk.c **** 	af->sampled_bits <<= 1;
 269:bertos/net/afsk.c **** 	af->sampled_bits |= (af->iir_y[1] > 0) ? 1 : 0;
 270:bertos/net/afsk.c **** 
 271:bertos/net/afsk.c **** 	/* Store current ADC sample in the af->delay_fifo */
 272:bertos/net/afsk.c **** 	fifo_push(&af->delay_fifo, curr_sample);
 273:bertos/net/afsk.c **** 
 274:bertos/net/afsk.c **** 	/* If there is an edge, adjust phase sampling */
 275:bertos/net/afsk.c **** 	if (EDGE_FOUND(af->sampled_bits))
 276:bertos/net/afsk.c **** 	{
 277:bertos/net/afsk.c **** 		if (af->curr_phase < PHASE_THRES)
 278:bertos/net/afsk.c **** 			af->curr_phase += PHASE_INC;
 279:bertos/net/afsk.c **** 		else
 280:bertos/net/afsk.c **** 			af->curr_phase -= PHASE_INC;
 281:bertos/net/afsk.c **** 	}
 282:bertos/net/afsk.c **** 	af->curr_phase += PHASE_BIT;
 283:bertos/net/afsk.c **** 
 284:bertos/net/afsk.c **** 	/* sample the bit */
 285:bertos/net/afsk.c **** 	if (af->curr_phase >= PHASE_MAX)
 286:bertos/net/afsk.c **** 	{
 287:bertos/net/afsk.c **** 		af->curr_phase %= PHASE_MAX;
 288:bertos/net/afsk.c **** 
 289:bertos/net/afsk.c **** 		/* Shift 1 position in the shift register of the found bits */
 290:bertos/net/afsk.c **** 		af->found_bits <<= 1;
 291:bertos/net/afsk.c **** 
 292:bertos/net/afsk.c **** 		/*
 293:bertos/net/afsk.c **** 		 * Determine bit value by reading the last 3 sampled bits.
 294:bertos/net/afsk.c **** 		 * If the number of ones is two or greater, the bit value is a 1,
 295:bertos/net/afsk.c **** 		 * otherwise is a 0.
 296:bertos/net/afsk.c **** 		 * This algorithm presumes that there are 8 samples per bit.
 297:bertos/net/afsk.c **** 		 */
 298:bertos/net/afsk.c **** 		STATIC_ASSERT(SAMPLEPERBIT == 8);
 299:bertos/net/afsk.c **** 		uint8_t bits = af->sampled_bits & 0x07;
 300:bertos/net/afsk.c **** 		if (bits == 0x07 // 111, 3 bits set to 1
 301:bertos/net/afsk.c **** 		 || bits == 0x06 // 110, 2 bits
 302:bertos/net/afsk.c **** 		 || bits == 0x05 // 101, 2 bits
 303:bertos/net/afsk.c **** 		 || bits == 0x03 // 011, 2 bits
 304:bertos/net/afsk.c **** 		)
 305:bertos/net/afsk.c **** 			af->found_bits |= 1;
 306:bertos/net/afsk.c **** 
 307:bertos/net/afsk.c **** 		/*
 308:bertos/net/afsk.c **** 		 * NRZI coding: if 2 consecutive bits have the same value
 309:bertos/net/afsk.c **** 		 * a 1 is received, otherwise it's a 0.
 310:bertos/net/afsk.c **** 		 */
 311:bertos/net/afsk.c **** 		if (!hdlc_parse(&af->hdlc, !EDGE_FOUND(af->found_bits), &af->rx_fifo))
 312:bertos/net/afsk.c **** 			af->status |= AFSK_RXFIFO_OVERRUN;
 313:bertos/net/afsk.c **** 	}
 314:bertos/net/afsk.c **** 
 315:bertos/net/afsk.c **** 
 316:bertos/net/afsk.c **** 	AFSK_STROBE_OFF();
 317:bertos/net/afsk.c **** }
 318:bertos/net/afsk.c **** 
 319:bertos/net/afsk.c **** static void afsk_txStart(Afsk *af)
 320:bertos/net/afsk.c **** {
 321:bertos/net/afsk.c **** 	if (!af->sending)
 322:bertos/net/afsk.c **** 	{
 323:bertos/net/afsk.c **** 		af->phase_inc = MARK_INC;
 324:bertos/net/afsk.c **** 		af->phase_acc = 0;
 325:bertos/net/afsk.c **** 		af->stuff_cnt = 0;
 326:bertos/net/afsk.c **** 		af->sending = true;
 327:bertos/net/afsk.c **** 		af->preamble_len = DIV_ROUND(CONFIG_AFSK_PREAMBLE_LEN * BITRATE, 8000);
 328:bertos/net/afsk.c **** 		AFSK_DAC_IRQ_START(af->dac_ch);
 329:bertos/net/afsk.c **** 	}
 330:bertos/net/afsk.c **** 	ATOMIC(af->trailer_len  = DIV_ROUND(CONFIG_AFSK_TRAILER_LEN  * BITRATE, 8000));
 331:bertos/net/afsk.c **** }
 332:bertos/net/afsk.c **** 
 333:bertos/net/afsk.c **** #define BIT_STUFF_LEN 5
 334:bertos/net/afsk.c **** 
 335:bertos/net/afsk.c **** #define SWITCH_TONE(inc)  (((inc) == MARK_INC) ? SPACE_INC : MARK_INC)
 336:bertos/net/afsk.c **** 
 337:bertos/net/afsk.c **** /**
 338:bertos/net/afsk.c ****  * DAC ISR callback.
 339:bertos/net/afsk.c ****  * This function has to be called by the DAC ISR when a sample of the configured
 340:bertos/net/afsk.c ****  * channel has been converted out.
 341:bertos/net/afsk.c ****  *
 342:bertos/net/afsk.c ****  * \param af Afsk context to operate on.
 343:bertos/net/afsk.c ****  *
 344:bertos/net/afsk.c ****  * \return The next DAC output sample.
 345:bertos/net/afsk.c ****  */
 346:bertos/net/afsk.c **** uint8_t afsk_dac_isr(Afsk *af)
 347:bertos/net/afsk.c **** {
 348:bertos/net/afsk.c **** 	AFSK_STROBE_ON();
 349:bertos/net/afsk.c **** 
 350:bertos/net/afsk.c **** 	/* Check if we are at a start of a sample cycle */
 351:bertos/net/afsk.c **** 	if (af->sample_count == 0)
 352:bertos/net/afsk.c **** 	{
 353:bertos/net/afsk.c **** 		if (af->tx_bit == 0)
 354:bertos/net/afsk.c **** 		{
 355:bertos/net/afsk.c **** 			/* We have just finished transimitting a char, get a new one. */
 356:bertos/net/afsk.c **** 			if (fifo_isempty(&af->tx_fifo) && af->trailer_len == 0)
 357:bertos/net/afsk.c **** 			{
 358:bertos/net/afsk.c **** 				AFSK_DAC_IRQ_STOP(af->dac_ch);
 359:bertos/net/afsk.c **** 				af->sending = false;
 360:bertos/net/afsk.c **** 				AFSK_STROBE_OFF();
 361:bertos/net/afsk.c **** 				return 0;
 362:bertos/net/afsk.c **** 			}
 363:bertos/net/afsk.c **** 			else
 364:bertos/net/afsk.c **** 			{
 365:bertos/net/afsk.c **** 				/*
 366:bertos/net/afsk.c **** 				 * If we have just finished sending an unstuffed byte,
 367:bertos/net/afsk.c **** 				 * reset bitstuff counter.
 368:bertos/net/afsk.c **** 				 */
 369:bertos/net/afsk.c **** 				if (!af->bit_stuff)
 370:bertos/net/afsk.c **** 					af->stuff_cnt = 0;
 371:bertos/net/afsk.c **** 
 372:bertos/net/afsk.c **** 				af->bit_stuff = true;
 373:bertos/net/afsk.c **** 
 374:bertos/net/afsk.c **** 				/*
 375:bertos/net/afsk.c **** 				 * Handle preamble and trailer
 376:bertos/net/afsk.c **** 				 */
 377:bertos/net/afsk.c **** 				if (af->preamble_len == 0)
 378:bertos/net/afsk.c **** 				{
 379:bertos/net/afsk.c **** 					if (fifo_isempty(&af->tx_fifo))
 380:bertos/net/afsk.c **** 					{
 381:bertos/net/afsk.c **** 						af->trailer_len--;
 382:bertos/net/afsk.c **** 						af->curr_out = HDLC_FLAG;
 383:bertos/net/afsk.c **** 					}
 384:bertos/net/afsk.c **** 					else
 385:bertos/net/afsk.c **** 						af->curr_out = fifo_pop(&af->tx_fifo);
 386:bertos/net/afsk.c **** 				}
 387:bertos/net/afsk.c **** 				else
 388:bertos/net/afsk.c **** 				{
 389:bertos/net/afsk.c **** 					af->preamble_len--;
 390:bertos/net/afsk.c **** 					af->curr_out = HDLC_FLAG;
 391:bertos/net/afsk.c **** 				}
 392:bertos/net/afsk.c **** 
 393:bertos/net/afsk.c **** 				/* Handle char escape */
 394:bertos/net/afsk.c **** 				if (af->curr_out == AX25_ESC)
 395:bertos/net/afsk.c **** 				{
 396:bertos/net/afsk.c **** 					if (fifo_isempty(&af->tx_fifo))
 397:bertos/net/afsk.c **** 					{
 398:bertos/net/afsk.c **** 						AFSK_DAC_IRQ_STOP(af->dac_ch);
 399:bertos/net/afsk.c **** 						af->sending = false;
 400:bertos/net/afsk.c **** 						AFSK_STROBE_OFF();
 401:bertos/net/afsk.c **** 						return 0;
 402:bertos/net/afsk.c **** 					}
 403:bertos/net/afsk.c **** 					else
 404:bertos/net/afsk.c **** 						af->curr_out = fifo_pop(&af->tx_fifo);
 405:bertos/net/afsk.c **** 				}
 406:bertos/net/afsk.c **** 				else if (af->curr_out == HDLC_FLAG || af->curr_out == HDLC_RESET)
 407:bertos/net/afsk.c **** 					/* If these chars are not escaped disable bit stuffing */
 408:bertos/net/afsk.c **** 					af->bit_stuff = false;
 409:bertos/net/afsk.c **** 			}
 410:bertos/net/afsk.c **** 			/* Start with LSB mask */
 411:bertos/net/afsk.c **** 			af->tx_bit = 0x01;
 412:bertos/net/afsk.c **** 		}
 413:bertos/net/afsk.c **** 
 414:bertos/net/afsk.c **** 		/* check for bit stuffing */
 415:bertos/net/afsk.c **** 		if (af->bit_stuff && af->stuff_cnt >= BIT_STUFF_LEN)
 416:bertos/net/afsk.c **** 		{
 417:bertos/net/afsk.c **** 			/* If there are more than 5 ones in a row insert a 0 */
 418:bertos/net/afsk.c **** 			af->stuff_cnt = 0;
 419:bertos/net/afsk.c **** 			/* switch tone */
 420:bertos/net/afsk.c **** 			af->phase_inc = SWITCH_TONE(af->phase_inc);
 421:bertos/net/afsk.c **** 		}
 422:bertos/net/afsk.c **** 		else
 423:bertos/net/afsk.c **** 		{
 424:bertos/net/afsk.c **** 			/*
 425:bertos/net/afsk.c **** 			 * NRZI: if we want to transmit a 1 the modulated frequency will stay
 426:bertos/net/afsk.c **** 			 * unchanged; with a 0, there will be a change in the tone.
 427:bertos/net/afsk.c **** 			 */
 428:bertos/net/afsk.c **** 			if (af->curr_out & af->tx_bit)
 429:bertos/net/afsk.c **** 			{
 430:bertos/net/afsk.c **** 				/*
 431:bertos/net/afsk.c **** 				 * Transmit a 1:
 432:bertos/net/afsk.c **** 				 * - Stay on the previous tone
 433:bertos/net/afsk.c **** 				 * - Increase bit stuff counter
 434:bertos/net/afsk.c **** 				 */
 435:bertos/net/afsk.c **** 				af->stuff_cnt++;
 436:bertos/net/afsk.c **** 			}
 437:bertos/net/afsk.c **** 			else
 438:bertos/net/afsk.c **** 			{
 439:bertos/net/afsk.c **** 				/*
 440:bertos/net/afsk.c **** 				 * Transmit a 0:
 441:bertos/net/afsk.c **** 				 * - Reset bit stuff counter
 442:bertos/net/afsk.c **** 				 * - Switch tone
 443:bertos/net/afsk.c **** 				 */
 444:bertos/net/afsk.c **** 				af->stuff_cnt = 0;
 445:bertos/net/afsk.c **** 				af->phase_inc = SWITCH_TONE(af->phase_inc);
 446:bertos/net/afsk.c **** 			}
 447:bertos/net/afsk.c **** 
 448:bertos/net/afsk.c **** 			/* Go to the next bit */
 449:bertos/net/afsk.c **** 			af->tx_bit <<= 1;
 450:bertos/net/afsk.c **** 		}
 451:bertos/net/afsk.c **** 		af->sample_count = DAC_SAMPLEPERBIT;
 452:bertos/net/afsk.c **** 	}
 453:bertos/net/afsk.c **** 
 454:bertos/net/afsk.c **** 	/* Get new sample and put it out on the DAC */
 455:bertos/net/afsk.c **** 	af->phase_acc += af->phase_inc;
 456:bertos/net/afsk.c **** 	af->phase_acc %= SIN_LEN;
 457:bertos/net/afsk.c **** 
 458:bertos/net/afsk.c **** 	af->sample_count--;
 459:bertos/net/afsk.c **** 	AFSK_STROBE_OFF();
 460:bertos/net/afsk.c **** 	return sin_sample(af->phase_acc);
 461:bertos/net/afsk.c **** }
 462:bertos/net/afsk.c **** 
 463:bertos/net/afsk.c **** 
 464:bertos/net/afsk.c **** static size_t afsk_read(KFile *fd, void *_buf, size_t size)
 465:bertos/net/afsk.c **** {
  18               		.loc 1 465 0
  19               		.cfi_startproc
  20               	.LVL0:
  21 0000 CF92      		push r12	 ;  174	*pushqi/1	[length = 1]
  22               	.LCFI0:
  23               		.cfi_def_cfa_offset 3
  24               		.cfi_offset 12, -2
  25 0002 DF92      		push r13	 ;  175	*pushqi/1	[length = 1]
  26               	.LCFI1:
  27               		.cfi_def_cfa_offset 4
  28               		.cfi_offset 13, -3
  29 0004 EF92      		push r14	 ;  176	*pushqi/1	[length = 1]
  30               	.LCFI2:
  31               		.cfi_def_cfa_offset 5
  32               		.cfi_offset 14, -4
  33 0006 FF92      		push r15	 ;  177	*pushqi/1	[length = 1]
  34               	.LCFI3:
  35               		.cfi_def_cfa_offset 6
  36               		.cfi_offset 15, -5
  37 0008 0F93      		push r16	 ;  178	*pushqi/1	[length = 1]
  38               	.LCFI4:
  39               		.cfi_def_cfa_offset 7
  40               		.cfi_offset 16, -6
  41 000a 1F93      		push r17	 ;  179	*pushqi/1	[length = 1]
  42               	.LCFI5:
  43               		.cfi_def_cfa_offset 8
  44               		.cfi_offset 17, -7
  45 000c CF93      		push r28	 ;  180	*pushqi/1	[length = 1]
  46               	.LCFI6:
  47               		.cfi_def_cfa_offset 9
  48               		.cfi_offset 28, -8
  49 000e DF93      		push r29	 ;  181	*pushqi/1	[length = 1]
  50               	.LCFI7:
  51               		.cfi_def_cfa_offset 10
  52               		.cfi_offset 29, -9
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 8 */
  56               	.L__stack_usage = 8
  57 0010 EC01      		movw r28,r24	 ;  23	*movhi/1	[length = 1]
  58 0012 6B01      		movw r12,r22	 ;  24	*movhi/1	[length = 1]
  59 0014 7A01      		movw r14,r20	 ;  25	*movhi/1	[length = 1]
  60               	.LVL1:
  61               	.LBB134:
  62               	.LBB135:
  63               		.file 2 "bertos/net/afsk.h"
   1:bertos/net/afsk.h **** /**
   2:bertos/net/afsk.h ****  * \file
   3:bertos/net/afsk.h ****  * <!--
   4:bertos/net/afsk.h ****  * This file is part of BeRTOS.
   5:bertos/net/afsk.h ****  *
   6:bertos/net/afsk.h ****  * Bertos is free software; you can redistribute it and/or modify
   7:bertos/net/afsk.h ****  * it under the terms of the GNU General Public License as published by
   8:bertos/net/afsk.h ****  * the Free Software Foundation; either version 2 of the License, or
   9:bertos/net/afsk.h ****  * (at your option) any later version.
  10:bertos/net/afsk.h ****  *
  11:bertos/net/afsk.h ****  * This program is distributed in the hope that it will be useful,
  12:bertos/net/afsk.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bertos/net/afsk.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bertos/net/afsk.h ****  * GNU General Public License for more details.
  15:bertos/net/afsk.h ****  *
  16:bertos/net/afsk.h ****  * You should have received a copy of the GNU General Public License
  17:bertos/net/afsk.h ****  * along with this program; if not, write to the Free Software
  18:bertos/net/afsk.h ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:bertos/net/afsk.h ****  *
  20:bertos/net/afsk.h ****  * As a special exception, you may use this file as part of a free software
  21:bertos/net/afsk.h ****  * library without restriction.  Specifically, if other files instantiate
  22:bertos/net/afsk.h ****  * templates or use macros or inline functions from this file, or you compile
  23:bertos/net/afsk.h ****  * this file and link it with other files to produce an executable, this
  24:bertos/net/afsk.h ****  * file does not by itself cause the resulting executable to be covered by
  25:bertos/net/afsk.h ****  * the GNU General Public License.  This exception does not however
  26:bertos/net/afsk.h ****  * invalidate any other reasons why the executable file might be covered by
  27:bertos/net/afsk.h ****  * the GNU General Public License.
  28:bertos/net/afsk.h ****  *
  29:bertos/net/afsk.h ****  * Copyright 2008 Develer S.r.l. (http://www.develer.com/)
  30:bertos/net/afsk.h ****  *
  31:bertos/net/afsk.h ****  * -->
  32:bertos/net/afsk.h ****  *
  33:bertos/net/afsk.h ****  * \brief AFSK1200 modem.
  34:bertos/net/afsk.h ****  *
  35:bertos/net/afsk.h ****  * \author Francesco Sacchi <asterix@develer.com>
  36:bertos/net/afsk.h ****  *
  37:bertos/net/afsk.h ****  * $WIZ$ module_name = "afsk"
  38:bertos/net/afsk.h ****  * $WIZ$ module_configuration = "bertos/cfg/cfg_afsk.h"
  39:bertos/net/afsk.h ****  * $WIZ$ module_depends = "timer", "kfile"
  40:bertos/net/afsk.h ****  * $WIZ$ module_hw = "bertos/hw/hw_afsk.h"
  41:bertos/net/afsk.h ****  */
  42:bertos/net/afsk.h **** 
  43:bertos/net/afsk.h **** #ifndef NET_AFSK_H
  44:bertos/net/afsk.h **** #define NET_AFSK_H
  45:bertos/net/afsk.h **** 
  46:bertos/net/afsk.h **** #include "cfg/cfg_afsk.h"
  47:bertos/net/afsk.h **** #include "hw/hw_afsk.h"
  48:bertos/net/afsk.h **** 
  49:bertos/net/afsk.h **** #include <kern/kfile.h>
  50:bertos/net/afsk.h **** #include <cfg/compiler.h>
  51:bertos/net/afsk.h **** #include <struct/fifobuf.h>
  52:bertos/net/afsk.h **** 
  53:bertos/net/afsk.h **** 
  54:bertos/net/afsk.h **** 
  55:bertos/net/afsk.h **** /**
  56:bertos/net/afsk.h ****  * ADC sample rate.
  57:bertos/net/afsk.h ****  * The demodulator filters are designed to work at this frequency.
  58:bertos/net/afsk.h ****  * If you need to change this remember to update afsk_adc_isr().
  59:bertos/net/afsk.h ****  */
  60:bertos/net/afsk.h **** #define SAMPLERATE 9600
  61:bertos/net/afsk.h **** 
  62:bertos/net/afsk.h **** /**
  63:bertos/net/afsk.h ****  * Bitrate of the received/transmitted data.
  64:bertos/net/afsk.h ****  * The demodulator filters and decoderes are designed to work at this frequency.
  65:bertos/net/afsk.h ****  * If you need to change this remember to update afsk_adc_isr().
  66:bertos/net/afsk.h ****  */
  67:bertos/net/afsk.h **** #define BITRATE    1200
  68:bertos/net/afsk.h **** 
  69:bertos/net/afsk.h **** #define SAMPLEPERBIT (SAMPLERATE / BITRATE)
  70:bertos/net/afsk.h **** 
  71:bertos/net/afsk.h **** /**
  72:bertos/net/afsk.h ****  * HDLC (High-Level Data Link Control) context.
  73:bertos/net/afsk.h ****  * Maybe to be moved in a separate HDLC module one day.
  74:bertos/net/afsk.h ****  */
  75:bertos/net/afsk.h **** typedef struct Hdlc
  76:bertos/net/afsk.h **** {
  77:bertos/net/afsk.h **** 	uint8_t demod_bits; ///< Bitstream from the demodulator.
  78:bertos/net/afsk.h **** 	uint8_t bit_idx;    ///< Current received bit.
  79:bertos/net/afsk.h **** 	uint8_t currchar;   ///< Current received character.
  80:bertos/net/afsk.h **** 	bool rxstart;       ///< True if an HDLC_FLAG char has been found in the bitstream.
  81:bertos/net/afsk.h **** } Hdlc;
  82:bertos/net/afsk.h **** 
  83:bertos/net/afsk.h **** /**
  84:bertos/net/afsk.h ****  * RX FIFO buffer full error.
  85:bertos/net/afsk.h ****  */
  86:bertos/net/afsk.h **** #define AFSK_RXFIFO_OVERRUN BV(0)
  87:bertos/net/afsk.h **** 
  88:bertos/net/afsk.h **** /**
  89:bertos/net/afsk.h ****  * AFSK1200 modem context.
  90:bertos/net/afsk.h ****  */
  91:bertos/net/afsk.h **** typedef struct Afsk
  92:bertos/net/afsk.h **** {
  93:bertos/net/afsk.h **** 	/** Base "class" */
  94:bertos/net/afsk.h **** 	KFile fd;
  95:bertos/net/afsk.h **** 
  96:bertos/net/afsk.h **** 	/** ADC channel to be used by the demodulator */
  97:bertos/net/afsk.h **** 	int adc_ch;
  98:bertos/net/afsk.h **** 
  99:bertos/net/afsk.h **** 	/** DAC channel to be used by the modulator */
 100:bertos/net/afsk.h **** 	int dac_ch;
 101:bertos/net/afsk.h **** 
 102:bertos/net/afsk.h **** 	/** Current sample of bit for output data. */
 103:bertos/net/afsk.h **** 	uint8_t sample_count;
 104:bertos/net/afsk.h **** 
 105:bertos/net/afsk.h **** 	/** Current character to be modulated */
 106:bertos/net/afsk.h **** 	uint8_t curr_out;
 107:bertos/net/afsk.h **** 
 108:bertos/net/afsk.h **** 	/** Mask of current modulated bit */
 109:bertos/net/afsk.h **** 	uint8_t tx_bit;
 110:bertos/net/afsk.h **** 
 111:bertos/net/afsk.h **** 	/** True if bit stuff is allowed, false otherwise */
 112:bertos/net/afsk.h **** 	bool bit_stuff;
 113:bertos/net/afsk.h **** 
 114:bertos/net/afsk.h **** 	/** Counter for bit stuffing */
 115:bertos/net/afsk.h **** 	uint8_t stuff_cnt;
 116:bertos/net/afsk.h **** 	/**
 117:bertos/net/afsk.h **** 	 * DDS phase accumulator for generating modulated data.
 118:bertos/net/afsk.h **** 	 */
 119:bertos/net/afsk.h **** 	uint16_t phase_acc;
 120:bertos/net/afsk.h **** 
 121:bertos/net/afsk.h **** 	/** Current phase increment for current modulated bit */
 122:bertos/net/afsk.h **** 	uint16_t phase_inc;
 123:bertos/net/afsk.h **** 
 124:bertos/net/afsk.h **** 	/** Delay line used to delay samples by (SAMPLEPERBIT / 2) */
 125:bertos/net/afsk.h **** 	FIFOBuffer delay_fifo;
 126:bertos/net/afsk.h **** 
 127:bertos/net/afsk.h **** 	/**
 128:bertos/net/afsk.h **** 	 * Buffer for delay FIFO.
 129:bertos/net/afsk.h **** 	 * The 1 is added because the FIFO macros need
 130:bertos/net/afsk.h **** 	 * 1 byte more to handle a buffer (SAMPLEPERBIT / 2) bytes long.
 131:bertos/net/afsk.h **** 	 */
 132:bertos/net/afsk.h **** 	int8_t delay_buf[SAMPLEPERBIT / 2 + 1];
 133:bertos/net/afsk.h **** 
 134:bertos/net/afsk.h **** 	/** FIFO for received data */
 135:bertos/net/afsk.h **** 	FIFOBuffer rx_fifo;
 136:bertos/net/afsk.h **** 
 137:bertos/net/afsk.h **** 	/** FIFO rx buffer */
 138:bertos/net/afsk.h **** 	uint8_t rx_buf[CONFIG_AFSK_RX_BUFLEN];
 139:bertos/net/afsk.h **** 
 140:bertos/net/afsk.h **** 	/** FIFO for transmitted data */
 141:bertos/net/afsk.h **** 	FIFOBuffer tx_fifo;
 142:bertos/net/afsk.h **** 
 143:bertos/net/afsk.h **** 	/** FIFO tx buffer */
 144:bertos/net/afsk.h **** 	uint8_t tx_buf[CONFIG_AFSK_TX_BUFLEN];
 145:bertos/net/afsk.h **** 
 146:bertos/net/afsk.h **** 	/** IIR filter X cells, used to filter sampled data by the demodulator */
 147:bertos/net/afsk.h **** 	int16_t iir_x[2];
 148:bertos/net/afsk.h **** 
 149:bertos/net/afsk.h **** 	/** IIR filter Y cells, used to filter sampled data by the demodulator */
 150:bertos/net/afsk.h **** 	int16_t iir_y[2];
 151:bertos/net/afsk.h **** 
 152:bertos/net/afsk.h **** 	/**
 153:bertos/net/afsk.h **** 	 * Bits sampled by the demodulator are here.
 154:bertos/net/afsk.h **** 	 * Since ADC samplerate is higher than the bitrate, the bits here are
 155:bertos/net/afsk.h **** 	 * SAMPLEPERBIT times the bitrate.
 156:bertos/net/afsk.h **** 	 */
 157:bertos/net/afsk.h **** 	uint8_t sampled_bits;
 158:bertos/net/afsk.h **** 
 159:bertos/net/afsk.h **** 	/**
 160:bertos/net/afsk.h **** 	 * Current phase, needed to know when the bitstream at ADC speed
 161:bertos/net/afsk.h **** 	 * should be sampled.
 162:bertos/net/afsk.h **** 	 */
 163:bertos/net/afsk.h **** 	int8_t curr_phase;
 164:bertos/net/afsk.h **** 
 165:bertos/net/afsk.h **** 	/** Bits found by the demodulator at the correct bitrate speed. */
 166:bertos/net/afsk.h **** 	uint8_t found_bits;
 167:bertos/net/afsk.h **** 
 168:bertos/net/afsk.h **** 	/** True while modem sends data */
 169:bertos/net/afsk.h **** 	volatile bool sending;
 170:bertos/net/afsk.h **** 
 171:bertos/net/afsk.h **** 	/**
 172:bertos/net/afsk.h **** 	 * AFSK modem status.
 173:bertos/net/afsk.h **** 	 * If 0 all is ok, otherwise errors are present.
 174:bertos/net/afsk.h **** 	 */
 175:bertos/net/afsk.h **** 	volatile int status;
 176:bertos/net/afsk.h **** 
 177:bertos/net/afsk.h **** 	/** Hdlc context */
 178:bertos/net/afsk.h **** 	Hdlc hdlc;
 179:bertos/net/afsk.h **** 
 180:bertos/net/afsk.h **** 	/**
 181:bertos/net/afsk.h **** 	 * Preamble length.
 182:bertos/net/afsk.h **** 	 * When the AFSK modem wants to send data, before sending the actual data,
 183:bertos/net/afsk.h **** 	 * shifts out preamble_len HDLC_FLAG characters.
 184:bertos/net/afsk.h **** 	 * This helps to synchronize the demodulator filters on the receiver side.
 185:bertos/net/afsk.h **** 	 */
 186:bertos/net/afsk.h **** 	uint16_t preamble_len;
 187:bertos/net/afsk.h **** 
 188:bertos/net/afsk.h **** 	/**
 189:bertos/net/afsk.h **** 	 * Trailer length.
 190:bertos/net/afsk.h **** 	 * After sending the actual data, the AFSK shifts out
 191:bertos/net/afsk.h **** 	 * trailer_len HDLC_FLAG characters.
 192:bertos/net/afsk.h **** 	 * This helps to synchronize the demodulator filters on the receiver side.
 193:bertos/net/afsk.h **** 	 */
 194:bertos/net/afsk.h **** 	uint16_t trailer_len;
 195:bertos/net/afsk.h **** } Afsk;
 196:bertos/net/afsk.h **** 
 197:bertos/net/afsk.h **** #define KFT_AFSK MAKE_ID('A', 'F', 'S', 'K')
 198:bertos/net/afsk.h **** 
 199:bertos/net/afsk.h **** INLINE Afsk *AFSK_CAST(KFile *fd)
 200:bertos/net/afsk.h **** {
 201:bertos/net/afsk.h ****   ASSERT(fd->_type == KFT_AFSK);
  64               		.loc 2 201 0
  65 0016 8889      		ldd r24,Y+16	 ;  31	*movsi/3	[length = 4]
  66 0018 9989      		ldd r25,Y+17
  67 001a AA89      		ldd r26,Y+18
  68 001c BB89      		ldd r27,Y+19
  69               	.LVL2:
  70 001e 8B34      		cpi r24,lo8(1095127883)	 ;  32	*cmpsi/4	[length = 7]
  71 0020 23E5      		ldi r18,hi8(1095127883)
  72 0022 9207      		cpc r25,r18
  73 0024 26E4      		ldi r18,hlo8(1095127883)
  74 0026 A207      		cpc r26,r18
  75 0028 21E4      		ldi r18,hhi8(1095127883)
  76 002a B207      		cpc r27,r18
  77 002c 01F0      		breq .L2	 ;  33	branch	[length = 1]
  78               	.LVL3:
  79 002e 80E0      		ldi r24,lo8(__c.1673)	 ;  38	*movhi/4	[length = 2]
  80 0030 90E0      		ldi r25,hi8(__c.1673)
  81 0032 60E0      		ldi r22,lo8(__c.1675)	 ;  39	*movhi/4	[length = 2]
  82 0034 70E0      		ldi r23,hi8(__c.1675)
  83 0036 49EC      		ldi r20,lo8(201)	 ;  40	*movhi/4	[length = 2]
  84 0038 50E0      		ldi r21,hi8(201)
  85 003a 0E94 0000 		call __bassert_P	 ;  41	call_value_insn/3	[length = 2]
  86               	.LVL4:
  87               	.L2:
  88               	.LBE135:
  89               	.LBE134:
  90               		.loc 1 465 0 discriminator 1
  91 003e 8601      		movw r16,r12	 ;  27	*movhi/1	[length = 1]
  92 0040 00C0      		rjmp .L3	 ;  198	jump	[length = 1]
  93               	.LVL5:
  94               	.L10:
  95               	.LBB136:
  96               	.LBB137:
  97               	.LBB138:
  98               	.LBB139:
  99               		.file 3 "bertos/drv/timer.h"
   1:bertos/drv/timer.h **** /**
   2:bertos/drv/timer.h ****  * \file
   3:bertos/drv/timer.h ****  * <!--
   4:bertos/drv/timer.h ****  * This file is part of BeRTOS.
   5:bertos/drv/timer.h ****  *
   6:bertos/drv/timer.h ****  * Bertos is free software; you can redistribute it and/or modify
   7:bertos/drv/timer.h ****  * it under the terms of the GNU General Public License as published by
   8:bertos/drv/timer.h ****  * the Free Software Foundation; either version 2 of the License, or
   9:bertos/drv/timer.h ****  * (at your option) any later version.
  10:bertos/drv/timer.h ****  *
  11:bertos/drv/timer.h ****  * This program is distributed in the hope that it will be useful,
  12:bertos/drv/timer.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bertos/drv/timer.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bertos/drv/timer.h ****  * GNU General Public License for more details.
  15:bertos/drv/timer.h ****  *
  16:bertos/drv/timer.h ****  * You should have received a copy of the GNU General Public License
  17:bertos/drv/timer.h ****  * along with this program; if not, write to the Free Software
  18:bertos/drv/timer.h ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:bertos/drv/timer.h ****  *
  20:bertos/drv/timer.h ****  * As a special exception, you may use this file as part of a free software
  21:bertos/drv/timer.h ****  * library without restriction.  Specifically, if other files instantiate
  22:bertos/drv/timer.h ****  * templates or use macros or inline functions from this file, or you compile
  23:bertos/drv/timer.h ****  * this file and link it with other files to produce an executable, this
  24:bertos/drv/timer.h ****  * file does not by itself cause the resulting executable to be covered by
  25:bertos/drv/timer.h ****  * the GNU General Public License.  This exception does not however
  26:bertos/drv/timer.h ****  * invalidate any other reasons why the executable file might be covered by
  27:bertos/drv/timer.h ****  * the GNU General Public License.
  28:bertos/drv/timer.h ****  *
  29:bertos/drv/timer.h ****  * Copyright 2003, 2004, 2005 Develer S.r.l. (http://www.develer.com/)
  30:bertos/drv/timer.h ****  * Copyright 2000, 2008 Bernie Innocenti <bernie@codewiz.org>
  31:bertos/drv/timer.h ****  * -->
  32:bertos/drv/timer.h ****  *
  33:bertos/drv/timer.h ****  * \brief Hardware independent timer driver.
  34:bertos/drv/timer.h ****  *
  35:bertos/drv/timer.h ****  * All timer related functions are implemented in this module. You have several options to use time
  36:bertos/drv/timer.h ****  * \li simple delay: just use timer_delay() if you want to wait for a few milliseconds;
  37:bertos/drv/timer.h ****  * \li delay with callback: create a timer structure and use timer_setDelay() and timer_setSoftint(
  38:bertos/drv/timer.h ****  * \li delay with signal: same as above but use timer_setSignal() to set specify which signal to se
  39:bertos/drv/timer.h ****  * \li simple synchronous timer based scheduler: use synctimer_add() to schedule an event in a user
  40:bertos/drv/timer.h ****  *
  41:bertos/drv/timer.h ****  * Whenever a timer expires you need to explicitly arm it again with timer_add(). If you want to ab
  42:bertos/drv/timer.h ****  * You can use conversion macros when using msecs to specify the delay.
  43:bertos/drv/timer.h ****  *
  44:bertos/drv/timer.h ****  * \author Bernie Innocenti <bernie@codewiz.org>
  45:bertos/drv/timer.h ****  *
  46:bertos/drv/timer.h ****  * $WIZ$ module_name = "timer"
  47:bertos/drv/timer.h ****  * $WIZ$ module_configuration = "bertos/cfg/cfg_timer.h"
  48:bertos/drv/timer.h ****  * $WIZ$ module_depends = "event", "sysirq"
  49:bertos/drv/timer.h ****  * $WIZ$ module_supports = "not atmega103 and not atmega8"
  50:bertos/drv/timer.h ****  */
  51:bertos/drv/timer.h **** 
  52:bertos/drv/timer.h **** #ifndef DRV_TIMER_H
  53:bertos/drv/timer.h **** #define DRV_TIMER_H
  54:bertos/drv/timer.h **** 
  55:bertos/drv/timer.h **** #include <cfg/os.h>
  56:bertos/drv/timer.h **** #include <cfg/macros.h>
  57:bertos/drv/timer.h **** 
  58:bertos/drv/timer.h **** #include <cpu/attr.h>
  59:bertos/drv/timer.h **** #include <cpu/irq.h>
  60:bertos/drv/timer.h **** 
  61:bertos/drv/timer.h **** 
  62:bertos/drv/timer.h **** /*
  63:bertos/drv/timer.h ****  * Include platform-specific binding header if we're hosted.
  64:bertos/drv/timer.h ****  * Try the CPU specific one for bare-metal environments.
  65:bertos/drv/timer.h ****  */
  66:bertos/drv/timer.h **** #if OS_HOSTED
  67:bertos/drv/timer.h **** 	//#include OS_HEADER(timer)
  68:bertos/drv/timer.h **** 	#include <emul/timer_posix.h>
  69:bertos/drv/timer.h **** #else
  70:bertos/drv/timer.h **** 	#include CPU_HEADER(timer)
  71:bertos/drv/timer.h **** #endif
  72:bertos/drv/timer.h **** 
  73:bertos/drv/timer.h **** STATIC_ASSERT(sizeof(hptime_t) == SIZEOF_HPTIME_T);
  74:bertos/drv/timer.h **** 
  75:bertos/drv/timer.h **** #include "cfg/cfg_timer.h"
  76:bertos/drv/timer.h **** #include <cfg/debug.h>
  77:bertos/drv/timer.h **** #include <cfg/compiler.h>
  78:bertos/drv/timer.h **** 
  79:bertos/drv/timer.h **** #include <struct/list.h>
  80:bertos/drv/timer.h **** 
  81:bertos/drv/timer.h **** /*
  82:bertos/drv/timer.h ****  * Sanity check for config parameters required by this module.
  83:bertos/drv/timer.h ****  */
  84:bertos/drv/timer.h **** #if !defined(CONFIG_TIMER_EVENTS) || ((CONFIG_TIMER_EVENTS != 0) && CONFIG_TIMER_EVENTS != 1)
  85:bertos/drv/timer.h **** 	#error CONFIG_TIMER_EVENTS must be set to either 0 or 1 in cfg_timer.h
  86:bertos/drv/timer.h **** #endif
  87:bertos/drv/timer.h **** #if !defined(CONFIG_TIMER_UDELAY) || ((CONFIG_TIMER_UDELAY != 0) && CONFIG_TIMER_EVENTS != 1)
  88:bertos/drv/timer.h **** 	#error CONFIG_TIMER_UDELAY must be set to either 0 or 1 in cfg_timer.h
  89:bertos/drv/timer.h **** #endif
  90:bertos/drv/timer.h **** #if defined(CONFIG_TIMER_DISABLE_UDELAY)
  91:bertos/drv/timer.h **** 	#error Obosolete config option CONFIG_TIMER_DISABLE_UDELAY.  Use CONFIG_TIMER_UDELAY
  92:bertos/drv/timer.h **** #endif
  93:bertos/drv/timer.h **** #if defined(CONFIG_TIMER_DISABLE_EVENTS)
  94:bertos/drv/timer.h **** 	#error Obosolete config option CONFIG_TIMER_DISABLE_EVENTS.  Use CONFIG_TIMER_EVENTS
  95:bertos/drv/timer.h **** #endif
  96:bertos/drv/timer.h **** 
  97:bertos/drv/timer.h **** extern volatile ticks_t _clock;
  98:bertos/drv/timer.h **** 
  99:bertos/drv/timer.h **** /**
 100:bertos/drv/timer.h ****  * \brief Return the system tick counter (expressed in ticks)
 101:bertos/drv/timer.h ****  *
 102:bertos/drv/timer.h ****  * The result is guaranteed to increment monotonically,
 103:bertos/drv/timer.h ****  * but client code must be tolerant with respect to overflows.
 104:bertos/drv/timer.h ****  *
 105:bertos/drv/timer.h ****  * The following code is safe:
 106:bertos/drv/timer.h ****  *
 107:bertos/drv/timer.h ****  * \code
 108:bertos/drv/timer.h ****  *   drop_teabag();
 109:bertos/drv/timer.h ****  *   ticks_t tea_start_time = timer_clock();
 110:bertos/drv/timer.h ****  *
 111:bertos/drv/timer.h ****  *   for (;;)
 112:bertos/drv/timer.h ****  *   {
 113:bertos/drv/timer.h ****  *       if (timer_clock() - tea_start_time > TEAPOT_DELAY)
 114:bertos/drv/timer.h ****  *       {
 115:bertos/drv/timer.h ****  *           printf("Your tea, Sir.\n");
 116:bertos/drv/timer.h ****  *           break;
 117:bertos/drv/timer.h ****  *       }
 118:bertos/drv/timer.h ****  *       patience();
 119:bertos/drv/timer.h ****  *   }
 120:bertos/drv/timer.h ****  * \endcode
 121:bertos/drv/timer.h ****  *
 122:bertos/drv/timer.h ****  * \note This function must disable interrupts on 8/16bit CPUs because the
 123:bertos/drv/timer.h ****  * clock variable is larger than the processor word size and can't
 124:bertos/drv/timer.h ****  * be copied atomically.
 125:bertos/drv/timer.h ****  * \sa timer_delay()
 126:bertos/drv/timer.h ****  */
 127:bertos/drv/timer.h **** INLINE ticks_t timer_clock(void)
 128:bertos/drv/timer.h **** {
 129:bertos/drv/timer.h **** 	ticks_t result;
 130:bertos/drv/timer.h **** 
 131:bertos/drv/timer.h **** 	ATOMIC(result = _clock);
 100               		.loc 3 131 0
 101               	/* #APP */
 102               	 ;  131 "bertos/drv/timer.h" 1
 103 0042 8FB7      		in r24,__SREG__
 104 0044 F894      		cli
 105               	 ;  0 "" 2
 106               	.LVL6:
 107               	/* #NOAPP */
 108 0046 4091 0000 		lds r20,_clock	 ;  50	*movsi/3	[length = 8]
 109 004a 5091 0000 		lds r21,_clock+1
 110 004e 6091 0000 		lds r22,_clock+2
 111 0052 7091 0000 		lds r23,_clock+3
 112               	.LVL7:
 113               	/* #APP */
 114               	 ;  131 "bertos/drv/timer.h" 1
 115 0056 8FBF      		out __SREG__,r24
 116               	 ;  0 "" 2
 117               	/* #NOAPP */
 118               	.LBE139:
 119               	.LBE138:
 120               	.LBE137:
 466:bertos/net/afsk.c **** 	Afsk *af = AFSK_CAST(fd);
 467:bertos/net/afsk.c **** 	uint8_t *buf = (uint8_t *)_buf;
 468:bertos/net/afsk.c **** 
 469:bertos/net/afsk.c **** 	#if CONFIG_AFSK_RXTIMEOUT == 0
 470:bertos/net/afsk.c **** 	while (size-- && !fifo_isempty_locked(&af->rx_fifo))
 471:bertos/net/afsk.c **** 	#else
 472:bertos/net/afsk.c **** 	while (size--)
 473:bertos/net/afsk.c **** 	#endif
 474:bertos/net/afsk.c **** 	{
 475:bertos/net/afsk.c **** 		#if CONFIG_AFSK_RXTIMEOUT != -1
 476:bertos/net/afsk.c **** 		ticks_t start = timer_clock();
 477:bertos/net/afsk.c **** 		#endif
 478:bertos/net/afsk.c **** 
 479:bertos/net/afsk.c **** 		while (fifo_isempty_locked(&af->rx_fifo))
 121               		.loc 1 479 0
 122 0058 00C0      		rjmp .L4	 ;  200	jump	[length = 1]
 123               	.LVL8:
 124               	.L6:
 125               	.LBB140:
 126               	.LBB141:
 127               	.LBB142:
 128               		.loc 3 131 0
 129               	/* #APP */
 130               	 ;  131 "bertos/drv/timer.h" 1
 131 005a 2FB7      		in r18,__SREG__
 132 005c F894      		cli
 133               	 ;  0 "" 2
 134               	.LVL9:
 135               	/* #NOAPP */
 136 005e 8091 0000 		lds r24,_clock	 ;  60	*movsi/3	[length = 8]
 137 0062 9091 0000 		lds r25,_clock+1
 138 0066 A091 0000 		lds r26,_clock+2
 139 006a B091 0000 		lds r27,_clock+3
 140               	.LVL10:
 141               	/* #APP */
 142               	 ;  131 "bertos/drv/timer.h" 1
 143 006e 2FBF      		out __SREG__,r18
 144               	 ;  0 "" 2
 145               	.LVL11:
 146               	/* #NOAPP */
 147               	.LBE142:
 148               	.LBE141:
 149               	.LBE140:
 480:bertos/net/afsk.c **** 		{
 481:bertos/net/afsk.c **** 			cpu_relax();
 482:bertos/net/afsk.c **** 			#if CONFIG_AFSK_RXTIMEOUT != -1
 483:bertos/net/afsk.c **** 			if (timer_clock() - start > ms_to_ticks(CONFIG_AFSK_RXTIMEOUT))
 150               		.loc 1 483 0
 151 0070 841B      		sub r24,r20	 ;  64	subsi3/1	[length = 4]
 152 0072 950B      		sbc r25,r21
 153 0074 A60B      		sbc r26,r22
 154 0076 B70B      		sbc r27,r23
 155 0078 1816      		cp __zero_reg__,r24	 ;  65	*reversed_tstsi	[length = 4]
 156 007a 1906      		cpc __zero_reg__,r25
 157 007c 1A06      		cpc __zero_reg__,r26
 158 007e 1B06      		cpc __zero_reg__,r27
 159 0080 04F0      		brlt .L9	 ;  66	branch	[length = 1]
 160               	.LVL12:
 161               	.L4:
 162               	.LBB143:
 163               	.LBB144:
 164               	.LBB145:
 165               		.file 4 "bertos/struct/fifobuf.h"
   1:bertos/struct/fifobuf.h **** /**
   2:bertos/struct/fifobuf.h ****  * \file
   3:bertos/struct/fifobuf.h ****  * <!--
   4:bertos/struct/fifobuf.h ****  * This file is part of BeRTOS.
   5:bertos/struct/fifobuf.h ****  *
   6:bertos/struct/fifobuf.h ****  * Bertos is free software; you can redistribute it and/or modify
   7:bertos/struct/fifobuf.h ****  * it under the terms of the GNU General Public License as published by
   8:bertos/struct/fifobuf.h ****  * the Free Software Foundation; either version 2 of the License, or
   9:bertos/struct/fifobuf.h ****  * (at your option) any later version.
  10:bertos/struct/fifobuf.h ****  *
  11:bertos/struct/fifobuf.h ****  * This program is distributed in the hope that it will be useful,
  12:bertos/struct/fifobuf.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bertos/struct/fifobuf.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bertos/struct/fifobuf.h ****  * GNU General Public License for more details.
  15:bertos/struct/fifobuf.h ****  *
  16:bertos/struct/fifobuf.h ****  * You should have received a copy of the GNU General Public License
  17:bertos/struct/fifobuf.h ****  * along with this program; if not, write to the Free Software
  18:bertos/struct/fifobuf.h ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:bertos/struct/fifobuf.h ****  *
  20:bertos/struct/fifobuf.h ****  * As a special exception, you may use this file as part of a free software
  21:bertos/struct/fifobuf.h ****  * library without restriction.  Specifically, if other files instantiate
  22:bertos/struct/fifobuf.h ****  * templates or use macros or inline functions from this file, or you compile
  23:bertos/struct/fifobuf.h ****  * this file and link it with other files to produce an executable, this
  24:bertos/struct/fifobuf.h ****  * file does not by itself cause the resulting executable to be covered by
  25:bertos/struct/fifobuf.h ****  * the GNU General Public License.  This exception does not however
  26:bertos/struct/fifobuf.h ****  * invalidate any other reasons why the executable file might be covered by
  27:bertos/struct/fifobuf.h ****  * the GNU General Public License.
  28:bertos/struct/fifobuf.h ****  *
  29:bertos/struct/fifobuf.h ****  * Copyright 2003, 2004 Develer S.r.l. (http://www.develer.com/)
  30:bertos/struct/fifobuf.h ****  * Copyright 2001, 2008 Bernie Innocenti <bernie@codewiz.org>
  31:bertos/struct/fifobuf.h ****  * -->
  32:bertos/struct/fifobuf.h ****  *
  33:bertos/struct/fifobuf.h ****  * \brief General pourpose FIFO buffer implemented with a ring buffer
  34:bertos/struct/fifobuf.h ****  *
  35:bertos/struct/fifobuf.h ****  * \li \c begin points to the first buffer element;
  36:bertos/struct/fifobuf.h ****  * \li \c end points to the last buffer element (unlike the STL convention);
  37:bertos/struct/fifobuf.h ****  * \li \c head points to the element to be extracted next;
  38:bertos/struct/fifobuf.h ****  * \li \c tail points to the location following the last insertion;
  39:bertos/struct/fifobuf.h ****  * \li when any of the pointers advances beyond \c end, it is reset
  40:bertos/struct/fifobuf.h ****  *     back to \c begin.
  41:bertos/struct/fifobuf.h ****  *
  42:bertos/struct/fifobuf.h ****  * \code
  43:bertos/struct/fifobuf.h ****  *
  44:bertos/struct/fifobuf.h ****  *  +-----------------------------------+
  45:bertos/struct/fifobuf.h ****  *  |  empty  |   valid data   |  empty |
  46:bertos/struct/fifobuf.h ****  *  +-----------------------------------+
  47:bertos/struct/fifobuf.h ****  *  ^         ^                ^        ^
  48:bertos/struct/fifobuf.h ****  *  begin    head             tail     end
  49:bertos/struct/fifobuf.h ****  *
  50:bertos/struct/fifobuf.h ****  * \endcode
  51:bertos/struct/fifobuf.h ****  *
  52:bertos/struct/fifobuf.h ****  * The buffer is EMPTY when \c head and \c tail point to the same location:
  53:bertos/struct/fifobuf.h ****  *		\code head == tail \endcode
  54:bertos/struct/fifobuf.h ****  *
  55:bertos/struct/fifobuf.h ****  * The buffer is FULL when \c tail points to the location immediately
  56:bertos/struct/fifobuf.h ****  * after \c head:
  57:bertos/struct/fifobuf.h ****  *		\code tail == head - 1 \endcode
  58:bertos/struct/fifobuf.h ****  *
  59:bertos/struct/fifobuf.h ****  * The buffer is also FULL when \c tail points to the last buffer
  60:bertos/struct/fifobuf.h ****  * location and head points to the first one:
  61:bertos/struct/fifobuf.h ****  *		\code head == begin && tail == end \endcode
  62:bertos/struct/fifobuf.h ****  *
  63:bertos/struct/fifobuf.h ****  * \version $Id: fifobuf.h 2506 2009-04-15 08:29:07Z duplo $
  64:bertos/struct/fifobuf.h ****  * \author Bernie Innocenti <bernie@codewiz.org>
  65:bertos/struct/fifobuf.h ****  */
  66:bertos/struct/fifobuf.h **** 
  67:bertos/struct/fifobuf.h **** #ifndef STRUCT_FIFO_H
  68:bertos/struct/fifobuf.h **** #define STRUCT_FIFO_H
  69:bertos/struct/fifobuf.h **** 
  70:bertos/struct/fifobuf.h **** #include <cpu/types.h>
  71:bertos/struct/fifobuf.h **** #include <cpu/irq.h>
  72:bertos/struct/fifobuf.h **** #include <cfg/debug.h>
  73:bertos/struct/fifobuf.h **** 
  74:bertos/struct/fifobuf.h **** typedef struct FIFOBuffer
  75:bertos/struct/fifobuf.h **** {
  76:bertos/struct/fifobuf.h **** 	unsigned char * volatile head;
  77:bertos/struct/fifobuf.h **** 	unsigned char * volatile tail;
  78:bertos/struct/fifobuf.h **** 	unsigned char *begin;
  79:bertos/struct/fifobuf.h **** 	unsigned char *end;
  80:bertos/struct/fifobuf.h **** } FIFOBuffer;
  81:bertos/struct/fifobuf.h **** 
  82:bertos/struct/fifobuf.h **** 
  83:bertos/struct/fifobuf.h **** #define ASSERT_VALID_FIFO(fifo) \
  84:bertos/struct/fifobuf.h **** 	ATOMIC( \
  85:bertos/struct/fifobuf.h **** 		ASSERT((fifo)->head >= (fifo)->begin); \
  86:bertos/struct/fifobuf.h **** 		ASSERT((fifo)->head <= (fifo)->end); \
  87:bertos/struct/fifobuf.h **** 		ASSERT((fifo)->tail >= (fifo)->begin); \
  88:bertos/struct/fifobuf.h **** 		ASSERT((fifo)->tail <= (fifo)->end); \
  89:bertos/struct/fifobuf.h **** 	)
  90:bertos/struct/fifobuf.h **** 
  91:bertos/struct/fifobuf.h **** 
  92:bertos/struct/fifobuf.h **** /**
  93:bertos/struct/fifobuf.h ****  * Check whether the fifo is empty
  94:bertos/struct/fifobuf.h ****  *
  95:bertos/struct/fifobuf.h ****  * \note Calling fifo_isempty() is safe while a concurrent
  96:bertos/struct/fifobuf.h ****  *       execution context is calling fifo_push() or fifo_pop()
  97:bertos/struct/fifobuf.h ****  *       only if the CPU can atomically update a pointer
  98:bertos/struct/fifobuf.h ****  *       (which the AVR and other 8-bit processors can't do).
  99:bertos/struct/fifobuf.h ****  *
 100:bertos/struct/fifobuf.h ****  * \sa fifo_isempty_locked
 101:bertos/struct/fifobuf.h ****  */
 102:bertos/struct/fifobuf.h **** INLINE bool fifo_isempty(const FIFOBuffer *fb)
 103:bertos/struct/fifobuf.h **** {
 104:bertos/struct/fifobuf.h **** 	//ASSERT_VALID_FIFO(fb);
 105:bertos/struct/fifobuf.h **** 	return fb->head == fb->tail;
 106:bertos/struct/fifobuf.h **** }
 107:bertos/struct/fifobuf.h **** 
 108:bertos/struct/fifobuf.h **** 
 109:bertos/struct/fifobuf.h **** /**
 110:bertos/struct/fifobuf.h ****  * Check whether the fifo is full
 111:bertos/struct/fifobuf.h ****  *
 112:bertos/struct/fifobuf.h ****  * \note Calling fifo_isfull() is safe while a concurrent
 113:bertos/struct/fifobuf.h ****  *       execution context is calling fifo_pop() and the
 114:bertos/struct/fifobuf.h ****  *       CPU can update a pointer atomically.
 115:bertos/struct/fifobuf.h ****  *       It is NOT safe when the other context calls
 116:bertos/struct/fifobuf.h ****  *       fifo_push().
 117:bertos/struct/fifobuf.h ****  *       This limitation is not usually problematic in a
 118:bertos/struct/fifobuf.h ****  *       consumer/producer scenario because the
 119:bertos/struct/fifobuf.h ****  *       fifo_isfull() and fifo_push() are usually called
 120:bertos/struct/fifobuf.h ****  *       in the producer context.
 121:bertos/struct/fifobuf.h ****  */
 122:bertos/struct/fifobuf.h **** INLINE bool fifo_isfull(const FIFOBuffer *fb)
 123:bertos/struct/fifobuf.h **** {
 124:bertos/struct/fifobuf.h **** 	//ASSERT_VALID_FIFO(fb);
 125:bertos/struct/fifobuf.h **** 	return
 126:bertos/struct/fifobuf.h **** 		((fb->head == fb->begin) && (fb->tail == fb->end))
 127:bertos/struct/fifobuf.h **** 		|| (fb->tail == fb->head - 1);
 128:bertos/struct/fifobuf.h **** }
 129:bertos/struct/fifobuf.h **** 
 130:bertos/struct/fifobuf.h **** 
 131:bertos/struct/fifobuf.h **** /**
 132:bertos/struct/fifobuf.h ****  * Push a character on the fifo buffer.
 133:bertos/struct/fifobuf.h ****  *
 134:bertos/struct/fifobuf.h ****  * \note Calling \c fifo_push() on a full buffer is undefined.
 135:bertos/struct/fifobuf.h ****  *       The caller must make sure the buffer has at least
 136:bertos/struct/fifobuf.h ****  *       one free slot before calling this function.
 137:bertos/struct/fifobuf.h ****  *
 138:bertos/struct/fifobuf.h ****  * \note It is safe to call fifo_pop() and fifo_push() from
 139:bertos/struct/fifobuf.h ****  *       concurrent contexts, unless the CPU can't update
 140:bertos/struct/fifobuf.h ****  *       a pointer atomically (which the AVR and other 8-bit
 141:bertos/struct/fifobuf.h ****  *       processors can't do).
 142:bertos/struct/fifobuf.h ****  *
 143:bertos/struct/fifobuf.h ****  * \sa fifo_push_locked
 144:bertos/struct/fifobuf.h ****  */
 145:bertos/struct/fifobuf.h **** INLINE void fifo_push(FIFOBuffer *fb, unsigned char c)
 146:bertos/struct/fifobuf.h **** {
 147:bertos/struct/fifobuf.h **** #ifdef __MWERKS__
 148:bertos/struct/fifobuf.h **** #pragma interrupt called
 149:bertos/struct/fifobuf.h **** #endif
 150:bertos/struct/fifobuf.h **** 	//ASSERT_VALID_FIFO(fb);
 151:bertos/struct/fifobuf.h **** 
 152:bertos/struct/fifobuf.h **** 	/* Write at tail position */
 153:bertos/struct/fifobuf.h **** 	*(fb->tail) = c;
 154:bertos/struct/fifobuf.h **** 
 155:bertos/struct/fifobuf.h **** 	if (UNLIKELY(fb->tail == fb->end))
 156:bertos/struct/fifobuf.h **** 		/* wrap tail around */
 157:bertos/struct/fifobuf.h **** 		fb->tail = fb->begin;
 158:bertos/struct/fifobuf.h **** 	else
 159:bertos/struct/fifobuf.h **** 		/* Move tail forward */
 160:bertos/struct/fifobuf.h **** 		fb->tail++;
 161:bertos/struct/fifobuf.h **** }
 162:bertos/struct/fifobuf.h **** 
 163:bertos/struct/fifobuf.h **** 
 164:bertos/struct/fifobuf.h **** /**
 165:bertos/struct/fifobuf.h ****  * Pop a character from the fifo buffer.
 166:bertos/struct/fifobuf.h ****  *
 167:bertos/struct/fifobuf.h ****  * \note Calling \c fifo_pop() on an empty buffer is undefined.
 168:bertos/struct/fifobuf.h ****  *       The caller must make sure the buffer contains at least
 169:bertos/struct/fifobuf.h ****  *       one character before calling this function.
 170:bertos/struct/fifobuf.h ****  *
 171:bertos/struct/fifobuf.h ****  * \note It is safe to call fifo_pop() and fifo_push() from
 172:bertos/struct/fifobuf.h ****  *       concurrent contexts.
 173:bertos/struct/fifobuf.h ****  */
 174:bertos/struct/fifobuf.h **** INLINE unsigned char fifo_pop(FIFOBuffer *fb)
 175:bertos/struct/fifobuf.h **** {
 176:bertos/struct/fifobuf.h **** #ifdef __MWERKS__
 177:bertos/struct/fifobuf.h **** #pragma interrupt called
 178:bertos/struct/fifobuf.h **** #endif
 179:bertos/struct/fifobuf.h **** 	//ASSERT_VALID_FIFO(fb);
 180:bertos/struct/fifobuf.h **** 
 181:bertos/struct/fifobuf.h **** 	if (UNLIKELY(fb->head == fb->end))
 182:bertos/struct/fifobuf.h **** 	{
 183:bertos/struct/fifobuf.h **** 		/* wrap head around */
 184:bertos/struct/fifobuf.h **** 		fb->head = fb->begin;
 185:bertos/struct/fifobuf.h **** 		return *(fb->end);
 186:bertos/struct/fifobuf.h **** 	}
 187:bertos/struct/fifobuf.h **** 	else
 188:bertos/struct/fifobuf.h **** 		/* move head forward */
 189:bertos/struct/fifobuf.h **** 		return *(fb->head++);
 190:bertos/struct/fifobuf.h **** }
 191:bertos/struct/fifobuf.h **** 
 192:bertos/struct/fifobuf.h **** 
 193:bertos/struct/fifobuf.h **** /**
 194:bertos/struct/fifobuf.h ****  * Make the fifo empty, discarding all its current contents.
 195:bertos/struct/fifobuf.h ****  */
 196:bertos/struct/fifobuf.h **** INLINE void fifo_flush(FIFOBuffer *fb)
 197:bertos/struct/fifobuf.h **** {
 198:bertos/struct/fifobuf.h **** 	//ASSERT_VALID_FIFO(fb);
 199:bertos/struct/fifobuf.h **** 	fb->head = fb->tail;
 200:bertos/struct/fifobuf.h **** }
 201:bertos/struct/fifobuf.h **** 
 202:bertos/struct/fifobuf.h **** 
 203:bertos/struct/fifobuf.h **** #if CPU_REG_BITS >= CPU_BITS_PER_PTR
 204:bertos/struct/fifobuf.h **** 
 205:bertos/struct/fifobuf.h **** 	/*
 206:bertos/struct/fifobuf.h **** 	 * 16/32bit CPUs that can update a pointer with a single write
 207:bertos/struct/fifobuf.h **** 	 * operation, no need to disable interrupts.
 208:bertos/struct/fifobuf.h **** 	 */
 209:bertos/struct/fifobuf.h **** 	#define fifo_isempty_locked(fb) fifo_isempty((fb))
 210:bertos/struct/fifobuf.h **** 	#define fifo_push_locked(fb, c) fifo_push((fb), (c))
 211:bertos/struct/fifobuf.h **** 	#define fifo_pop_locked(fb)     fifo_pop((fb))
 212:bertos/struct/fifobuf.h **** 	#define fifo_flush_locked(fb)   fifo_flush((fb))
 213:bertos/struct/fifobuf.h **** 
 214:bertos/struct/fifobuf.h **** #else /* CPU_REG_BITS < CPU_BITS_PER_PTR */
 215:bertos/struct/fifobuf.h **** 
 216:bertos/struct/fifobuf.h **** 	/**
 217:bertos/struct/fifobuf.h **** 	 * Similar to fifo_isempty(), but with stronger guarantees for
 218:bertos/struct/fifobuf.h **** 	 * concurrent access between user and interrupt code.
 219:bertos/struct/fifobuf.h **** 	 *
 220:bertos/struct/fifobuf.h **** 	 * \note This is actually only needed for 8-bit processors.
 221:bertos/struct/fifobuf.h **** 	 *
 222:bertos/struct/fifobuf.h **** 	 * \sa fifo_isempty()
 223:bertos/struct/fifobuf.h **** 	 */
 224:bertos/struct/fifobuf.h **** 	INLINE bool fifo_isempty_locked(const FIFOBuffer *fb)
 225:bertos/struct/fifobuf.h **** 	{
 226:bertos/struct/fifobuf.h **** 		bool result;
 227:bertos/struct/fifobuf.h **** 		ATOMIC(result = fifo_isempty(fb));
 166               		.loc 4 227 0 discriminator 1
 167               	/* #APP */
 168               	 ;  227 "bertos/struct/fifobuf.h" 1
 169 0082 EFB7      		in r30,__SREG__
 170 0084 F894      		cli
 171               	 ;  0 "" 2
 172               	.LVL13:
 173               	/* #NOAPP */
 174               	.LBB146:
 175               	.LBB147:
 105:bertos/struct/fifobuf.h **** 	return fb->head == fb->tail;
 176               		.loc 4 105 0 discriminator 1
 177 0086 8EA9      		ldd r24,Y+54	 ;  79	*movhi/2	[length = 2]
 178 0088 9FA9      		ldd r25,Y+55
 179 008a 28AD      		ldd r18,Y+56	 ;  80	*movhi/2	[length = 2]
 180 008c 39AD      		ldd r19,Y+57
 181               	.LBE147:
 182               	.LBE146:
 183               		.loc 4 227 0 discriminator 1
 184               	/* #APP */
 185               	 ;  227 "bertos/struct/fifobuf.h" 1
 186 008e EFBF      		out __SREG__,r30
 187               	 ;  0 "" 2
 188               	/* #NOAPP */
 189               	.LBE145:
 190               	.LBE144:
 191               	.LBE143:
 479:bertos/net/afsk.c **** 		while (fifo_isempty_locked(&af->rx_fifo))
 192               		.loc 1 479 0 discriminator 1
 193 0090 8217      		cp r24,r18	 ;  84	*cmphi/3	[length = 2]
 194 0092 9307      		cpc r25,r19
 195 0094 01F0      		breq .L6	 ;  85	branch	[length = 1]
 196               	.LVL14:
 197               	.LBB148:
 198               	.LBB149:
 199               	.LBB150:
 228:bertos/struct/fifobuf.h **** 		return result;
 229:bertos/struct/fifobuf.h **** 	}
 230:bertos/struct/fifobuf.h **** 
 231:bertos/struct/fifobuf.h **** 
 232:bertos/struct/fifobuf.h **** 	/**
 233:bertos/struct/fifobuf.h **** 	 * Similar to fifo_push(), but with stronger guarantees for
 234:bertos/struct/fifobuf.h **** 	 * concurrent access between user and interrupt code.
 235:bertos/struct/fifobuf.h **** 	 *
 236:bertos/struct/fifobuf.h **** 	 * \note This is actually only needed for 8-bit processors.
 237:bertos/struct/fifobuf.h **** 	 *
 238:bertos/struct/fifobuf.h **** 	 * \sa fifo_push()
 239:bertos/struct/fifobuf.h **** 	 */
 240:bertos/struct/fifobuf.h **** 	INLINE void fifo_push_locked(FIFOBuffer *fb, unsigned char c)
 241:bertos/struct/fifobuf.h **** 	{
 242:bertos/struct/fifobuf.h **** 		ATOMIC(fifo_push(fb, c));
 243:bertos/struct/fifobuf.h **** 	}
 244:bertos/struct/fifobuf.h **** 
 245:bertos/struct/fifobuf.h **** 	/* Probably not really needed, but hard to prove. */
 246:bertos/struct/fifobuf.h **** 	INLINE unsigned char fifo_pop_locked(FIFOBuffer *fb)
 247:bertos/struct/fifobuf.h **** 	{
 248:bertos/struct/fifobuf.h **** 		unsigned char c;
 249:bertos/struct/fifobuf.h **** 		ATOMIC(c = fifo_pop(fb));
 200               		.loc 4 249 0
 201               	/* #APP */
 202               	 ;  249 "bertos/struct/fifobuf.h" 1
 203 0096 2FB7      		in r18,__SREG__
 204 0098 F894      		cli
 205               	 ;  0 "" 2
 206               	.LVL15:
 207               	/* #NOAPP */
 208               	.LBB151:
 209               	.LBB152:
 181:bertos/struct/fifobuf.h **** 	if (UNLIKELY(fb->head == fb->end))
 210               		.loc 4 181 0
 211 009a EEA9      		ldd r30,Y+54	 ;  93	*movhi/2	[length = 2]
 212 009c FFA9      		ldd r31,Y+55
 213 009e 8CAD      		ldd r24,Y+60	 ;  94	*movhi/2	[length = 2]
 214 00a0 9DAD      		ldd r25,Y+61
 215 00a2 E817      		cp r30,r24	 ;  95	*cmphi/3	[length = 2]
 216 00a4 F907      		cpc r31,r25
 217 00a6 01F4      		brne .L7	 ;  96	branch	[length = 1]
 184:bertos/struct/fifobuf.h **** 		fb->head = fb->begin;
 218               		.loc 4 184 0
 219 00a8 8AAD      		ldd r24,Y+58	 ;  98	*movhi/2	[length = 2]
 220 00aa 9BAD      		ldd r25,Y+59
 221 00ac 9FAB      		std Y+55,r25	 ;  99	*movhi/3	[length = 2]
 222 00ae 8EAB      		std Y+54,r24
 185:bertos/struct/fifobuf.h **** 		return *(fb->end);
 223               		.loc 4 185 0
 224 00b0 8081      		ld r24,Z	 ;  100	*movqi/4	[length = 1]
 225 00b2 00C0      		rjmp .L8	 ;  202	jump	[length = 1]
 226               	.L7:
 189:bertos/struct/fifobuf.h **** 		return *(fb->head++);
 227               		.loc 4 189 0
 228 00b4 EEA9      		ldd r30,Y+54	 ;  105	*movhi/2	[length = 2]
 229 00b6 FFA9      		ldd r31,Y+55
 230 00b8 8191      		ld r24,Z+	 ;  106	*movqi/4	[length = 1]
 231 00ba FFAB      		std Y+55,r31	 ;  108	*movhi/3	[length = 2]
 232 00bc EEAB      		std Y+54,r30
 233               	.L8:
 234               	.LBE152:
 235               	.LBE151:
 236               		.loc 4 249 0
 237               	/* #APP */
 238               	 ;  249 "bertos/struct/fifobuf.h" 1
 239 00be 2FBF      		out __SREG__,r18
 240               	 ;  0 "" 2
 241               	/* #NOAPP */
 242               	.LBE150:
 243               	.LBE149:
 244               	.LBE148:
 484:bertos/net/afsk.c **** 				return buf - (uint8_t *)_buf;
 485:bertos/net/afsk.c **** 			#endif
 486:bertos/net/afsk.c **** 		}
 487:bertos/net/afsk.c **** 
 488:bertos/net/afsk.c **** 		*buf++ = fifo_pop_locked(&af->rx_fifo);
 245               		.loc 1 488 0
 246 00c0 F801      		movw r30,r16	 ;  172	*movhi/1	[length = 1]
 247 00c2 8193      		st Z+,r24	 ;  113	*movqi/3	[length = 1]
 248 00c4 8F01      		movw r16,r30	 ;  173	*movhi/1	[length = 1]
 249               	.LVL16:
 250 00c6 0894      		sec	 ;  116	*addhi3/6	[length = 3]
 251 00c8 E108      		sbc r14,__zero_reg__
 252 00ca F108      		sbc r15,__zero_reg__
 253               	.LVL17:
 254               	.L3:
 255               	.LBE136:
 470:bertos/net/afsk.c **** 	while (size-- && !fifo_isempty_locked(&af->rx_fifo))
 256               		.loc 1 470 0 discriminator 1
 257 00cc E114      		cp r14,__zero_reg__	 ;  122	*cmphi/2	[length = 2]
 258 00ce F104      		cpc r15,__zero_reg__
 259 00d0 01F0      		breq .L9	 ;  123	branch	[length = 1]
 260               	.LVL18:
 261               	.LBB153:
 262               	.LBB154:
 263               	.LBB155:
 227:bertos/struct/fifobuf.h **** 		ATOMIC(result = fifo_isempty(fb));
 264               		.loc 4 227 0 discriminator 2
 265               	/* #APP */
 266               	 ;  227 "bertos/struct/fifobuf.h" 1
 267 00d2 4FB7      		in r20,__SREG__
 268 00d4 F894      		cli
 269               	 ;  0 "" 2
 270               	.LVL19:
 271               	/* #NOAPP */
 272               	.LBB156:
 273               	.LBB157:
 105:bertos/struct/fifobuf.h **** 	return fb->head == fb->tail;
 274               		.loc 4 105 0 discriminator 2
 275 00d6 8EA9      		ldd r24,Y+54	 ;  131	*movhi/2	[length = 2]
 276 00d8 9FA9      		ldd r25,Y+55
 277 00da 28AD      		ldd r18,Y+56	 ;  132	*movhi/2	[length = 2]
 278 00dc 39AD      		ldd r19,Y+57
 279               	.LBE157:
 280               	.LBE156:
 227:bertos/struct/fifobuf.h **** 		ATOMIC(result = fifo_isempty(fb));
 281               		.loc 4 227 0 discriminator 2
 282               	/* #APP */
 283               	 ;  227 "bertos/struct/fifobuf.h" 1
 284 00de 4FBF      		out __SREG__,r20
 285               	 ;  0 "" 2
 286               	/* #NOAPP */
 287               	.LBE155:
 288               	.LBE154:
 289               	.LBE153:
 470:bertos/net/afsk.c **** 	while (size-- && !fifo_isempty_locked(&af->rx_fifo))
 290               		.loc 1 470 0 discriminator 2
 291 00e0 8217      		cp r24,r18	 ;  136	*cmphi/3	[length = 2]
 292 00e2 9307      		cpc r25,r19
 293 00e4 01F0      		breq .+2	 ;  137	branch	[length = 2]
 294 00e6 00C0      		rjmp .L10
 295               	.LVL20:
 296               	.L9:
 489:bertos/net/afsk.c **** 	}
 490:bertos/net/afsk.c **** 
 491:bertos/net/afsk.c **** 	return buf - (uint8_t *)_buf;
 297               		.loc 1 491 0
 298 00e8 0C19      		sub r16,r12	 ;  140	subhi3/1	[length = 2]
 299 00ea 1D09      		sbc r17,r13
 492:bertos/net/afsk.c **** }
 300               		.loc 1 492 0
 301 00ec C801      		movw r24,r16	 ;  197	*movhi/1	[length = 1]
 302               	/* epilogue start */
 303 00ee DF91      		pop r29	 ;  184	popqi	[length = 1]
 304 00f0 CF91      		pop r28	 ;  185	popqi	[length = 1]
 305               	.LVL21:
 306 00f2 1F91      		pop r17	 ;  186	popqi	[length = 1]
 307 00f4 0F91      		pop r16	 ;  187	popqi	[length = 1]
 308 00f6 FF90      		pop r15	 ;  188	popqi	[length = 1]
 309 00f8 EF90      		pop r14	 ;  189	popqi	[length = 1]
 310 00fa DF90      		pop r13	 ;  190	popqi	[length = 1]
 311 00fc CF90      		pop r12	 ;  191	popqi	[length = 1]
 312               	.LVL22:
 313 00fe 0895      		ret	 ;  192	return_from_epilogue	[length = 1]
 314               		.cfi_endproc
 315               	.LFE52:
 317               		.section	.text.afsk_write,"ax",@progbits
 319               	afsk_write:
 320               	.LFB53:
 493:bertos/net/afsk.c **** 
 494:bertos/net/afsk.c **** static size_t afsk_write(KFile *fd, const void *_buf, size_t size)
 495:bertos/net/afsk.c **** {
 321               		.loc 1 495 0
 322               		.cfi_startproc
 323               	.LVL23:
 324 0000 2F92      		push r2	 ;  260	*pushqi/1	[length = 1]
 325               	.LCFI8:
 326               		.cfi_def_cfa_offset 3
 327               		.cfi_offset 2, -2
 328 0002 3F92      		push r3	 ;  261	*pushqi/1	[length = 1]
 329               	.LCFI9:
 330               		.cfi_def_cfa_offset 4
 331               		.cfi_offset 3, -3
 332 0004 4F92      		push r4	 ;  262	*pushqi/1	[length = 1]
 333               	.LCFI10:
 334               		.cfi_def_cfa_offset 5
 335               		.cfi_offset 4, -4
 336 0006 5F92      		push r5	 ;  263	*pushqi/1	[length = 1]
 337               	.LCFI11:
 338               		.cfi_def_cfa_offset 6
 339               		.cfi_offset 5, -5
 340 0008 6F92      		push r6	 ;  264	*pushqi/1	[length = 1]
 341               	.LCFI12:
 342               		.cfi_def_cfa_offset 7
 343               		.cfi_offset 6, -6
 344 000a 7F92      		push r7	 ;  265	*pushqi/1	[length = 1]
 345               	.LCFI13:
 346               		.cfi_def_cfa_offset 8
 347               		.cfi_offset 7, -7
 348 000c 8F92      		push r8	 ;  266	*pushqi/1	[length = 1]
 349               	.LCFI14:
 350               		.cfi_def_cfa_offset 9
 351               		.cfi_offset 8, -8
 352 000e 9F92      		push r9	 ;  267	*pushqi/1	[length = 1]
 353               	.LCFI15:
 354               		.cfi_def_cfa_offset 10
 355               		.cfi_offset 9, -9
 356 0010 AF92      		push r10	 ;  268	*pushqi/1	[length = 1]
 357               	.LCFI16:
 358               		.cfi_def_cfa_offset 11
 359               		.cfi_offset 10, -10
 360 0012 BF92      		push r11	 ;  269	*pushqi/1	[length = 1]
 361               	.LCFI17:
 362               		.cfi_def_cfa_offset 12
 363               		.cfi_offset 11, -11
 364 0014 CF92      		push r12	 ;  270	*pushqi/1	[length = 1]
 365               	.LCFI18:
 366               		.cfi_def_cfa_offset 13
 367               		.cfi_offset 12, -12
 368 0016 DF92      		push r13	 ;  271	*pushqi/1	[length = 1]
 369               	.LCFI19:
 370               		.cfi_def_cfa_offset 14
 371               		.cfi_offset 13, -13
 372 0018 EF92      		push r14	 ;  272	*pushqi/1	[length = 1]
 373               	.LCFI20:
 374               		.cfi_def_cfa_offset 15
 375               		.cfi_offset 14, -14
 376 001a FF92      		push r15	 ;  273	*pushqi/1	[length = 1]
 377               	.LCFI21:
 378               		.cfi_def_cfa_offset 16
 379               		.cfi_offset 15, -15
 380 001c 0F93      		push r16	 ;  274	*pushqi/1	[length = 1]
 381               	.LCFI22:
 382               		.cfi_def_cfa_offset 17
 383               		.cfi_offset 16, -16
 384 001e 1F93      		push r17	 ;  275	*pushqi/1	[length = 1]
 385               	.LCFI23:
 386               		.cfi_def_cfa_offset 18
 387               		.cfi_offset 17, -17
 388 0020 CF93      		push r28	 ;  276	*pushqi/1	[length = 1]
 389               	.LCFI24:
 390               		.cfi_def_cfa_offset 19
 391               		.cfi_offset 28, -18
 392 0022 DF93      		push r29	 ;  277	*pushqi/1	[length = 1]
 393               	.LCFI25:
 394               		.cfi_def_cfa_offset 20
 395               		.cfi_offset 29, -19
 396               	/* prologue: function */
 397               	/* frame size = 0 */
 398               	/* stack size = 18 */
 399               	.L__stack_usage = 18
 400 0024 EC01      		movw r28,r24	 ;  2	*movhi/1	[length = 1]
 401 0026 8B01      		movw r16,r22	 ;  310	*movhi/1	[length = 1]
 402 0028 D42E      		mov r13,r20	 ;  209	*movqi/1	[length = 1]
 403 002a C52E      		mov r12,r21	 ;  210	*movqi/1	[length = 1]
 404               	.LVL24:
 405               	.LBB158:
 406               	.LBB159:
 407               		.loc 2 201 0
 408 002c 8889      		ldd r24,Y+16	 ;  12	*movsi/3	[length = 4]
 409 002e 9989      		ldd r25,Y+17
 410 0030 AA89      		ldd r26,Y+18
 411 0032 BB89      		ldd r27,Y+19
 412               	.LVL25:
 413 0034 8B34      		cpi r24,lo8(1095127883)	 ;  13	*cmpsi/4	[length = 7]
 414 0036 23E5      		ldi r18,hi8(1095127883)
 415 0038 9207      		cpc r25,r18
 416 003a 26E4      		ldi r18,hlo8(1095127883)
 417 003c A207      		cpc r26,r18
 418 003e 21E4      		ldi r18,hhi8(1095127883)
 419 0040 B207      		cpc r27,r18
 420 0042 01F0      		breq .L13	 ;  14	branch	[length = 1]
 421               	.LVL26:
 422 0044 80E0      		ldi r24,lo8(__c.1673)	 ;  19	*movhi/4	[length = 2]
 423 0046 90E0      		ldi r25,hi8(__c.1673)
 424 0048 60E0      		ldi r22,lo8(__c.1675)	 ;  20	*movhi/4	[length = 2]
 425 004a 70E0      		ldi r23,hi8(__c.1675)
 426 004c 49EC      		ldi r20,lo8(201)	 ;  21	*movhi/4	[length = 2]
 427 004e 50E0      		ldi r21,hi8(201)
 428               	.LVL27:
 429 0050 0E94 0000 		call __bassert_P	 ;  22	call_value_insn/3	[length = 2]
 430               	.LVL28:
 431               	.L13:
 432               	.LBE159:
 433               	.LBE158:
 434               	.LBB160:
 435               	.LBB161:
 436               	.LBB162:
 437               	.LBB163:
 438               	.LBB164:
 127:bertos/struct/fifobuf.h **** 		|| (fb->tail == fb->head - 1);
 439               		.loc 4 127 0 discriminator 1
 440 0054 ED2C      		mov r14,r13	 ;  212	*movqi/1	[length = 1]
 441 0056 FC2C      		mov r15,r12	 ;  213	*movqi/1	[length = 1]
 442 0058 5801      		movw r10,r16	 ;  305	*movhi/1	[length = 1]
 126:bertos/struct/fifobuf.h **** 		((fb->head == fb->begin) && (fb->tail == fb->end))
 443               		.loc 4 126 0 discriminator 1
 444 005a DE01      		movw r26,r28	 ;  250	*movhi/1	[length = 1]
 445 005c A258      		subi r26,lo8(-(126))	 ;  143	*addhi3/4	[length = 2]
 446 005e BF4F      		sbci r27,hi8(-(126))
 447               	.LBE164:
 448               	.LBE163:
 449               	.LBE162:
 450               	.LBE161:
 451               	.LBE160:
 452               	.LBB173:
 453               	.LBB174:
 321:bertos/net/afsk.c **** 	if (!af->sending)
 454               		.loc 1 321 0 discriminator 1
 455 0060 8E01      		movw r16,r28	 ;  251	*movhi/1	[length = 1]
 456               	.LVL29:
 457 0062 0F52      		subi r16,lo8(-(209))	 ;  103	*addhi3/4	[length = 2]
 458 0064 1F4F      		sbci r17,hi8(-(209))
 323:bertos/net/afsk.c **** 		af->phase_inc = MARK_INC;
 459               		.loc 1 323 0 discriminator 1
 460 0066 80E4      		ldi r24,lo8(64)	 ;  306	*reload_inhi	[length = 3]
 461 0068 882E      		mov r8,r24
 462 006a 912C      		mov r9,__zero_reg__
 326:bertos/net/afsk.c **** 		af->sending = true;
 463               		.loc 1 326 0 discriminator 1
 464 006c 61E0      		ldi r22,lo8(1)	 ;  113	*movqi/2	[length = 1]
 327:bertos/net/afsk.c **** 		af->preamble_len = DIV_ROUND(CONFIG_AFSK_PREAMBLE_LEN * BITRATE, 8000);
 465               		.loc 1 327 0 discriminator 1
 466 006e 98ED      		ldi r25,lo8(216)	 ;  307	*reload_inhi	[length = 3]
 467 0070 692E      		mov r6,r25
 468 0072 712C      		mov r7,__zero_reg__
 469 0074 6C0E      		add r6,r28	 ;  115	*addhi3/1	[length = 2]
 470 0076 7D1E      		adc r7,r29
 471 0078 2DE2      		ldi r18,lo8(45)	 ;  308	*reload_inhi	[length = 3]
 472 007a 422E      		mov r4,r18
 473 007c 512C      		mov r5,__zero_reg__
 474               	.LBB175:
 330:bertos/net/afsk.c **** 	ATOMIC(af->trailer_len  = DIV_ROUND(CONFIG_AFSK_TRAILER_LEN  * BITRATE, 8000));
 475               		.loc 1 330 0 discriminator 1
 476 007e 3AED      		ldi r19,lo8(218)	 ;  309	*reload_inhi	[length = 3]
 477 0080 232E      		mov r2,r19
 478 0082 312C      		mov r3,__zero_reg__
 479 0084 2C0E      		add r2,r28	 ;  130	*addhi3/1	[length = 2]
 480 0086 3D1E      		adc r3,r29
 481 0088 00C0      		rjmp .L14	 ;  311	jump	[length = 1]
 482               	.LVL30:
 483               	.L18:
 484               	.LBE175:
 485               	.LBE174:
 486               	.LBE173:
 487               	.LBB179:
 488               	.LBB171:
 489               	.LBB169:
 250:bertos/struct/fifobuf.h **** 		return c;
 251:bertos/struct/fifobuf.h **** 	}
 252:bertos/struct/fifobuf.h **** 
 253:bertos/struct/fifobuf.h **** 	/**
 254:bertos/struct/fifobuf.h **** 	 * Similar to fifo_flush(), but with stronger guarantees for
 255:bertos/struct/fifobuf.h **** 	 * concurrent access between user and interrupt code.
 256:bertos/struct/fifobuf.h **** 	 *
 257:bertos/struct/fifobuf.h **** 	 * \note This is actually only needed for 8-bit processors.
 258:bertos/struct/fifobuf.h **** 	 *
 259:bertos/struct/fifobuf.h **** 	 * \sa fifo_flush()
 260:bertos/struct/fifobuf.h **** 	 */
 261:bertos/struct/fifobuf.h **** 	INLINE void fifo_flush_locked(FIFOBuffer *fb)
 262:bertos/struct/fifobuf.h **** 	{
 263:bertos/struct/fifobuf.h **** 		ATOMIC(fifo_flush(fb));
 264:bertos/struct/fifobuf.h **** 	}
 265:bertos/struct/fifobuf.h **** 
 266:bertos/struct/fifobuf.h **** #endif /* CPU_REG_BITS < BITS_PER_PTR */
 267:bertos/struct/fifobuf.h **** 
 268:bertos/struct/fifobuf.h **** 
 269:bertos/struct/fifobuf.h **** /**
 270:bertos/struct/fifobuf.h ****  * Thread safe version of fifo_isfull()
 271:bertos/struct/fifobuf.h ****  */
 272:bertos/struct/fifobuf.h **** INLINE bool fifo_isfull_locked(const FIFOBuffer *_fb)
 273:bertos/struct/fifobuf.h **** {
 274:bertos/struct/fifobuf.h **** 	bool result;
 275:bertos/struct/fifobuf.h **** 	ATOMIC(result = fifo_isfull(_fb));
 490               		.loc 4 275 0 discriminator 1
 491               	/* #APP */
 492               	 ;  275 "bertos/struct/fifobuf.h" 1
 493 008a 7FB7      		in r23,__SREG__
 494 008c F894      		cli
 495               	 ;  0 "" 2
 496               	.LVL31:
 497               	/* #NOAPP */
 498               	.LBB167:
 499               	.LBB165:
 126:bertos/struct/fifobuf.h **** 		((fb->head == fb->begin) && (fb->tail == fb->end))
 500               		.loc 4 126 0 discriminator 1
 501 008e 8D91      		ld r24,X+	 ;  35	*movhi/2	[length = 3]
 502 0090 9C91      		ld r25,X
 503 0092 1197      		sbiw r26,1
 127:bertos/struct/fifobuf.h **** 		|| (fb->tail == fb->head - 1);
 504               		.loc 4 127 0 discriminator 1
 505 0094 8E17      		cp r24,r30	 ;  36	*cmphi/3	[length = 2]
 506 0096 9F07      		cpc r25,r31
 507 0098 01F4      		brne .L15	 ;  37	branch	[length = 1]
 126:bertos/struct/fifobuf.h **** 		((fb->head == fb->begin) && (fb->tail == fb->end))
 508               		.loc 4 126 0
 509 009a 1296      		adiw r26,2	 ;  40	*movhi/2	[length = 4]
 510 009c 8D91      		ld r24,X+
 511 009e 9C91      		ld r25,X
 512 00a0 1397      		sbiw r26,2+1
 513 00a2 1696      		adiw r26,6	 ;  42	*movhi/2	[length = 4]
 514 00a4 2D91      		ld r18,X+
 515 00a6 3C91      		ld r19,X
 516 00a8 1797      		sbiw r26,6+1
 517 00aa 8217      		cp r24,r18	 ;  43	*cmphi/3	[length = 2]
 518 00ac 9307      		cpc r25,r19
 519 00ae 01F0      		breq .L23	 ;  44	branch	[length = 1]
 520               	.L15:
 127:bertos/struct/fifobuf.h **** 		|| (fb->tail == fb->head - 1);
 521               		.loc 4 127 0
 522 00b0 1296      		adiw r26,2	 ;  48	*movhi/2	[length = 4]
 523 00b2 4D91      		ld r20,X+
 524 00b4 5C91      		ld r21,X
 525 00b6 1397      		sbiw r26,2+1
 526 00b8 8D91      		ld r24,X+	 ;  50	*movhi/2	[length = 3]
 527 00ba 9C91      		ld r25,X
 528 00bc 1197      		sbiw r26,1
 529 00be 0197      		sbiw r24,1	 ;  51	*addhi3/3	[length = 1]
 530 00c0 21E0      		ldi r18,lo8(1)	 ;  188	*movhi/4	[length = 2]
 531 00c2 30E0      		ldi r19,hi8(1)
 532 00c4 4817      		cp r20,r24	 ;  53	*cmphi/3	[length = 2]
 533 00c6 5907      		cpc r21,r25
 534 00c8 01F0      		breq .L16	 ;  54	branch	[length = 1]
 535 00ca 20E0      		ldi r18,lo8(0)	 ;  189	*movhi/4	[length = 2]
 536 00cc 30E0      		ldi r19,hi8(0)
 537 00ce 00C0      		rjmp .L16	 ;  313	jump	[length = 1]
 538               	.L23:
 539 00d0 21E0      		ldi r18,lo8(1)	 ;  190	*movhi/4	[length = 2]
 540 00d2 30E0      		ldi r19,hi8(1)
 541               	.L16:
 542               	.LBE165:
 543               	.LBE167:
 544               		.loc 4 275 0
 545               	/* #APP */
 546               	 ;  275 "bertos/struct/fifobuf.h" 1
 547 00d4 7FBF      		out __SREG__,r23
 548               	 ;  0 "" 2
 549               	/* #NOAPP */
 550               	.LBE169:
 551               	.LBE171:
 552               	.LBE179:
 496:bertos/net/afsk.c **** 	Afsk *af = AFSK_CAST(fd);
 497:bertos/net/afsk.c **** 	const uint8_t *buf = (const uint8_t *)_buf;
 498:bertos/net/afsk.c **** 
 499:bertos/net/afsk.c **** 	while (size--)
 500:bertos/net/afsk.c **** 	{
 501:bertos/net/afsk.c **** 		while (fifo_isfull_locked(&af->tx_fifo))
 553               		.loc 1 501 0
 554 00d6 2115      		cp r18,__zero_reg__	 ;  62	*cmphi/2	[length = 2]
 555 00d8 3105      		cpc r19,__zero_reg__
 556 00da 01F4      		brne .L18	 ;  63	branch	[length = 1]
 502:bertos/net/afsk.c **** 			cpu_relax();
 503:bertos/net/afsk.c **** 
 504:bertos/net/afsk.c **** 		fifo_push_locked(&af->tx_fifo, *buf++);
 557               		.loc 1 504 0
 558 00dc F501      		movw r30,r10	 ;  254	*movhi/1	[length = 1]
 559 00de 8191      		ld r24,Z+	 ;  66	*movqi/4	[length = 1]
 560 00e0 5F01      		movw r10,r30	 ;  255	*movhi/1	[length = 1]
 561               	.LVL32:
 562               	.LBB180:
 563               	.LBB181:
 242:bertos/struct/fifobuf.h **** 		ATOMIC(fifo_push(fb, c));
 564               		.loc 4 242 0
 565               	/* #APP */
 566               	 ;  242 "bertos/struct/fifobuf.h" 1
 567 00e2 4FB7      		in r20,__SREG__
 568 00e4 F894      		cli
 569               	 ;  0 "" 2
 570               	.LVL33:
 571               	/* #NOAPP */
 572               	.LBB182:
 573               	.LBB183:
 153:bertos/struct/fifobuf.h **** 	*(fb->tail) = c;
 574               		.loc 4 153 0
 575 00e6 1296      		adiw r26,2	 ;  77	*movhi/2	[length = 4]
 576 00e8 ED91      		ld r30,X+
 577 00ea FC91      		ld r31,X
 578 00ec 1397      		sbiw r26,2+1
 579               	.LVL34:
 580 00ee 8083      		st Z,r24	 ;  78	*movqi/3	[length = 1]
 155:bertos/struct/fifobuf.h **** 	if (UNLIKELY(fb->tail == fb->end))
 581               		.loc 4 155 0
 582 00f0 1296      		adiw r26,2	 ;  80	*movhi/2	[length = 4]
 583 00f2 8D91      		ld r24,X+
 584 00f4 9C91      		ld r25,X
 585 00f6 1397      		sbiw r26,2+1
 586 00f8 1696      		adiw r26,6	 ;  82	*movhi/2	[length = 4]
 587 00fa 2D91      		ld r18,X+
 588 00fc 3C91      		ld r19,X
 589 00fe 1797      		sbiw r26,6+1
 590 0100 8217      		cp r24,r18	 ;  83	*cmphi/3	[length = 2]
 591 0102 9307      		cpc r25,r19
 592 0104 01F4      		brne .L19	 ;  84	branch	[length = 1]
 157:bertos/struct/fifobuf.h **** 		fb->tail = fb->begin;
 593               		.loc 4 157 0
 594 0106 1496      		adiw r26,4	 ;  87	*movhi/2	[length = 4]
 595 0108 8D91      		ld r24,X+
 596 010a 9C91      		ld r25,X
 597 010c 1597      		sbiw r26,4+1
 598 010e 00C0      		rjmp .L25	 ;  315	jump	[length = 1]
 599               	.L19:
 160:bertos/struct/fifobuf.h **** 		fb->tail++;
 600               		.loc 4 160 0
 601 0110 1296      		adiw r26,2	 ;  95	*movhi/2	[length = 4]
 602 0112 8D91      		ld r24,X+
 603 0114 9C91      		ld r25,X
 604 0116 1397      		sbiw r26,2+1
 605 0118 0196      		adiw r24,1	 ;  96	*addhi3/2	[length = 1]
 606               	.L25:
 607 011a 1396      		adiw r26,2+1	 ;  98	*movhi/3	[length = 4]
 608 011c 9C93      		st X,r25
 609 011e 8E93      		st -X,r24
 610 0120 1297      		sbiw r26,2
 611               	.LBE183:
 612               	.LBE182:
 242:bertos/struct/fifobuf.h **** 		ATOMIC(fifo_push(fb, c));
 613               		.loc 4 242 0
 614               	/* #APP */
 615               	 ;  242 "bertos/struct/fifobuf.h" 1
 616 0122 4FBF      		out __SREG__,r20
 617               	 ;  0 "" 2
 618               	.LVL35:
 619               	/* #NOAPP */
 620               	.LBE181:
 621               	.LBE180:
 622               	.LBB184:
 623               	.LBB178:
 321:bertos/net/afsk.c **** 	if (!af->sending)
 624               		.loc 1 321 0
 625 0124 F801      		movw r30,r16	 ;  256	*movhi/1	[length = 1]
 626 0126 8081      		ld r24,Z	 ;  104	*movqi/4	[length = 1]
 627 0128 8823      		tst r24	 ;  105	*cmpqi/1	[length = 1]
 628 012a 01F4      		brne .L21	 ;  106	branch	[length = 1]
 323:bertos/net/afsk.c **** 		af->phase_inc = MARK_INC;
 629               		.loc 1 323 0
 630 012c 98A6      		std Y+40,r9	 ;  109	*movhi/3	[length = 2]
 631 012e 8FA2      		std Y+39,r8
 324:bertos/net/afsk.c **** 		af->phase_acc = 0;
 632               		.loc 1 324 0
 633 0130 1EA2      		std Y+38,__zero_reg__	 ;  110	*movhi/3	[length = 2]
 634 0132 1DA2      		std Y+37,__zero_reg__
 325:bertos/net/afsk.c **** 		af->stuff_cnt = 0;
 635               		.loc 1 325 0
 636 0134 1CA2      		std Y+36,__zero_reg__	 ;  111	*movqi/3	[length = 1]
 326:bertos/net/afsk.c **** 		af->sending = true;
 637               		.loc 1 326 0
 638 0136 6083      		st Z,r22	 ;  114	*movqi/3	[length = 1]
 327:bertos/net/afsk.c **** 		af->preamble_len = DIV_ROUND(CONFIG_AFSK_PREAMBLE_LEN * BITRATE, 8000);
 639               		.loc 1 327 0
 640 0138 F301      		movw r30,r6	 ;  257	*movhi/1	[length = 1]
 641 013a 5182      		std Z+1,r5	 ;  117	*movhi/3	[length = 2]
 642 013c 4082      		st Z,r4
 643               	.LBB176:
 328:bertos/net/afsk.c **** 		AFSK_DAC_IRQ_START(af->dac_ch);
 644               		.loc 1 328 0
 645 013e 2B9A      		sbi 37-32,3	 ;  122	*sbi	[length = 1]
 646 0140 6093 0000 		sts hw_afsk_dac_isr,r22	 ;  124	*movqi/3	[length = 2]
 647               	.L21:
 648               	.LBE176:
 649               	.LBB177:
 330:bertos/net/afsk.c **** 	ATOMIC(af->trailer_len  = DIV_ROUND(CONFIG_AFSK_TRAILER_LEN  * BITRATE, 8000));
 650               		.loc 1 330 0
 651               	/* #APP */
 652               	 ;  330 "bertos/net/afsk.c" 1
 653 0144 8FB7      		in r24,__SREG__
 654 0146 F894      		cli
 655               	 ;  0 "" 2
 656               	.LVL36:
 657               	/* #NOAPP */
 658 0148 28E0      		ldi r18,lo8(8)	 ;  259	*movhi/4	[length = 2]
 659 014a 30E0      		ldi r19,hi8(8)
 660 014c F101      		movw r30,r2	 ;  258	*movhi/1	[length = 1]
 661 014e 3183      		std Z+1,r19	 ;  132	*movhi/3	[length = 2]
 662 0150 2083      		st Z,r18
 663               	/* #APP */
 664               	 ;  330 "bertos/net/afsk.c" 1
 665 0152 8FBF      		out __SREG__,r24
 666               	 ;  0 "" 2
 667               	/* #NOAPP */
 668 0154 0894      		sec	 ;  134	*addhi3/6	[length = 3]
 669 0156 E108      		sbc r14,__zero_reg__
 670 0158 F108      		sbc r15,__zero_reg__
 671               	.LVL37:
 672               	.L14:
 673               	.LBE177:
 674               	.LBE178:
 675               	.LBE184:
 499:bertos/net/afsk.c **** 	while (size--)
 676               		.loc 1 499 0 discriminator 1
 677 015a E114      		cp r14,__zero_reg__	 ;  140	*cmphi/2	[length = 2]
 678 015c F104      		cpc r15,__zero_reg__
 679 015e 01F0      		breq .L22	 ;  141	branch	[length = 1]
 680               	.LBB185:
 681               	.LBB172:
 682               	.LBB170:
 683               	.LBB168:
 684               	.LBB166:
 126:bertos/struct/fifobuf.h **** 		((fb->head == fb->begin) && (fb->tail == fb->end))
 685               		.loc 4 126 0
 686 0160 1496      		adiw r26,4	 ;  144	*movhi/2	[length = 4]
 687 0162 ED91      		ld r30,X+
 688 0164 FC91      		ld r31,X
 689 0166 1597      		sbiw r26,4+1
 690 0168 00C0      		rjmp .L18	 ;  317	jump	[length = 1]
 691               	.L22:
 692               	.LBE166:
 693               	.LBE168:
 694               	.LBE170:
 695               	.LBE172:
 696               	.LBE185:
 505:bertos/net/afsk.c **** 		afsk_txStart(af);
 506:bertos/net/afsk.c **** 	}
 507:bertos/net/afsk.c **** 
 508:bertos/net/afsk.c **** 	return buf - (const uint8_t *)_buf;
 697               		.loc 1 508 0
 698 016a 8D2D      		mov r24,r13	 ;  217	*movqi/1	[length = 1]
 699 016c 9C2D      		mov r25,r12	 ;  218	*movqi/1	[length = 1]
 700               	/* epilogue start */
 509:bertos/net/afsk.c **** }
 701               		.loc 1 509 0
 702 016e DF91      		pop r29	 ;  280	popqi	[length = 1]
 703 0170 CF91      		pop r28	 ;  281	popqi	[length = 1]
 704               	.LVL38:
 705 0172 1F91      		pop r17	 ;  282	popqi	[length = 1]
 706 0174 0F91      		pop r16	 ;  283	popqi	[length = 1]
 707 0176 FF90      		pop r15	 ;  284	popqi	[length = 1]
 708 0178 EF90      		pop r14	 ;  285	popqi	[length = 1]
 709 017a DF90      		pop r13	 ;  286	popqi	[length = 1]
 710 017c CF90      		pop r12	 ;  287	popqi	[length = 1]
 711 017e BF90      		pop r11	 ;  288	popqi	[length = 1]
 712 0180 AF90      		pop r10	 ;  289	popqi	[length = 1]
 713               	.LVL39:
 714 0182 9F90      		pop r9	 ;  290	popqi	[length = 1]
 715 0184 8F90      		pop r8	 ;  291	popqi	[length = 1]
 716 0186 7F90      		pop r7	 ;  292	popqi	[length = 1]
 717 0188 6F90      		pop r6	 ;  293	popqi	[length = 1]
 718 018a 5F90      		pop r5	 ;  294	popqi	[length = 1]
 719 018c 4F90      		pop r4	 ;  295	popqi	[length = 1]
 720 018e 3F90      		pop r3	 ;  296	popqi	[length = 1]
 721 0190 2F90      		pop r2	 ;  297	popqi	[length = 1]
 722 0192 0895      		ret	 ;  298	return_from_epilogue	[length = 1]
 723               		.cfi_endproc
 724               	.LFE53:
 726               		.section	.text.afsk_flush,"ax",@progbits
 728               	afsk_flush:
 729               	.LFB54:
 510:bertos/net/afsk.c **** 
 511:bertos/net/afsk.c **** static int afsk_flush(KFile *fd)
 512:bertos/net/afsk.c **** {
 730               		.loc 1 512 0
 731               		.cfi_startproc
 732               	.LVL40:
 733 0000 CF93      		push r28	 ;  45	*pushqi/1	[length = 1]
 734               	.LCFI26:
 735               		.cfi_def_cfa_offset 3
 736               		.cfi_offset 28, -2
 737 0002 DF93      		push r29	 ;  46	*pushqi/1	[length = 1]
 738               	.LCFI27:
 739               		.cfi_def_cfa_offset 4
 740               		.cfi_offset 29, -3
 741               	/* prologue: function */
 742               	/* frame size = 0 */
 743               	/* stack size = 2 */
 744               	.L__stack_usage = 2
 745 0004 EC01      		movw r28,r24	 ;  2	*movhi/1	[length = 1]
 746               	.LVL41:
 747               	.LBB186:
 748               	.LBB187:
 749               		.loc 2 201 0
 750 0006 8889      		ldd r24,Y+16	 ;  7	*movsi/3	[length = 4]
 751 0008 9989      		ldd r25,Y+17
 752 000a AA89      		ldd r26,Y+18
 753 000c BB89      		ldd r27,Y+19
 754               	.LVL42:
 755 000e 8B34      		cpi r24,lo8(1095127883)	 ;  8	*cmpsi/4	[length = 7]
 756 0010 23E5      		ldi r18,hi8(1095127883)
 757 0012 9207      		cpc r25,r18
 758 0014 26E4      		ldi r18,hlo8(1095127883)
 759 0016 A207      		cpc r26,r18
 760 0018 21E4      		ldi r18,hhi8(1095127883)
 761 001a B207      		cpc r27,r18
 762 001c 01F0      		breq .L28	 ;  9	branch	[length = 1]
 763 001e 80E0      		ldi r24,lo8(__c.1673)	 ;  14	*movhi/4	[length = 2]
 764 0020 90E0      		ldi r25,hi8(__c.1673)
 765 0022 60E0      		ldi r22,lo8(__c.1675)	 ;  15	*movhi/4	[length = 2]
 766 0024 70E0      		ldi r23,hi8(__c.1675)
 767 0026 49EC      		ldi r20,lo8(201)	 ;  16	*movhi/4	[length = 2]
 768 0028 50E0      		ldi r21,hi8(201)
 769 002a 0E94 0000 		call __bassert_P	 ;  17	call_value_insn/3	[length = 2]
 770               	.L28:
 771               	.LBE187:
 772               	.LBE186:
 513:bertos/net/afsk.c **** 	Afsk *af = AFSK_CAST(fd);
 514:bertos/net/afsk.c **** 	while (af->sending)
 773               		.loc 1 514 0 discriminator 1
 774 002e CF52      		subi r28,lo8(-(209))	 ;  22	*addhi3/4	[length = 2]
 775 0030 DF4F      		sbci r29,hi8(-(209))
 776               	.LVL43:
 777               	.L29:
 778 0032 8881      		ld r24,Y	 ;  23	*movqi/4	[length = 1]
 779 0034 8823      		tst r24	 ;  25	*cmpqi/1	[length = 1]
 780 0036 01F4      		brne .L29	 ;  26	branch	[length = 1]
 515:bertos/net/afsk.c **** 		cpu_relax();
 516:bertos/net/afsk.c **** 	return 0;
 517:bertos/net/afsk.c **** }
 781               		.loc 1 517 0
 782 0038 80E0      		ldi r24,lo8(0)	 ;  32	*movhi/4	[length = 2]
 783 003a 90E0      		ldi r25,hi8(0)
 784               	/* epilogue start */
 785 003c DF91      		pop r29	 ;  49	popqi	[length = 1]
 786 003e CF91      		pop r28	 ;  50	popqi	[length = 1]
 787               	.LVL44:
 788 0040 0895      		ret	 ;  51	return_from_epilogue	[length = 1]
 789               		.cfi_endproc
 790               	.LFE54:
 792               		.section	.text.afsk_error,"ax",@progbits
 794               	afsk_error:
 795               	.LFB55:
 518:bertos/net/afsk.c **** 
 519:bertos/net/afsk.c **** static int afsk_error(KFile *fd)
 520:bertos/net/afsk.c **** {
 796               		.loc 1 520 0
 797               		.cfi_startproc
 798               	.LVL45:
 799 0000 CF93      		push r28	 ;  44	*pushqi/1	[length = 1]
 800               	.LCFI28:
 801               		.cfi_def_cfa_offset 3
 802               		.cfi_offset 28, -2
 803 0002 DF93      		push r29	 ;  45	*pushqi/1	[length = 1]
 804               	.LCFI29:
 805               		.cfi_def_cfa_offset 4
 806               		.cfi_offset 29, -3
 807               	/* prologue: function */
 808               	/* frame size = 0 */
 809               	/* stack size = 2 */
 810               	.L__stack_usage = 2
 811 0004 EC01      		movw r28,r24	 ;  2	*movhi/1	[length = 1]
 812               	.LVL46:
 813               	.LBB188:
 814               	.LBB189:
 815               		.loc 2 201 0
 816 0006 8889      		ldd r24,Y+16	 ;  7	*movsi/3	[length = 4]
 817 0008 9989      		ldd r25,Y+17
 818 000a AA89      		ldd r26,Y+18
 819 000c BB89      		ldd r27,Y+19
 820               	.LVL47:
 821 000e 8B34      		cpi r24,lo8(1095127883)	 ;  8	*cmpsi/4	[length = 7]
 822 0010 23E5      		ldi r18,hi8(1095127883)
 823 0012 9207      		cpc r25,r18
 824 0014 26E4      		ldi r18,hlo8(1095127883)
 825 0016 A207      		cpc r26,r18
 826 0018 21E4      		ldi r18,hhi8(1095127883)
 827 001a B207      		cpc r27,r18
 828 001c 01F0      		breq .L32	 ;  9	branch	[length = 1]
 829 001e 80E0      		ldi r24,lo8(__c.1673)	 ;  14	*movhi/4	[length = 2]
 830 0020 90E0      		ldi r25,hi8(__c.1673)
 831 0022 60E0      		ldi r22,lo8(__c.1675)	 ;  15	*movhi/4	[length = 2]
 832 0024 70E0      		ldi r23,hi8(__c.1675)
 833 0026 49EC      		ldi r20,lo8(201)	 ;  16	*movhi/4	[length = 2]
 834 0028 50E0      		ldi r21,hi8(201)
 835 002a 0E94 0000 		call __bassert_P	 ;  17	call_value_insn/3	[length = 2]
 836               	.L32:
 837               	.LBE189:
 838               	.LBE188:
 839               	.LBB190:
 521:bertos/net/afsk.c **** 	Afsk *af = AFSK_CAST(fd);
 522:bertos/net/afsk.c **** 	int err;
 523:bertos/net/afsk.c **** 
 524:bertos/net/afsk.c **** 	ATOMIC(err = af->status);
 840               		.loc 1 524 0
 841               	/* #APP */
 842               	 ;  524 "bertos/net/afsk.c" 1
 843 002e 2FB7      		in r18,__SREG__
 844 0030 F894      		cli
 845               	 ;  0 "" 2
 846               	.LVL48:
 847               	/* #NOAPP */
 848 0032 CE52      		subi r28,lo8(-(210))	 ;  24	*addhi3/4	[length = 2]
 849 0034 DF4F      		sbci r29,hi8(-(210))
 850               	.LVL49:
 851 0036 8881      		ld r24,Y	 ;  25	*movhi/2	[length = 2]
 852 0038 9981      		ldd r25,Y+1
 853               	.LVL50:
 854               	/* #APP */
 855               	 ;  524 "bertos/net/afsk.c" 1
 856 003a 2FBF      		out __SREG__,r18
 857               	 ;  0 "" 2
 858               	/* epilogue start */
 859               	/* #NOAPP */
 860               	.LBE190:
 525:bertos/net/afsk.c **** 	return err;
 526:bertos/net/afsk.c **** }
 861               		.loc 1 526 0
 862 003c DF91      		pop r29	 ;  48	popqi	[length = 1]
 863 003e CF91      		pop r28	 ;  49	popqi	[length = 1]
 864 0040 0895      		ret	 ;  50	return_from_epilogue	[length = 1]
 865               		.cfi_endproc
 866               	.LFE55:
 868               		.section	.text.afsk_clearerr,"ax",@progbits
 870               	afsk_clearerr:
 871               	.LFB56:
 527:bertos/net/afsk.c **** 
 528:bertos/net/afsk.c **** static void afsk_clearerr(KFile *fd)
 529:bertos/net/afsk.c **** {
 872               		.loc 1 529 0
 873               		.cfi_startproc
 874               	.LVL51:
 875 0000 CF93      		push r28	 ;  31	*pushqi/1	[length = 1]
 876               	.LCFI30:
 877               		.cfi_def_cfa_offset 3
 878               		.cfi_offset 28, -2
 879 0002 DF93      		push r29	 ;  32	*pushqi/1	[length = 1]
 880               	.LCFI31:
 881               		.cfi_def_cfa_offset 4
 882               		.cfi_offset 29, -3
 883               	/* prologue: function */
 884               	/* frame size = 0 */
 885               	/* stack size = 2 */
 886               	.L__stack_usage = 2
 887 0004 EC01      		movw r28,r24	 ;  2	*movhi/1	[length = 1]
 888               	.LVL52:
 889               	.LBB191:
 890               	.LBB192:
 891               		.loc 2 201 0
 892 0006 8889      		ldd r24,Y+16	 ;  7	*movsi/3	[length = 4]
 893 0008 9989      		ldd r25,Y+17
 894 000a AA89      		ldd r26,Y+18
 895 000c BB89      		ldd r27,Y+19
 896               	.LVL53:
 897 000e 8B34      		cpi r24,lo8(1095127883)	 ;  8	*cmpsi/4	[length = 7]
 898 0010 23E5      		ldi r18,hi8(1095127883)
 899 0012 9207      		cpc r25,r18
 900 0014 26E4      		ldi r18,hlo8(1095127883)
 901 0016 A207      		cpc r26,r18
 902 0018 21E4      		ldi r18,hhi8(1095127883)
 903 001a B207      		cpc r27,r18
 904 001c 01F0      		breq .L34	 ;  9	branch	[length = 1]
 905 001e 80E0      		ldi r24,lo8(__c.1673)	 ;  14	*movhi/4	[length = 2]
 906 0020 90E0      		ldi r25,hi8(__c.1673)
 907 0022 60E0      		ldi r22,lo8(__c.1675)	 ;  15	*movhi/4	[length = 2]
 908 0024 70E0      		ldi r23,hi8(__c.1675)
 909 0026 49EC      		ldi r20,lo8(201)	 ;  16	*movhi/4	[length = 2]
 910 0028 50E0      		ldi r21,hi8(201)
 911 002a 0E94 0000 		call __bassert_P	 ;  17	call_value_insn/3	[length = 2]
 912               	.L34:
 913               	.LBE192:
 914               	.LBE191:
 915               	.LBB193:
 530:bertos/net/afsk.c **** 	Afsk *af = AFSK_CAST(fd);
 531:bertos/net/afsk.c **** 	ATOMIC(af->status = 0);
 916               		.loc 1 531 0
 917               	/* #APP */
 918               	 ;  531 "bertos/net/afsk.c" 1
 919 002e 8FB7      		in r24,__SREG__
 920 0030 F894      		cli
 921               	 ;  0 "" 2
 922               	.LVL54:
 923               	/* #NOAPP */
 924 0032 CE52      		subi r28,lo8(-(210))	 ;  24	*addhi3/4	[length = 2]
 925 0034 DF4F      		sbci r29,hi8(-(210))
 926               	.LVL55:
 927 0036 1982      		std Y+1,__zero_reg__	 ;  25	*movhi/3	[length = 2]
 928 0038 1882      		st Y,__zero_reg__
 929               	/* #APP */
 930               	 ;  531 "bertos/net/afsk.c" 1
 931 003a 8FBF      		out __SREG__,r24
 932               	 ;  0 "" 2
 933               	/* epilogue start */
 934               	/* #NOAPP */
 935               	.LBE193:
 532:bertos/net/afsk.c **** }
 936               		.loc 1 532 0
 937 003c DF91      		pop r29	 ;  35	popqi	[length = 1]
 938 003e CF91      		pop r28	 ;  36	popqi	[length = 1]
 939 0040 0895      		ret	 ;  37	return_from_epilogue	[length = 1]
 940               		.cfi_endproc
 941               	.LFE56:
 943               		.section	.text.afsk_adc_isr,"ax",@progbits
 944               	.global	afsk_adc_isr
 946               	afsk_adc_isr:
 947               	.LFB49:
 215:bertos/net/afsk.c **** {
 948               		.loc 1 215 0
 949               		.cfi_startproc
 950               	.LVL56:
 951 0000 CF93      		push r28	 ;  555	*pushqi/1	[length = 1]
 952               	.LCFI32:
 953               		.cfi_def_cfa_offset 3
 954               		.cfi_offset 28, -2
 955 0002 DF93      		push r29	 ;  556	*pushqi/1	[length = 1]
 956               	.LCFI33:
 957               		.cfi_def_cfa_offset 4
 958               		.cfi_offset 29, -3
 959               	/* prologue: function */
 960               	/* frame size = 0 */
 961               	/* stack size = 2 */
 962               	.L__stack_usage = 2
 963 0004 DC01      		movw r26,r24	 ;  2	*movhi/1	[length = 1]
 216:bertos/net/afsk.c **** 	AFSK_STROBE_ON();
 964               		.loc 1 216 0
 965 0006 2D9A      		sbi 37-32,5	 ;  21	*sbi	[length = 1]
 234:bertos/net/afsk.c **** 	af->iir_x[0] = af->iir_x[1];
 966               		.loc 1 234 0
 967 0008 EC01      		movw r28,r24	 ;  530	*movhi/1	[length = 1]
 968 000a C853      		subi r28,lo8(-(200))	 ;  22	*addhi3/4	[length = 2]
 969 000c DF4F      		sbci r29,hi8(-(200))
 970 000e 4881      		ld r20,Y	 ;  23	*movhi/2	[length = 2]
 971 0010 5981      		ldd r21,Y+1
 972 0012 FC01      		movw r30,r24	 ;  531	*movhi/1	[length = 1]
 973 0014 EA53      		subi r30,lo8(-(198))	 ;  24	*addhi3/4	[length = 2]
 974 0016 FF4F      		sbci r31,hi8(-(198))
 975 0018 5183      		std Z+1,r21	 ;  25	*movhi/3	[length = 2]
 976 001a 4083      		st Z,r20
 977               	.LVL57:
 978               	.LBB213:
 979               	.LBB214:
 181:bertos/struct/fifobuf.h **** 	if (UNLIKELY(fb->head == fb->end))
 980               		.loc 4 181 0
 981 001c 9996      		adiw r26,41	 ;  28	*movhi/2	[length = 4]
 982 001e ED91      		ld r30,X+
 983 0020 FC91      		ld r31,X
 984 0022 9A97      		sbiw r26,41+1
 985 0024 9F96      		adiw r26,47	 ;  29	*movhi/2	[length = 4]
 986 0026 8D91      		ld r24,X+
 987 0028 9C91      		ld r25,X
 988 002a D097      		sbiw r26,47+1
 989               	.LVL58:
 990 002c E817      		cp r30,r24	 ;  30	*cmphi/3	[length = 2]
 991 002e F907      		cpc r31,r25
 992 0030 01F4      		brne .L36	 ;  31	branch	[length = 1]
 184:bertos/struct/fifobuf.h **** 		fb->head = fb->begin;
 993               		.loc 4 184 0
 994 0032 9D96      		adiw r26,45	 ;  33	*movhi/2	[length = 4]
 995 0034 8D91      		ld r24,X+
 996 0036 9C91      		ld r25,X
 997 0038 9E97      		sbiw r26,45+1
 998 003a 9A96      		adiw r26,41+1	 ;  34	*movhi/3	[length = 4]
 999 003c 9C93      		st X,r25
 1000 003e 8E93      		st -X,r24
 1001 0040 9997      		sbiw r26,41
 185:bertos/struct/fifobuf.h **** 		return *(fb->end);
 1002               		.loc 4 185 0
 1003 0042 2081      		ld r18,Z	 ;  35	*movqi/4	[length = 1]
 1004 0044 00C0      		rjmp .L37	 ;  602	jump	[length = 1]
 1005               	.L36:
 189:bertos/struct/fifobuf.h **** 		return *(fb->head++);
 1006               		.loc 4 189 0
 1007 0046 9996      		adiw r26,41	 ;  40	*movhi/2	[length = 4]
 1008 0048 ED91      		ld r30,X+
 1009 004a FC91      		ld r31,X
 1010 004c 9A97      		sbiw r26,41+1
 1011 004e 2191      		ld r18,Z+	 ;  41	*movqi/4	[length = 1]
 1012 0050 9A96      		adiw r26,41+1	 ;  43	*movhi/3	[length = 4]
 1013 0052 FC93      		st X,r31
 1014 0054 EE93      		st -X,r30
 1015 0056 9997      		sbiw r26,41
 1016               	.L37:
 1017               	.LBE214:
 1018               	.LBE213:
 240:bertos/net/afsk.c **** 		af->iir_x[1] = ((int8_t)fifo_pop(&af->delay_fifo) * curr_sample) >> 2;
 1019               		.loc 1 240 0
 1020 0058 2602      		muls r18,r22	 ;  49	mulqihi3	[length = 3]
 1021 005a 9001      		movw r18,r0
 1022 005c 1124      		clr r1
 1023 005e 3595      		asr r19	 ;  600	*ashrhi3_const/4	[length = 4]
 1024 0060 2795      		ror r18
 1025 0062 3595      		asr r19
 1026 0064 2795      		ror r18
 1027 0066 3983      		std Y+1,r19	 ;  52	*movhi/3	[length = 2]
 1028 0068 2883      		st Y,r18
 246:bertos/net/afsk.c **** 	af->iir_y[0] = af->iir_y[1];
 1029               		.loc 1 246 0
 1030 006a ED01      		movw r28,r26	 ;  532	*movhi/1	[length = 1]
 1031 006c C453      		subi r28,lo8(-(204))	 ;  53	*addhi3/4	[length = 2]
 1032 006e DF4F      		sbci r29,hi8(-(204))
 1033 0070 8881      		ld r24,Y	 ;  54	*movhi/2	[length = 2]
 1034 0072 9981      		ldd r25,Y+1
 1035 0074 FD01      		movw r30,r26	 ;  533	*movhi/1	[length = 1]
 1036 0076 E653      		subi r30,lo8(-(202))	 ;  55	*addhi3/4	[length = 2]
 1037 0078 FF4F      		sbci r31,hi8(-(202))
 1038 007a 9183      		std Z+1,r25	 ;  56	*movhi/3	[length = 2]
 1039 007c 8083      		st Z,r24
 263:bertos/net/afsk.c **** 		af->iir_y[1] = af->iir_x[0] + af->iir_x[1] + (af->iir_y[0] >> 1);
 1040               		.loc 1 263 0
 1041 007e 9595      		asr r25	 ;  601	*ashrhi3_const/2	[length = 2]
 1042 0080 8795      		ror r24
 1043 0082 840F      		add r24,r20	 ;  58	*addhi3/1	[length = 2]
 1044 0084 951F      		adc r25,r21
 1045 0086 820F      		add r24,r18	 ;  59	*addhi3/1	[length = 2]
 1046 0088 931F      		adc r25,r19
 1047 008a 9983      		std Y+1,r25	 ;  61	*movhi/3	[length = 2]
 1048 008c 8883      		st Y,r24
 269:bertos/net/afsk.c **** 	af->sampled_bits |= (af->iir_y[1] > 0) ? 1 : 0;
 1049               		.loc 1 269 0
 1050 008e FD01      		movw r30,r26	 ;  534	*movhi/1	[length = 1]
 1051 0090 E253      		subi r30,lo8(-(206))	 ;  62	*addhi3/4	[length = 2]
 1052 0092 FF4F      		sbci r31,hi8(-(206))
 1053 0094 21E0      		ldi r18,lo8(1)	 ;  63	*movqi/2	[length = 1]
 1054 0096 1816      		cp __zero_reg__,r24	 ;  64	*reversed_tsthi	[length = 2]
 1055 0098 1906      		cpc __zero_reg__,r25
 1056 009a 04F0      		brlt .L38	 ;  65	branch	[length = 1]
 1057 009c 20E0      		ldi r18,lo8(0)	 ;  66	*movqi/2	[length = 1]
 1058               	.L38:
 268:bertos/net/afsk.c **** 	af->sampled_bits <<= 1;
 1059               		.loc 1 268 0
 1060 009e 8081      		ld r24,Z	 ;  69	*movqi/4	[length = 1]
 1061 00a0 880F      		lsl r24	 ;  70	*ashlqi3/3	[length = 1]
 269:bertos/net/afsk.c **** 	af->sampled_bits |= (af->iir_y[1] > 0) ? 1 : 0;
 1062               		.loc 1 269 0
 1063 00a2 822B      		or r24,r18	 ;  71	iorqi3/1	[length = 1]
 1064 00a4 8083      		st Z,r24	 ;  72	*movqi/3	[length = 1]
 1065               	.LVL59:
 1066               	.LBB215:
 1067               	.LBB216:
 153:bertos/struct/fifobuf.h **** 	*(fb->tail) = c;
 1068               		.loc 4 153 0
 1069 00a6 9B96      		adiw r26,43	 ;  76	*movhi/2	[length = 4]
 1070 00a8 ED91      		ld r30,X+
 1071 00aa FC91      		ld r31,X
 1072 00ac 9C97      		sbiw r26,43+1
 1073 00ae 6083      		st Z,r22	 ;  77	*movqi/3	[length = 1]
 155:bertos/struct/fifobuf.h **** 	if (UNLIKELY(fb->tail == fb->end))
 1074               		.loc 4 155 0
 1075 00b0 9B96      		adiw r26,43	 ;  78	*movhi/2	[length = 4]
 1076 00b2 2D91      		ld r18,X+
 1077 00b4 3C91      		ld r19,X
 1078 00b6 9C97      		sbiw r26,43+1
 1079 00b8 9F96      		adiw r26,47	 ;  79	*movhi/2	[length = 4]
 1080 00ba 8D91      		ld r24,X+
 1081 00bc 9C91      		ld r25,X
 1082 00be D097      		sbiw r26,47+1
 1083 00c0 2817      		cp r18,r24	 ;  80	*cmphi/3	[length = 2]
 1084 00c2 3907      		cpc r19,r25
 1085 00c4 01F4      		brne .L39	 ;  81	branch	[length = 1]
 157:bertos/struct/fifobuf.h **** 		fb->tail = fb->begin;
 1086               		.loc 4 157 0
 1087 00c6 9D96      		adiw r26,45	 ;  83	*movhi/2	[length = 4]
 1088 00c8 8D91      		ld r24,X+
 1089 00ca 9C91      		ld r25,X
 1090 00cc 9E97      		sbiw r26,45+1
 1091 00ce 00C0      		rjmp .L77	 ;  604	jump	[length = 1]
 1092               	.L39:
 160:bertos/struct/fifobuf.h **** 		fb->tail++;
 1093               		.loc 4 160 0
 1094 00d0 9B96      		adiw r26,43	 ;  89	*movhi/2	[length = 4]
 1095 00d2 8D91      		ld r24,X+
 1096 00d4 9C91      		ld r25,X
 1097 00d6 9C97      		sbiw r26,43+1
 1098 00d8 0196      		adiw r24,1	 ;  90	*addhi3/2	[length = 1]
 1099               	.L77:
 1100 00da 9C96      		adiw r26,43+1	 ;  91	*movhi/3	[length = 4]
 1101 00dc 9C93      		st X,r25
 1102 00de 8E93      		st -X,r24
 1103 00e0 9B97      		sbiw r26,43
 1104               	.LBE216:
 1105               	.LBE215:
 275:bertos/net/afsk.c **** 	if (EDGE_FOUND(af->sampled_bits))
 1106               		.loc 1 275 0
 1107 00e2 FD01      		movw r30,r26	 ;  535	*movhi/1	[length = 1]
 1108 00e4 E253      		subi r30,lo8(-(206))	 ;  94	*addhi3/4	[length = 2]
 1109 00e6 FF4F      		sbci r31,hi8(-(206))
 1110 00e8 9081      		ld r25,Z	 ;  95	*movqi/4	[length = 1]
 1111 00ea 892F      		mov r24,r25	 ;  536	*movqi/1	[length = 1]
 1112 00ec 8695      		lsr r24	 ;  96	*lshrqi3/3	[length = 1]
 1113 00ee 8927      		eor r24,r25	 ;  97	xorqi3	[length = 1]
 1114 00f0 FD01      		movw r30,r26	 ;  537	*movhi/1	[length = 1]
 1115 00f2 E153      		subi r30,lo8(-(207))	 ;  479	*addhi3/4	[length = 2]
 1116 00f4 FF4F      		sbci r31,hi8(-(207))
 1117 00f6 80FF      		sbrs r24,0	 ;  101	*sbrx_branchhi	[length = 2]
 1118 00f8 00C0      		rjmp .L41
 277:bertos/net/afsk.c **** 		if (af->curr_phase < PHASE_THRES)
 1119               		.loc 1 277 0
 1120 00fa 8081      		ld r24,Z	 ;  104	*movqi/4	[length = 1]
 1121 00fc 8032      		cpi r24,lo8(32)	 ;  105	*cmpqi/3	[length = 1]
 1122 00fe 04F4      		brge .L42	 ;  106	branch	[length = 1]
 278:bertos/net/afsk.c **** 			af->curr_phase += PHASE_INC;
 1123               		.loc 1 278 0
 1124 0100 8F5F      		subi r24,lo8(-(1))	 ;  109	addqi3/2	[length = 1]
 1125 0102 00C0      		rjmp .L78	 ;  606	jump	[length = 1]
 1126               	.L42:
 280:bertos/net/afsk.c **** 			af->curr_phase -= PHASE_INC;
 1127               		.loc 1 280 0
 1128 0104 8150      		subi r24,lo8(-(-1))	 ;  116	addqi3/2	[length = 1]
 1129               	.L78:
 1130 0106 8083      		st Z,r24	 ;  117	*movqi/3	[length = 1]
 1131               	.L41:
 282:bertos/net/afsk.c **** 	af->curr_phase += PHASE_BIT;
 1132               		.loc 1 282 0
 1133 0108 8081      		ld r24,Z	 ;  121	*movqi/4	[length = 1]
 1134 010a 885F      		subi r24,lo8(-(8))	 ;  122	addqi3/2	[length = 1]
 1135 010c 8083      		st Z,r24	 ;  124	*movqi/3	[length = 1]
 285:bertos/net/afsk.c **** 	if (af->curr_phase >= PHASE_MAX)
 1136               		.loc 1 285 0
 1137 010e 8034      		cpi r24,lo8(64)	 ;  125	*cmpqi/3	[length = 1]
 1138 0110 04F4      		brge .+2	 ;  126	branch	[length = 2]
 1139 0112 00C0      		rjmp .L43
 1140               	.LBB217:
 287:bertos/net/afsk.c **** 		af->curr_phase %= PHASE_MAX;
 1141               		.loc 1 287 0
 1142 0114 8F73      		andi r24,lo8(63)	 ;  129	andqi3/2	[length = 1]
 1143 0116 8083      		st Z,r24	 ;  130	*movqi/3	[length = 1]
 290:bertos/net/afsk.c **** 		af->found_bits <<= 1;
 1144               		.loc 1 290 0
 1145 0118 FD01      		movw r30,r26	 ;  538	*movhi/1	[length = 1]
 1146 011a E053      		subi r30,lo8(-(208))	 ;  131	*addhi3/4	[length = 2]
 1147 011c FF4F      		sbci r31,hi8(-(208))
 1148 011e 8081      		ld r24,Z	 ;  132	*movqi/4	[length = 1]
 1149 0120 880F      		lsl r24	 ;  133	*ashlqi3/3	[length = 1]
 1150 0122 8083      		st Z,r24	 ;  135	*movqi/3	[length = 1]
 299:bertos/net/afsk.c **** 		uint8_t bits = af->sampled_bits & 0x07;
 1151               		.loc 1 299 0
 1152 0124 ED01      		movw r28,r26	 ;  539	*movhi/1	[length = 1]
 1153 0126 C253      		subi r28,lo8(-(206))	 ;  136	*addhi3/4	[length = 2]
 1154 0128 DF4F      		sbci r29,hi8(-(206))
 1155 012a 9881      		ld r25,Y	 ;  137	*movqi/4	[length = 1]
 1156 012c 9770      		andi r25,lo8(7)	 ;  138	andqi3/2	[length = 1]
 1157               	.LVL60:
 302:bertos/net/afsk.c **** 		 || bits == 0x05 // 101, 2 bits
 1158               		.loc 1 302 0
 1159 012e 292F      		mov r18,r25	 ;  540	*movqi/1	[length = 1]
 1160 0130 2550      		subi r18,lo8(-(-5))	 ;  140	addqi3/2	[length = 1]
 300:bertos/net/afsk.c **** 		if (bits == 0x07 // 111, 3 bits set to 1
 1161               		.loc 1 300 0
 1162 0132 2330      		cpi r18,lo8(3)	 ;  141	*cmpqi/3	[length = 1]
 1163 0134 00F0      		brlo .L44	 ;  142	branch	[length = 1]
 303:bertos/net/afsk.c **** 		 || bits == 0x03 // 011, 2 bits
 1164               		.loc 1 303 0
 1165 0136 9330      		cpi r25,lo8(3)	 ;  144	*cmpqi/3	[length = 1]
 1166 0138 01F4      		brne .L45	 ;  145	branch	[length = 1]
 1167               	.L44:
 305:bertos/net/afsk.c **** 			af->found_bits |= 1;
 1168               		.loc 1 305 0
 1169 013a 8160      		ori r24,lo8(1)	 ;  149	iorqi3/2	[length = 1]
 1170 013c 8083      		st Z,r24	 ;  150	*movqi/3	[length = 1]
 1171               	.L45:
 311:bertos/net/afsk.c **** 		if (!hdlc_parse(&af->hdlc, !EDGE_FOUND(af->found_bits), &af->rx_fifo))
 1172               		.loc 1 311 0
 1173 013e 9081      		ld r25,Z	 ;  155	*movqi/4	[length = 1]
 1174               	.LVL61:
 1175 0140 892F      		mov r24,r25	 ;  541	*movqi/1	[length = 1]
 1176 0142 8695      		lsr r24	 ;  161	*lshrqi3/3	[length = 1]
 1177 0144 8927      		eor r24,r25	 ;  162	xorqi3	[length = 1]
 1178               	.LBB218:
 1179               	.LBB219:
 136:bertos/net/afsk.c **** 	hdlc->demod_bits |= bit ? 1 : 0;
 1180               		.loc 1 136 0
 1181 0146 91E0      		ldi r25,lo8(1)	 ;  166	*movqi/2	[length = 1]
 1182 0148 80FD      		sbrc r24,0	 ;  168	*sbrx_branchhi	[length = 2]
 1183 014a 90E0      		ldi r25,lo8(0)	 ;  169	*movqi/2	[length = 1]
 1184               	.L46:
 135:bertos/net/afsk.c **** 	hdlc->demod_bits <<= 1;
 1185               		.loc 1 135 0
 1186 014c FD01      		movw r30,r26	 ;  542	*movhi/1	[length = 1]
 1187               	.LVL62:
 1188 014e EC52      		subi r30,lo8(-(212))	 ;  171	*addhi3/4	[length = 2]
 1189 0150 FF4F      		sbci r31,hi8(-(212))
 1190 0152 2081      		ld r18,Z	 ;  172	*movqi/4	[length = 1]
 1191               	.LVL63:
 1192 0154 220F      		lsl r18	 ;  173	*ashlqi3/3	[length = 1]
 136:bertos/net/afsk.c **** 	hdlc->demod_bits |= bit ? 1 : 0;
 1193               		.loc 1 136 0
 1194 0156 292B      		or r18,r25	 ;  174	iorqi3/1	[length = 1]
 1195 0158 2083      		st Z,r18	 ;  176	*movqi/3	[length = 1]
 139:bertos/net/afsk.c **** 	if (hdlc->demod_bits == HDLC_FLAG)
 1196               		.loc 1 139 0
 1197 015a 2E37      		cpi r18,lo8(126)	 ;  177	*cmpqi/3	[length = 1]
 1198 015c 01F0      		breq .+2	 ;  178	branch	[length = 2]
 1199 015e 00C0      		rjmp .L47
 1200               	.LVL64:
 1201               	.LBB220:
 1202               	.LBB221:
 126:bertos/struct/fifobuf.h **** 		((fb->head == fb->begin) && (fb->tail == fb->end))
 1203               		.loc 4 126 0
 1204 0160 D696      		adiw r26,54	 ;  181	*movhi/2	[length = 4]
 1205 0162 2D91      		ld r18,X+
 1206 0164 3C91      		ld r19,X
 1207 0166 D797      		sbiw r26,54+1
 127:bertos/struct/fifobuf.h **** 		|| (fb->tail == fb->head - 1);
 1208               		.loc 4 127 0
 1209 0168 DA96      		adiw r26,58	 ;  182	*movhi/2	[length = 4]
 1210 016a 8D91      		ld r24,X+
 1211 016c 9C91      		ld r25,X
 1212 016e DB97      		sbiw r26,58+1
 1213 0170 2817      		cp r18,r24	 ;  183	*cmphi/3	[length = 2]
 1214 0172 3907      		cpc r19,r25
 1215 0174 01F4      		brne .L48	 ;  184	branch	[length = 1]
 126:bertos/struct/fifobuf.h **** 		((fb->head == fb->begin) && (fb->tail == fb->end))
 1216               		.loc 4 126 0
 1217 0176 D896      		adiw r26,56	 ;  186	*movhi/2	[length = 4]
 1218 0178 2D91      		ld r18,X+
 1219 017a 3C91      		ld r19,X
 1220 017c D997      		sbiw r26,56+1
 1221 017e DC96      		adiw r26,60	 ;  187	*movhi/2	[length = 4]
 1222 0180 8D91      		ld r24,X+
 1223 0182 9C91      		ld r25,X
 1224 0184 DD97      		sbiw r26,60+1
 1225 0186 2817      		cp r18,r24	 ;  188	*cmphi/3	[length = 2]
 1226 0188 3907      		cpc r19,r25
 1227 018a 01F0      		breq .L73	 ;  189	branch	[length = 1]
 1228               	.L48:
 127:bertos/struct/fifobuf.h **** 		|| (fb->tail == fb->head - 1);
 1229               		.loc 4 127 0
 1230 018c D896      		adiw r26,56	 ;  192	*movhi/2	[length = 4]
 1231 018e 4D91      		ld r20,X+
 1232 0190 5C91      		ld r21,X
 1233 0192 D997      		sbiw r26,56+1
 1234 0194 D696      		adiw r26,54	 ;  193	*movhi/2	[length = 4]
 1235 0196 2D91      		ld r18,X+
 1236 0198 3C91      		ld r19,X
 1237 019a D797      		sbiw r26,54+1
 1238 019c 2150      		subi r18,lo8(-(-1))	 ;  194	*addhi3/4	[length = 2]
 1239 019e 3040      		sbci r19,hi8(-(-1))
 1240 01a0 81E0      		ldi r24,lo8(1)	 ;  195	*movhi/4	[length = 2]
 1241 01a2 90E0      		ldi r25,hi8(1)
 1242 01a4 4217      		cp r20,r18	 ;  196	*cmphi/3	[length = 2]
 1243 01a6 5307      		cpc r21,r19
 1244 01a8 01F0      		breq .L49	 ;  197	branch	[length = 1]
 1245 01aa 80E0      		ldi r24,lo8(0)	 ;  198	*movhi/4	[length = 2]
 1246 01ac 90E0      		ldi r25,hi8(0)
 1247 01ae 00C0      		rjmp .L49	 ;  608	jump	[length = 1]
 1248               	.L73:
 1249 01b0 81E0      		ldi r24,lo8(1)	 ;  5	*movhi/4	[length = 2]
 1250 01b2 90E0      		ldi r25,hi8(1)
 1251               	.L49:
 1252               	.LBE221:
 1253               	.LBE220:
 141:bertos/net/afsk.c **** 		if (!fifo_isfull(fifo))
 1254               		.loc 1 141 0
 1255 01b4 0097      		sbiw r24,0	 ;  203	*cmphi/1	[length = 1]
 1256 01b6 01F4      		brne .L51	 ;  204	branch	[length = 1]
 1257               	.LVL65:
 1258               	.LBB222:
 1259               	.LBB223:
 153:bertos/struct/fifobuf.h **** 	*(fb->tail) = c;
 1260               		.loc 4 153 0
 1261 01b8 D896      		adiw r26,56	 ;  208	*movhi/2	[length = 4]
 1262 01ba ED91      		ld r30,X+
 1263 01bc FC91      		ld r31,X
 1264 01be D997      		sbiw r26,56+1
 1265 01c0 8EE7      		ldi r24,lo8(126)	 ;  209	*movqi/2	[length = 1]
 1266 01c2 8083      		st Z,r24	 ;  210	*movqi/3	[length = 1]
 155:bertos/struct/fifobuf.h **** 	if (UNLIKELY(fb->tail == fb->end))
 1267               		.loc 4 155 0
 1268 01c4 D896      		adiw r26,56	 ;  211	*movhi/2	[length = 4]
 1269 01c6 2D91      		ld r18,X+
 1270 01c8 3C91      		ld r19,X
 1271 01ca D997      		sbiw r26,56+1
 1272 01cc DC96      		adiw r26,60	 ;  212	*movhi/2	[length = 4]
 1273 01ce 8D91      		ld r24,X+
 1274 01d0 9C91      		ld r25,X
 1275 01d2 DD97      		sbiw r26,60+1
 1276 01d4 2817      		cp r18,r24	 ;  213	*cmphi/3	[length = 2]
 1277 01d6 3907      		cpc r19,r25
 1278 01d8 01F4      		brne .L52	 ;  214	branch	[length = 1]
 157:bertos/struct/fifobuf.h **** 		fb->tail = fb->begin;
 1279               		.loc 4 157 0
 1280 01da DA96      		adiw r26,58	 ;  216	*movhi/2	[length = 4]
 1281 01dc 8D91      		ld r24,X+
 1282 01de 9C91      		ld r25,X
 1283 01e0 DB97      		sbiw r26,58+1
 1284 01e2 00C0      		rjmp .L79	 ;  610	jump	[length = 1]
 1285               	.L52:
 160:bertos/struct/fifobuf.h **** 		fb->tail++;
 1286               		.loc 4 160 0
 1287 01e4 D896      		adiw r26,56	 ;  222	*movhi/2	[length = 4]
 1288 01e6 8D91      		ld r24,X+
 1289 01e8 9C91      		ld r25,X
 1290 01ea D997      		sbiw r26,56+1
 1291 01ec 0196      		adiw r24,1	 ;  223	*addhi3/2	[length = 1]
 1292               	.L79:
 1293 01ee D996      		adiw r26,56+1	 ;  224	*movhi/3	[length = 4]
 1294 01f0 9C93      		st X,r25
 1295 01f2 8E93      		st -X,r24
 1296 01f4 D897      		sbiw r26,56
 1297               	.LBE223:
 1298               	.LBE222:
 144:bertos/net/afsk.c **** 			hdlc->rxstart = true;
 1299               		.loc 1 144 0
 1300 01f6 FD01      		movw r30,r26	 ;  543	*movhi/1	[length = 1]
 1301 01f8 EC52      		subi r30,lo8(-(212))	 ;  227	*addhi3/4	[length = 2]
 1302 01fa FF4F      		sbci r31,hi8(-(212))
 1303 01fc 81E0      		ldi r24,lo8(1)	 ;  228	*movqi/2	[length = 1]
 1304 01fe 8383      		std Z+3,r24	 ;  229	*movqi/3	[length = 1]
 133:bertos/net/afsk.c **** 	bool ret = true;
 1305               		.loc 1 133 0
 1306 0200 61E0      		ldi r22,lo8(1)	 ;  6	*movqi/2	[length = 1]
 1307               	.LVL66:
 1308 0202 00C0      		rjmp .L72	 ;  612	jump	[length = 1]
 1309               	.LVL67:
 1310               	.L51:
 149:bertos/net/afsk.c **** 			hdlc->rxstart = false;
 1311               		.loc 1 149 0
 1312 0204 FD01      		movw r30,r26	 ;  544	*movhi/1	[length = 1]
 1313 0206 EC52      		subi r30,lo8(-(212))	 ;  235	*addhi3/4	[length = 2]
 1314 0208 FF4F      		sbci r31,hi8(-(212))
 1315 020a 00C0      		rjmp .L70	 ;  614	jump	[length = 1]
 1316               	.LVL68:
 1317               	.L47:
 158:bertos/net/afsk.c **** 	if ((hdlc->demod_bits & HDLC_RESET) == HDLC_RESET)
 1318               		.loc 1 158 0
 1319 020c 30E0      		ldi r19,lo8(0)	 ;  554	*movqi/2	[length = 1]
 1320 020e C901      		movw r24,r18	 ;  546	*movhi/1	[length = 1]
 1321 0210 8F77      		andi r24,lo8(127)	 ;  249	andhi3/2	[length = 2]
 1322 0212 9070      		andi r25,hi8(127)
 1323 0214 8F37      		cpi r24,127	 ;  250	*cmphi/4	[length = 2]
 1324 0216 9105      		cpc r25,__zero_reg__
 1325 0218 01F4      		brne .L56	 ;  251	branch	[length = 1]
 160:bertos/net/afsk.c **** 		hdlc->rxstart = false;
 1326               		.loc 1 160 0
 1327 021a 1382      		std Z+3,__zero_reg__	 ;  254	*movqi/3	[length = 1]
 1328 021c 00C0      		rjmp .L43	 ;  616	jump	[length = 1]
 1329               	.L56:
 164:bertos/net/afsk.c **** 	if (!hdlc->rxstart)
 1330               		.loc 1 164 0
 1331 021e 8381      		ldd r24,Z+3	 ;  260	*movqi/4	[length = 1]
 1332 0220 8823      		tst r24	 ;  261	*cmpqi/1	[length = 1]
 1333 0222 01F4      		brne .+2	 ;  262	branch	[length = 2]
 1334 0224 00C0      		rjmp .L43
 168:bertos/net/afsk.c **** 	if ((hdlc->demod_bits & 0x3f) == 0x3e)
 1335               		.loc 1 168 0
 1336 0226 C901      		movw r24,r18	 ;  547	*movhi/1	[length = 1]
 1337 0228 8F73      		andi r24,lo8(63)	 ;  264	andhi3/2	[length = 2]
 1338 022a 9070      		andi r25,hi8(63)
 1339 022c 8E33      		cpi r24,62	 ;  265	*cmphi/4	[length = 2]
 1340 022e 9105      		cpc r25,__zero_reg__
 1341 0230 01F4      		brne .+2	 ;  266	branch	[length = 2]
 1342 0232 00C0      		rjmp .L43
 171:bertos/net/afsk.c **** 	if (hdlc->demod_bits & 0x01)
 1343               		.loc 1 171 0
 1344 0234 20FF      		sbrs r18,0	 ;  270	*sbrx_branchhi	[length = 2]
 1345 0236 00C0      		rjmp .L58
 172:bertos/net/afsk.c **** 		hdlc->currchar |= 0x80;
 1346               		.loc 1 172 0
 1347 0238 8281      		ldd r24,Z+2	 ;  274	*movqi/4	[length = 1]
 1348 023a 8068      		ori r24,lo8(-128)	 ;  275	iorqi3/2	[length = 1]
 1349 023c 8283      		std Z+2,r24	 ;  276	*movqi/3	[length = 1]
 1350               	.L58:
 174:bertos/net/afsk.c **** 	if (++hdlc->bit_idx >= 8)
 1351               		.loc 1 174 0
 1352 023e FD01      		movw r30,r26	 ;  548	*movhi/1	[length = 1]
 1353 0240 EC52      		subi r30,lo8(-(212))	 ;  279	*addhi3/4	[length = 2]
 1354 0242 FF4F      		sbci r31,hi8(-(212))
 1355 0244 8181      		ldd r24,Z+1	 ;  280	*movqi/4	[length = 1]
 1356 0246 8F5F      		subi r24,lo8(-(1))	 ;  281	addqi3/2	[length = 1]
 1357 0248 8183      		std Z+1,r24	 ;  283	*movqi/3	[length = 1]
 1358 024a 9281      		ldd r25,Z+2	 ;  485	*movqi/4	[length = 1]
 1359 024c 8830      		cpi r24,lo8(8)	 ;  284	*cmpqi/3	[length = 1]
 1360 024e 00F4      		brsh .+2	 ;  285	branch	[length = 2]
 1361 0250 00C0      		rjmp .L59
 177:bertos/net/afsk.c **** 			|| hdlc->currchar == HDLC_RESET
 1362               		.loc 1 177 0
 1363 0252 892F      		mov r24,r25	 ;  549	*movqi/1	[length = 1]
 1364 0254 8E57      		subi r24,lo8(-(-126))	 ;  289	addqi3/2	[length = 1]
 176:bertos/net/afsk.c **** 		if ((hdlc->currchar == HDLC_FLAG
 1365               		.loc 1 176 0
 1366 0256 8230      		cpi r24,lo8(2)	 ;  290	*cmpqi/3	[length = 1]
 1367 0258 00F0      		brlo .L60	 ;  291	branch	[length = 1]
 178:bertos/net/afsk.c **** 			|| hdlc->currchar == AX25_ESC))
 1368               		.loc 1 178 0
 1369 025a 9B31      		cpi r25,lo8(27)	 ;  293	*cmpqi/3	[length = 1]
 1370 025c 01F0      		breq .+2	 ;  294	branch	[length = 2]
 1371 025e 00C0      		rjmp .L74
 1372               	.L60:
 1373               	.LVL69:
 1374               	.LBB224:
 1375               	.LBB225:
 126:bertos/struct/fifobuf.h **** 		((fb->head == fb->begin) && (fb->tail == fb->end))
 1376               		.loc 4 126 0
 1377 0260 D696      		adiw r26,54	 ;  298	*movhi/2	[length = 4]
 1378 0262 2D91      		ld r18,X+
 1379 0264 3C91      		ld r19,X
 1380 0266 D797      		sbiw r26,54+1
 127:bertos/struct/fifobuf.h **** 		|| (fb->tail == fb->head - 1);
 1381               		.loc 4 127 0
 1382 0268 DA96      		adiw r26,58	 ;  299	*movhi/2	[length = 4]
 1383 026a 8D91      		ld r24,X+
 1384 026c 9C91      		ld r25,X
 1385 026e DB97      		sbiw r26,58+1
 1386 0270 2817      		cp r18,r24	 ;  300	*cmphi/3	[length = 2]
 1387 0272 3907      		cpc r19,r25
 1388 0274 01F4      		brne .L62	 ;  301	branch	[length = 1]
 126:bertos/struct/fifobuf.h **** 		((fb->head == fb->begin) && (fb->tail == fb->end))
 1389               		.loc 4 126 0
 1390 0276 D896      		adiw r26,56	 ;  303	*movhi/2	[length = 4]
 1391 0278 2D91      		ld r18,X+
 1392 027a 3C91      		ld r19,X
 1393 027c D997      		sbiw r26,56+1
 1394 027e DC96      		adiw r26,60	 ;  304	*movhi/2	[length = 4]
 1395 0280 8D91      		ld r24,X+
 1396 0282 9C91      		ld r25,X
 1397 0284 DD97      		sbiw r26,60+1
 1398 0286 2817      		cp r18,r24	 ;  305	*cmphi/3	[length = 2]
 1399 0288 3907      		cpc r19,r25
 1400 028a 01F0      		breq .L75	 ;  306	branch	[length = 1]
 1401               	.L62:
 127:bertos/struct/fifobuf.h **** 		|| (fb->tail == fb->head - 1);
 1402               		.loc 4 127 0
 1403 028c D896      		adiw r26,56	 ;  309	*movhi/2	[length = 4]
 1404 028e 4D91      		ld r20,X+
 1405 0290 5C91      		ld r21,X
 1406 0292 D997      		sbiw r26,56+1
 1407 0294 D696      		adiw r26,54	 ;  310	*movhi/2	[length = 4]
 1408 0296 2D91      		ld r18,X+
 1409 0298 3C91      		ld r19,X
 1410 029a D797      		sbiw r26,54+1
 1411 029c 2150      		subi r18,lo8(-(-1))	 ;  311	*addhi3/4	[length = 2]
 1412 029e 3040      		sbci r19,hi8(-(-1))
 1413 02a0 81E0      		ldi r24,lo8(1)	 ;  312	*movhi/4	[length = 2]
 1414 02a2 90E0      		ldi r25,hi8(1)
 1415 02a4 4217      		cp r20,r18	 ;  313	*cmphi/3	[length = 2]
 1416 02a6 5307      		cpc r21,r19
 1417 02a8 01F0      		breq .L63	 ;  314	branch	[length = 1]
 1418 02aa 80E0      		ldi r24,lo8(0)	 ;  315	*movhi/4	[length = 2]
 1419 02ac 90E0      		ldi r25,hi8(0)
 1420 02ae 00C0      		rjmp .L63	 ;  618	jump	[length = 1]
 1421               	.L75:
 1422 02b0 81E0      		ldi r24,lo8(1)	 ;  8	*movhi/4	[length = 2]
 1423 02b2 90E0      		ldi r25,hi8(1)
 1424               	.L63:
 1425               	.LBE225:
 1426               	.LBE224:
 180:bertos/net/afsk.c **** 			if (!fifo_isfull(fifo))
 1427               		.loc 1 180 0
 1428 02b4 0097      		sbiw r24,0	 ;  320	*cmphi/1	[length = 1]
 1429 02b6 01F4      		brne .L65	 ;  321	branch	[length = 1]
 1430               	.LVL70:
 1431               	.LBB226:
 1432               	.LBB227:
 153:bertos/struct/fifobuf.h **** 	*(fb->tail) = c;
 1433               		.loc 4 153 0
 1434 02b8 D896      		adiw r26,56	 ;  325	*movhi/2	[length = 4]
 1435 02ba ED91      		ld r30,X+
 1436 02bc FC91      		ld r31,X
 1437 02be D997      		sbiw r26,56+1
 1438 02c0 8BE1      		ldi r24,lo8(27)	 ;  326	*movqi/2	[length = 1]
 1439 02c2 8083      		st Z,r24	 ;  327	*movqi/3	[length = 1]
 155:bertos/struct/fifobuf.h **** 	if (UNLIKELY(fb->tail == fb->end))
 1440               		.loc 4 155 0
 1441 02c4 D896      		adiw r26,56	 ;  328	*movhi/2	[length = 4]
 1442 02c6 2D91      		ld r18,X+
 1443 02c8 3C91      		ld r19,X
 1444 02ca D997      		sbiw r26,56+1
 1445 02cc DC96      		adiw r26,60	 ;  329	*movhi/2	[length = 4]
 1446 02ce 8D91      		ld r24,X+
 1447 02d0 9C91      		ld r25,X
 1448 02d2 DD97      		sbiw r26,60+1
 1449 02d4 2817      		cp r18,r24	 ;  330	*cmphi/3	[length = 2]
 1450 02d6 3907      		cpc r19,r25
 1451 02d8 01F4      		brne .L66	 ;  331	branch	[length = 1]
 157:bertos/struct/fifobuf.h **** 		fb->tail = fb->begin;
 1452               		.loc 4 157 0
 1453 02da DA96      		adiw r26,58	 ;  333	*movhi/2	[length = 4]
 1454 02dc 8D91      		ld r24,X+
 1455 02de 9C91      		ld r25,X
 1456 02e0 DB97      		sbiw r26,58+1
 1457 02e2 00C0      		rjmp .L81	 ;  620	jump	[length = 1]
 1458               	.L66:
 160:bertos/struct/fifobuf.h **** 		fb->tail++;
 1459               		.loc 4 160 0
 1460 02e4 D896      		adiw r26,56	 ;  339	*movhi/2	[length = 4]
 1461 02e6 8D91      		ld r24,X+
 1462 02e8 9C91      		ld r25,X
 1463 02ea D997      		sbiw r26,56+1
 1464 02ec 0196      		adiw r24,1	 ;  340	*addhi3/2	[length = 1]
 1465               	.L81:
 1466 02ee D996      		adiw r26,56+1	 ;  341	*movhi/3	[length = 4]
 1467 02f0 9C93      		st X,r25
 1468 02f2 8E93      		st -X,r24
 1469 02f4 D897      		sbiw r26,56
 1470 02f6 00C0      		rjmp .L74	 ;  622	jump	[length = 1]
 1471               	.LVL71:
 1472               	.L65:
 1473               	.LBE227:
 1474               	.LBE226:
 184:bertos/net/afsk.c **** 				hdlc->rxstart = false;
 1475               		.loc 1 184 0
 1476 02f8 FD01      		movw r30,r26	 ;  550	*movhi/1	[length = 1]
 1477 02fa EC52      		subi r30,lo8(-(212))	 ;  346	*addhi3/4	[length = 2]
 1478 02fc FF4F      		sbci r31,hi8(-(212))
 1479 02fe 1382      		std Z+3,__zero_reg__	 ;  347	*movqi/3	[length = 1]
 1480               	.LVL72:
 185:bertos/net/afsk.c **** 				ret = false;
 1481               		.loc 1 185 0
 1482 0300 60E0      		ldi r22,lo8(0)	 ;  12	*movqi/2	[length = 1]
 1483               	.LVL73:
 1484 0302 00C0      		rjmp .L61	 ;  624	jump	[length = 1]
 1485               	.LVL74:
 1486               	.L74:
 133:bertos/net/afsk.c **** 	bool ret = true;
 1487               		.loc 1 133 0
 1488 0304 61E0      		ldi r22,lo8(1)	 ;  9	*movqi/2	[length = 1]
 1489               	.LVL75:
 1490               	.L61:
 1491               	.LBB228:
 1492               	.LBB229:
 126:bertos/struct/fifobuf.h **** 		((fb->head == fb->begin) && (fb->tail == fb->end))
 1493               		.loc 4 126 0
 1494 0306 D696      		adiw r26,54	 ;  353	*movhi/2	[length = 4]
 1495 0308 2D91      		ld r18,X+
 1496 030a 3C91      		ld r19,X
 1497 030c D797      		sbiw r26,54+1
 127:bertos/struct/fifobuf.h **** 		|| (fb->tail == fb->head - 1);
 1498               		.loc 4 127 0
 1499 030e DA96      		adiw r26,58	 ;  354	*movhi/2	[length = 4]
 1500 0310 8D91      		ld r24,X+
 1501 0312 9C91      		ld r25,X
 1502 0314 DB97      		sbiw r26,58+1
 1503 0316 2817      		cp r18,r24	 ;  355	*cmphi/3	[length = 2]
 1504 0318 3907      		cpc r19,r25
 1505 031a 01F4      		brne .L67	 ;  356	branch	[length = 1]
 126:bertos/struct/fifobuf.h **** 		((fb->head == fb->begin) && (fb->tail == fb->end))
 1506               		.loc 4 126 0
 1507 031c D896      		adiw r26,56	 ;  358	*movhi/2	[length = 4]
 1508 031e 2D91      		ld r18,X+
 1509 0320 3C91      		ld r19,X
 1510 0322 D997      		sbiw r26,56+1
 1511 0324 DC96      		adiw r26,60	 ;  359	*movhi/2	[length = 4]
 1512 0326 8D91      		ld r24,X+
 1513 0328 9C91      		ld r25,X
 1514 032a DD97      		sbiw r26,60+1
 1515 032c 2817      		cp r18,r24	 ;  360	*cmphi/3	[length = 2]
 1516 032e 3907      		cpc r19,r25
 1517 0330 01F0      		breq .L76	 ;  361	branch	[length = 1]
 1518               	.L67:
 127:bertos/struct/fifobuf.h **** 		|| (fb->tail == fb->head - 1);
 1519               		.loc 4 127 0
 1520 0332 D896      		adiw r26,56	 ;  364	*movhi/2	[length = 4]
 1521 0334 4D91      		ld r20,X+
 1522 0336 5C91      		ld r21,X
 1523 0338 D997      		sbiw r26,56+1
 1524 033a D696      		adiw r26,54	 ;  365	*movhi/2	[length = 4]
 1525 033c 2D91      		ld r18,X+
 1526 033e 3C91      		ld r19,X
 1527 0340 D797      		sbiw r26,54+1
 1528 0342 2150      		subi r18,lo8(-(-1))	 ;  366	*addhi3/4	[length = 2]
 1529 0344 3040      		sbci r19,hi8(-(-1))
 1530 0346 81E0      		ldi r24,lo8(1)	 ;  367	*movhi/4	[length = 2]
 1531 0348 90E0      		ldi r25,hi8(1)
 1532 034a 4217      		cp r20,r18	 ;  368	*cmphi/3	[length = 2]
 1533 034c 5307      		cpc r21,r19
 1534 034e 01F0      		breq .L68	 ;  369	branch	[length = 1]
 1535 0350 80E0      		ldi r24,lo8(0)	 ;  370	*movhi/4	[length = 2]
 1536 0352 90E0      		ldi r25,hi8(0)
 1537 0354 00C0      		rjmp .L68	 ;  626	jump	[length = 1]
 1538               	.L76:
 1539 0356 81E0      		ldi r24,lo8(1)	 ;  13	*movhi/4	[length = 2]
 1540 0358 90E0      		ldi r25,hi8(1)
 1541               	.L68:
 1542 035a FD01      		movw r30,r26	 ;  551	*movhi/1	[length = 1]
 1543 035c EC52      		subi r30,lo8(-(212))	 ;  488	*addhi3/4	[length = 2]
 1544 035e FF4F      		sbci r31,hi8(-(212))
 1545               	.LBE229:
 1546               	.LBE228:
 189:bertos/net/afsk.c **** 		if (!fifo_isfull(fifo))
 1547               		.loc 1 189 0
 1548 0360 0097      		sbiw r24,0	 ;  375	*cmphi/1	[length = 1]
 1549 0362 01F4      		brne .L70	 ;  376	branch	[length = 1]
 190:bertos/net/afsk.c **** 			fifo_push(fifo, hdlc->currchar);
 1550               		.loc 1 190 0
 1551 0364 8281      		ldd r24,Z+2	 ;  379	*movqi/4	[length = 1]
 1552               	.LVL76:
 1553               	.LBB230:
 1554               	.LBB231:
 153:bertos/struct/fifobuf.h **** 	*(fb->tail) = c;
 1555               		.loc 4 153 0
 1556 0366 D896      		adiw r26,56	 ;  382	*movhi/2	[length = 4]
 1557 0368 ED91      		ld r30,X+
 1558 036a FC91      		ld r31,X
 1559 036c D997      		sbiw r26,56+1
 1560               	.LVL77:
 1561 036e 8083      		st Z,r24	 ;  383	*movqi/3	[length = 1]
 155:bertos/struct/fifobuf.h **** 	if (UNLIKELY(fb->tail == fb->end))
 1562               		.loc 4 155 0
 1563 0370 D896      		adiw r26,56	 ;  384	*movhi/2	[length = 4]
 1564 0372 2D91      		ld r18,X+
 1565 0374 3C91      		ld r19,X
 1566 0376 D997      		sbiw r26,56+1
 1567 0378 DC96      		adiw r26,60	 ;  385	*movhi/2	[length = 4]
 1568 037a 8D91      		ld r24,X+
 1569 037c 9C91      		ld r25,X
 1570 037e DD97      		sbiw r26,60+1
 1571               	.LVL78:
 1572 0380 2817      		cp r18,r24	 ;  386	*cmphi/3	[length = 2]
 1573 0382 3907      		cpc r19,r25
 1574 0384 01F4      		brne .L71	 ;  387	branch	[length = 1]
 157:bertos/struct/fifobuf.h **** 		fb->tail = fb->begin;
 1575               		.loc 4 157 0
 1576 0386 DA96      		adiw r26,58	 ;  389	*movhi/2	[length = 4]
 1577 0388 8D91      		ld r24,X+
 1578 038a 9C91      		ld r25,X
 1579 038c DB97      		sbiw r26,58+1
 1580 038e 00C0      		rjmp .L80	 ;  628	jump	[length = 1]
 1581               	.L71:
 160:bertos/struct/fifobuf.h **** 		fb->tail++;
 1582               		.loc 4 160 0
 1583 0390 D896      		adiw r26,56	 ;  395	*movhi/2	[length = 4]
 1584 0392 8D91      		ld r24,X+
 1585 0394 9C91      		ld r25,X
 1586 0396 D997      		sbiw r26,56+1
 1587 0398 0196      		adiw r24,1	 ;  396	*addhi3/2	[length = 1]
 1588               	.L80:
 1589 039a D996      		adiw r26,56+1	 ;  397	*movhi/3	[length = 4]
 1590 039c 9C93      		st X,r25
 1591 039e 8E93      		st -X,r24
 1592 03a0 D897      		sbiw r26,56
 1593 03a2 00C0      		rjmp .L72	 ;  630	jump	[length = 1]
 1594               	.LVL79:
 1595               	.L70:
 1596               	.LBE231:
 1597               	.LBE230:
 193:bertos/net/afsk.c **** 			hdlc->rxstart = false;
 1598               		.loc 1 193 0
 1599 03a4 1382      		std Z+3,__zero_reg__	 ;  403	*movqi/3	[length = 1]
 1600               	.LVL80:
 194:bertos/net/afsk.c **** 			ret = false;
 1601               		.loc 1 194 0
 1602 03a6 60E0      		ldi r22,lo8(0)	 ;  14	*movqi/2	[length = 1]
 1603               	.LVL81:
 1604               	.L72:
 197:bertos/net/afsk.c **** 		hdlc->currchar = 0;
 1605               		.loc 1 197 0
 1606 03a8 FD01      		movw r30,r26	 ;  552	*movhi/1	[length = 1]
 1607 03aa EC52      		subi r30,lo8(-(212))	 ;  408	*addhi3/4	[length = 2]
 1608 03ac FF4F      		sbci r31,hi8(-(212))
 1609 03ae 1282      		std Z+2,__zero_reg__	 ;  409	*movqi/3	[length = 1]
 198:bertos/net/afsk.c **** 		hdlc->bit_idx = 0;
 1610               		.loc 1 198 0
 1611 03b0 1182      		std Z+1,__zero_reg__	 ;  411	*movqi/3	[length = 1]
 1612               	.LBE219:
 1613               	.LBE218:
 311:bertos/net/afsk.c **** 		if (!hdlc_parse(&af->hdlc, !EDGE_FOUND(af->found_bits), &af->rx_fifo))
 1614               		.loc 1 311 0
 1615 03b2 6623      		tst r22	 ;  425	*cmpqi/1	[length = 1]
 1616 03b4 01F0      		breq .L82	 ;  426	branch	[length = 1]
 1617 03b6 00C0      		rjmp .L43	 ;  634	jump	[length = 1]
 1618               	.LVL82:
 1619               	.L59:
 1620               	.LBB233:
 1621               	.LBB232:
 201:bertos/net/afsk.c **** 		hdlc->currchar >>= 1;
 1622               		.loc 1 201 0
 1623 03b8 9695      		lsr r25	 ;  419	*lshrqi3/3	[length = 1]
 1624 03ba 9283      		std Z+2,r25	 ;  420	*movqi/3	[length = 1]
 1625 03bc 00C0      		rjmp .L43	 ;  636	jump	[length = 1]
 1626               	.LVL83:
 1627               	.L82:
 1628               	.LBE232:
 1629               	.LBE233:
 312:bertos/net/afsk.c **** 			af->status |= AFSK_RXFIFO_OVERRUN;
 1630               		.loc 1 312 0
 1631 03be AE52      		subi r26,lo8(-(210))	 ;  428	*addhi3/4	[length = 2]
 1632 03c0 BF4F      		sbci r27,hi8(-(210))
 1633               	.LVL84:
 1634 03c2 8D91      		ld r24,X+	 ;  429	*movhi/2	[length = 3]
 1635 03c4 9C91      		ld r25,X
 1636 03c6 1197      		sbiw r26,1
 1637 03c8 8160      		ori r24,lo8(1)	 ;  430	iorhi3/2	[length = 1]
 1638 03ca 1196      		adiw r26,1	 ;  432	*movhi/3	[length = 3]
 1639 03cc 9C93      		st X,r25
 1640 03ce 8E93      		st -X,r24
 1641               	.LVL85:
 1642               	.L43:
 1643               	.LBE217:
 316:bertos/net/afsk.c **** 	AFSK_STROBE_OFF();
 1644               		.loc 1 316 0
 1645 03d0 2D98      		cbi 37-32,5	 ;  439	*cbi	[length = 1]
 1646               	/* epilogue start */
 317:bertos/net/afsk.c **** }
 1647               		.loc 1 317 0
 1648 03d2 DF91      		pop r29	 ;  559	popqi	[length = 1]
 1649 03d4 CF91      		pop r28	 ;  560	popqi	[length = 1]
 1650 03d6 0895      		ret	 ;  561	return_from_epilogue	[length = 1]
 1651               		.cfi_endproc
 1652               	.LFE49:
 1654               		.section	.text.afsk_dac_isr,"ax",@progbits
 1655               	.global	afsk_dac_isr
 1657               	afsk_dac_isr:
 1658               	.LFB51:
 347:bertos/net/afsk.c **** {
 1659               		.loc 1 347 0
 1660               		.cfi_startproc
 1661               	.LVL86:
 1662 0000 CF93      		push r28	 ;  353	*pushqi/1	[length = 1]
 1663               	.LCFI34:
 1664               		.cfi_def_cfa_offset 3
 1665               		.cfi_offset 28, -2
 1666 0002 DF93      		push r29	 ;  354	*pushqi/1	[length = 1]
 1667               	.LCFI35:
 1668               		.cfi_def_cfa_offset 4
 1669               		.cfi_offset 29, -3
 1670               	/* prologue: function */
 1671               	/* frame size = 0 */
 1672               	/* stack size = 2 */
 1673               	.L__stack_usage = 2
 1674 0004 FC01      		movw r30,r24	 ;  2	*movhi/1	[length = 1]
 348:bertos/net/afsk.c **** 	AFSK_STROBE_ON();
 1675               		.loc 1 348 0
 1676 0006 2D9A      		sbi 37-32,5	 ;  16	*sbi	[length = 1]
 351:bertos/net/afsk.c **** 	if (af->sample_count == 0)
 1677               		.loc 1 351 0
 1678 0008 80A1      		ldd r24,Z+32	 ;  17	*movqi/4	[length = 1]
 1679               	.LVL87:
 1680 000a 8823      		tst r24	 ;  18	*cmpqi/1	[length = 1]
 1681 000c 01F0      		breq .+2	 ;  19	branch	[length = 2]
 1682 000e 00C0      		rjmp .L84
 353:bertos/net/afsk.c **** 		if (af->tx_bit == 0)
 1683               		.loc 1 353 0
 1684 0010 82A1      		ldd r24,Z+34	 ;  21	*movqi/4	[length = 1]
 1685 0012 8823      		tst r24	 ;  22	*cmpqi/1	[length = 1]
 1686 0014 01F0      		breq .+2	 ;  23	branch	[length = 2]
 1687 0016 00C0      		rjmp .L85
 1688               	.LVL88:
 1689               	.LBB234:
 1690               	.LBB235:
 105:bertos/struct/fifobuf.h **** 	return fb->head == fb->tail;
 1691               		.loc 4 105 0
 1692 0018 DF01      		movw r26,r30	 ;  344	*movhi/1	[length = 1]
 1693 001a A258      		subi r26,lo8(-(126))	 ;  27	*addhi3/4	[length = 2]
 1694 001c BF4F      		sbci r27,hi8(-(126))
 1695 001e 8D91      		ld r24,X+	 ;  28	*movhi/2	[length = 3]
 1696 0020 9C91      		ld r25,X
 1697 0022 1197      		sbiw r26,1
 1698 0024 1296      		adiw r26,2	 ;  30	*movhi/2	[length = 4]
 1699 0026 2D91      		ld r18,X+
 1700 0028 3C91      		ld r19,X
 1701 002a 1397      		sbiw r26,2+1
 1702               	.LBE235:
 1703               	.LBE234:
 356:bertos/net/afsk.c **** 			if (fifo_isempty(&af->tx_fifo) && af->trailer_len == 0)
 1704               		.loc 1 356 0
 1705 002c 8217      		cp r24,r18	 ;  31	*cmphi/3	[length = 2]
 1706 002e 9307      		cpc r25,r19
 1707 0030 01F4      		brne .L86	 ;  32	branch	[length = 1]
 356:bertos/net/afsk.c **** 			if (fifo_isempty(&af->tx_fifo) && af->trailer_len == 0)
 1708               		.loc 1 356 0 is_stmt 0 discriminator 1
 1709 0032 DF01      		movw r26,r30	 ;  345	*movhi/1	[length = 1]
 1710 0034 A652      		subi r26,lo8(-(218))	 ;  34	*addhi3/4	[length = 2]
 1711 0036 BF4F      		sbci r27,hi8(-(218))
 1712 0038 8D91      		ld r24,X+	 ;  35	*movhi/2	[length = 3]
 1713 003a 9C91      		ld r25,X
 1714 003c 1197      		sbiw r26,1
 1715 003e 0097      		sbiw r24,0	 ;  36	*cmphi/1	[length = 1]
 1716 0040 01F4      		brne .+2	 ;  37	branch	[length = 2]
 1717 0042 00C0      		rjmp .L110
 1718               	.L86:
 369:bertos/net/afsk.c **** 				if (!af->bit_stuff)
 1719               		.loc 1 369 0 is_stmt 1
 1720 0044 83A1      		ldd r24,Z+35	 ;  56	*movqi/4	[length = 1]
 1721 0046 8823      		tst r24	 ;  57	*cmpqi/1	[length = 1]
 1722 0048 01F4      		brne .L88	 ;  58	branch	[length = 1]
 370:bertos/net/afsk.c **** 					af->stuff_cnt = 0;
 1723               		.loc 1 370 0
 1724 004a 14A2      		std Z+36,__zero_reg__	 ;  60	*movqi/3	[length = 1]
 1725               	.L88:
 372:bertos/net/afsk.c **** 				af->bit_stuff = true;
 1726               		.loc 1 372 0
 1727 004c 81E0      		ldi r24,lo8(1)	 ;  63	*movqi/2	[length = 1]
 1728 004e 83A3      		std Z+35,r24	 ;  64	*movqi/3	[length = 1]
 377:bertos/net/afsk.c **** 				if (af->preamble_len == 0)
 1729               		.loc 1 377 0
 1730 0050 DF01      		movw r26,r30	 ;  346	*movhi/1	[length = 1]
 1731 0052 A852      		subi r26,lo8(-(216))	 ;  65	*addhi3/4	[length = 2]
 1732 0054 BF4F      		sbci r27,hi8(-(216))
 1733 0056 8D91      		ld r24,X+	 ;  66	*movhi/2	[length = 3]
 1734 0058 9C91      		ld r25,X
 1735 005a 1197      		sbiw r26,1
 1736 005c 0097      		sbiw r24,0	 ;  67	*cmphi/1	[length = 1]
 1737 005e 01F4      		brne .L89	 ;  68	branch	[length = 1]
 1738               	.LVL89:
 1739               	.LBB236:
 1740               	.LBB237:
 105:bertos/struct/fifobuf.h **** 	return fb->head == fb->tail;
 1741               		.loc 4 105 0
 1742 0060 DF01      		movw r26,r30	 ;  347	*movhi/1	[length = 1]
 1743 0062 A258      		subi r26,lo8(-(126))	 ;  72	*addhi3/4	[length = 2]
 1744 0064 BF4F      		sbci r27,hi8(-(126))
 1745 0066 2D91      		ld r18,X+	 ;  73	*movhi/2	[length = 3]
 1746 0068 3C91      		ld r19,X
 1747 006a 1197      		sbiw r26,1
 1748 006c 1296      		adiw r26,2	 ;  75	*movhi/2	[length = 4]
 1749 006e 8D91      		ld r24,X+
 1750 0070 9C91      		ld r25,X
 1751 0072 1397      		sbiw r26,2+1
 1752               	.LBE237:
 1753               	.LBE236:
 379:bertos/net/afsk.c **** 					if (fifo_isempty(&af->tx_fifo))
 1754               		.loc 1 379 0
 1755 0074 2817      		cp r18,r24	 ;  76	*cmphi/3	[length = 2]
 1756 0076 3907      		cpc r19,r25
 1757 0078 01F4      		brne .L90	 ;  77	branch	[length = 1]
 381:bertos/net/afsk.c **** 						af->trailer_len--;
 1758               		.loc 1 381 0
 1759 007a DF01      		movw r26,r30	 ;  348	*movhi/1	[length = 1]
 1760 007c A652      		subi r26,lo8(-(218))	 ;  79	*addhi3/4	[length = 2]
 1761 007e BF4F      		sbci r27,hi8(-(218))
 1762 0080 8D91      		ld r24,X+	 ;  81	*movhi/2	[length = 3]
 1763 0082 9C91      		ld r25,X
 1764 0084 1197      		sbiw r26,1
 1765 0086 00C0      		rjmp .L89	 ;  373	jump	[length = 1]
 1766               	.L90:
 1767               	.LVL90:
 1768               	.LBB238:
 1769               	.LBB239:
 181:bertos/struct/fifobuf.h **** 	if (UNLIKELY(fb->head == fb->end))
 1770               		.loc 4 181 0
 1771 0088 CD91      		ld r28,X+	 ;  93	*movhi/2	[length = 3]
 1772 008a DC91      		ld r29,X
 1773 008c 1197      		sbiw r26,1
 1774 008e 1696      		adiw r26,6	 ;  95	*movhi/2	[length = 4]
 1775 0090 8D91      		ld r24,X+
 1776 0092 9C91      		ld r25,X
 1777 0094 1797      		sbiw r26,6+1
 1778 0096 C817      		cp r28,r24	 ;  96	*cmphi/3	[length = 2]
 1779 0098 D907      		cpc r29,r25
 1780 009a 01F4      		brne .L92	 ;  97	branch	[length = 1]
 184:bertos/struct/fifobuf.h **** 		fb->head = fb->begin;
 1781               		.loc 4 184 0
 1782 009c 1496      		adiw r26,4	 ;  100	*movhi/2	[length = 4]
 1783 009e 8D91      		ld r24,X+
 1784 00a0 9C91      		ld r25,X
 1785 00a2 1597      		sbiw r26,4+1
 1786 00a4 1196      		adiw r26,1	 ;  102	*movhi/3	[length = 3]
 1787 00a6 9C93      		st X,r25
 1788 00a8 8E93      		st -X,r24
 185:bertos/struct/fifobuf.h **** 		return *(fb->end);
 1789               		.loc 4 185 0
 1790 00aa 8881      		ld r24,Y	 ;  103	*movqi/4	[length = 1]
 1791 00ac 00C0      		rjmp .L109	 ;  375	jump	[length = 1]
 1792               	.L92:
 189:bertos/struct/fifobuf.h **** 		return *(fb->head++);
 1793               		.loc 4 189 0
 1794 00ae CD91      		ld r28,X+	 ;  109	*movhi/2	[length = 3]
 1795 00b0 DC91      		ld r29,X
 1796 00b2 1197      		sbiw r26,1
 1797 00b4 8991      		ld r24,Y+	 ;  110	*movqi/4	[length = 1]
 1798 00b6 1196      		adiw r26,1	 ;  113	*movhi/3	[length = 3]
 1799 00b8 DC93      		st X,r29
 1800 00ba CE93      		st -X,r28
 1801 00bc 00C0      		rjmp .L109	 ;  377	jump	[length = 1]
 1802               	.LVL91:
 1803               	.L89:
 1804               	.LBE239:
 1805               	.LBE238:
 389:bertos/net/afsk.c **** 					af->preamble_len--;
 1806               		.loc 1 389 0
 1807 00be 0197      		sbiw r24,1	 ;  122	*addhi3/3	[length = 1]
 1808 00c0 1196      		adiw r26,1	 ;  123	*movhi/3	[length = 3]
 1809 00c2 9C93      		st X,r25
 1810 00c4 8E93      		st -X,r24
 390:bertos/net/afsk.c **** 					af->curr_out = HDLC_FLAG;
 1811               		.loc 1 390 0
 1812 00c6 8EE7      		ldi r24,lo8(126)	 ;  124	*movqi/2	[length = 1]
 1813               	.L109:
 1814 00c8 81A3      		std Z+33,r24	 ;  125	*movqi/3	[length = 1]
 394:bertos/net/afsk.c **** 				if (af->curr_out == AX25_ESC)
 1815               		.loc 1 394 0
 1816 00ca 81A1      		ldd r24,Z+33	 ;  128	*movqi/4	[length = 1]
 1817 00cc 8B31      		cpi r24,lo8(27)	 ;  129	*cmpqi/3	[length = 1]
 1818 00ce 01F4      		brne .L94	 ;  130	branch	[length = 1]
 1819               	.LVL92:
 1820               	.LBB240:
 1821               	.LBB241:
 105:bertos/struct/fifobuf.h **** 	return fb->head == fb->tail;
 1822               		.loc 4 105 0
 1823 00d0 DF01      		movw r26,r30	 ;  349	*movhi/1	[length = 1]
 1824 00d2 A258      		subi r26,lo8(-(126))	 ;  134	*addhi3/4	[length = 2]
 1825 00d4 BF4F      		sbci r27,hi8(-(126))
 1826 00d6 2D91      		ld r18,X+	 ;  135	*movhi/2	[length = 3]
 1827 00d8 3C91      		ld r19,X
 1828 00da 1197      		sbiw r26,1
 1829 00dc 1296      		adiw r26,2	 ;  137	*movhi/2	[length = 4]
 1830 00de 8D91      		ld r24,X+
 1831 00e0 9C91      		ld r25,X
 1832 00e2 1397      		sbiw r26,2+1
 1833               	.LBE241:
 1834               	.LBE240:
 396:bertos/net/afsk.c **** 					if (fifo_isempty(&af->tx_fifo))
 1835               		.loc 1 396 0
 1836 00e4 2817      		cp r18,r24	 ;  138	*cmphi/3	[length = 2]
 1837 00e6 3907      		cpc r19,r25
 1838 00e8 01F4      		brne .L95	 ;  139	branch	[length = 1]
 1839               	.LVL93:
 1840               	.L110:
 1841               	.LBB242:
 398:bertos/net/afsk.c **** 						AFSK_DAC_IRQ_STOP(af->dac_ch);
 1842               		.loc 1 398 0
 1843 00ea 2B98      		cbi 37-32,3	 ;  145	*cbi	[length = 1]
 1844 00ec 1092 0000 		sts hw_afsk_dac_isr,__zero_reg__	 ;  146	*movqi/3	[length = 2]
 1845               	.LBE242:
 399:bertos/net/afsk.c **** 						af->sending = false;
 1846               		.loc 1 399 0
 1847 00f0 EF52      		subi r30,lo8(-(209))	 ;  147	*addhi3/4	[length = 2]
 1848 00f2 FF4F      		sbci r31,hi8(-(209))
 1849               	.LVL94:
 1850 00f4 1082      		st Z,__zero_reg__	 ;  148	*movqi/3	[length = 1]
 400:bertos/net/afsk.c **** 						AFSK_STROBE_OFF();
 1851               		.loc 1 400 0
 1852 00f6 2D98      		cbi 37-32,5	 ;  153	*cbi	[length = 1]
 401:bertos/net/afsk.c **** 						return 0;
 1853               		.loc 1 401 0
 1854 00f8 80E0      		ldi r24,lo8(0)	 ;  9	*movqi/2	[length = 1]
 1855 00fa 00C0      		rjmp .L87	 ;  379	jump	[length = 1]
 1856               	.LVL95:
 1857               	.L95:
 1858               	.LBB243:
 1859               	.LBB244:
 181:bertos/struct/fifobuf.h **** 	if (UNLIKELY(fb->head == fb->end))
 1860               		.loc 4 181 0
 1861 00fc CD91      		ld r28,X+	 ;  161	*movhi/2	[length = 3]
 1862 00fe DC91      		ld r29,X
 1863 0100 1197      		sbiw r26,1
 1864 0102 1696      		adiw r26,6	 ;  163	*movhi/2	[length = 4]
 1865 0104 8D91      		ld r24,X+
 1866 0106 9C91      		ld r25,X
 1867 0108 1797      		sbiw r26,6+1
 1868 010a C817      		cp r28,r24	 ;  164	*cmphi/3	[length = 2]
 1869 010c D907      		cpc r29,r25
 1870 010e 01F4      		brne .L96	 ;  165	branch	[length = 1]
 184:bertos/struct/fifobuf.h **** 		fb->head = fb->begin;
 1871               		.loc 4 184 0
 1872 0110 1496      		adiw r26,4	 ;  168	*movhi/2	[length = 4]
 1873 0112 8D91      		ld r24,X+
 1874 0114 9C91      		ld r25,X
 1875 0116 1597      		sbiw r26,4+1
 1876 0118 1196      		adiw r26,1	 ;  170	*movhi/3	[length = 3]
 1877 011a 9C93      		st X,r25
 1878 011c 8E93      		st -X,r24
 185:bertos/struct/fifobuf.h **** 		return *(fb->end);
 1879               		.loc 4 185 0
 1880 011e 8881      		ld r24,Y	 ;  171	*movqi/4	[length = 1]
 1881 0120 00C0      		rjmp .L97	 ;  381	jump	[length = 1]
 1882               	.L96:
 189:bertos/struct/fifobuf.h **** 		return *(fb->head++);
 1883               		.loc 4 189 0
 1884 0122 CD91      		ld r28,X+	 ;  177	*movhi/2	[length = 3]
 1885 0124 DC91      		ld r29,X
 1886 0126 1197      		sbiw r26,1
 1887 0128 8991      		ld r24,Y+	 ;  178	*movqi/4	[length = 1]
 1888 012a 1196      		adiw r26,1	 ;  181	*movhi/3	[length = 3]
 1889 012c DC93      		st X,r29
 1890 012e CE93      		st -X,r28
 1891               	.L97:
 1892               	.LBE244:
 1893               	.LBE243:
 404:bertos/net/afsk.c **** 						af->curr_out = fifo_pop(&af->tx_fifo);
 1894               		.loc 1 404 0
 1895 0130 81A3      		std Z+33,r24	 ;  184	*movqi/3	[length = 1]
 1896 0132 00C0      		rjmp .L98	 ;  383	jump	[length = 1]
 1897               	.LVL96:
 1898               	.L94:
 406:bertos/net/afsk.c **** 				else if (af->curr_out == HDLC_FLAG || af->curr_out == HDLC_RESET)
 1899               		.loc 1 406 0
 1900 0134 8E57      		subi r24,lo8(-(-126))	 ;  189	addqi3/2	[length = 1]
 1901 0136 8230      		cpi r24,lo8(2)	 ;  190	*cmpqi/3	[length = 1]
 1902 0138 00F4      		brsh .L98	 ;  191	branch	[length = 1]
 408:bertos/net/afsk.c **** 					af->bit_stuff = false;
 1903               		.loc 1 408 0
 1904 013a 13A2      		std Z+35,__zero_reg__	 ;  193	*movqi/3	[length = 1]
 1905               	.L98:
 411:bertos/net/afsk.c **** 			af->tx_bit = 0x01;
 1906               		.loc 1 411 0
 1907 013c 81E0      		ldi r24,lo8(1)	 ;  196	*movqi/2	[length = 1]
 1908 013e 82A3      		std Z+34,r24	 ;  197	*movqi/3	[length = 1]
 1909               	.LVL97:
 1910               	.L85:
 415:bertos/net/afsk.c **** 		if (af->bit_stuff && af->stuff_cnt >= BIT_STUFF_LEN)
 1911               		.loc 1 415 0
 1912 0140 83A1      		ldd r24,Z+35	 ;  200	*movqi/4	[length = 1]
 1913 0142 8823      		tst r24	 ;  201	*cmpqi/1	[length = 1]
 1914 0144 01F0      		breq .L99	 ;  202	branch	[length = 1]
 415:bertos/net/afsk.c **** 		if (af->bit_stuff && af->stuff_cnt >= BIT_STUFF_LEN)
 1915               		.loc 1 415 0 is_stmt 0 discriminator 1
 1916 0146 84A1      		ldd r24,Z+36	 ;  204	*movqi/4	[length = 1]
 1917 0148 8530      		cpi r24,lo8(5)	 ;  205	*cmpqi/3	[length = 1]
 1918 014a 00F0      		brlo .L99	 ;  206	branch	[length = 1]
 418:bertos/net/afsk.c **** 			af->stuff_cnt = 0;
 1919               		.loc 1 418 0 is_stmt 1
 1920 014c 14A2      		std Z+36,__zero_reg__	 ;  208	*movqi/3	[length = 1]
 420:bertos/net/afsk.c **** 			af->phase_inc = SWITCH_TONE(af->phase_inc);
 1921               		.loc 1 420 0
 1922 014e 87A1      		ldd r24,Z+39	 ;  209	*movhi/2	[length = 2]
 1923 0150 90A5      		ldd r25,Z+40
 1924 0152 8034      		cpi r24,64	 ;  210	*cmphi/4	[length = 2]
 1925 0154 9105      		cpc r25,__zero_reg__
 1926 0156 01F4      		brne .L107	 ;  211	branch	[length = 1]
 1927 0158 85E7      		ldi r24,lo8(117)	 ;  4	*movhi/4	[length = 2]
 1928 015a 90E0      		ldi r25,hi8(117)
 1929 015c 00C0      		rjmp .L100	 ;  385	jump	[length = 1]
 1930               	.L107:
 1931 015e 80E4      		ldi r24,lo8(64)	 ;  5	*movhi/4	[length = 2]
 1932 0160 90E0      		ldi r25,hi8(64)
 1933               	.L100:
 420:bertos/net/afsk.c **** 			af->phase_inc = SWITCH_TONE(af->phase_inc);
 1934               		.loc 1 420 0 is_stmt 0 discriminator 3
 1935 0162 90A7      		std Z+40,r25	 ;  215	*movhi/3	[length = 2]
 1936 0164 87A3      		std Z+39,r24
 1937 0166 00C0      		rjmp .L101	 ;  387	jump	[length = 1]
 1938               	.L99:
 428:bertos/net/afsk.c **** 			if (af->curr_out & af->tx_bit)
 1939               		.loc 1 428 0 is_stmt 1
 1940 0168 22A1      		ldd r18,Z+34	 ;  220	*movqi/4	[length = 1]
 1941 016a 81A1      		ldd r24,Z+33	 ;  221	*movqi/4	[length = 1]
 1942 016c 8223      		and r24,r18	 ;  222	andqi3/1	[length = 1]
 1943 016e 01F0      		breq .L102	 ;  224	branch	[length = 1]
 435:bertos/net/afsk.c **** 				af->stuff_cnt++;
 1944               		.loc 1 435 0
 1945 0170 84A1      		ldd r24,Z+36	 ;  226	*movqi/4	[length = 1]
 1946 0172 8F5F      		subi r24,lo8(-(1))	 ;  227	addqi3/2	[length = 1]
 1947 0174 84A3      		std Z+36,r24	 ;  228	*movqi/3	[length = 1]
 1948 0176 00C0      		rjmp .L103	 ;  389	jump	[length = 1]
 1949               	.L102:
 444:bertos/net/afsk.c **** 				af->stuff_cnt = 0;
 1950               		.loc 1 444 0
 1951 0178 14A2      		std Z+36,__zero_reg__	 ;  233	*movqi/3	[length = 1]
 445:bertos/net/afsk.c **** 				af->phase_inc = SWITCH_TONE(af->phase_inc);
 1952               		.loc 1 445 0
 1953 017a 87A1      		ldd r24,Z+39	 ;  234	*movhi/2	[length = 2]
 1954 017c 90A5      		ldd r25,Z+40
 1955 017e 8034      		cpi r24,64	 ;  235	*cmphi/4	[length = 2]
 1956 0180 9105      		cpc r25,__zero_reg__
 1957 0182 01F4      		brne .L108	 ;  236	branch	[length = 1]
 1958 0184 85E7      		ldi r24,lo8(117)	 ;  6	*movhi/4	[length = 2]
 1959 0186 90E0      		ldi r25,hi8(117)
 1960 0188 00C0      		rjmp .L104	 ;  391	jump	[length = 1]
 1961               	.L108:
 1962 018a 80E4      		ldi r24,lo8(64)	 ;  7	*movhi/4	[length = 2]
 1963 018c 90E0      		ldi r25,hi8(64)
 1964               	.L104:
 445:bertos/net/afsk.c **** 				af->phase_inc = SWITCH_TONE(af->phase_inc);
 1965               		.loc 1 445 0 is_stmt 0 discriminator 3
 1966 018e 90A7      		std Z+40,r25	 ;  240	*movhi/3	[length = 2]
 1967 0190 87A3      		std Z+39,r24
 1968               	.L103:
 449:bertos/net/afsk.c **** 			af->tx_bit <<= 1;
 1969               		.loc 1 449 0 is_stmt 1
 1970 0192 220F      		lsl r18	 ;  243	*ashlqi3/3	[length = 1]
 1971 0194 22A3      		std Z+34,r18	 ;  244	*movqi/3	[length = 1]
 1972               	.L101:
 451:bertos/net/afsk.c **** 		af->sample_count = DAC_SAMPLEPERBIT;
 1973               		.loc 1 451 0
 1974 0196 88E0      		ldi r24,lo8(8)	 ;  247	*movqi/2	[length = 1]
 1975 0198 80A3      		std Z+32,r24	 ;  248	*movqi/3	[length = 1]
 1976               	.L84:
 455:bertos/net/afsk.c **** 	af->phase_acc += af->phase_inc;
 1977               		.loc 1 455 0
 1978 019a 87A1      		ldd r24,Z+39	 ;  251	*movhi/2	[length = 2]
 1979 019c 90A5      		ldd r25,Z+40
 1980 019e 25A1      		ldd r18,Z+37	 ;  252	*movhi/2	[length = 2]
 1981 01a0 36A1      		ldd r19,Z+38
 1982 01a2 820F      		add r24,r18	 ;  253	*addhi3/1	[length = 2]
 1983 01a4 931F      		adc r25,r19
 456:bertos/net/afsk.c **** 	af->phase_acc %= SIN_LEN;
 1984               		.loc 1 456 0
 1985 01a6 9170      		andi r25,hi8(511)	 ;  254	andhi3/2	[length = 2]
 1986 01a8 96A3      		std Z+38,r25	 ;  255	*movhi/3	[length = 2]
 1987 01aa 85A3      		std Z+37,r24
 458:bertos/net/afsk.c **** 	af->sample_count--;
 1988               		.loc 1 458 0
 1989 01ac 80A1      		ldd r24,Z+32	 ;  256	*movqi/4	[length = 1]
 1990 01ae 8150      		subi r24,lo8(-(-1))	 ;  257	addqi3/2	[length = 1]
 1991 01b0 80A3      		std Z+32,r24	 ;  258	*movqi/3	[length = 1]
 459:bertos/net/afsk.c **** 	AFSK_STROBE_OFF();
 1992               		.loc 1 459 0
 1993 01b2 2D98      		cbi 37-32,5	 ;  263	*cbi	[length = 1]
 460:bertos/net/afsk.c **** 	return sin_sample(af->phase_acc);
 1994               		.loc 1 460 0
 1995 01b4 C5A1      		ldd r28,Z+37	 ;  264	*movhi/2	[length = 2]
 1996 01b6 D6A1      		ldd r29,Z+38
 1997               	.LVL98:
 1998               	.LBB245:
 1999               	.LBB246:
 104:bertos/net/afsk.c **** 	ASSERT(idx < SIN_LEN);
 2000               		.loc 1 104 0
 2001 01b8 22E0      		ldi r18,hi8(512)	 ;  266	*cmphi/5	[length = 3]
 2002 01ba C030      		cpi r28,lo8(512)
 2003 01bc D207      		cpc r29,r18
 2004 01be 00F0      		brlo .L105	 ;  267	branch	[length = 1]
 2005 01c0 80E0      		ldi r24,lo8(__c.1991)	 ;  272	*movhi/4	[length = 2]
 2006 01c2 90E0      		ldi r25,hi8(__c.1991)
 2007 01c4 60E0      		ldi r22,lo8(__c.1993)	 ;  273	*movhi/4	[length = 2]
 2008 01c6 70E0      		ldi r23,hi8(__c.1993)
 2009 01c8 48E6      		ldi r20,lo8(104)	 ;  274	*movhi/4	[length = 2]
 2010 01ca 50E0      		ldi r21,hi8(104)
 2011 01cc 0E94 0000 		call __bassert_P	 ;  275	call_value_insn/3	[length = 2]
 2012               	.LVL99:
 2013               	.L105:
 105:bertos/net/afsk.c **** 	uint16_t new_idx = idx % (SIN_LEN / 2);
 2014               		.loc 1 105 0
 2015 01d0 FE01      		movw r30,r28	 ;  350	*movhi/1	[length = 1]
 2016 01d2 F070      		andi r31,hi8(255)	 ;  278	andhi3/2	[length = 2]
 2017               	.LVL100:
 106:bertos/net/afsk.c **** 	new_idx = (new_idx >= (SIN_LEN / 4)) ? (SIN_LEN / 2 - new_idx - 1) : new_idx;
 2018               		.loc 1 106 0
 2019 01d4 E038      		cpi r30,128	 ;  280	*cmphi/4	[length = 2]
 2020 01d6 F105      		cpc r31,__zero_reg__
 2021 01d8 00F0      		brlo .L106	 ;  281	branch	[length = 1]
 2022 01da 8FEF      		ldi r24,lo8(255)	 ;  283	*movhi/4	[length = 2]
 2023 01dc 90E0      		ldi r25,hi8(255)
 2024 01de 9C01      		movw r18,r24	 ;  351	*movhi/1	[length = 1]
 2025 01e0 2E1B      		sub r18,r30	 ;  284	subhi3/1	[length = 2]
 2026 01e2 3F0B      		sbc r19,r31
 2027 01e4 F901      		movw r30,r18	 ;  352	*movhi/1	[length = 1]
 2028               	.LVL101:
 2029               	.L106:
 2030               	.LBB247:
 109:bertos/net/afsk.c **** 		uint8_t data = pgm_read_char(&sin_table[new_idx]);
 2031               		.loc 1 109 0
 2032 01e6 E050      		subi r30,lo8(-(sin_table))	 ;  289	*addhi3/4	[length = 2]
 2033 01e8 F040      		sbci r31,hi8(-(sin_table))
 2034               	.LVL102:
 2035               	/* #APP */
 2036               	 ;  109 "bertos/net/afsk.c" 1
 2037 01ea 8491      		lpm r24, Z
 2038               		
 2039               	 ;  0 "" 2
 2040               	.LVL103:
 2041               	/* #NOAPP */
 2042               	.LBE247:
 114:bertos/net/afsk.c **** 	return (idx >= (SIN_LEN / 2)) ? (255 - data) : data;
 2043               		.loc 1 114 0
 2044 01ec CF3F      		cpi r28,255	 ;  294	*cmphi/4	[length = 2]
 2045 01ee D105      		cpc r29,__zero_reg__
 2046 01f0 01F0      		breq .L87	 ;  295	difficult_branch	[length = 2]
 2047 01f2 00F0      		brlo .L87
 2048 01f4 8095      		com r24	 ;  297	one_cmplqi2	[length = 1]
 2049               	.LVL104:
 2050               	.L87:
 2051               	/* epilogue start */
 2052               	.LBE246:
 2053               	.LBE245:
 461:bertos/net/afsk.c **** }
 2054               		.loc 1 461 0
 2055 01f6 DF91      		pop r29	 ;  357	popqi	[length = 1]
 2056 01f8 CF91      		pop r28	 ;  358	popqi	[length = 1]
 2057 01fa 0895      		ret	 ;  359	return_from_epilogue	[length = 1]
 2058               		.cfi_endproc
 2059               	.LFE51:
 2061               		.section	.text.afsk_init,"ax",@progbits
 2062               	.global	afsk_init
 2064               	afsk_init:
 2065               	.LFB57:
 533:bertos/net/afsk.c **** 
 534:bertos/net/afsk.c **** 
 535:bertos/net/afsk.c **** /**
 536:bertos/net/afsk.c ****  * Initialize an AFSK1200 modem.
 537:bertos/net/afsk.c ****  * \param af Afsk context to operate on.
 538:bertos/net/afsk.c ****  * \param adc_ch  ADC channel used by the demodulator.
 539:bertos/net/afsk.c ****  * \param dac_ch  DAC channel used by the modulator.
 540:bertos/net/afsk.c ****  */
 541:bertos/net/afsk.c **** void afsk_init(Afsk *af, int adc_ch, int dac_ch)
 542:bertos/net/afsk.c **** {
 2066               		.loc 1 542 0
 2067               		.cfi_startproc
 2068               	.LVL105:
 2069 0000 EF92      		push r14	 ;  143	*pushqi/1	[length = 1]
 2070               	.LCFI36:
 2071               		.cfi_def_cfa_offset 3
 2072               		.cfi_offset 14, -2
 2073 0002 FF92      		push r15	 ;  144	*pushqi/1	[length = 1]
 2074               	.LCFI37:
 2075               		.cfi_def_cfa_offset 4
 2076               		.cfi_offset 15, -3
 2077 0004 0F93      		push r16	 ;  145	*pushqi/1	[length = 1]
 2078               	.LCFI38:
 2079               		.cfi_def_cfa_offset 5
 2080               		.cfi_offset 16, -4
 2081 0006 1F93      		push r17	 ;  146	*pushqi/1	[length = 1]
 2082               	.LCFI39:
 2083               		.cfi_def_cfa_offset 6
 2084               		.cfi_offset 17, -5
 2085 0008 CF93      		push r28	 ;  147	*pushqi/1	[length = 1]
 2086               	.LCFI40:
 2087               		.cfi_def_cfa_offset 7
 2088               		.cfi_offset 28, -6
 2089 000a DF93      		push r29	 ;  148	*pushqi/1	[length = 1]
 2090               	.LCFI41:
 2091               		.cfi_def_cfa_offset 8
 2092               		.cfi_offset 29, -7
 2093               	/* prologue: function */
 2094               	/* frame size = 0 */
 2095               	/* stack size = 6 */
 2096               	.L__stack_usage = 6
 2097 000c EC01      		movw r28,r24	 ;  2	*movhi/1	[length = 1]
 2098 000e 7B01      		movw r14,r22	 ;  3	*movhi/1	[length = 1]
 2099 0010 8A01      		movw r16,r20	 ;  4	*movhi/1	[length = 1]
 2100               	.LBB248:
 543:bertos/net/afsk.c **** 	#if CONFIG_AFSK_RXTIMEOUT != -1
 544:bertos/net/afsk.c **** 	MOD_CHECK(timer);
 2101               		.loc 1 544 0
 2102 0012 8091 0000 		lds r24,timer_initialized	 ;  9	*movqi/4	[length = 2]
 2103               	.LVL106:
 2104 0016 8823      		tst r24	 ;  10	*cmpqi/1	[length = 1]
 2105 0018 01F4      		brne .L112	 ;  11	branch	[length = 1]
 2106               	.LVL107:
 2107               		.loc 1 544 0 is_stmt 0 discriminator 1
 2108 001a 80E0      		ldi r24,lo8(__c.2080)	 ;  16	*movhi/4	[length = 2]
 2109 001c 90E0      		ldi r25,hi8(__c.2080)
 2110 001e 60E0      		ldi r22,lo8(__c.2082)	 ;  17	*movhi/4	[length = 2]
 2111 0020 70E0      		ldi r23,hi8(__c.2082)
 2112 0022 40E2      		ldi r20,lo8(544)	 ;  18	*movhi/4	[length = 2]
 2113 0024 52E0      		ldi r21,hi8(544)
 2114 0026 0E94 0000 		call __bassert_P	 ;  19	call_value_insn/3	[length = 2]
 2115               	.L112:
 2116               	.LBE248:
 545:bertos/net/afsk.c **** 	#endif
 546:bertos/net/afsk.c **** 	memset(af, 0, sizeof(*af));
 2117               		.loc 1 546 0 is_stmt 1
 2118 002a 8CED      		ldi r24,lo8(-36)	 ;  22	*movqi/2	[length = 1]
 2119 002c FE01      		movw r30,r28	 ;  135	*movhi/1	[length = 1]
 2120 002e 1192      		st Z+,__zero_reg__	 ;  24	*clrmemqi	[length = 3]
 2121 0030 8A95      	        dec r24
 2122 0032 01F4      		brne .-6
 547:bertos/net/afsk.c **** 	af->adc_ch = adc_ch;
 2123               		.loc 1 547 0
 2124 0034 FD8E      		std Y+29,r15	 ;  25	*movhi/3	[length = 2]
 2125 0036 EC8E      		std Y+28,r14
 548:bertos/net/afsk.c **** 	af->dac_ch = dac_ch;
 2126               		.loc 1 548 0
 2127 0038 1F8F      		std Y+31,r17	 ;  26	*movhi/3	[length = 2]
 2128 003a 0E8F      		std Y+30,r16
 549:bertos/net/afsk.c **** 
 550:bertos/net/afsk.c **** 	fifo_init(&af->delay_fifo, (uint8_t *)af->delay_buf, sizeof(af->delay_buf));
 2129               		.loc 1 550 0
 2130 003c CE01      		movw r24,r28	 ;  136	*movhi/1	[length = 1]
 2131 003e C196      		adiw r24,49	 ;  28	*addhi3/2	[length = 1]
 2132               	.LVL108:
 2133               	.LBB249:
 2134               	.LBB250:
 276:bertos/struct/fifobuf.h **** 	return result;
 277:bertos/struct/fifobuf.h **** }
 278:bertos/struct/fifobuf.h **** 
 279:bertos/struct/fifobuf.h **** 
 280:bertos/struct/fifobuf.h **** /**
 281:bertos/struct/fifobuf.h ****  * FIFO Initialization.
 282:bertos/struct/fifobuf.h ****  */
 283:bertos/struct/fifobuf.h **** INLINE void fifo_init(FIFOBuffer *fb, unsigned char *buf, size_t size)
 284:bertos/struct/fifobuf.h **** {
 285:bertos/struct/fifobuf.h **** 	/* FIFO buffers have a known bug with 1-byte buffers. */
 286:bertos/struct/fifobuf.h **** 	ASSERT(size > 1);
 287:bertos/struct/fifobuf.h **** 
 288:bertos/struct/fifobuf.h **** 	fb->head = fb->tail = fb->begin = buf;
 2135               		.loc 4 288 0
 2136 0040 9EA7      		std Y+46,r25	 ;  32	*movhi/3	[length = 2]
 2137 0042 8DA7      		std Y+45,r24
 2138 0044 9CA7      		std Y+44,r25	 ;  33	*movhi/3	[length = 2]
 2139 0046 8BA7      		std Y+43,r24
 2140 0048 9AA7      		std Y+42,r25	 ;  34	*movhi/3	[length = 2]
 2141 004a 89A7      		std Y+41,r24
 289:bertos/struct/fifobuf.h **** 	fb->end = buf + size - 1;
 2142               		.loc 4 289 0
 2143 004c CE01      		movw r24,r28	 ;  137	*movhi/1	[length = 1]
 2144               	.LVL109:
 2145 004e C596      		adiw r24,53	 ;  35	*addhi3/2	[length = 1]
 2146 0050 98AB      		std Y+48,r25	 ;  36	*movhi/3	[length = 2]
 2147 0052 8FA7      		std Y+47,r24
 2148               	.LBE250:
 2149               	.LBE249:
 551:bertos/net/afsk.c **** 	fifo_init(&af->rx_fifo, af->rx_buf, sizeof(af->rx_buf));
 2150               		.loc 1 551 0
 2151 0054 CE01      		movw r24,r28	 ;  138	*movhi/1	[length = 1]
 2152 0056 CE96      		adiw r24,62	 ;  38	*addhi3/2	[length = 1]
 2153               	.LVL110:
 2154               	.LBB251:
 2155               	.LBB252:
 288:bertos/struct/fifobuf.h **** 	fb->head = fb->tail = fb->begin = buf;
 2156               		.loc 4 288 0
 2157 0058 9BAF      		std Y+59,r25	 ;  42	*movhi/3	[length = 2]
 2158 005a 8AAF      		std Y+58,r24
 2159 005c 99AF      		std Y+57,r25	 ;  43	*movhi/3	[length = 2]
 2160 005e 88AF      		std Y+56,r24
 2161 0060 9FAB      		std Y+55,r25	 ;  44	*movhi/3	[length = 2]
 2162 0062 8EAB      		std Y+54,r24
 2163               		.loc 4 289 0
 2164 0064 CE01      		movw r24,r28	 ;  139	*movhi/1	[length = 1]
 2165               	.LVL111:
 2166 0066 8358      		subi r24,lo8(-(125))	 ;  45	*addhi3/4	[length = 2]
 2167 0068 9F4F      		sbci r25,hi8(-(125))
 2168 006a 9DAF      		std Y+61,r25	 ;  46	*movhi/3	[length = 2]
 2169 006c 8CAF      		std Y+60,r24
 2170               	.LVL112:
 2171 006e 44E0      		ldi r20,lo8(4)	 ;  6	*movhi/4	[length = 2]
 2172 0070 50E0      		ldi r21,hi8(4)
 2173               	.LVL113:
 2174               	.L115:
 2175               	.LBE252:
 2176               	.LBE251:
 2177               	.LBB253:
 2178               	.LBB254:
 2179               	.LBB255:
 153:bertos/struct/fifobuf.h **** 	*(fb->tail) = c;
 2180               		.loc 4 153 0 discriminator 2
 2181 0072 EBA5      		ldd r30,Y+43	 ;  53	*movhi/2	[length = 2]
 2182 0074 FCA5      		ldd r31,Y+44
 2183 0076 1082      		st Z,__zero_reg__	 ;  54	*movqi/3	[length = 1]
 155:bertos/struct/fifobuf.h **** 	if (UNLIKELY(fb->tail == fb->end))
 2184               		.loc 4 155 0 discriminator 2
 2185 0078 8BA5      		ldd r24,Y+43	 ;  55	*movhi/2	[length = 2]
 2186 007a 9CA5      		ldd r25,Y+44
 2187 007c 2FA5      		ldd r18,Y+47	 ;  56	*movhi/2	[length = 2]
 2188 007e 38A9      		ldd r19,Y+48
 2189 0080 8217      		cp r24,r18	 ;  57	*cmphi/3	[length = 2]
 2190 0082 9307      		cpc r25,r19
 2191 0084 01F4      		brne .L113	 ;  58	branch	[length = 1]
 157:bertos/struct/fifobuf.h **** 		fb->tail = fb->begin;
 2192               		.loc 4 157 0
 2193 0086 8DA5      		ldd r24,Y+45	 ;  60	*movhi/2	[length = 2]
 2194 0088 9EA5      		ldd r25,Y+46
 2195 008a 00C0      		rjmp .L117	 ;  164	jump	[length = 1]
 2196               	.L113:
 160:bertos/struct/fifobuf.h **** 		fb->tail++;
 2197               		.loc 4 160 0
 2198 008c 8BA5      		ldd r24,Y+43	 ;  66	*movhi/2	[length = 2]
 2199 008e 9CA5      		ldd r25,Y+44
 2200 0090 0196      		adiw r24,1	 ;  67	*addhi3/2	[length = 1]
 2201               	.L117:
 2202 0092 9CA7      		std Y+44,r25	 ;  68	*movhi/3	[length = 2]
 2203 0094 8BA7      		std Y+43,r24
 2204 0096 4150      		subi r20,lo8(-(-1))	 ;  73	*addhi3/4	[length = 2]
 2205 0098 5040      		sbci r21,hi8(-(-1))
 2206               	.LBE255:
 2207               	.LBE254:
 552:bertos/net/afsk.c **** 
 553:bertos/net/afsk.c **** 	/* Fill sample FIFO with 0 */
 554:bertos/net/afsk.c **** 	for (int i = 0; i < SAMPLEPERBIT / 2; i++)
 2208               		.loc 1 554 0
 2209 009a 01F4      		brne .L115	 ;  76	branch	[length = 1]
 2210               	.LBE253:
 555:bertos/net/afsk.c **** 		fifo_push(&af->delay_fifo, 0);
 556:bertos/net/afsk.c **** 
 557:bertos/net/afsk.c **** 	fifo_init(&af->tx_fifo, af->tx_buf, sizeof(af->tx_buf));
 2211               		.loc 1 557 0
 2212 009c CE01      		movw r24,r28	 ;  140	*movhi/1	[length = 1]
 2213 009e 8A57      		subi r24,lo8(-(134))	 ;  79	*addhi3/4	[length = 2]
 2214 00a0 9F4F      		sbci r25,hi8(-(134))
 2215               	.LVL114:
 2216               	.LBB256:
 2217               	.LBB257:
 288:bertos/struct/fifobuf.h **** 	fb->head = fb->tail = fb->begin = buf;
 2218               		.loc 4 288 0
 2219 00a2 FE01      		movw r30,r28	 ;  141	*movhi/1	[length = 1]
 2220 00a4 E258      		subi r30,lo8(-(126))	 ;  83	*addhi3/4	[length = 2]
 2221 00a6 FF4F      		sbci r31,hi8(-(126))
 2222 00a8 9583      		std Z+5,r25	 ;  84	*movhi/3	[length = 2]
 2223 00aa 8483      		std Z+4,r24
 2224 00ac 9383      		std Z+3,r25	 ;  86	*movhi/3	[length = 2]
 2225 00ae 8283      		std Z+2,r24
 2226 00b0 9183      		std Z+1,r25	 ;  88	*movhi/3	[length = 2]
 2227 00b2 8083      		st Z,r24
 2228               		.loc 4 289 0
 2229 00b4 CE01      		movw r24,r28	 ;  142	*movhi/1	[length = 1]
 2230               	.LVL115:
 2231 00b6 8B53      		subi r24,lo8(-(197))	 ;  90	*addhi3/4	[length = 2]
 2232 00b8 9F4F      		sbci r25,hi8(-(197))
 2233 00ba 9783      		std Z+7,r25	 ;  91	*movhi/3	[length = 2]
 2234 00bc 8683      		std Z+6,r24
 2235               	.LBE257:
 2236               	.LBE256:
 558:bertos/net/afsk.c **** 
 559:bertos/net/afsk.c **** 	AFSK_ADC_INIT(adc_ch, af);
 2237               		.loc 1 559 0
 2238 00be C701      		movw r24,r14	 ;  93	*movhi/1	[length = 1]
 2239 00c0 BE01      		movw r22,r28	 ;  94	*movhi/1	[length = 1]
 2240 00c2 0E94 0000 		call hw_afsk_adcInit	 ;  95	call_insn/3	[length = 2]
 2241               	.LVL116:
 560:bertos/net/afsk.c **** 	AFSK_DAC_INIT(dac_ch, af);
 2242               		.loc 1 560 0
 2243 00c6 8AB1      		in r24,42-32	 ;  97	*movqi/4	[length = 1]
 2244 00c8 806F      		ori r24,lo8(-16)	 ;  98	iorqi3/2	[length = 1]
 2245 00ca 8AB9      		out 42-32,r24	 ;  100	*movqi/3	[length = 1]
 2246 00cc 239A      		sbi 36-32,3	 ;  105	*sbi	[length = 1]
 561:bertos/net/afsk.c **** 	AFSK_STROBE_INIT();
 2247               		.loc 1 561 0
 2248 00ce 259A      		sbi 36-32,5	 ;  110	*sbi	[length = 1]
 2249               	.LVL117:
 562:bertos/net/afsk.c **** 	LOG_INFO("MARK_INC %d, SPACE_INC %d\n", MARK_INC, SPACE_INC);
 563:bertos/net/afsk.c **** 
 564:bertos/net/afsk.c **** 	DB(af->fd._type = KFT_AFSK);
 2250               		.loc 1 564 0
 2251 00d0 8BE4      		ldi r24,lo8(1095127883)	 ;  112	*movsi/5	[length = 4]
 2252 00d2 93E5      		ldi r25,hi8(1095127883)
 2253 00d4 A6E4      		ldi r26,hlo8(1095127883)
 2254 00d6 B1E4      		ldi r27,hhi8(1095127883)
 2255 00d8 888B      		std Y+16,r24	 ;  113	*movsi/4	[length = 4]
 2256 00da 998B      		std Y+17,r25
 2257 00dc AA8B      		std Y+18,r26
 2258 00de BB8B      		std Y+19,r27
 565:bertos/net/afsk.c **** 	af->fd.write = afsk_write;
 2259               		.loc 1 565 0
 2260 00e0 80E0      		ldi r24,lo8(gs(afsk_write))	 ;  114	*movhi/4	[length = 2]
 2261 00e2 90E0      		ldi r25,hi8(gs(afsk_write))
 2262 00e4 9B83      		std Y+3,r25	 ;  115	*movhi/3	[length = 2]
 2263 00e6 8A83      		std Y+2,r24
 566:bertos/net/afsk.c **** 	af->fd.read = afsk_read;
 2264               		.loc 1 566 0
 2265 00e8 80E0      		ldi r24,lo8(gs(afsk_read))	 ;  116	*movhi/4	[length = 2]
 2266 00ea 90E0      		ldi r25,hi8(gs(afsk_read))
 2267 00ec 9983      		std Y+1,r25	 ;  117	*movhi/3	[length = 2]
 2268 00ee 8883      		st Y,r24
 567:bertos/net/afsk.c **** 	af->fd.flush = afsk_flush;
 2269               		.loc 1 567 0
 2270 00f0 80E0      		ldi r24,lo8(gs(afsk_flush))	 ;  118	*movhi/4	[length = 2]
 2271 00f2 90E0      		ldi r25,hi8(gs(afsk_flush))
 2272 00f4 9B87      		std Y+11,r25	 ;  119	*movhi/3	[length = 2]
 2273 00f6 8A87      		std Y+10,r24
 568:bertos/net/afsk.c **** 	af->fd.error = afsk_error;
 2274               		.loc 1 568 0
 2275 00f8 80E0      		ldi r24,lo8(gs(afsk_error))	 ;  120	*movhi/4	[length = 2]
 2276 00fa 90E0      		ldi r25,hi8(gs(afsk_error))
 2277 00fc 9D87      		std Y+13,r25	 ;  121	*movhi/3	[length = 2]
 2278 00fe 8C87      		std Y+12,r24
 569:bertos/net/afsk.c **** 	af->fd.clearerr = afsk_clearerr;
 2279               		.loc 1 569 0
 2280 0100 80E0      		ldi r24,lo8(gs(afsk_clearerr))	 ;  122	*movhi/4	[length = 2]
 2281 0102 90E0      		ldi r25,hi8(gs(afsk_clearerr))
 2282 0104 9F87      		std Y+15,r25	 ;  123	*movhi/3	[length = 2]
 2283 0106 8E87      		std Y+14,r24
 570:bertos/net/afsk.c **** 	af->phase_inc = MARK_INC;
 2284               		.loc 1 570 0
 2285 0108 80E4      		ldi r24,lo8(64)	 ;  124	*movhi/4	[length = 2]
 2286 010a 90E0      		ldi r25,hi8(64)
 2287 010c 98A7      		std Y+40,r25	 ;  125	*movhi/3	[length = 2]
 2288 010e 8FA3      		std Y+39,r24
 2289               	/* epilogue start */
 571:bertos/net/afsk.c **** }
 2290               		.loc 1 571 0
 2291 0110 DF91      		pop r29	 ;  151	popqi	[length = 1]
 2292 0112 CF91      		pop r28	 ;  152	popqi	[length = 1]
 2293               	.LVL118:
 2294 0114 1F91      		pop r17	 ;  153	popqi	[length = 1]
 2295 0116 0F91      		pop r16	 ;  154	popqi	[length = 1]
 2296               	.LVL119:
 2297 0118 FF90      		pop r15	 ;  155	popqi	[length = 1]
 2298 011a EF90      		pop r14	 ;  156	popqi	[length = 1]
 2299               	.LVL120:
 2300 011c 0895      		ret	 ;  157	return_from_epilogue	[length = 1]
 2301               		.cfi_endproc
 2302               	.LFE57:
 2304               		.section	.progmem.data,"a",@progbits
 2307               	__c.1991:
 2308 0000 6964 7820 		.string	"idx < SIN_LEN"
 2308      3C20 5349 
 2308      4E5F 4C45 
 2308      4E00 
 2311               	__c.1993:
 2312 000e 6265 7274 		.string	"bertos/net/afsk.c"
 2312      6F73 2F6E 
 2312      6574 2F61 
 2312      6673 6B2E 
 2312      6300 
 2315               	sin_table:
 2316 0020 80        		.byte	-128
 2317 0021 81        		.byte	-127
 2318 0022 83        		.byte	-125
 2319 0023 84        		.byte	-124
 2320 0024 86        		.byte	-122
 2321 0025 87        		.byte	-121
 2322 0026 89        		.byte	-119
 2323 0027 8A        		.byte	-118
 2324 0028 8C        		.byte	-116
 2325 0029 8E        		.byte	-114
 2326 002a 8F        		.byte	-113
 2327 002b 91        		.byte	-111
 2328 002c 92        		.byte	-110
 2329 002d 94        		.byte	-108
 2330 002e 95        		.byte	-107
 2331 002f 97        		.byte	-105
 2332 0030 98        		.byte	-104
 2333 0031 9A        		.byte	-102
 2334 0032 9B        		.byte	-101
 2335 0033 9D        		.byte	-99
 2336 0034 9E        		.byte	-98
 2337 0035 A0        		.byte	-96
 2338 0036 A2        		.byte	-94
 2339 0037 A3        		.byte	-93
 2340 0038 A5        		.byte	-91
 2341 0039 A6        		.byte	-90
 2342 003a A7        		.byte	-89
 2343 003b A9        		.byte	-87
 2344 003c AA        		.byte	-86
 2345 003d AC        		.byte	-84
 2346 003e AD        		.byte	-83
 2347 003f AF        		.byte	-81
 2348 0040 B0        		.byte	-80
 2349 0041 B2        		.byte	-78
 2350 0042 B3        		.byte	-77
 2351 0043 B5        		.byte	-75
 2352 0044 B6        		.byte	-74
 2353 0045 B7        		.byte	-73
 2354 0046 B9        		.byte	-71
 2355 0047 BA        		.byte	-70
 2356 0048 BC        		.byte	-68
 2357 0049 BD        		.byte	-67
 2358 004a BE        		.byte	-66
 2359 004b C0        		.byte	-64
 2360 004c C1        		.byte	-63
 2361 004d C2        		.byte	-62
 2362 004e C4        		.byte	-60
 2363 004f C5        		.byte	-59
 2364 0050 C6        		.byte	-58
 2365 0051 C8        		.byte	-56
 2366 0052 C9        		.byte	-55
 2367 0053 CA        		.byte	-54
 2368 0054 CB        		.byte	-53
 2369 0055 CD        		.byte	-51
 2370 0056 CE        		.byte	-50
 2371 0057 CF        		.byte	-49
 2372 0058 D0        		.byte	-48
 2373 0059 D2        		.byte	-46
 2374 005a D3        		.byte	-45
 2375 005b D4        		.byte	-44
 2376 005c D5        		.byte	-43
 2377 005d D6        		.byte	-42
 2378 005e D7        		.byte	-41
 2379 005f D9        		.byte	-39
 2380 0060 DA        		.byte	-38
 2381 0061 DB        		.byte	-37
 2382 0062 DC        		.byte	-36
 2383 0063 DD        		.byte	-35
 2384 0064 DE        		.byte	-34
 2385 0065 DF        		.byte	-33
 2386 0066 E0        		.byte	-32
 2387 0067 E1        		.byte	-31
 2388 0068 E2        		.byte	-30
 2389 0069 E3        		.byte	-29
 2390 006a E4        		.byte	-28
 2391 006b E5        		.byte	-27
 2392 006c E6        		.byte	-26
 2393 006d E7        		.byte	-25
 2394 006e E8        		.byte	-24
 2395 006f E9        		.byte	-23
 2396 0070 EA        		.byte	-22
 2397 0071 EA        		.byte	-22
 2398 0072 EB        		.byte	-21
 2399 0073 EC        		.byte	-20
 2400 0074 ED        		.byte	-19
 2401 0075 EE        		.byte	-18
 2402 0076 EE        		.byte	-18
 2403 0077 EF        		.byte	-17
 2404 0078 F0        		.byte	-16
 2405 0079 F1        		.byte	-15
 2406 007a F1        		.byte	-15
 2407 007b F2        		.byte	-14
 2408 007c F3        		.byte	-13
 2409 007d F3        		.byte	-13
 2410 007e F4        		.byte	-12
 2411 007f F5        		.byte	-11
 2412 0080 F5        		.byte	-11
 2413 0081 F6        		.byte	-10
 2414 0082 F6        		.byte	-10
 2415 0083 F7        		.byte	-9
 2416 0084 F8        		.byte	-8
 2417 0085 F8        		.byte	-8
 2418 0086 F9        		.byte	-7
 2419 0087 F9        		.byte	-7
 2420 0088 FA        		.byte	-6
 2421 0089 FA        		.byte	-6
 2422 008a FA        		.byte	-6
 2423 008b FB        		.byte	-5
 2424 008c FB        		.byte	-5
 2425 008d FC        		.byte	-4
 2426 008e FC        		.byte	-4
 2427 008f FC        		.byte	-4
 2428 0090 FD        		.byte	-3
 2429 0091 FD        		.byte	-3
 2430 0092 FD        		.byte	-3
 2431 0093 FD        		.byte	-3
 2432 0094 FE        		.byte	-2
 2433 0095 FE        		.byte	-2
 2434 0096 FE        		.byte	-2
 2435 0097 FE        		.byte	-2
 2436 0098 FE        		.byte	-2
 2437 0099 FF        		.byte	-1
 2438 009a FF        		.byte	-1
 2439 009b FF        		.byte	-1
 2440 009c FF        		.byte	-1
 2441 009d FF        		.byte	-1
 2442 009e FF        		.byte	-1
 2443 009f FF        		.byte	-1
 2446               	__c.2080:
 2447 00a0 7469 6D65 		.string	"timer_initialized"
 2447      725F 696E 
 2447      6974 6961 
 2447      6C69 7A65 
 2447      6400 
 2450               	__c.2082:
 2451 00b2 6265 7274 		.string	"bertos/net/afsk.c"
 2451      6F73 2F6E 
 2451      6574 2F61 
 2451      6673 6B2E 
 2451      6300 
 2454               	__c.1673:
 2455 00c4 6664 2D3E 		.string	"fd->_type == KFT_AFSK"
 2455      5F74 7970 
 2455      6520 3D3D 
 2455      204B 4654 
 2455      5F41 4653 
 2458               	__c.1675:
 2459 00da 6265 7274 		.string	"bertos/net/afsk.h"
 2459      6F73 2F6E 
 2459      6574 2F61 
 2459      6673 6B2E 
 2459      6800 
 2460               		.text
 2461               	.Letext0:
 2462               		.file 5 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h"
 2463               		.file 6 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/include/stddef.h"
 2464               		.file 7 "bertos/cfg/compiler.h"
 2465               		.file 8 "bertos/cpu/types.h"
 2466               		.file 9 "bertos/cfg/macros.h"
 2467               		.file 10 "bertos/kern/kfile.h"
 2468               		.file 11 "bertos/struct/list.h"
 2469               		.file 12 "bertos/kern/proc.h"
 2470               		.file 13 "bertos/cfg/log.h"
 2471               		.file 14 "bertos/cpu/power.h"
DEFINED SYMBOLS
                            *ABS*:00000000 afsk.c
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:2      *ABS*:0000003f __SREG__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:3      *ABS*:0000003e __SP_H__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:4      *ABS*:0000003d __SP_L__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:5      *ABS*:00000034 __CCP__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:7      *ABS*:00000001 __zero_reg__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:15     .text.afsk_read:00000000 afsk_read
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:2454   .progmem.data:000000c4 __c.1673
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:2458   .progmem.data:000000da __c.1675
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:319    .text.afsk_write:00000000 afsk_write
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:728    .text.afsk_flush:00000000 afsk_flush
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:794    .text.afsk_error:00000000 afsk_error
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:870    .text.afsk_clearerr:00000000 afsk_clearerr
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:946    .text.afsk_adc_isr:00000000 afsk_adc_isr
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:1657   .text.afsk_dac_isr:00000000 afsk_dac_isr
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:2307   .progmem.data:00000000 __c.1991
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:2311   .progmem.data:0000000e __c.1993
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:2315   .progmem.data:00000020 sin_table
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:2064   .text.afsk_init:00000000 afsk_init
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:2446   .progmem.data:000000a0 __c.2080
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccZv7DHR.s:2450   .progmem.data:000000b2 __c.2082

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__bassert_P
_clock
hw_afsk_dac_isr
timer_initialized
hw_afsk_adcInit
