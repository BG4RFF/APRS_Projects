   1               		.file	"ax25.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text.ax25_putchar,"ax",@progbits
  15               	ax25_putchar:
  16               	.LFB12:
  17               		.file 1 "bertos/net/ax25.c"
   1:bertos/net/ax25.c **** /**
   2:bertos/net/ax25.c ****  * \file
   3:bertos/net/ax25.c ****  * <!--
   4:bertos/net/ax25.c ****  * This file is part of BeRTOS.
   5:bertos/net/ax25.c ****  *
   6:bertos/net/ax25.c ****  * Bertos is free software; you can redistribute it and/or modify
   7:bertos/net/ax25.c ****  * it under the terms of the GNU General Public License as published by
   8:bertos/net/ax25.c ****  * the Free Software Foundation; either version 2 of the License, or
   9:bertos/net/ax25.c ****  * (at your option) any later version.
  10:bertos/net/ax25.c ****  *
  11:bertos/net/ax25.c ****  * This program is distributed in the hope that it will be useful,
  12:bertos/net/ax25.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bertos/net/ax25.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bertos/net/ax25.c ****  * GNU General Public License for more details.
  15:bertos/net/ax25.c ****  *
  16:bertos/net/ax25.c ****  * You should have received a copy of the GNU General Public License
  17:bertos/net/ax25.c ****  * along with this program; if not, write to the Free Software
  18:bertos/net/ax25.c ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:bertos/net/ax25.c ****  *
  20:bertos/net/ax25.c ****  * As a special exception, you may use this file as part of a free software
  21:bertos/net/ax25.c ****  * library without restriction.  Specifically, if other files instantiate
  22:bertos/net/ax25.c ****  * templates or use macros or inline functions from this file, or you compile
  23:bertos/net/ax25.c ****  * this file and link it with other files to produce an executable, this
  24:bertos/net/ax25.c ****  * file does not by itself cause the resulting executable to be covered by
  25:bertos/net/ax25.c ****  * the GNU General Public License.  This exception does not however
  26:bertos/net/ax25.c ****  * invalidate any other reasons why the executable file might be covered by
  27:bertos/net/ax25.c ****  * the GNU General Public License.
  28:bertos/net/ax25.c ****  *
  29:bertos/net/ax25.c ****  * Copyright 2009 Develer S.r.l. (http://www.develer.com/)
  30:bertos/net/ax25.c ****  *
  31:bertos/net/ax25.c ****  * -->
  32:bertos/net/ax25.c ****  * \brief Simple AX25 data link layer implementation.
  33:bertos/net/ax25.c ****  *
  34:bertos/net/ax25.c ****  * For now, only UI frames without any Layer 3 protocol are handled.
  35:bertos/net/ax25.c ****  * This however is enough to send/receive APRS packets.
  36:bertos/net/ax25.c ****  *
  37:bertos/net/ax25.c ****  * \author Francesco Sacchi <batt@develer.com>
  38:bertos/net/ax25.c ****  *
  39:bertos/net/ax25.c ****  */
  40:bertos/net/ax25.c **** 
  41:bertos/net/ax25.c **** #include "ax25.h"
  42:bertos/net/ax25.c **** #include "cfg/cfg_ax25.h"
  43:bertos/net/ax25.c **** 
  44:bertos/net/ax25.c **** #include <algo/crc_ccitt.h>
  45:bertos/net/ax25.c **** 
  46:bertos/net/ax25.c **** #define LOG_LEVEL  AX25_LOG_LEVEL
  47:bertos/net/ax25.c **** #define LOG_FORMAT AX25_LOG_FORMAT
  48:bertos/net/ax25.c **** #include <cfg/log.h>
  49:bertos/net/ax25.c **** 
  50:bertos/net/ax25.c **** #include <string.h> //memset, memcmp
  51:bertos/net/ax25.c **** #include <ctype.h>  //isalnum, toupper
  52:bertos/net/ax25.c **** 
  53:bertos/net/ax25.c **** #define DECODE_CALL(buf, addr) \
  54:bertos/net/ax25.c **** 	for (unsigned i = 0; i < sizeof((addr)); i++) \
  55:bertos/net/ax25.c **** 	{ \
  56:bertos/net/ax25.c **** 		char c = (*(buf)++ >> 1); \
  57:bertos/net/ax25.c **** 		(addr)[i] = (c == ' ') ? '\x0' : c; \
  58:bertos/net/ax25.c **** 	}
  59:bertos/net/ax25.c **** 
  60:bertos/net/ax25.c **** static void ax25_decode(AX25Ctx *ctx)
  61:bertos/net/ax25.c **** {
  62:bertos/net/ax25.c **** 	AX25Msg msg;
  63:bertos/net/ax25.c **** 	uint8_t *buf = ctx->buf;
  64:bertos/net/ax25.c **** 
  65:bertos/net/ax25.c **** 	DECODE_CALL(buf, msg.dst.call);
  66:bertos/net/ax25.c **** 	msg.dst.ssid = (*buf++ >> 1) & 0x0F;
  67:bertos/net/ax25.c **** 
  68:bertos/net/ax25.c **** 	DECODE_CALL(buf, msg.src.call);
  69:bertos/net/ax25.c **** 	msg.src.ssid = (*buf >> 1) & 0x0F;
  70:bertos/net/ax25.c **** 
  71:bertos/net/ax25.c **** 	LOG_INFO("SRC[%.6s-%d], DST[%.6s-%d]\n", msg.src.call, msg.src.ssid, msg.dst.call, msg.dst.ssid);
  72:bertos/net/ax25.c **** 
  73:bertos/net/ax25.c **** 	/* Repeater addresses */
  74:bertos/net/ax25.c **** 	#if CONFIG_AX25_RPT_LST
  75:bertos/net/ax25.c **** 		for (msg.rpt_cnt = 0; !(*buf++ & 0x01) && (msg.rpt_cnt < countof(msg.rpt_lst)); msg.rpt_cnt++)
  76:bertos/net/ax25.c **** 		{
  77:bertos/net/ax25.c **** 			DECODE_CALL(buf, msg.rpt_lst[msg.rpt_cnt].call);
  78:bertos/net/ax25.c **** 			msg.rpt_lst[msg.rpt_cnt].ssid = (*buf >> 1) & 0x0F;
  79:bertos/net/ax25.c **** 
  80:bertos/net/ax25.c ****                         // 20101123 Robert Marshall KI4MCW
  81:bertos/net/ax25.c ****                         // high bit on SSID of digis indicates that this packet 
  82:bertos/net/ax25.c ****                         // has already passed that digi. save this to "rpt_used" flag
  83:bertos/net/ax25.c ****                         msg.rpt_used[msg.rpt_cnt] = (( *buf & 0x80 ) == 0x80 ) ? 1 : 0 ;
  84:bertos/net/ax25.c **** 
  85:bertos/net/ax25.c **** 		        LOG_INFO("RPT%d[%.6s-%d][used=%01d]\n", 
  86:bertos/net/ax25.c ****                              msg.rpt_cnt, 
  87:bertos/net/ax25.c ****                              msg.rpt_lst[msg.rpt_cnt].call,
  88:bertos/net/ax25.c ****                              msg.rpt_lst[msg.rpt_cnt].ssid,
  89:bertos/net/ax25.c ****                              (uint8_t)msg.rpt_used[msg.rpt_cnt] );
  90:bertos/net/ax25.c **** 		}
  91:bertos/net/ax25.c **** 	#else
  92:bertos/net/ax25.c **** 		while (!(*buf++ & 0x01))
  93:bertos/net/ax25.c **** 		{
  94:bertos/net/ax25.c **** 			char rpt[6];
  95:bertos/net/ax25.c **** 			uint8_t ssid;
  96:bertos/net/ax25.c **** 			DECODE_CALL(buf, rpt);
  97:bertos/net/ax25.c **** 			ssid = (*buf >> 1) & 0x0F;
  98:bertos/net/ax25.c **** 			LOG_INFO("RPT[%.6s-%d]\n", rpt, ssid);
  99:bertos/net/ax25.c **** 		}
 100:bertos/net/ax25.c **** 	#endif
 101:bertos/net/ax25.c **** 
 102:bertos/net/ax25.c **** 	msg.ctrl = *buf++;
 103:bertos/net/ax25.c **** 	if (msg.ctrl != AX25_CTRL_UI)
 104:bertos/net/ax25.c **** 	{
 105:bertos/net/ax25.c **** 		LOG_WARN("Only UI frames are handled, got [%02X]\n", msg.ctrl);
 106:bertos/net/ax25.c **** 		return;
 107:bertos/net/ax25.c **** 	}
 108:bertos/net/ax25.c **** 
 109:bertos/net/ax25.c **** 	msg.pid = *buf++;
 110:bertos/net/ax25.c **** 	if (msg.pid != AX25_PID_NOLAYER3)
 111:bertos/net/ax25.c **** 	{
 112:bertos/net/ax25.c **** 		LOG_WARN("Only frames without layer3 protocol are handled, got [%02X]\n", msg.pid);
 113:bertos/net/ax25.c **** 		return;
 114:bertos/net/ax25.c **** 	}
 115:bertos/net/ax25.c **** 
 116:bertos/net/ax25.c **** 	msg.len = ctx->frm_len - 2 - (buf - ctx->buf);
 117:bertos/net/ax25.c **** 	msg.info = buf;
 118:bertos/net/ax25.c **** 	LOG_INFO("DATA: %.*s\n", msg.len, msg.info);
 119:bertos/net/ax25.c **** 
 120:bertos/net/ax25.c **** 	if (ctx->hook)
 121:bertos/net/ax25.c **** 		ctx->hook(&msg);
 122:bertos/net/ax25.c **** }
 123:bertos/net/ax25.c **** 
 124:bertos/net/ax25.c **** 
 125:bertos/net/ax25.c **** /**
 126:bertos/net/ax25.c ****  * Check if there are any AX25 messages to be processed.
 127:bertos/net/ax25.c ****  * This function read available characters from the medium and search for
 128:bertos/net/ax25.c ****  * any AX25 messages.
 129:bertos/net/ax25.c ****  * If a message is found it is decoded and the linked callback executed.
 130:bertos/net/ax25.c ****  * This function may be blocking if there are no available chars and the KFile
 131:bertos/net/ax25.c ****  * used in \a ctx to access the medium is configured in blocking mode.
 132:bertos/net/ax25.c ****  *
 133:bertos/net/ax25.c ****  * \param ctx AX25 context to operate on.
 134:bertos/net/ax25.c ****  */
 135:bertos/net/ax25.c **** void ax25_poll(AX25Ctx *ctx)
 136:bertos/net/ax25.c **** {
 137:bertos/net/ax25.c **** 	int c;
 138:bertos/net/ax25.c **** 
 139:bertos/net/ax25.c **** 	while ((c = kfile_getc(ctx->ch)) != EOF)
 140:bertos/net/ax25.c **** 	{
 141:bertos/net/ax25.c **** 		if (!ctx->escape && c == HDLC_FLAG)
 142:bertos/net/ax25.c **** 		{
 143:bertos/net/ax25.c **** 			if (ctx->frm_len >= AX25_MIN_FRAME_LEN)
 144:bertos/net/ax25.c **** 			{
 145:bertos/net/ax25.c **** 				if (ctx->crc_in == AX25_CRC_CORRECT)
 146:bertos/net/ax25.c **** 				{
 147:bertos/net/ax25.c **** 					LOG_INFO("Frame found!\n");
 148:bertos/net/ax25.c **** 					ax25_decode(ctx);
 149:bertos/net/ax25.c **** 				}
 150:bertos/net/ax25.c **** 				else
 151:bertos/net/ax25.c **** 				{
 152:bertos/net/ax25.c **** 					LOG_INFO("CRC error, computed [%04X]\n", ctx->crc_in);
 153:bertos/net/ax25.c **** 				}
 154:bertos/net/ax25.c **** 			}
 155:bertos/net/ax25.c **** 			ctx->sync = true;
 156:bertos/net/ax25.c **** 			ctx->crc_in = CRC_CCITT_INIT_VAL;
 157:bertos/net/ax25.c **** 			ctx->frm_len = 0;
 158:bertos/net/ax25.c **** 			continue;
 159:bertos/net/ax25.c **** 		}
 160:bertos/net/ax25.c **** 
 161:bertos/net/ax25.c **** 		if (!ctx->escape && c == HDLC_RESET)
 162:bertos/net/ax25.c **** 		{
 163:bertos/net/ax25.c **** 			LOG_INFO("HDLC reset\n");
 164:bertos/net/ax25.c **** 			ctx->sync = false;
 165:bertos/net/ax25.c **** 			continue;
 166:bertos/net/ax25.c **** 		}
 167:bertos/net/ax25.c **** 
 168:bertos/net/ax25.c **** 		if (!ctx->escape && c == AX25_ESC)
 169:bertos/net/ax25.c **** 		{
 170:bertos/net/ax25.c **** 			ctx->escape = true;
 171:bertos/net/ax25.c **** 			continue;
 172:bertos/net/ax25.c **** 		}
 173:bertos/net/ax25.c **** 
 174:bertos/net/ax25.c **** 		if (ctx->sync)
 175:bertos/net/ax25.c **** 		{
 176:bertos/net/ax25.c **** 			if (ctx->frm_len < CONFIG_AX25_FRAME_BUF_LEN)
 177:bertos/net/ax25.c **** 			{
 178:bertos/net/ax25.c **** 				ctx->buf[ctx->frm_len++] = c;
 179:bertos/net/ax25.c **** 				ctx->crc_in = updcrc_ccitt(c, ctx->crc_in);
 180:bertos/net/ax25.c **** 			}
 181:bertos/net/ax25.c **** 			else
 182:bertos/net/ax25.c **** 			{
 183:bertos/net/ax25.c **** 				LOG_INFO("Buffer overrun");
 184:bertos/net/ax25.c **** 				ctx->sync = false;
 185:bertos/net/ax25.c **** 			}
 186:bertos/net/ax25.c **** 		}
 187:bertos/net/ax25.c **** 		ctx->escape = false;
 188:bertos/net/ax25.c **** 	}
 189:bertos/net/ax25.c **** 
 190:bertos/net/ax25.c **** 	if (kfile_error(ctx->ch))
 191:bertos/net/ax25.c **** 	{
 192:bertos/net/ax25.c **** 		LOG_ERR("Channel error [%04x]\n", kfile_error(ctx->ch));
 193:bertos/net/ax25.c **** 		kfile_clearerr(ctx->ch);
 194:bertos/net/ax25.c **** 	}
 195:bertos/net/ax25.c **** }
 196:bertos/net/ax25.c **** 
 197:bertos/net/ax25.c **** static void ax25_putchar(AX25Ctx *ctx, uint8_t c)
 198:bertos/net/ax25.c **** {
  18               		.loc 1 198 0
  19               		.cfi_startproc
  20               	.LVL0:
  21 0000 0F93      		push r16	 ;  68	*pushqi/1	[length = 1]
  22               	.LCFI0:
  23               		.cfi_def_cfa_offset 3
  24               		.cfi_offset 16, -2
  25 0002 1F93      		push r17	 ;  69	*pushqi/1	[length = 1]
  26               	.LCFI1:
  27               		.cfi_def_cfa_offset 4
  28               		.cfi_offset 17, -3
  29 0004 CF93      		push r28	 ;  70	*pushqi/1	[length = 1]
  30               	.LCFI2:
  31               		.cfi_def_cfa_offset 5
  32               		.cfi_offset 28, -4
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 3 */
  36               	.L__stack_usage = 3
  37 0006 8C01      		movw r16,r24	 ;  2	*movhi/1	[length = 1]
  38 0008 C62F      		mov r28,r22	 ;  3	*movqi/1	[length = 1]
 199:bertos/net/ax25.c **** 	if (c == HDLC_FLAG || c == HDLC_RESET
  39               		.loc 1 199 0
  40 000a 862F      		mov r24,r22	 ;  62	*movqi/1	[length = 1]
  41               	.LVL1:
  42 000c 8E57      		subi r24,lo8(-(-126))	 ;  7	addqi3/2	[length = 1]
  43 000e 8230      		cpi r24,lo8(2)	 ;  8	*cmpqi/3	[length = 1]
  44 0010 00F0      		brlo .L2	 ;  9	branch	[length = 1]
 200:bertos/net/ax25.c **** 		|| c == AX25_ESC)
  45               		.loc 1 200 0
  46 0012 6B31      		cpi r22,lo8(27)	 ;  11	*cmpqi/3	[length = 1]
  47 0014 01F4      		brne .L3	 ;  12	branch	[length = 1]
  48               	.L2:
 201:bertos/net/ax25.c **** 		kfile_putc(AX25_ESC, ctx->ch);
  49               		.loc 1 201 0
  50 0016 F801      		movw r30,r16	 ;  63	*movhi/1	[length = 1]
  51 0018 E65B      		subi r30,lo8(-(330))	 ;  16	*addhi3/4	[length = 2]
  52 001a FE4F      		sbci r31,hi8(-(330))
  53 001c 6081      		ld r22,Z	 ;  17	*movhi/2	[length = 2]
  54 001e 7181      		ldd r23,Z+1
  55               	.LVL2:
  56 0020 8BE1      		ldi r24,lo8(27)	 ;  18	*movhi/4	[length = 2]
  57 0022 90E0      		ldi r25,hi8(27)
  58 0024 0E94 0000 		call kfile_putc	 ;  20	call_value_insn/3	[length = 2]
  59               	.L3:
 202:bertos/net/ax25.c **** 	ctx->crc_out = updcrc_ccitt(c, ctx->crc_out);
  60               		.loc 1 202 0
  61 0028 D801      		movw r26,r16	 ;  64	*movhi/1	[length = 1]
  62 002a A05B      		subi r26,lo8(-(336))	 ;  23	*addhi3/4	[length = 2]
  63 002c BE4F      		sbci r27,hi8(-(336))
  64 002e 2D91      		ld r18,X+	 ;  24	*movhi/2	[length = 3]
  65 0030 3C91      		ld r19,X
  66 0032 1197      		sbiw r26,1
  67               	.LVL3:
  68               	.LBB43:
  69               	.LBB44:
  70               	.LBB45:
  71               		.file 2 "bertos/algo/crc_ccitt.h"
   1:bertos/algo/crc_ccitt.h **** /**
   2:bertos/algo/crc_ccitt.h ****  * \file
   3:bertos/algo/crc_ccitt.h ****  * <!--
   4:bertos/algo/crc_ccitt.h ****  * This file is part of BeRTOS.
   5:bertos/algo/crc_ccitt.h ****  *
   6:bertos/algo/crc_ccitt.h ****  * Bertos is free software; you can redistribute it and/or modify
   7:bertos/algo/crc_ccitt.h ****  * it under the terms of the GNU General Public License as published by
   8:bertos/algo/crc_ccitt.h ****  * the Free Software Foundation; either version 2 of the License, or
   9:bertos/algo/crc_ccitt.h ****  * (at your option) any later version.
  10:bertos/algo/crc_ccitt.h ****  *
  11:bertos/algo/crc_ccitt.h ****  * This program is distributed in the hope that it will be useful,
  12:bertos/algo/crc_ccitt.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bertos/algo/crc_ccitt.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bertos/algo/crc_ccitt.h ****  * GNU General Public License for more details.
  15:bertos/algo/crc_ccitt.h ****  *
  16:bertos/algo/crc_ccitt.h ****  * You should have received a copy of the GNU General Public License
  17:bertos/algo/crc_ccitt.h ****  * along with this program; if not, write to the Free Software
  18:bertos/algo/crc_ccitt.h ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:bertos/algo/crc_ccitt.h ****  *
  20:bertos/algo/crc_ccitt.h ****  * As a special exception, you may use this file as part of a free software
  21:bertos/algo/crc_ccitt.h ****  * library without restriction.  Specifically, if other files instantiate
  22:bertos/algo/crc_ccitt.h ****  * templates or use macros or inline functions from this file, or you compile
  23:bertos/algo/crc_ccitt.h ****  * this file and link it with other files to produce an executable, this
  24:bertos/algo/crc_ccitt.h ****  * file does not by itself cause the resulting executable to be covered by
  25:bertos/algo/crc_ccitt.h ****  * the GNU General Public License.  This exception does not however
  26:bertos/algo/crc_ccitt.h ****  * invalidate any other reasons why the executable file might be covered by
  27:bertos/algo/crc_ccitt.h ****  * the GNU General Public License.
  28:bertos/algo/crc_ccitt.h ****  *
  29:bertos/algo/crc_ccitt.h ****  * Copyright 2009 Develer S.r.l. (http://www.develer.com/)
  30:bertos/algo/crc_ccitt.h ****  *
  31:bertos/algo/crc_ccitt.h ****  * -->
  32:bertos/algo/crc_ccitt.h ****  *
  33:bertos/algo/crc_ccitt.h ****  * \brief CCITT Cyclic Redundancy Check (CRC-CCITT).
  34:bertos/algo/crc_ccitt.h ****  *
  35:bertos/algo/crc_ccitt.h ****  * \note This algorithm is incompatible with the CRC16.
  36:bertos/algo/crc_ccitt.h ****  *
  37:bertos/algo/crc_ccitt.h ****  * \version $Id: crc.h 2771 2009-08-06 07:01:06Z lottaviano $
  38:bertos/algo/crc_ccitt.h ****  * \author Francesco Sacchi <batt@develer.com>
  39:bertos/algo/crc_ccitt.h ****  *
  40:bertos/algo/crc_ccitt.h ****  * $WIZ$ module_name = "crc-ccitt"
  41:bertos/algo/crc_ccitt.h ****  */
  42:bertos/algo/crc_ccitt.h **** 
  43:bertos/algo/crc_ccitt.h **** #ifndef ALGO_CRC_CCITT_H
  44:bertos/algo/crc_ccitt.h **** #define ALGO_CRC_CCITT_H
  45:bertos/algo/crc_ccitt.h **** 
  46:bertos/algo/crc_ccitt.h **** #include <cfg/compiler.h>
  47:bertos/algo/crc_ccitt.h **** #include <cpu/pgm.h>
  48:bertos/algo/crc_ccitt.h **** 
  49:bertos/algo/crc_ccitt.h **** EXTERN_C_BEGIN
  50:bertos/algo/crc_ccitt.h **** 
  51:bertos/algo/crc_ccitt.h **** /* CRC table */
  52:bertos/algo/crc_ccitt.h **** extern const uint16_t crc_ccitt_tab[256];
  53:bertos/algo/crc_ccitt.h **** 
  54:bertos/algo/crc_ccitt.h **** /**
  55:bertos/algo/crc_ccitt.h ****  * \brief Compute the updated CRC-CCITT value for one octet (inline version)
  56:bertos/algo/crc_ccitt.h ****  */
  57:bertos/algo/crc_ccitt.h **** INLINE uint16_t updcrc_ccitt(uint8_t c, uint16_t oldcrc)
  58:bertos/algo/crc_ccitt.h **** {
  59:bertos/algo/crc_ccitt.h **** #if CPU_HARVARD
  60:bertos/algo/crc_ccitt.h **** 	return (oldcrc >> 8) ^ pgm_read_uint16_t(&crc_ccitt_tab[(oldcrc ^ c) & 0xff]);
  72               		.loc 2 60 0
  73 0034 EC2F      		mov r30,r28	 ;  66	*movqi/1	[length = 1]
  74 0036 F0E0      		ldi r31,lo8(0)	 ;  67	*movqi/2	[length = 1]
  75 0038 E227      		eor r30,r18	 ;  28	xorhi3	[length = 2]
  76 003a F327      		eor r31,r19
  77 003c F070      		andi r31,hi8(255)	 ;  29	andhi3/2	[length = 2]
  78 003e EE0F      		lsl r30	 ;  78	*ashlhi3_const/2	[length = 2]
  79 0040 FF1F      		rol r31
  80 0042 E050      		subi r30,lo8(-(crc_ccitt_tab))	 ;  31	*addhi3/4	[length = 2]
  81 0044 F040      		sbci r31,hi8(-(crc_ccitt_tab))
  82               	.LVL4:
  83               	/* #APP */
  84               	 ;  60 "bertos/algo/crc_ccitt.h" 1
  85 0046 8591      		lpm r24, Z+
  86 0048 9491      		lpm r25, Z
  87               		
  88               	 ;  0 "" 2
  89               	.LVL5:
  90               	/* #NOAPP */
  91               	.LBE45:
  92 004a 232F      		mov r18,r19	 ;  79	*lshrhi3_const/3	[length = 2]
  93 004c 3327      		clr r19
  94 004e 8227      		eor r24,r18	 ;  40	xorhi3	[length = 2]
  95 0050 9327      		eor r25,r19
  96               	.LVL6:
  97               	.LBE44:
  98               	.LBE43:
  99               		.loc 1 202 0
 100 0052 8D93      		st X+,r24	 ;  41	*movhi/3	[length = 2]
 101 0054 9C93      		st X,r25
 203:bertos/net/ax25.c **** 	kfile_putc(c, ctx->ch);
 102               		.loc 1 203 0
 103 0056 F801      		movw r30,r16	 ;  65	*movhi/1	[length = 1]
 104 0058 E65B      		subi r30,lo8(-(330))	 ;  44	*addhi3/4	[length = 2]
 105 005a FE4F      		sbci r31,hi8(-(330))
 106 005c 6081      		ld r22,Z	 ;  45	*movhi/2	[length = 2]
 107 005e 7181      		ldd r23,Z+1
 108 0060 8C2F      		mov r24,r28	 ;  55	*movqi/1	[length = 1]
 109 0062 90E0      		ldi r25,lo8(0)	 ;  56	*movqi/2	[length = 1]
 110 0064 0E94 0000 		call kfile_putc	 ;  48	call_value_insn/3	[length = 2]
 111               	.LVL7:
 112               	/* epilogue start */
 204:bertos/net/ax25.c **** }
 113               		.loc 1 204 0
 114 0068 CF91      		pop r28	 ;  73	popqi	[length = 1]
 115               	.LVL8:
 116 006a 1F91      		pop r17	 ;  74	popqi	[length = 1]
 117 006c 0F91      		pop r16	 ;  75	popqi	[length = 1]
 118               	.LVL9:
 119 006e 0895      		ret	 ;  76	return_from_epilogue	[length = 1]
 120               		.cfi_endproc
 121               	.LFE12:
 123               		.data
 124               	.LC0:
 125 0000 252E 3673 		.string	"%.6s"
 125      00
 126               	.LC1:
 127 0005 2D25 6400 		.string	"-%d"
 128               		.section	.text.print_call,"ax",@progbits
 130               	print_call:
 131               	.LFB15:
 205:bertos/net/ax25.c **** 
 206:bertos/net/ax25.c **** static void ax25_sendCall(AX25Ctx *ctx, const AX25Call *addr, bool last)
 207:bertos/net/ax25.c **** {
 208:bertos/net/ax25.c **** 	unsigned len = MIN(sizeof(addr->call), strlen(addr->call));
 209:bertos/net/ax25.c **** 
 210:bertos/net/ax25.c **** 	for (unsigned i = 0; i < len; i++)
 211:bertos/net/ax25.c **** 	{
 212:bertos/net/ax25.c **** 		uint8_t c = addr->call[i];
 213:bertos/net/ax25.c **** 		ASSERT(isalnum(c) || c == ' ');
 214:bertos/net/ax25.c **** 		c = toupper(c);
 215:bertos/net/ax25.c **** 		ax25_putchar(ctx, c << 1);
 216:bertos/net/ax25.c **** 	}
 217:bertos/net/ax25.c **** 
 218:bertos/net/ax25.c **** 	/* Fill with spaces the rest of the CALL if it's shorter */
 219:bertos/net/ax25.c **** 	if (len < sizeof(addr->call))
 220:bertos/net/ax25.c **** 		for (unsigned i = 0; i < sizeof(addr->call) - len; i++)
 221:bertos/net/ax25.c **** 			ax25_putchar(ctx, ' ' << 1);
 222:bertos/net/ax25.c **** 
 223:bertos/net/ax25.c **** 	/* The bit0 of last call SSID should be set to 1 */
 224:bertos/net/ax25.c **** 	uint8_t ssid = addr->ssid << 1 | (last ? 0x01 : 0);
 225:bertos/net/ax25.c **** 	ax25_putchar(ctx, ssid);
 226:bertos/net/ax25.c **** }
 227:bertos/net/ax25.c **** 
 228:bertos/net/ax25.c **** /**
 229:bertos/net/ax25.c ****  * Send an AX25 frame on the channel through a specific path.
 230:bertos/net/ax25.c ****  * \param ctx AX25 context to operate on.
 231:bertos/net/ax25.c ****  * \param path An array of callsigns used as path, \see AX25_PATH for
 232:bertos/net/ax25.c ****  *        an handy way to create a path.
 233:bertos/net/ax25.c ****  * \param path_len callsigns path lenght.
 234:bertos/net/ax25.c ****  * \param _buf payload buffer.
 235:bertos/net/ax25.c ****  * \param len length of the payload.
 236:bertos/net/ax25.c ****  */
 237:bertos/net/ax25.c **** void ax25_sendVia(AX25Ctx *ctx, const AX25Call *path, size_t path_len, const void *_buf, size_t len
 238:bertos/net/ax25.c **** {
 239:bertos/net/ax25.c **** 	const uint8_t *buf = (const uint8_t *)_buf;
 240:bertos/net/ax25.c **** 	ASSERT(path);
 241:bertos/net/ax25.c **** 	ASSERT(path_len >= 2);
 242:bertos/net/ax25.c **** 
 243:bertos/net/ax25.c **** 	ctx->crc_out = CRC_CCITT_INIT_VAL;
 244:bertos/net/ax25.c **** 	kfile_putc(HDLC_FLAG, ctx->ch);
 245:bertos/net/ax25.c **** 
 246:bertos/net/ax25.c **** 
 247:bertos/net/ax25.c **** 	/* Send call */
 248:bertos/net/ax25.c **** 	for (size_t i = 0; i < path_len; i++)
 249:bertos/net/ax25.c **** 		ax25_sendCall(ctx, &path[i], (i == path_len - 1));
 250:bertos/net/ax25.c **** 
 251:bertos/net/ax25.c **** 	ax25_putchar(ctx, AX25_CTRL_UI);
 252:bertos/net/ax25.c **** 	ax25_putchar(ctx, AX25_PID_NOLAYER3);
 253:bertos/net/ax25.c **** 
 254:bertos/net/ax25.c **** 	while (len--)
 255:bertos/net/ax25.c **** 		ax25_putchar(ctx, *buf++);
 256:bertos/net/ax25.c **** 
 257:bertos/net/ax25.c **** 	/*
 258:bertos/net/ax25.c **** 	 * According to AX25 protocol,
 259:bertos/net/ax25.c **** 	 * CRC is sent in reverse order!
 260:bertos/net/ax25.c **** 	 */
 261:bertos/net/ax25.c **** 	uint8_t crcl = (ctx->crc_out & 0xff) ^ 0xff;
 262:bertos/net/ax25.c **** 	uint8_t crch = (ctx->crc_out >> 8) ^ 0xff;
 263:bertos/net/ax25.c **** 	ax25_putchar(ctx, crcl);
 264:bertos/net/ax25.c **** 	ax25_putchar(ctx, crch);
 265:bertos/net/ax25.c **** 
 266:bertos/net/ax25.c **** 	ASSERT(ctx->crc_out == AX25_CRC_CORRECT);
 267:bertos/net/ax25.c **** 
 268:bertos/net/ax25.c **** 	kfile_putc(HDLC_FLAG, ctx->ch);
 269:bertos/net/ax25.c **** }
 270:bertos/net/ax25.c **** 
 271:bertos/net/ax25.c **** static void print_call(KFile *ch, const AX25Call *call)
 272:bertos/net/ax25.c **** {
 132               		.loc 1 272 0
 133               		.cfi_startproc
 134 0000 0F93      		push r16	 ;  49	*pushqi/1	[length = 1]
 135               	.LCFI3:
 136               		.cfi_def_cfa_offset 3
 137               		.cfi_offset 16, -2
 138 0002 1F93      		push r17	 ;  50	*pushqi/1	[length = 1]
 139               	.LCFI4:
 140               		.cfi_def_cfa_offset 4
 141               		.cfi_offset 17, -3
 142 0004 CF93      		push r28	 ;  51	*pushqi/1	[length = 1]
 143               	.LCFI5:
 144               		.cfi_def_cfa_offset 5
 145               		.cfi_offset 28, -4
 146 0006 DF93      		push r29	 ;  52	*pushqi/1	[length = 1]
 147               	.LCFI6:
 148               		.cfi_def_cfa_offset 6
 149               		.cfi_offset 29, -5
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 4 */
 153               	.L__stack_usage = 4
 154 0008 8C01      		movw r16,r24	 ;  2	*movhi/1	[length = 1]
 155 000a EB01      		movw r28,r22	 ;  3	*movhi/1	[length = 1]
 273:bertos/net/ax25.c **** 	kfile_printf(ch, "%.6s", call->call);
 156               		.loc 1 273 0
 157 000c 00D0      		rcall .	 ;  7	*addhi3_sp_R_pc2	[length = 3]
 158 000e 00D0      		rcall .
 159 0010 00D0      		rcall .
 160               	.LCFI7:
 161               		.cfi_def_cfa_offset 12
 162 0012 EDB7      		in r30,__SP_L__	 ;  41	*movhi_sp/2	[length = 2]
 163 0014 FEB7      		in r31,__SP_H__
 164 0016 3196      		adiw r30,1	 ;  34	*addhi3/2	[length = 1]
 165 0018 ADB7      		in r26,__SP_L__	 ;  42	*movhi_sp/2	[length = 2]
 166 001a BEB7      		in r27,__SP_H__
 167 001c 1296      		adiw r26,1+1	 ;  9	*movhi/3	[length = 4]
 168 001e 9C93      		st X,r25
 169 0020 8E93      		st -X,r24
 170 0022 1197      		sbiw r26,1
 171 0024 80E0      		ldi r24,lo8(.LC0)	 ;  10	*movhi/4	[length = 2]
 172 0026 90E0      		ldi r25,hi8(.LC0)
 173 0028 9383      		std Z+3,r25	 ;  11	*movhi/3	[length = 2]
 174 002a 8283      		std Z+2,r24
 175 002c 7583      		std Z+5,r23	 ;  12	*movhi/3	[length = 2]
 176 002e 6483      		std Z+4,r22
 177               		.cfi_escape 0x2e,0x6
 178 0030 0E94 0000 		call kfile_printf	 ;  13	call_value_insn/3	[length = 2]
 274:bertos/net/ax25.c **** 	if (call->ssid)
 179               		.loc 1 274 0
 180 0034 2E81      		ldd r18,Y+6	 ;  14	*movqi/4	[length = 1]
 181 0036 8DB7      		in r24,__SP_L__	 ;  43	*movhi_sp/2	[length = 2]
 182 0038 9EB7      		in r25,__SP_H__
 183 003a 0696      		adiw r24,6	 ;  15	*addhi3/2	[length = 1]
 184 003c 0FB6      		in __tmp_reg__,__SREG__	 ;  44	*movhi_sp/1	[length = 5]
 185 003e F894      		cli
 186 0040 9EBF      		out __SP_H__,r25
 187 0042 0FBE      		out __SREG__,__tmp_reg__
 188 0044 8DBF      		out __SP_L__,r24
 189               	.LCFI8:
 190               		.cfi_def_cfa_offset 6
 191 0046 2223      		tst r18	 ;  16	*cmpqi/1	[length = 1]
 192 0048 01F0      		breq .L4	 ;  17	branch	[length = 1]
 193               	.LBB48:
 194               	.LBB49:
 275:bertos/net/ax25.c **** 		kfile_printf(ch, "-%d", call->ssid);
 195               		.loc 1 275 0
 196 004a 00D0      		rcall .	 ;  21	*addhi3_sp_R_pc2	[length = 3]
 197 004c 00D0      		rcall .
 198 004e 00D0      		rcall .
 199               	.LCFI9:
 200               		.cfi_def_cfa_offset 12
 201 0050 EDB7      		in r30,__SP_L__	 ;  45	*movhi_sp/2	[length = 2]
 202 0052 FEB7      		in r31,__SP_H__
 203 0054 3196      		adiw r30,1	 ;  35	*addhi3/2	[length = 1]
 204 0056 ADB7      		in r26,__SP_L__	 ;  46	*movhi_sp/2	[length = 2]
 205 0058 BEB7      		in r27,__SP_H__
 206 005a 1296      		adiw r26,1+1	 ;  23	*movhi/3	[length = 4]
 207 005c 1C93      		st X,r17
 208 005e 0E93      		st -X,r16
 209 0060 1197      		sbiw r26,1
 210 0062 80E0      		ldi r24,lo8(.LC1)	 ;  24	*movhi/4	[length = 2]
 211 0064 90E0      		ldi r25,hi8(.LC1)
 212 0066 9383      		std Z+3,r25	 ;  25	*movhi/3	[length = 2]
 213 0068 8283      		std Z+2,r24
 214 006a 2483      		std Z+4,r18	 ;  38	*movqi/3	[length = 1]
 215 006c 1582      		std Z+5,__zero_reg__	 ;  39	*movqi/3	[length = 1]
 216 006e 0E94 0000 		call kfile_printf	 ;  28	call_value_insn/3	[length = 2]
 217 0072 8DB7      		in r24,__SP_L__	 ;  47	*movhi_sp/2	[length = 2]
 218 0074 9EB7      		in r25,__SP_H__
 219 0076 0696      		adiw r24,6	 ;  29	*addhi3/2	[length = 1]
 220 0078 0FB6      		in __tmp_reg__,__SREG__	 ;  48	*movhi_sp/1	[length = 5]
 221 007a F894      		cli
 222 007c 9EBF      		out __SP_H__,r25
 223 007e 0FBE      		out __SREG__,__tmp_reg__
 224 0080 8DBF      		out __SP_L__,r24
 225               	.LCFI10:
 226               		.cfi_def_cfa_offset 6
 227               	.L4:
 228               	/* epilogue start */
 229               	.LBE49:
 230               	.LBE48:
 276:bertos/net/ax25.c **** }
 231               		.loc 1 276 0
 232 0082 DF91      		pop r29	 ;  55	popqi	[length = 1]
 233 0084 CF91      		pop r28	 ;  56	popqi	[length = 1]
 234 0086 1F91      		pop r17	 ;  57	popqi	[length = 1]
 235 0088 0F91      		pop r16	 ;  58	popqi	[length = 1]
 236 008a 0895      		ret	 ;  59	return_from_epilogue	[length = 1]
 237               		.cfi_endproc
 238               	.LFE15:
 240               		.data
 241               	.LC2:
 242 0009 5741 524E 		.string	"WARN"
 242      00
 243               	.LC3:
 244 000e 4552 5200 		.string	"ERR"
 245               		.section	.text.ax25_poll,"ax",@progbits
 246               	.global	ax25_poll
 248               	ax25_poll:
 249               	.LFB11:
 136:bertos/net/ax25.c **** {
 250               		.loc 1 136 0
 251               		.cfi_startproc
 252               	.LVL10:
 253 0000 2F92      		push r2	 ;  613	*pushqi/1	[length = 1]
 254               	.LCFI11:
 255               		.cfi_def_cfa_offset 3
 256               		.cfi_offset 2, -2
 257 0002 3F92      		push r3	 ;  614	*pushqi/1	[length = 1]
 258               	.LCFI12:
 259               		.cfi_def_cfa_offset 4
 260               		.cfi_offset 3, -3
 261 0004 4F92      		push r4	 ;  615	*pushqi/1	[length = 1]
 262               	.LCFI13:
 263               		.cfi_def_cfa_offset 5
 264               		.cfi_offset 4, -4
 265 0006 5F92      		push r5	 ;  616	*pushqi/1	[length = 1]
 266               	.LCFI14:
 267               		.cfi_def_cfa_offset 6
 268               		.cfi_offset 5, -5
 269 0008 6F92      		push r6	 ;  617	*pushqi/1	[length = 1]
 270               	.LCFI15:
 271               		.cfi_def_cfa_offset 7
 272               		.cfi_offset 6, -6
 273 000a 7F92      		push r7	 ;  618	*pushqi/1	[length = 1]
 274               	.LCFI16:
 275               		.cfi_def_cfa_offset 8
 276               		.cfi_offset 7, -7
 277 000c 8F92      		push r8	 ;  619	*pushqi/1	[length = 1]
 278               	.LCFI17:
 279               		.cfi_def_cfa_offset 9
 280               		.cfi_offset 8, -8
 281 000e 9F92      		push r9	 ;  620	*pushqi/1	[length = 1]
 282               	.LCFI18:
 283               		.cfi_def_cfa_offset 10
 284               		.cfi_offset 9, -9
 285 0010 AF92      		push r10	 ;  621	*pushqi/1	[length = 1]
 286               	.LCFI19:
 287               		.cfi_def_cfa_offset 11
 288               		.cfi_offset 10, -10
 289 0012 BF92      		push r11	 ;  622	*pushqi/1	[length = 1]
 290               	.LCFI20:
 291               		.cfi_def_cfa_offset 12
 292               		.cfi_offset 11, -11
 293 0014 CF92      		push r12	 ;  623	*pushqi/1	[length = 1]
 294               	.LCFI21:
 295               		.cfi_def_cfa_offset 13
 296               		.cfi_offset 12, -12
 297 0016 DF92      		push r13	 ;  624	*pushqi/1	[length = 1]
 298               	.LCFI22:
 299               		.cfi_def_cfa_offset 14
 300               		.cfi_offset 13, -13
 301 0018 EF92      		push r14	 ;  625	*pushqi/1	[length = 1]
 302               	.LCFI23:
 303               		.cfi_def_cfa_offset 15
 304               		.cfi_offset 14, -14
 305 001a FF92      		push r15	 ;  626	*pushqi/1	[length = 1]
 306               	.LCFI24:
 307               		.cfi_def_cfa_offset 16
 308               		.cfi_offset 15, -15
 309 001c 0F93      		push r16	 ;  627	*pushqi/1	[length = 1]
 310               	.LCFI25:
 311               		.cfi_def_cfa_offset 17
 312               		.cfi_offset 16, -16
 313 001e 1F93      		push r17	 ;  628	*pushqi/1	[length = 1]
 314               	.LCFI26:
 315               		.cfi_def_cfa_offset 18
 316               		.cfi_offset 17, -17
 317 0020 CF93      		push r28	 ;  629	*pushqi/1	[length = 1]
 318               	.LCFI27:
 319               		.cfi_def_cfa_offset 19
 320               		.cfi_offset 28, -18
 321 0022 DF93      		push r29	 ;  630	*pushqi/1	[length = 1]
 322               	.LCFI28:
 323               		.cfi_def_cfa_offset 20
 324               		.cfi_offset 29, -19
 325 0024 CDB7      		in r28,__SP_L__	 ;  631	*movhi_sp/2	[length = 2]
 326 0026 DEB7      		in r29,__SP_H__
 327 0028 C655      		subi r28,lo8(-(-86))	 ;  632	*addhi3/4	[length = 2]
 328 002a D040      		sbci r29,hi8(-(-86))
 329               	.LCFI29:
 330               		.cfi_def_cfa 28, 106
 331 002c 0FB6      		in __tmp_reg__,__SREG__	 ;  633	*movhi_sp/1	[length = 5]
 332 002e F894      		cli
 333 0030 DEBF      		out __SP_H__,r29
 334 0032 0FBE      		out __SREG__,__tmp_reg__
 335 0034 CDBF      		out __SP_L__,r28
 336               	/* prologue: function */
 337               	/* frame size = 86 */
 338               	/* stack size = 104 */
 339               	.L__stack_usage = 104
 340 0036 7C01      		movw r14,r24	 ;  30	*movhi/1	[length = 1]
 139:bertos/net/ax25.c **** 	while ((c = kfile_getc(ctx->ch)) != EOF)
 341               		.loc 1 139 0
 342 0038 0AE4      		ldi r16,lo8(330)	 ;  670	*reload_inhi	[length = 4]
 343 003a 202E      		mov r2,r16
 344 003c 01E0      		ldi r16,hi8(330)
 345 003e 302E      		mov r3,r16
 346 0040 280E      		add r2,r24	 ;  354	*addhi3/1	[length = 2]
 347 0042 391E      		adc r3,r25
 141:bertos/net/ax25.c **** 		if (!ctx->escape && c == HDLC_FLAG)
 348               		.loc 1 141 0
 349 0044 25E5      		ldi r18,lo8(341)	 ;  671	*reload_inhi	[length = 4]
 350 0046 422E      		mov r4,r18
 351 0048 21E0      		ldi r18,hi8(341)
 352 004a 522E      		mov r5,r18
 353 004c 480E      		add r4,r24	 ;  45	*addhi3/1	[length = 2]
 354 004e 591E      		adc r5,r25
 174:bertos/net/ax25.c **** 		if (ctx->sync)
 355               		.loc 1 174 0
 356 0050 34E5      		ldi r19,lo8(340)	 ;  672	*reload_inhi	[length = 4]
 357 0052 A32E      		mov r10,r19
 358 0054 31E0      		ldi r19,hi8(340)
 359 0056 B32E      		mov r11,r19
 360 0058 A80E      		add r10,r24	 ;  303	*addhi3/1	[length = 2]
 361 005a B91E      		adc r11,r25
 176:bertos/net/ax25.c **** 			if (ctx->frm_len < CONFIG_AX25_FRAME_BUF_LEN)
 362               		.loc 1 176 0
 363 005c 4CE4      		ldi r20,lo8(332)	 ;  673	*reload_inhi	[length = 4]
 364 005e 842E      		mov r8,r20
 365 0060 41E0      		ldi r20,hi8(332)
 366 0062 942E      		mov r9,r20
 367 0064 880E      		add r8,r24	 ;  308	*addhi3/1	[length = 2]
 368 0066 991E      		adc r9,r25
 179:bertos/net/ax25.c **** 				ctx->crc_in = updcrc_ccitt(c, ctx->crc_in);
 369               		.loc 1 179 0
 370 0068 5EE4      		ldi r21,lo8(334)	 ;  674	*reload_inhi	[length = 4]
 371 006a 652E      		mov r6,r21
 372 006c 51E0      		ldi r21,hi8(334)
 373 006e 752E      		mov r7,r21
 374 0070 680E      		add r6,r24	 ;  319	*addhi3/1	[length = 2]
 375 0072 791E      		adc r7,r25
 139:bertos/net/ax25.c **** 	while ((c = kfile_getc(ctx->ch)) != EOF)
 376               		.loc 1 139 0
 377 0074 00C0      		rjmp .L35	 ;  675	jump	[length = 1]
 378               	.LVL11:
 379               	.L27:
 141:bertos/net/ax25.c **** 		if (!ctx->escape && c == HDLC_FLAG)
 380               		.loc 1 141 0
 381 0076 D201      		movw r26,r4	 ;  543	*movhi/1	[length = 1]
 382 0078 8C91      		ld r24,X	 ;  46	*movqi/4	[length = 1]
 383 007a 8823      		tst r24	 ;  47	*cmpqi/1	[length = 1]
 384 007c 01F0      		breq .+2	 ;  48	branch	[length = 2]
 385 007e 00C0      		rjmp .L8
 141:bertos/net/ax25.c **** 		if (!ctx->escape && c == HDLC_FLAG)
 386               		.loc 1 141 0 is_stmt 0 discriminator 1
 387 0080 2E37      		cpi r18,126	 ;  50	*cmphi/4	[length = 2]
 388 0082 3105      		cpc r19,__zero_reg__
 389 0084 01F0      		breq .+2	 ;  51	branch	[length = 2]
 390 0086 00C0      		rjmp .L9
 143:bertos/net/ax25.c **** 			if (ctx->frm_len >= AX25_MIN_FRAME_LEN)
 391               		.loc 1 143 0 is_stmt 1
 392 0088 F401      		movw r30,r8	 ;  544	*movhi/1	[length = 1]
 393 008a C080      		ld r12,Z	 ;  54	*movhi/2	[length = 2]
 394 008c D180      		ldd r13,Z+1
 395 008e F2E1      		ldi r31,lo8(18)	 ;  55	*cmphi/6	[length = 3]
 396 0090 CF16      		cp r12,r31
 397 0092 D104      		cpc r13,__zero_reg__
 398 0094 00F4      		brsh .+2	 ;  56	branch	[length = 2]
 399 0096 00C0      		rjmp .L10
 145:bertos/net/ax25.c **** 				if (ctx->crc_in == AX25_CRC_CORRECT)
 400               		.loc 1 145 0
 401 0098 D301      		movw r26,r6	 ;  545	*movhi/1	[length = 1]
 402 009a 8D91      		ld r24,X+	 ;  59	*movhi/2	[length = 3]
 403 009c 9C91      		ld r25,X
 404 009e 1197      		sbiw r26,1
 405 00a0 B0EF      		ldi r27,hi8(-3912)	 ;  60	*cmphi/5	[length = 3]
 406 00a2 883B      		cpi r24,lo8(-3912)
 407 00a4 9B07      		cpc r25,r27
 408 00a6 01F0      		breq .+2	 ;  61	branch	[length = 2]
 409 00a8 00C0      		rjmp .L10
 410               	.LVL12:
 411               	.LBB70:
 412               	.LBB71:
  63:bertos/net/ax25.c **** 	uint8_t *buf = ctx->buf;
 413               		.loc 1 63 0
 414 00aa FE01      		movw r30,r28	 ;  546	*movhi/1	[length = 1]
 415 00ac 3896      		adiw r30,8	 ;  70	*addhi3/2	[length = 1]
 416 00ae D701      		movw r26,r14	 ;  32	*movhi/1	[length = 1]
  65:bertos/net/ax25.c **** 	DECODE_CALL(buf, msg.dst.call);
 417               		.loc 1 65 0
 418 00b0 80E0      		ldi r24,lo8(0)	 ;  33	*movhi/4	[length = 2]
 419 00b2 90E0      		ldi r25,hi8(0)
 420               	.LVL13:
 421               	.L12:
 422               	.LBB72:
 423               	.LBB73:
 424 00b4 2D91      		ld r18,X+	 ;  72	*movqi/4	[length = 1]
 425               	.LVL14:
 426 00b6 2695      		lsr r18	 ;  73	*lshrqi3/3	[length = 1]
 427               	.LVL15:
 428 00b8 2032      		cpi r18,lo8(32)	 ;  77	*cmpqi/3	[length = 1]
 429 00ba 01F4      		brne .L11	 ;  78	branch	[length = 1]
 430 00bc 20E0      		ldi r18,lo8(0)	 ;  486	*movqi/2	[length = 1]
 431               	.LVL16:
 432               	.L11:
 433 00be 2193      		st Z+,r18	 ;  82	*movqi/3	[length = 1]
 434               	.LBE73:
 435 00c0 0196      		adiw r24,1	 ;  84	*addhi3/2	[length = 1]
 436               	.LVL17:
 437 00c2 8630      		cpi r24,6	 ;  89	*cmphi/4	[length = 2]
 438 00c4 9105      		cpc r25,__zero_reg__
 439 00c6 01F4      		brne .L12	 ;  90	branch	[length = 1]
 440               	.LBE72:
  66:bertos/net/ax25.c **** 	msg.dst.ssid = (*buf++ >> 1) & 0x0F;
 441               		.loc 1 66 0
 442 00c8 F701      		movw r30,r14	 ;  547	*movhi/1	[length = 1]
 443 00ca 8681      		ldd r24,Z+6	 ;  92	*movqi/4	[length = 1]
 444               	.LVL18:
 445 00cc 8695      		lsr r24	 ;  93	*lshrqi3/3	[length = 1]
 446 00ce 8F70      		andi r24,lo8(15)	 ;  94	andqi3/2	[length = 1]
 447 00d0 8E87      		std Y+14,r24	 ;  95	*movqi/3	[length = 1]
 448 00d2 3796      		adiw r30,7	 ;  96	*addhi3/2	[length = 1]
 449               	.LVL19:
 450 00d4 DE01      		movw r26,r28	 ;  549	*movhi/1	[length = 1]
 451 00d6 1196      		adiw r26,1	 ;  499	*addhi3/2	[length = 1]
  68:bertos/net/ax25.c **** 	DECODE_CALL(buf, msg.src.call);
 452               		.loc 1 68 0
 453 00d8 80E0      		ldi r24,lo8(0)	 ;  35	*movhi/4	[length = 2]
 454 00da 90E0      		ldi r25,hi8(0)
 455               	.LVL20:
 456               	.L14:
 457               	.LBB74:
 458               	.LBB75:
 459 00dc 2191      		ld r18,Z+	 ;  103	*movqi/4	[length = 1]
 460               	.LVL21:
 461 00de 2695      		lsr r18	 ;  104	*lshrqi3/3	[length = 1]
 462               	.LVL22:
 463 00e0 2032      		cpi r18,lo8(32)	 ;  108	*cmpqi/3	[length = 1]
 464 00e2 01F4      		brne .L13	 ;  109	branch	[length = 1]
 465 00e4 20E0      		ldi r18,lo8(0)	 ;  485	*movqi/2	[length = 1]
 466               	.LVL23:
 467               	.L13:
 468 00e6 2D93      		st X+,r18	 ;  113	*movqi/3	[length = 1]
 469               	.LBE75:
 470 00e8 0196      		adiw r24,1	 ;  115	*addhi3/2	[length = 1]
 471               	.LVL24:
 472 00ea 8630      		cpi r24,6	 ;  120	*cmphi/4	[length = 2]
 473 00ec 9105      		cpc r25,__zero_reg__
 474 00ee 01F4      		brne .L14	 ;  121	branch	[length = 1]
 475 00f0 D701      		movw r26,r14	 ;  550	*movhi/1	[length = 1]
 476 00f2 1D96      		adiw r26,13	 ;  123	*addhi3/2	[length = 1]
 477               	.LBE74:
  69:bertos/net/ax25.c **** 	msg.src.ssid = (*buf >> 1) & 0x0F;
 478               		.loc 1 69 0
 479 00f4 F701      		movw r30,r14	 ;  551	*movhi/1	[length = 1]
 480               	.LVL25:
 481 00f6 8585      		ldd r24,Z+13	 ;  124	*movqi/4	[length = 1]
 482               	.LVL26:
 483 00f8 8695      		lsr r24	 ;  125	*lshrqi3/3	[length = 1]
 484 00fa 8F70      		andi r24,lo8(15)	 ;  126	andqi3/2	[length = 1]
 485 00fc 8F83      		std Y+7,r24	 ;  127	*movqi/3	[length = 1]
 486               	.LVL27:
  75:bertos/net/ax25.c **** 		for (msg.rpt_cnt = 0; !(*buf++ & 0x01) && (msg.rpt_cnt < countof(msg.rpt_lst)); msg.rpt_cnt++)
 487               		.loc 1 75 0
 488 00fe 6096      		adiw r28,79-63	 ;  130	*movqi/3	[length = 3]
 489 0100 1FAE      		std Y+63,__zero_reg__
 490 0102 6097      		sbiw r28,79-63
 491 0104 90E0      		ldi r25,lo8(0)	 ;  39	*movqi/2	[length = 1]
 492 0106 00C0      		rjmp .L15	 ;  677	jump	[length = 1]
 493               	.L17:
 494               	.LBB77:
 495               	.LBB78:
  77:bertos/net/ax25.c **** 			DECODE_CALL(buf, msg.rpt_lst[msg.rpt_cnt].call);
 496               		.loc 1 77 0
 497 0108 F801      		movw r30,r16	 ;  552	*movhi/1	[length = 1]
 498 010a 8191      		ld r24,Z+	 ;  134	*movqi/4	[length = 1]
 499 010c 8F01      		movw r16,r30	 ;  553	*movhi/1	[length = 1]
 500 010e 8695      		lsr r24	 ;  135	*lshrqi3/3	[length = 1]
 501               	.LVL28:
 502 0110 8032      		cpi r24,lo8(32)	 ;  140	*cmpqi/3	[length = 1]
 503 0112 01F4      		brne .L16	 ;  141	branch	[length = 1]
 504 0114 80E0      		ldi r24,lo8(0)	 ;  482	*movqi/2	[length = 1]
 505               	.LVL29:
 506               	.L16:
 135:bertos/net/ax25.c **** void ax25_poll(AX25Ctx *ctx)
 507               		.loc 1 135 0
 508 0116 F901      		movw r30,r18	 ;  554	*movhi/1	[length = 1]
 509               	.LVL30:
 510 0118 E60F      		add r30,r22	 ;  152	*addhi3/1	[length = 2]
 511 011a F71F      		adc r31,r23
  77:bertos/net/ax25.c **** 			DECODE_CALL(buf, msg.rpt_lst[msg.rpt_cnt].call);
 512               		.loc 1 77 0
 513 011c 8687      		std Z+14,r24	 ;  153	*movqi/3	[length = 1]
 514               	.LBE78:
 515 011e 6F5F      		subi r22,lo8(-(1))	 ;  154	*addhi3/4	[length = 2]
 516 0120 7F4F      		sbci r23,hi8(-(1))
 517               	.LVL31:
 518 0122 6630      		cpi r22,6	 ;  159	*cmphi/4	[length = 2]
 519 0124 7105      		cpc r23,__zero_reg__
 520 0126 01F4      		brne .L17	 ;  160	branch	[length = 1]
 135:bertos/net/ax25.c **** void ax25_poll(AX25Ctx *ctx)
 521               		.loc 1 135 0
 522 0128 1796      		adiw r26,7	 ;  162	*addhi3/2	[length = 1]
 523               	.LBE77:
  78:bertos/net/ax25.c **** 			msg.rpt_lst[msg.rpt_cnt].ssid = (*buf >> 1) & 0x0F;
 524               		.loc 1 78 0
 525 012a 2C91      		ld r18,X	 ;  163	*movqi/4	[length = 1]
 526 012c FA01      		movw r30,r20	 ;  555	*movhi/1	[length = 1]
 527 012e 13E0      		ldi r17,3	 ;  669	*ashlhi3_const/5	[length = 5]
 528 0130 EE0F      	1:	lsl r30
 529 0132 FF1F      		rol r31
 530 0134 1A95      		dec r17
 531 0136 01F4      		brne 1b
 532 0138 E41B      		sub r30,r20	 ;  167	subhi3/1	[length = 2]
 533 013a F50B      		sbc r31,r21
 534 013c 61E0      		ldi r22,lo8(1)	 ;  557	*movhi/4	[length = 2]
 535 013e 70E0      		ldi r23,hi8(1)
 536               	.LVL32:
 537 0140 6C0F      		add r22,r28	 ;  558	*addhi3/1	[length = 2]
 538 0142 7D1F      		adc r23,r29
 539 0144 E60F      		add r30,r22	 ;  168	*addhi3/1	[length = 2]
 540 0146 F71F      		adc r31,r23
 541 0148 822F      		mov r24,r18	 ;  559	*movqi/1	[length = 1]
 542 014a 8695      		lsr r24	 ;  170	*lshrqi3/3	[length = 1]
 543 014c 8F70      		andi r24,lo8(15)	 ;  171	andqi3/2	[length = 1]
 544 014e 848B      		std Z+20,r24	 ;  172	*movqi/3	[length = 1]
  83:bertos/net/ax25.c ****                         msg.rpt_used[msg.rpt_cnt] = (( *buf & 0x80 ) == 0x80 ) ? 1 : 0 ;
 545               		.loc 1 83 0
 546 0150 E7E4      		ldi r30,lo8(71)	 ;  561	*movhi/4	[length = 2]
 547 0152 F0E0      		ldi r31,hi8(71)
 548 0154 EC0F      		add r30,r28	 ;  562	*addhi3/1	[length = 2]
 549 0156 FD1F      		adc r31,r29
 550 0158 4E0F      		add r20,r30	 ;  174	*addhi3/1	[length = 2]
 551 015a 5F1F      		adc r21,r31
 552 015c 221F      		rol r18	 ;  175	*lshrqi3/5	[length = 3]
 553 015e 2227      		clr r18
 554 0160 221F      		rol r18
 555 0162 FA01      		movw r30,r20	 ;  563	*movhi/1	[length = 1]
 556 0164 2083      		st Z,r18	 ;  176	*movqi/3	[length = 1]
 557               	.LVL33:
 558 0166 9F5F      		subi r25,lo8(-(1))	 ;  178	addqi3/2	[length = 1]
 559               	.LVL34:
 560               	.L15:
  75:bertos/net/ax25.c **** 		for (msg.rpt_cnt = 0; !(*buf++ & 0x01) && (msg.rpt_cnt < countof(msg.rpt_lst)); msg.rpt_cnt++)
 561               		.loc 1 75 0
 562 0168 8C91      		ld r24,X	 ;  184	*movqi/4	[length = 1]
 563 016a 80FD      		sbrc r24,0	 ;  188	*sbrx_branchhi	[length = 2]
 564 016c 00C0      		rjmp .L20
 565               	.L18:
 566 016e 9830      		cpi r25,lo8(8)	 ;  196	*cmpqi/3	[length = 1]
 567 0170 00F4      		brsh .L20	 ;  197	branch	[length = 1]
 135:bertos/net/ax25.c **** void ax25_poll(AX25Ctx *ctx)
 568               		.loc 1 135 0
 569 0172 8D01      		movw r16,r26	 ;  564	*movhi/1	[length = 1]
 570 0174 0F5F      		subi r16,lo8(-(1))	 ;  200	*addhi3/4	[length = 2]
 571 0176 1F4F      		sbci r17,hi8(-(1))
 572               	.LBB80:
 573               	.LBB76:
 574 0178 60E0      		ldi r22,lo8(0)	 ;  479	*movhi/4	[length = 2]
 575 017a 70E0      		ldi r23,hi8(0)
 576               	.LBE76:
 577               	.LBE80:
 578               	.LBB81:
 579               	.LBB79:
  77:bertos/net/ax25.c **** 			DECODE_CALL(buf, msg.rpt_lst[msg.rpt_cnt].call);
 580               		.loc 1 77 0
 581 017c 492F      		mov r20,r25	 ;  611	*movqi/1	[length = 1]
 582 017e 50E0      		ldi r21,lo8(0)	 ;  612	*movqi/2	[length = 1]
 135:bertos/net/ax25.c **** void ax25_poll(AX25Ctx *ctx)
 583               		.loc 1 135 0
 584 0180 9A01      		movw r18,r20	 ;  565	*movhi/1	[length = 1]
 585 0182 E3E0      		ldi r30,3	 ;  668	*ashlhi3_const/5	[length = 5]
 586 0184 220F      	1:	lsl r18
 587 0186 331F      		rol r19
 588 0188 EA95      		dec r30
 589 018a 01F4      		brne 1b
 590 018c 241B      		sub r18,r20	 ;  150	subhi3/1	[length = 2]
 591 018e 350B      		sbc r19,r21
 592 0190 E1E0      		ldi r30,lo8(1)	 ;  567	*movhi/4	[length = 2]
 593 0192 F0E0      		ldi r31,hi8(1)
 594 0194 EC0F      		add r30,r28	 ;  568	*addhi3/1	[length = 2]
 595 0196 FD1F      		adc r31,r29
 596 0198 2E0F      		add r18,r30	 ;  151	*addhi3/1	[length = 2]
 597 019a 3F1F      		adc r19,r31
 598 019c 00C0      		rjmp .L17	 ;  679	jump	[length = 1]
 599               	.L20:
 600               	.LBE79:
 601               	.LBE81:
 602 019e 6096      		adiw r28,79-63	 ;  206	*movqi/3	[length = 3]
 603 01a0 9FAF      		std Y+63,r25
 604 01a2 6097      		sbiw r28,79-63
 102:bertos/net/ax25.c **** 	msg.ctrl = *buf++;
 605               		.loc 1 102 0
 606 01a4 1196      		adiw r26,1	 ;  209	*movqi/4	[length = 3]
 607 01a6 8C91      		ld r24,X
 608 01a8 1197      		sbiw r26,1
 609 01aa 90E0      		ldi r25,lo8(0)	 ;  610	*movqi/2	[length = 1]
 610 01ac 6296      		adiw r28,80-62	 ;  212	*movhi/3	[length = 4]
 611 01ae 9FAF      		std Y+63,r25
 612 01b0 8EAF      		std Y+62,r24
 613 01b2 6297      		sbiw r28,80-62
 614               	.LVL35:
 103:bertos/net/ax25.c **** 	if (msg.ctrl != AX25_CTRL_UI)
 615               		.loc 1 103 0
 616 01b4 8330      		cpi r24,3	 ;  214	*cmphi/4	[length = 2]
 617 01b6 9105      		cpc r25,__zero_reg__
 618 01b8 01F0      		breq .L21	 ;  215	branch	[length = 1]
 105:bertos/net/ax25.c **** 		LOG_WARN("Only UI frames are handled, got [%02X]\n", msg.ctrl);
 619               		.loc 1 105 0
 620 01ba 00D0      		rcall .	 ;  217	*addhi3_sp_R_pc2	[length = 3]
 621 01bc 00D0      		rcall .
 622 01be 00D0      		rcall .
 623 01c0 EDB7      		in r30,__SP_L__	 ;  569	*movhi_sp/2	[length = 2]
 624 01c2 FEB7      		in r31,__SP_H__
 625 01c4 3196      		adiw r30,1	 ;  445	*addhi3/2	[length = 1]
 626 01c6 20E0      		ldi r18,lo8(__c.1725)	 ;  219	*movhi/4	[length = 2]
 627 01c8 30E0      		ldi r19,hi8(__c.1725)
 628 01ca ADB7      		in r26,__SP_L__	 ;  570	*movhi_sp/2	[length = 2]
 629 01cc BEB7      		in r27,__SP_H__
 630               	.LVL36:
 631 01ce 1296      		adiw r26,1+1	 ;  220	*movhi/3	[length = 4]
 632 01d0 3C93      		st X,r19
 633 01d2 2E93      		st -X,r18
 634 01d4 1197      		sbiw r26,1
 635 01d6 20E0      		ldi r18,lo8(.LC2)	 ;  221	*movhi/4	[length = 2]
 636 01d8 30E0      		ldi r19,hi8(.LC2)
 637 01da 3383      		std Z+3,r19	 ;  222	*movhi/3	[length = 2]
 638 01dc 2283      		std Z+2,r18
 639 01de 9583      		std Z+5,r25	 ;  223	*movhi/3	[length = 2]
 640 01e0 8483      		std Z+4,r24
 641 01e2 00C0      		rjmp .L36	 ;  681	jump	[length = 1]
 642               	.LVL37:
 643               	.L21:
 109:bertos/net/ax25.c **** 	msg.pid = *buf++;
 644               		.loc 1 109 0
 645 01e4 1296      		adiw r26,2	 ;  230	*movqi/4	[length = 3]
 646 01e6 8C91      		ld r24,X
 647 01e8 1297      		sbiw r26,2
 648 01ea 6396      		adiw r28,82-63	 ;  232	*movqi/3	[length = 3]
 649 01ec 8FAF      		std Y+63,r24
 650 01ee 6397      		sbiw r28,82-63
 651               	.LVL38:
 110:bertos/net/ax25.c **** 	if (msg.pid != AX25_PID_NOLAYER3)
 652               		.loc 1 110 0
 653 01f0 803F      		cpi r24,lo8(-16)	 ;  235	*cmpqi/3	[length = 1]
 654 01f2 01F0      		breq .L22	 ;  236	branch	[length = 1]
 112:bertos/net/ax25.c **** 		LOG_WARN("Only frames without layer3 protocol are handled, got [%02X]\n", msg.pid);
 655               		.loc 1 112 0
 656 01f4 00D0      		rcall .	 ;  238	*addhi3_sp_R_pc2	[length = 3]
 657 01f6 00D0      		rcall .
 658 01f8 00D0      		rcall .
 659 01fa EDB7      		in r30,__SP_L__	 ;  573	*movhi_sp/2	[length = 2]
 660 01fc FEB7      		in r31,__SP_H__
 661 01fe 3196      		adiw r30,1	 ;  446	*addhi3/2	[length = 1]
 662 0200 20E0      		ldi r18,lo8(__c.1727)	 ;  240	*movhi/4	[length = 2]
 663 0202 30E0      		ldi r19,hi8(__c.1727)
 664 0204 ADB7      		in r26,__SP_L__	 ;  574	*movhi_sp/2	[length = 2]
 665 0206 BEB7      		in r27,__SP_H__
 666               	.LVL39:
 667 0208 1296      		adiw r26,1+1	 ;  241	*movhi/3	[length = 4]
 668 020a 3C93      		st X,r19
 669 020c 2E93      		st -X,r18
 670 020e 1197      		sbiw r26,1
 671 0210 20E0      		ldi r18,lo8(.LC2)	 ;  242	*movhi/4	[length = 2]
 672 0212 30E0      		ldi r19,hi8(.LC2)
 673 0214 3383      		std Z+3,r19	 ;  243	*movhi/3	[length = 2]
 674 0216 2283      		std Z+2,r18
 675 0218 8483      		std Z+4,r24	 ;  459	*movqi/3	[length = 1]
 676 021a 1582      		std Z+5,__zero_reg__	 ;  460	*movqi/3	[length = 1]
 677               	.L36:
 678               		.cfi_escape 0x2e,0x6
 679 021c 0E94 0000 		call kprintf_P	 ;  246	call_insn/3	[length = 2]
 680 0220 EDB7      		in r30,__SP_L__	 ;  575	*movhi_sp/2	[length = 2]
 681 0222 FEB7      		in r31,__SP_H__
 682 0224 3696      		adiw r30,6	 ;  247	*addhi3/2	[length = 1]
 683 0226 0FB6      		in __tmp_reg__,__SREG__	 ;  576	*movhi_sp/1	[length = 5]
 684 0228 F894      		cli
 685 022a FEBF      		out __SP_H__,r31
 686 022c 0FBE      		out __SREG__,__tmp_reg__
 687 022e EDBF      		out __SP_L__,r30
 688 0230 00C0      		rjmp .L10	 ;  683	jump	[length = 1]
 689               	.LVL40:
 690               	.L22:
 109:bertos/net/ax25.c **** 	msg.pid = *buf++;
 691               		.loc 1 109 0
 692 0232 1396      		adiw r26,3	 ;  252	*addhi3/2	[length = 1]
 693               	.LVL41:
 116:bertos/net/ax25.c **** 	msg.len = ctx->frm_len - 2 - (buf - ctx->buf);
 694               		.loc 1 116 0
 695 0234 C601      		movw r24,r12	 ;  577	*movhi/1	[length = 1]
 696 0236 0297      		sbiw r24,2	 ;  254	*addhi3/3	[length = 1]
 697 0238 9701      		movw r18,r14	 ;  578	*movhi/1	[length = 1]
 698 023a 2A1B      		sub r18,r26	 ;  255	subhi3/1	[length = 2]
 699 023c 3B0B      		sbc r19,r27
 700 023e 820F      		add r24,r18	 ;  256	*addhi3/1	[length = 2]
 701 0240 931F      		adc r25,r19
 702 0242 6796      		adiw r28,85-62	 ;  257	*movhi/3	[length = 4]
 703 0244 9FAF      		std Y+63,r25
 704 0246 8EAF      		std Y+62,r24
 705 0248 6797      		sbiw r28,85-62
 117:bertos/net/ax25.c **** 	msg.info = buf;
 706               		.loc 1 117 0
 707 024a 6596      		adiw r28,83-62	 ;  259	*movhi/3	[length = 4]
 708 024c BFAF      		std Y+63,r27
 709 024e AEAF      		std Y+62,r26
 710 0250 6597      		sbiw r28,83-62
 711               	.LVL42:
 120:bertos/net/ax25.c **** 	if (ctx->hook)
 712               		.loc 1 120 0
 713 0252 F701      		movw r30,r14	 ;  579	*movhi/1	[length = 1]
 714 0254 EE5A      		subi r30,lo8(-(338))	 ;  261	*addhi3/4	[length = 2]
 715 0256 FE4F      		sbci r31,hi8(-(338))
 716 0258 0190      		ld __tmp_reg__,Z+	 ;  262	*movhi/2	[length = 3]
 717 025a F081      		ld r31,Z
 718 025c E02D      		mov r30,__tmp_reg__
 719 025e 3097      		sbiw r30,0	 ;  263	*cmphi/1	[length = 1]
 720 0260 01F0      		breq .L10	 ;  264	branch	[length = 1]
 121:bertos/net/ax25.c **** 		ctx->hook(&msg);
 721               		.loc 1 121 0
 722 0262 CE01      		movw r24,r28	 ;  580	*movhi/1	[length = 1]
 723 0264 0196      		adiw r24,1	 ;  507	*addhi3/2	[length = 1]
 724               		.cfi_escape 0x2e,0
 725 0266 0995      		icall	 ;  268	call_insn/1	[length = 1]
 726               	.LVL43:
 727               	.L10:
 728               	.LBE71:
 729               	.LBE70:
 155:bertos/net/ax25.c **** 			ctx->sync = true;
 730               		.loc 1 155 0
 731 0268 81E0      		ldi r24,lo8(1)	 ;  272	*movqi/2	[length = 1]
 732 026a D501      		movw r26,r10	 ;  581	*movhi/1	[length = 1]
 733 026c 8C93      		st X,r24	 ;  273	*movqi/3	[length = 1]
 156:bertos/net/ax25.c **** 			ctx->crc_in = CRC_CCITT_INIT_VAL;
 734               		.loc 1 156 0
 735 026e 8FEF      		ldi r24,lo8(-1)	 ;  275	*movhi/4	[length = 2]
 736 0270 9FEF      		ldi r25,hi8(-1)
 737 0272 F301      		movw r30,r6	 ;  582	*movhi/1	[length = 1]
 738 0274 9183      		std Z+1,r25	 ;  276	*movhi/3	[length = 2]
 739 0276 8083      		st Z,r24
 157:bertos/net/ax25.c **** 			ctx->frm_len = 0;
 740               		.loc 1 157 0
 741 0278 D401      		movw r26,r8	 ;  583	*movhi/1	[length = 1]
 742 027a 1196      		adiw r26,1	 ;  278	*movhi/3	[length = 3]
 743 027c 1C92      		st X,__zero_reg__
 744 027e 1E92      		st -X,__zero_reg__
 158:bertos/net/ax25.c **** 			continue;
 745               		.loc 1 158 0
 746 0280 00C0      		rjmp .L35	 ;  685	jump	[length = 1]
 747               	.LVL44:
 748               	.L9:
 161:bertos/net/ax25.c **** 		if (!ctx->escape && c == HDLC_RESET)
 749               		.loc 1 161 0 discriminator 1
 750 0282 2F37      		cpi r18,127	 ;  283	*cmphi/4	[length = 2]
 751 0284 3105      		cpc r19,__zero_reg__
 752 0286 01F4      		brne .L24	 ;  284	branch	[length = 1]
 753               	.LVL45:
 164:bertos/net/ax25.c **** 			ctx->sync = false;
 754               		.loc 1 164 0
 755 0288 F501      		movw r30,r10	 ;  584	*movhi/1	[length = 1]
 756 028a 1082      		st Z,__zero_reg__	 ;  288	*movqi/3	[length = 1]
 165:bertos/net/ax25.c **** 			continue;
 757               		.loc 1 165 0
 758 028c 00C0      		rjmp .L35	 ;  687	jump	[length = 1]
 759               	.LVL46:
 760               	.L24:
 168:bertos/net/ax25.c **** 		if (!ctx->escape && c == AX25_ESC)
 761               		.loc 1 168 0 discriminator 1
 762 028e 2B31      		cpi r18,27	 ;  293	*cmphi/4	[length = 2]
 763 0290 3105      		cpc r19,__zero_reg__
 764 0292 01F4      		brne .L8	 ;  294	branch	[length = 1]
 170:bertos/net/ax25.c **** 			ctx->escape = true;
 765               		.loc 1 170 0
 766 0294 81E0      		ldi r24,lo8(1)	 ;  297	*movqi/2	[length = 1]
 767 0296 D201      		movw r26,r4	 ;  585	*movhi/1	[length = 1]
 768 0298 8C93      		st X,r24	 ;  298	*movqi/3	[length = 1]
 171:bertos/net/ax25.c **** 			continue;
 769               		.loc 1 171 0
 770 029a 00C0      		rjmp .L35	 ;  689	jump	[length = 1]
 771               	.L8:
 174:bertos/net/ax25.c **** 		if (ctx->sync)
 772               		.loc 1 174 0
 773 029c F501      		movw r30,r10	 ;  586	*movhi/1	[length = 1]
 774 029e 8081      		ld r24,Z	 ;  304	*movqi/4	[length = 1]
 775 02a0 8823      		tst r24	 ;  305	*cmpqi/1	[length = 1]
 776 02a2 01F0      		breq .L25	 ;  306	branch	[length = 1]
 176:bertos/net/ax25.c **** 			if (ctx->frm_len < CONFIG_AX25_FRAME_BUF_LEN)
 777               		.loc 1 176 0
 778 02a4 D401      		movw r26,r8	 ;  587	*movhi/1	[length = 1]
 779 02a6 8D91      		ld r24,X+	 ;  309	*movhi/2	[length = 3]
 780 02a8 9C91      		ld r25,X
 781 02aa 1197      		sbiw r26,1
 782 02ac B1E0      		ldi r27,hi8(330)	 ;  310	*cmphi/5	[length = 3]
 783 02ae 8A34      		cpi r24,lo8(330)
 784 02b0 9B07      		cpc r25,r27
 785 02b2 00F4      		brsh .L26	 ;  311	branch	[length = 1]
 178:bertos/net/ax25.c **** 				ctx->buf[ctx->frm_len++] = c;
 786               		.loc 1 178 0
 787 02b4 F701      		movw r30,r14	 ;  588	*movhi/1	[length = 1]
 788 02b6 E80F      		add r30,r24	 ;  314	*addhi3/1	[length = 2]
 789 02b8 F91F      		adc r31,r25
 790 02ba 2083      		st Z,r18	 ;  315	*movqi/3	[length = 1]
 791 02bc 0196      		adiw r24,1	 ;  317	*addhi3/2	[length = 1]
 792 02be F401      		movw r30,r8	 ;  589	*movhi/1	[length = 1]
 793 02c0 9183      		std Z+1,r25	 ;  318	*movhi/3	[length = 2]
 794 02c2 8083      		st Z,r24
 179:bertos/net/ax25.c **** 				ctx->crc_in = updcrc_ccitt(c, ctx->crc_in);
 795               		.loc 1 179 0
 796 02c4 D301      		movw r26,r6	 ;  590	*movhi/1	[length = 1]
 797 02c6 4D91      		ld r20,X+	 ;  320	*movhi/2	[length = 3]
 798 02c8 5C91      		ld r21,X
 799 02ca 1197      		sbiw r26,1
 800               	.LVL47:
 801               	.LBB82:
 802               	.LBB83:
 803               	.LBB84:
 804               		.loc 2 60 0
 805 02cc 822F      		mov r24,r18	 ;  607	*movqi/1	[length = 1]
 806 02ce 90E0      		ldi r25,lo8(0)	 ;  608	*movqi/2	[length = 1]
 807 02d0 8427      		eor r24,r20	 ;  324	xorhi3	[length = 2]
 808 02d2 9527      		eor r25,r21
 809 02d4 9070      		andi r25,hi8(255)	 ;  325	andhi3/2	[length = 2]
 810 02d6 880F      		lsl r24	 ;  666	*ashlhi3_const/2	[length = 2]
 811 02d8 991F      		rol r25
 812 02da 8050      		subi r24,lo8(-(crc_ccitt_tab))	 ;  327	*addhi3/4	[length = 2]
 813 02dc 9040      		sbci r25,hi8(-(crc_ccitt_tab))
 814               	.LVL48:
 815 02de FC01      		movw r30,r24	 ;  535	*movhi/1	[length = 1]
 816               	/* #APP */
 817               	 ;  60 "bertos/algo/crc_ccitt.h" 1
 818 02e0 2591      		lpm r18, Z+
 819 02e2 3491      		lpm r19, Z
 820               		
 821               	 ;  0 "" 2
 822               	.LVL49:
 823               	/* #NOAPP */
 824               	.LBE84:
 825 02e4 852F      		mov r24,r21	 ;  667	*lshrhi3_const/3	[length = 2]
 826 02e6 9927      		clr r25
 827               	.LVL50:
 828 02e8 2827      		eor r18,r24	 ;  336	xorhi3	[length = 2]
 829 02ea 3927      		eor r19,r25
 830               	.LVL51:
 831               	.LBE83:
 832               	.LBE82:
 179:bertos/net/ax25.c **** 				ctx->crc_in = updcrc_ccitt(c, ctx->crc_in);
 833               		.loc 1 179 0
 834 02ec 1196      		adiw r26,1	 ;  337	*movhi/3	[length = 3]
 835 02ee 3C93      		st X,r19
 836 02f0 2E93      		st -X,r18
 837 02f2 00C0      		rjmp .L25	 ;  691	jump	[length = 1]
 838               	.LVL52:
 839               	.L26:
 184:bertos/net/ax25.c **** 				ctx->sync = false;
 840               		.loc 1 184 0
 841 02f4 F501      		movw r30,r10	 ;  591	*movhi/1	[length = 1]
 842 02f6 1082      		st Z,__zero_reg__	 ;  344	*movqi/3	[length = 1]
 843               	.LVL53:
 844               	.L25:
 187:bertos/net/ax25.c **** 		ctx->escape = false;
 845               		.loc 1 187 0
 846 02f8 D201      		movw r26,r4	 ;  592	*movhi/1	[length = 1]
 847 02fa 1C92      		st X,__zero_reg__	 ;  348	*movqi/3	[length = 1]
 848               	.L35:
 139:bertos/net/ax25.c **** 	while ((c = kfile_getc(ctx->ch)) != EOF)
 849               		.loc 1 139 0 discriminator 1
 850 02fc F101      		movw r30,r2	 ;  593	*movhi/1	[length = 1]
 851 02fe 8081      		ld r24,Z	 ;  356	*movhi/2	[length = 2]
 852 0300 9181      		ldd r25,Z+1
 853 0302 0E94 0000 		call kfile_getc	 ;  357	call_value_insn/3	[length = 2]
 854 0306 9C01      		movw r18,r24	 ;  358	*movhi/1	[length = 1]
 855               	.LVL54:
 856 0308 FFEF      		ldi r31,hi8(-1)	 ;  361	*cmphi/5	[length = 3]
 857 030a 8F3F      		cpi r24,lo8(-1)
 858 030c 9F07      		cpc r25,r31
 859 030e 01F0      		breq .+2	 ;  362	branch	[length = 2]
 860 0310 00C0      		rjmp .L27
 190:bertos/net/ax25.c **** 	if (kfile_error(ctx->ch))
 861               		.loc 1 190 0
 862 0312 D101      		movw r26,r2	 ;  594	*movhi/1	[length = 1]
 863 0314 0D91      		ld r16,X+	 ;  365	*movhi/2	[length = 3]
 864 0316 1C91      		ld r17,X
 865 0318 1197      		sbiw r26,1
 866               	.LVL55:
 867               	.LBB85:
 868               	.LBB86:
 869               		.file 3 "bertos/kern/kfile.h"
   1:bertos/kern/kfile.h **** /**
   2:bertos/kern/kfile.h ****  * \file
   3:bertos/kern/kfile.h ****  * <!--
   4:bertos/kern/kfile.h ****  * This file is part of BeRTOS.
   5:bertos/kern/kfile.h ****  *
   6:bertos/kern/kfile.h ****  * Bertos is free software; you can redistribute it and/or modify
   7:bertos/kern/kfile.h ****  * it under the terms of the GNU General Public License as published by
   8:bertos/kern/kfile.h ****  * the Free Software Foundation; either version 2 of the License, or
   9:bertos/kern/kfile.h ****  * (at your option) any later version.
  10:bertos/kern/kfile.h ****  *
  11:bertos/kern/kfile.h ****  * This program is distributed in the hope that it will be useful,
  12:bertos/kern/kfile.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bertos/kern/kfile.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bertos/kern/kfile.h ****  * GNU General Public License for more details.
  15:bertos/kern/kfile.h ****  *
  16:bertos/kern/kfile.h ****  * You should have received a copy of the GNU General Public License
  17:bertos/kern/kfile.h ****  * along with this program; if not, write to the Free Software
  18:bertos/kern/kfile.h ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:bertos/kern/kfile.h ****  *
  20:bertos/kern/kfile.h ****  * As a special exception, you may use this file as part of a free software
  21:bertos/kern/kfile.h ****  * library without restriction.  Specifically, if other files instantiate
  22:bertos/kern/kfile.h ****  * templates or use macros or inline functions from this file, or you compile
  23:bertos/kern/kfile.h ****  * this file and link it with other files to produce an executable, this
  24:bertos/kern/kfile.h ****  * file does not by itself cause the resulting executable to be covered by
  25:bertos/kern/kfile.h ****  * the GNU General Public License.  This exception does not however
  26:bertos/kern/kfile.h ****  * invalidate any other reasons why the executable file might be covered by
  27:bertos/kern/kfile.h ****  * the GNU General Public License.
  28:bertos/kern/kfile.h ****  *
  29:bertos/kern/kfile.h ****  * Copyright 2004 Develer S.r.l. (http://www.develer.com/)
  30:bertos/kern/kfile.h ****  * Copyright 1999, 2000, 2001, 2003 Bernie Innocenti <bernie@codewiz.org>
  31:bertos/kern/kfile.h ****  *
  32:bertos/kern/kfile.h ****  * -->
  33:bertos/kern/kfile.h ****  *
  34:bertos/kern/kfile.h ****  * \brief Virtual KFile I/O interface.
  35:bertos/kern/kfile.h ****  *
  36:bertos/kern/kfile.h ****  * KFile is a simple, generic interface for file I/O.  It uses an
  37:bertos/kern/kfile.h ****  * object-oriented model to supply a device-neutral interface to
  38:bertos/kern/kfile.h ****  * communicate with drivers.
  39:bertos/kern/kfile.h ****  *
  40:bertos/kern/kfile.h ****  * This module contains only definitions, the instance structure
  41:bertos/kern/kfile.h ****  * and the common API.
  42:bertos/kern/kfile.h ****  * Each KFile subclass can override one or more methods of the interface,
  43:bertos/kern/kfile.h ****  * and can extend the base KFile structure with its own private data.
  44:bertos/kern/kfile.h ****  * For instance, a serial driver might implement the KFile interface by
  45:bertos/kern/kfile.h ****  * declaring a context structure like this:
  46:bertos/kern/kfile.h ****  *
  47:bertos/kern/kfile.h ****  * \code
  48:bertos/kern/kfile.h ****  * typedef struct Serial
  49:bertos/kern/kfile.h ****  * {
  50:bertos/kern/kfile.h ****  *      // base class instance
  51:bertos/kern/kfile.h ****  *      KFile fd;
  52:bertos/kern/kfile.h ****  *
  53:bertos/kern/kfile.h ****  *      // private instance data
  54:bertos/kern/kfile.h ****  *      FIFOBuffer txfifo, rxfifo;
  55:bertos/kern/kfile.h ****  * } Serial;
  56:bertos/kern/kfile.h ****  * \endcode
  57:bertos/kern/kfile.h ****  *
  58:bertos/kern/kfile.h ****  * You should also supply a macro for casting KFile to Serial:
  59:bertos/kern/kfile.h ****  *
  60:bertos/kern/kfile.h ****  * \code
  61:bertos/kern/kfile.h ****  * INLINE Serial * SERIAL_CAST(KFile *fd)
  62:bertos/kern/kfile.h ****  * {
  63:bertos/kern/kfile.h ****  *		ASSERT(fd->_type == KFT_SERIAL);
  64:bertos/kern/kfile.h ****  *		return (Serial *)fd;
  65:bertos/kern/kfile.h ****  * }
  66:bertos/kern/kfile.h ****  * \endcode
  67:bertos/kern/kfile.h ****  *
  68:bertos/kern/kfile.h ****  * Then you can implement as many interface functions as needed
  69:bertos/kern/kfile.h ****  * and leave the rest to NULL.
  70:bertos/kern/kfile.h ****  *
  71:bertos/kern/kfile.h ****  * Example implementation of the close KFile method for Serial:
  72:bertos/kern/kfile.h ****  *
  73:bertos/kern/kfile.h ****  * \code
  74:bertos/kern/kfile.h ****  * static int ser_kfile_close(struct KFile *fd)
  75:bertos/kern/kfile.h ****  * {
  76:bertos/kern/kfile.h ****  *		Serial *fds = SERIAL_CAST(fd);
  77:bertos/kern/kfile.h ****  *      // [driver specific code here]
  78:bertos/kern/kfile.h ****  *		return 0;
  79:bertos/kern/kfile.h ****  * }
  80:bertos/kern/kfile.h ****  * \endcode
  81:bertos/kern/kfile.h ****  *
  82:bertos/kern/kfile.h ****  * The SERIAL_CAST() macro helps ensure that the passed object is
  83:bertos/kern/kfile.h ****  * really of type Serial.
  84:bertos/kern/kfile.h ****  *
  85:bertos/kern/kfile.h ****  * The KFile interface does not supply an open function: this is deliberate,
  86:bertos/kern/kfile.h ****  * because in embedded systems each device has its own init parameters.
  87:bertos/kern/kfile.h ****  * For the same reason, specific device settings like, for example,
  88:bertos/kern/kfile.h ****  * the baudrate, are not part of interface and should be handled by the
  89:bertos/kern/kfile.h ****  * driver-specific API.
  90:bertos/kern/kfile.h ****  *
  91:bertos/kern/kfile.h ****  * \version $Id: kfile.h 2975 2009-09-27 13:21:27Z batt $
  92:bertos/kern/kfile.h ****  * \author Bernie Innocenti <bernie@codewiz.org>
  93:bertos/kern/kfile.h ****  * \author Francesco Sacchi <batt@develer.com>
  94:bertos/kern/kfile.h ****  * \author Daniele Basile <asterix@develer.com>
  95:bertos/kern/kfile.h ****  *
  96:bertos/kern/kfile.h ****  * $WIZ$ module_name = "kfile"
  97:bertos/kern/kfile.h ****  * $WIZ$ module_configuration = "bertos/cfg/cfg_kfile.h"
  98:bertos/kern/kfile.h ****  * $WIZ$ module_depends = "timer", "formatwr"
  99:bertos/kern/kfile.h ****  */
 100:bertos/kern/kfile.h **** 
 101:bertos/kern/kfile.h **** #ifndef KERN_KFILE_H
 102:bertos/kern/kfile.h **** #define KERN_KFILE_H
 103:bertos/kern/kfile.h **** 
 104:bertos/kern/kfile.h **** #include <cfg/compiler.h>
 105:bertos/kern/kfile.h **** #include <cfg/debug.h>
 106:bertos/kern/kfile.h **** #include <cfg/macros.h>
 107:bertos/kern/kfile.h **** 
 108:bertos/kern/kfile.h **** /* fwd decl */
 109:bertos/kern/kfile.h **** struct KFile;
 110:bertos/kern/kfile.h **** 
 111:bertos/kern/kfile.h **** typedef int32_t kfile_off_t;     ///< KFile offset type, used by kfile_seek().
 112:bertos/kern/kfile.h **** 
 113:bertos/kern/kfile.h **** /**
 114:bertos/kern/kfile.h ****  * Costants for repositioning read/write file offset.
 115:bertos/kern/kfile.h ****  * These are needed because on some embedded platforms
 116:bertos/kern/kfile.h ****  * ANSI I/O library may not be present.
 117:bertos/kern/kfile.h ****  */
 118:bertos/kern/kfile.h **** typedef enum KSeekMode
 119:bertos/kern/kfile.h **** {
 120:bertos/kern/kfile.h **** 	KSM_SEEK_SET, ///< Seek from file beginning.
 121:bertos/kern/kfile.h **** 	KSM_SEEK_CUR, ///< Seek from file current position.
 122:bertos/kern/kfile.h **** 	KSM_SEEK_END, ///< Seek from file end.
 123:bertos/kern/kfile.h **** } KSeekMode;
 124:bertos/kern/kfile.h **** 
 125:bertos/kern/kfile.h **** /**
 126:bertos/kern/kfile.h ****  * Prototypes for KFile access functions.
 127:bertos/kern/kfile.h ****  * I/O file functions must be ANSI compliant.
 128:bertos/kern/kfile.h ****  * \note A KFile user can choose which function subset to implement,
 129:bertos/kern/kfile.h ****  *       but has to set to NULL unimplemented features.
 130:bertos/kern/kfile.h ****  * \{
 131:bertos/kern/kfile.h ****  */
 132:bertos/kern/kfile.h **** 
 133:bertos/kern/kfile.h **** /**
 134:bertos/kern/kfile.h ****  * Read from file.
 135:bertos/kern/kfile.h ****  * \return the number of bytes read.
 136:bertos/kern/kfile.h ****  */
 137:bertos/kern/kfile.h **** typedef size_t (*ReadFunc_t) (struct KFile *fd, void *buf, size_t size);
 138:bertos/kern/kfile.h **** 
 139:bertos/kern/kfile.h **** /**
 140:bertos/kern/kfile.h ****  * Write to file.
 141:bertos/kern/kfile.h ****  * \return the number of bytes written.
 142:bertos/kern/kfile.h ****  */
 143:bertos/kern/kfile.h **** typedef size_t (*WriteFunc_t) (struct KFile *fd, const void *buf, size_t size);
 144:bertos/kern/kfile.h **** 
 145:bertos/kern/kfile.h **** /**
 146:bertos/kern/kfile.h ****  * Seek into file (if seekable).
 147:bertos/kern/kfile.h ****  * \return the new file offset or EOF on errors.
 148:bertos/kern/kfile.h ****  */
 149:bertos/kern/kfile.h **** typedef kfile_off_t (*SeekFunc_t) (struct KFile *fd, kfile_off_t offset, KSeekMode whence);
 150:bertos/kern/kfile.h **** 
 151:bertos/kern/kfile.h **** /**
 152:bertos/kern/kfile.h ****  * Close and reopen file \a fd.
 153:bertos/kern/kfile.h ****  * The reopening is done with the former file parameters and access modes.
 154:bertos/kern/kfile.h ****  */
 155:bertos/kern/kfile.h **** typedef struct KFile * (*ReOpenFunc_t) (struct KFile *fd);
 156:bertos/kern/kfile.h **** 
 157:bertos/kern/kfile.h **** /**
 158:bertos/kern/kfile.h ****  * Close file.
 159:bertos/kern/kfile.h ****  * \return 0 on success, EOF on errors.
 160:bertos/kern/kfile.h ****  */
 161:bertos/kern/kfile.h **** typedef int (*CloseFunc_t) (struct KFile *fd);
 162:bertos/kern/kfile.h **** 
 163:bertos/kern/kfile.h **** /**
 164:bertos/kern/kfile.h ****  * Flush file I/O.
 165:bertos/kern/kfile.h ****  * \return 0 on success, EOF on errors.
 166:bertos/kern/kfile.h ****  */
 167:bertos/kern/kfile.h **** typedef int (*FlushFunc_t) (struct KFile *fd);
 168:bertos/kern/kfile.h **** 
 169:bertos/kern/kfile.h **** /**
 170:bertos/kern/kfile.h ****  * Get file error mask.
 171:bertos/kern/kfile.h ****  * \return 0 on success or file error code, device specific.
 172:bertos/kern/kfile.h ****  */
 173:bertos/kern/kfile.h **** typedef int (*ErrorFunc_t) (struct KFile *fd);
 174:bertos/kern/kfile.h **** 
 175:bertos/kern/kfile.h **** /**
 176:bertos/kern/kfile.h ****  * Clear errors.
 177:bertos/kern/kfile.h ****  */
 178:bertos/kern/kfile.h **** typedef void (*ClearErrFunc_t) (struct KFile *fd);
 179:bertos/kern/kfile.h **** /* \} */
 180:bertos/kern/kfile.h **** 
 181:bertos/kern/kfile.h **** /**
 182:bertos/kern/kfile.h ****  * Context data for callback functions which operate on
 183:bertos/kern/kfile.h ****  * pseudo files.
 184:bertos/kern/kfile.h ****  *
 185:bertos/kern/kfile.h ****  * \note Remember to add the corresponding accessor functions
 186:bertos/kern/kfile.h ****  *       when extending this interface.
 187:bertos/kern/kfile.h ****  */
 188:bertos/kern/kfile.h **** typedef struct KFile
 189:bertos/kern/kfile.h **** {
 190:bertos/kern/kfile.h **** 	ReadFunc_t     read;
 191:bertos/kern/kfile.h **** 	WriteFunc_t    write;
 192:bertos/kern/kfile.h **** 	ReOpenFunc_t   reopen;
 193:bertos/kern/kfile.h **** 	CloseFunc_t    close;
 194:bertos/kern/kfile.h **** 	SeekFunc_t     seek;
 195:bertos/kern/kfile.h **** 	FlushFunc_t    flush;
 196:bertos/kern/kfile.h **** 	ErrorFunc_t    error;
 197:bertos/kern/kfile.h **** 	ClearErrFunc_t clearerr;
 198:bertos/kern/kfile.h **** 	DB(id_t _type); ///< Used to keep track, at runtime, of the class type.
 199:bertos/kern/kfile.h **** 
 200:bertos/kern/kfile.h **** 	/* NOTE: these must _NOT_ be size_t on 16bit CPUs! */
 201:bertos/kern/kfile.h **** 	kfile_off_t    seek_pos;
 202:bertos/kern/kfile.h **** 	kfile_off_t    size;
 203:bertos/kern/kfile.h **** } KFile;
 204:bertos/kern/kfile.h **** 
 205:bertos/kern/kfile.h **** /**
 206:bertos/kern/kfile.h ****  * Generic implementation of kfile_seek.
 207:bertos/kern/kfile.h ****  */
 208:bertos/kern/kfile.h **** kfile_off_t kfile_genericSeek(struct KFile *fd, kfile_off_t offset, KSeekMode whence);
 209:bertos/kern/kfile.h **** 
 210:bertos/kern/kfile.h **** /**
 211:bertos/kern/kfile.h ****  * Generic implementation of kfile_reopen.
 212:bertos/kern/kfile.h ****  */
 213:bertos/kern/kfile.h **** struct KFile * kfile_genericReopen(struct KFile *fd);
 214:bertos/kern/kfile.h **** 
 215:bertos/kern/kfile.h **** int kfile_genericClose(struct KFile *fd);
 216:bertos/kern/kfile.h **** 
 217:bertos/kern/kfile.h **** int kfile_putc(int c, struct KFile *fd); ///< Generic putc implementation using kfile_write.
 218:bertos/kern/kfile.h **** int kfile_getc(struct KFile *fd);  ///< Generic getc implementation using kfile_read.
 219:bertos/kern/kfile.h **** int kfile_printf(struct KFile *fd, const char *format, ...);
 220:bertos/kern/kfile.h **** int kfile_print(struct KFile *fd, const char *s);
 221:bertos/kern/kfile.h **** int kfile_gets(struct KFile *fd, char *buf, int size);
 222:bertos/kern/kfile.h **** int kfile_gets_echo(struct KFile *fd, char *buf, int size, bool echo);
 223:bertos/kern/kfile.h **** void kfile_resync(KFile *fd, mtime_t delay);
 224:bertos/kern/kfile.h **** void kfile_init(struct KFile *fd);
 225:bertos/kern/kfile.h **** 
 226:bertos/kern/kfile.h **** /**
 227:bertos/kern/kfile.h ****  * Interface functions for KFile access.
 228:bertos/kern/kfile.h ****  * \note Remember to change following functions if KFile interface changes.
 229:bertos/kern/kfile.h ****  * \{
 230:bertos/kern/kfile.h ****  */
 231:bertos/kern/kfile.h **** INLINE size_t kfile_read(struct KFile *fd, void *buf, size_t size)
 232:bertos/kern/kfile.h **** {
 233:bertos/kern/kfile.h **** 	ASSERT(fd->read);
 234:bertos/kern/kfile.h **** 	return fd->read(fd, buf, size);
 235:bertos/kern/kfile.h **** }
 236:bertos/kern/kfile.h **** 
 237:bertos/kern/kfile.h **** INLINE size_t kfile_write(struct KFile *fd, const void *buf, size_t size)
 238:bertos/kern/kfile.h **** {
 239:bertos/kern/kfile.h **** 	ASSERT(fd->write);
 240:bertos/kern/kfile.h **** 	return fd->write(fd, buf, size);
 241:bertos/kern/kfile.h **** }
 242:bertos/kern/kfile.h **** 
 243:bertos/kern/kfile.h **** INLINE KFile * kfile_reopen(struct KFile *fd)
 244:bertos/kern/kfile.h **** {
 245:bertos/kern/kfile.h **** 	ASSERT(fd->reopen);
 246:bertos/kern/kfile.h **** 	return fd->reopen(fd);
 247:bertos/kern/kfile.h **** }
 248:bertos/kern/kfile.h **** 
 249:bertos/kern/kfile.h **** INLINE int kfile_close(struct KFile *fd)
 250:bertos/kern/kfile.h **** {
 251:bertos/kern/kfile.h **** 	ASSERT(fd->close);
 252:bertos/kern/kfile.h **** 	return fd->close(fd);
 253:bertos/kern/kfile.h **** }
 254:bertos/kern/kfile.h **** 
 255:bertos/kern/kfile.h **** INLINE kfile_off_t kfile_seek(struct KFile *fd, kfile_off_t offset, KSeekMode whence)
 256:bertos/kern/kfile.h **** {
 257:bertos/kern/kfile.h **** 	ASSERT(fd->seek);
 258:bertos/kern/kfile.h **** 	return fd->seek(fd, offset, whence);
 259:bertos/kern/kfile.h **** }
 260:bertos/kern/kfile.h **** 
 261:bertos/kern/kfile.h **** INLINE int kfile_flush(struct KFile *fd)
 262:bertos/kern/kfile.h **** {
 263:bertos/kern/kfile.h **** 	ASSERT(fd->flush);
 264:bertos/kern/kfile.h **** 	return fd->flush(fd);
 265:bertos/kern/kfile.h **** }
 266:bertos/kern/kfile.h **** 
 267:bertos/kern/kfile.h **** INLINE int kfile_error(struct KFile *fd)
 268:bertos/kern/kfile.h **** {
 269:bertos/kern/kfile.h **** 	ASSERT(fd->error);
 870               		.loc 3 269 0
 871 031a F801      		movw r30,r16	 ;  595	*movhi/1	[length = 1]
 872 031c 8485      		ldd r24,Z+12	 ;  367	*movhi/2	[length = 2]
 873 031e 9585      		ldd r25,Z+13
 874               	.LVL56:
 875 0320 0097      		sbiw r24,0	 ;  368	*cmphi/1	[length = 1]
 876 0322 01F4      		brne .L28	 ;  369	branch	[length = 1]
 877 0324 80E0      		ldi r24,lo8(__c.1462)	 ;  374	*movhi/4	[length = 2]
 878 0326 90E0      		ldi r25,hi8(__c.1462)
 879 0328 60E0      		ldi r22,lo8(__c.1464)	 ;  375	*movhi/4	[length = 2]
 880 032a 70E0      		ldi r23,hi8(__c.1464)
 881 032c 4DE0      		ldi r20,lo8(269)	 ;  376	*movhi/4	[length = 2]
 882 032e 51E0      		ldi r21,hi8(269)
 883 0330 0E94 0000 		call __bassert_P	 ;  377	call_value_insn/3	[length = 2]
 884               	.LVL57:
 885               	.L28:
 270:bertos/kern/kfile.h **** 	return fd->error(fd);
 886               		.loc 3 270 0
 887 0334 D801      		movw r26,r16	 ;  596	*movhi/1	[length = 1]
 888 0336 1C96      		adiw r26,12	 ;  381	*movhi/2	[length = 4]
 889 0338 ED91      		ld r30,X+
 890 033a FC91      		ld r31,X
 891 033c 1D97      		sbiw r26,12+1
 892 033e C801      		movw r24,r16	 ;  382	*movhi/1	[length = 1]
 893 0340 0995      		icall	 ;  383	call_value_insn/1	[length = 1]
 894               	.LBE86:
 895               	.LBE85:
 190:bertos/net/ax25.c **** 	if (kfile_error(ctx->ch))
 896               		.loc 1 190 0
 897 0342 0097      		sbiw r24,0	 ;  385	*cmphi/1	[length = 1]
 898 0344 01F4      		brne .+2	 ;  386	branch	[length = 2]
 899 0346 00C0      		rjmp .L6
 192:bertos/net/ax25.c **** 		LOG_ERR("Channel error [%04x]\n", kfile_error(ctx->ch));
 900               		.loc 1 192 0
 901 0348 F701      		movw r30,r14	 ;  597	*movhi/1	[length = 1]
 902 034a E65B      		subi r30,lo8(-(330))	 ;  388	*addhi3/4	[length = 2]
 903 034c FE4F      		sbci r31,hi8(-(330))
 904 034e 0081      		ld r16,Z	 ;  389	*movhi/2	[length = 2]
 905 0350 1181      		ldd r17,Z+1
 906               	.LVL58:
 907               	.LBB87:
 908               	.LBB88:
 269:bertos/kern/kfile.h **** 	ASSERT(fd->error);
 909               		.loc 3 269 0
 910 0352 F801      		movw r30,r16	 ;  598	*movhi/1	[length = 1]
 911               	.LVL59:
 912 0354 8485      		ldd r24,Z+12	 ;  391	*movhi/2	[length = 2]
 913 0356 9585      		ldd r25,Z+13
 914 0358 0097      		sbiw r24,0	 ;  392	*cmphi/1	[length = 1]
 915 035a 01F4      		brne .L30	 ;  393	branch	[length = 1]
 916 035c 80E0      		ldi r24,lo8(__c.1462)	 ;  398	*movhi/4	[length = 2]
 917 035e 90E0      		ldi r25,hi8(__c.1462)
 918 0360 60E0      		ldi r22,lo8(__c.1464)	 ;  399	*movhi/4	[length = 2]
 919 0362 70E0      		ldi r23,hi8(__c.1464)
 920 0364 4DE0      		ldi r20,lo8(269)	 ;  400	*movhi/4	[length = 2]
 921 0366 51E0      		ldi r21,hi8(269)
 922 0368 0E94 0000 		call __bassert_P	 ;  401	call_value_insn/3	[length = 2]
 923               	.L30:
 924               		.loc 3 270 0
 925 036c D801      		movw r26,r16	 ;  599	*movhi/1	[length = 1]
 926 036e 1C96      		adiw r26,12	 ;  405	*movhi/2	[length = 4]
 927 0370 ED91      		ld r30,X+
 928 0372 FC91      		ld r31,X
 929 0374 1D97      		sbiw r26,12+1
 930 0376 C801      		movw r24,r16	 ;  406	*movhi/1	[length = 1]
 931 0378 0995      		icall	 ;  407	call_value_insn/1	[length = 1]
 932               	.LBE88:
 933               	.LBE87:
 192:bertos/net/ax25.c **** 		LOG_ERR("Channel error [%04x]\n", kfile_error(ctx->ch));
 934               		.loc 1 192 0
 935 037a 00D0      		rcall .	 ;  409	*addhi3_sp_R_pc2	[length = 3]
 936 037c 00D0      		rcall .
 937 037e 00D0      		rcall .
 938 0380 EDB7      		in r30,__SP_L__	 ;  600	*movhi_sp/2	[length = 2]
 939 0382 FEB7      		in r31,__SP_H__
 940 0384 3196      		adiw r30,1	 ;  454	*addhi3/2	[length = 1]
 941 0386 20E0      		ldi r18,lo8(__c.1736)	 ;  411	*movhi/4	[length = 2]
 942 0388 30E0      		ldi r19,hi8(__c.1736)
 943 038a ADB7      		in r26,__SP_L__	 ;  601	*movhi_sp/2	[length = 2]
 944 038c BEB7      		in r27,__SP_H__
 945 038e 1296      		adiw r26,1+1	 ;  412	*movhi/3	[length = 4]
 946 0390 3C93      		st X,r19
 947 0392 2E93      		st -X,r18
 948 0394 1197      		sbiw r26,1
 949 0396 20E0      		ldi r18,lo8(.LC3)	 ;  413	*movhi/4	[length = 2]
 950 0398 30E0      		ldi r19,hi8(.LC3)
 951 039a 3383      		std Z+3,r19	 ;  414	*movhi/3	[length = 2]
 952 039c 2283      		std Z+2,r18
 953 039e 9583      		std Z+5,r25	 ;  415	*movhi/3	[length = 2]
 954 03a0 8483      		std Z+4,r24
 955               		.cfi_escape 0x2e,0x6
 956 03a2 0E94 0000 		call kprintf_P	 ;  416	call_insn/3	[length = 2]
 193:bertos/net/ax25.c **** 		kfile_clearerr(ctx->ch);
 957               		.loc 1 193 0
 958 03a6 F701      		movw r30,r14	 ;  602	*movhi/1	[length = 1]
 959 03a8 E65B      		subi r30,lo8(-(330))	 ;  417	*addhi3/4	[length = 2]
 960 03aa FE4F      		sbci r31,hi8(-(330))
 961 03ac 0081      		ld r16,Z	 ;  418	*movhi/2	[length = 2]
 962 03ae 1181      		ldd r17,Z+1
 963               	.LVL60:
 964               	.LBB89:
 965               	.LBB90:
 271:bertos/kern/kfile.h **** }
 272:bertos/kern/kfile.h **** 
 273:bertos/kern/kfile.h **** INLINE void kfile_clearerr(struct KFile *fd)
 274:bertos/kern/kfile.h **** {
 275:bertos/kern/kfile.h **** 	ASSERT(fd->clearerr);
 966               		.loc 3 275 0
 967 03b0 EDB7      		in r30,__SP_L__	 ;  603	*movhi_sp/2	[length = 2]
 968 03b2 FEB7      		in r31,__SP_H__
 969               	.LVL61:
 970 03b4 3696      		adiw r30,6	 ;  420	*addhi3/2	[length = 1]
 971 03b6 0FB6      		in __tmp_reg__,__SREG__	 ;  604	*movhi_sp/1	[length = 5]
 972 03b8 F894      		cli
 973 03ba FEBF      		out __SP_H__,r31
 974 03bc 0FBE      		out __SREG__,__tmp_reg__
 975 03be EDBF      		out __SP_L__,r30
 976 03c0 D801      		movw r26,r16	 ;  605	*movhi/1	[length = 1]
 977 03c2 1E96      		adiw r26,14	 ;  421	*movhi/2	[length = 4]
 978 03c4 8D91      		ld r24,X+
 979 03c6 9C91      		ld r25,X
 980 03c8 1F97      		sbiw r26,14+1
 981 03ca 0097      		sbiw r24,0	 ;  422	*cmphi/1	[length = 1]
 982 03cc 01F4      		brne .L31	 ;  423	branch	[length = 1]
 983 03ce 80E0      		ldi r24,lo8(__c.1469)	 ;  428	*movhi/4	[length = 2]
 984 03d0 90E0      		ldi r25,hi8(__c.1469)
 985 03d2 60E0      		ldi r22,lo8(__c.1471)	 ;  429	*movhi/4	[length = 2]
 986 03d4 70E0      		ldi r23,hi8(__c.1471)
 987 03d6 43E1      		ldi r20,lo8(275)	 ;  430	*movhi/4	[length = 2]
 988 03d8 51E0      		ldi r21,hi8(275)
 989               		.cfi_escape 0x2e,0
 990 03da 0E94 0000 		call __bassert_P	 ;  431	call_value_insn/3	[length = 2]
 991               	.L31:
 276:bertos/kern/kfile.h **** 	fd->clearerr(fd);
 992               		.loc 3 276 0
 993 03de D801      		movw r26,r16	 ;  606	*movhi/1	[length = 1]
 994 03e0 1E96      		adiw r26,14	 ;  435	*movhi/2	[length = 4]
 995 03e2 ED91      		ld r30,X+
 996 03e4 FC91      		ld r31,X
 997 03e6 1F97      		sbiw r26,14+1
 998 03e8 C801      		movw r24,r16	 ;  436	*movhi/1	[length = 1]
 999 03ea 0995      		icall	 ;  437	call_insn/1	[length = 1]
 1000               	.LVL62:
 1001               	.L6:
 1002               	/* epilogue start */
 1003               	.LBE90:
 1004               	.LBE89:
 195:bertos/net/ax25.c **** }
 1005               		.loc 1 195 0
 1006 03ec CA5A      		subi r28,lo8(-(86))	 ;  636	*addhi3/4	[length = 2]
 1007 03ee DF4F      		sbci r29,hi8(-(86))
 1008 03f0 0FB6      		in __tmp_reg__,__SREG__	 ;  637	*movhi_sp/1	[length = 5]
 1009 03f2 F894      		cli
 1010 03f4 DEBF      		out __SP_H__,r29
 1011 03f6 0FBE      		out __SREG__,__tmp_reg__
 1012 03f8 CDBF      		out __SP_L__,r28
 1013 03fa DF91      		pop r29	 ;  638	popqi	[length = 1]
 1014 03fc CF91      		pop r28	 ;  639	popqi	[length = 1]
 1015 03fe 1F91      		pop r17	 ;  640	popqi	[length = 1]
 1016 0400 0F91      		pop r16	 ;  641	popqi	[length = 1]
 1017 0402 FF90      		pop r15	 ;  642	popqi	[length = 1]
 1018 0404 EF90      		pop r14	 ;  643	popqi	[length = 1]
 1019               	.LVL63:
 1020 0406 DF90      		pop r13	 ;  644	popqi	[length = 1]
 1021 0408 CF90      		pop r12	 ;  645	popqi	[length = 1]
 1022 040a BF90      		pop r11	 ;  646	popqi	[length = 1]
 1023 040c AF90      		pop r10	 ;  647	popqi	[length = 1]
 1024 040e 9F90      		pop r9	 ;  648	popqi	[length = 1]
 1025 0410 8F90      		pop r8	 ;  649	popqi	[length = 1]
 1026 0412 7F90      		pop r7	 ;  650	popqi	[length = 1]
 1027 0414 6F90      		pop r6	 ;  651	popqi	[length = 1]
 1028 0416 5F90      		pop r5	 ;  652	popqi	[length = 1]
 1029 0418 4F90      		pop r4	 ;  653	popqi	[length = 1]
 1030 041a 3F90      		pop r3	 ;  654	popqi	[length = 1]
 1031 041c 2F90      		pop r2	 ;  655	popqi	[length = 1]
 1032 041e 0895      		ret	 ;  656	return_from_epilogue	[length = 1]
 1033               		.cfi_endproc
 1034               	.LFE11:
 1036               		.section	.text.ax25_sendVia,"ax",@progbits
 1037               	.global	ax25_sendVia
 1039               	ax25_sendVia:
 1040               	.LFB14:
 238:bertos/net/ax25.c **** {
 1041               		.loc 1 238 0
 1042               		.cfi_startproc
 1043               	.LVL64:
 1044 0000 2F92      		push r2	 ;  328	*pushqi/1	[length = 1]
 1045               	.LCFI30:
 1046               		.cfi_def_cfa_offset 3
 1047               		.cfi_offset 2, -2
 1048 0002 3F92      		push r3	 ;  329	*pushqi/1	[length = 1]
 1049               	.LCFI31:
 1050               		.cfi_def_cfa_offset 4
 1051               		.cfi_offset 3, -3
 1052 0004 4F92      		push r4	 ;  330	*pushqi/1	[length = 1]
 1053               	.LCFI32:
 1054               		.cfi_def_cfa_offset 5
 1055               		.cfi_offset 4, -4
 1056 0006 5F92      		push r5	 ;  331	*pushqi/1	[length = 1]
 1057               	.LCFI33:
 1058               		.cfi_def_cfa_offset 6
 1059               		.cfi_offset 5, -5
 1060 0008 6F92      		push r6	 ;  332	*pushqi/1	[length = 1]
 1061               	.LCFI34:
 1062               		.cfi_def_cfa_offset 7
 1063               		.cfi_offset 6, -6
 1064 000a 7F92      		push r7	 ;  333	*pushqi/1	[length = 1]
 1065               	.LCFI35:
 1066               		.cfi_def_cfa_offset 8
 1067               		.cfi_offset 7, -7
 1068 000c 8F92      		push r8	 ;  334	*pushqi/1	[length = 1]
 1069               	.LCFI36:
 1070               		.cfi_def_cfa_offset 9
 1071               		.cfi_offset 8, -8
 1072 000e 9F92      		push r9	 ;  335	*pushqi/1	[length = 1]
 1073               	.LCFI37:
 1074               		.cfi_def_cfa_offset 10
 1075               		.cfi_offset 9, -9
 1076 0010 AF92      		push r10	 ;  336	*pushqi/1	[length = 1]
 1077               	.LCFI38:
 1078               		.cfi_def_cfa_offset 11
 1079               		.cfi_offset 10, -10
 1080 0012 BF92      		push r11	 ;  337	*pushqi/1	[length = 1]
 1081               	.LCFI39:
 1082               		.cfi_def_cfa_offset 12
 1083               		.cfi_offset 11, -11
 1084 0014 CF92      		push r12	 ;  338	*pushqi/1	[length = 1]
 1085               	.LCFI40:
 1086               		.cfi_def_cfa_offset 13
 1087               		.cfi_offset 12, -12
 1088 0016 DF92      		push r13	 ;  339	*pushqi/1	[length = 1]
 1089               	.LCFI41:
 1090               		.cfi_def_cfa_offset 14
 1091               		.cfi_offset 13, -13
 1092 0018 EF92      		push r14	 ;  340	*pushqi/1	[length = 1]
 1093               	.LCFI42:
 1094               		.cfi_def_cfa_offset 15
 1095               		.cfi_offset 14, -14
 1096 001a FF92      		push r15	 ;  341	*pushqi/1	[length = 1]
 1097               	.LCFI43:
 1098               		.cfi_def_cfa_offset 16
 1099               		.cfi_offset 15, -15
 1100 001c 0F93      		push r16	 ;  342	*pushqi/1	[length = 1]
 1101               	.LCFI44:
 1102               		.cfi_def_cfa_offset 17
 1103               		.cfi_offset 16, -16
 1104 001e 1F93      		push r17	 ;  343	*pushqi/1	[length = 1]
 1105               	.LCFI45:
 1106               		.cfi_def_cfa_offset 18
 1107               		.cfi_offset 17, -17
 1108 0020 CF93      		push r28	 ;  344	*pushqi/1	[length = 1]
 1109               	.LCFI46:
 1110               		.cfi_def_cfa_offset 19
 1111               		.cfi_offset 28, -18
 1112 0022 DF93      		push r29	 ;  345	*pushqi/1	[length = 1]
 1113               	.LCFI47:
 1114               		.cfi_def_cfa_offset 20
 1115               		.cfi_offset 29, -19
 1116 0024 00D0      		rcall .	 ;  349	*addhi3_sp_R_pc2	[length = 3]
 1117 0026 00D0      		rcall .
 1118 0028 0F92      		push __tmp_reg__
 1119               	.LCFI48:
 1120               		.cfi_def_cfa_offset 25
 1121 002a CDB7      		in r28,__SP_L__	 ;  350	*movhi_sp/2	[length = 2]
 1122 002c DEB7      		in r29,__SP_H__
 1123               	.LCFI49:
 1124               		.cfi_def_cfa_register 28
 1125               	/* prologue: function */
 1126               	/* frame size = 5 */
 1127               	/* stack size = 23 */
 1128               	.L__stack_usage = 23
 1129 002e 6C01      		movw r12,r24	 ;  2	*movhi/1	[length = 1]
 1130 0030 5B01      		movw r10,r22	 ;  3	*movhi/1	[length = 1]
 1131 0032 1A01      		movw r2,r20	 ;  4	*movhi/1	[length = 1]
 1132 0034 2983      		std Y+1,r18	 ;  254	*movqi/3	[length = 1]
 1133 0036 3A83      		std Y+2,r19	 ;  255	*movqi/3	[length = 1]
 1134 0038 2801      		movw r4,r16	 ;  6	*movhi/1	[length = 1]
 1135               	.LVL65:
 240:bertos/net/ax25.c **** 	ASSERT(path);
 1136               		.loc 1 240 0
 1137 003a 6115      		cp r22,__zero_reg__	 ;  16	*cmphi/2	[length = 2]
 1138 003c 7105      		cpc r23,__zero_reg__
 1139 003e 01F4      		brne .L38	 ;  17	branch	[length = 1]
 1140               	.LVL66:
 240:bertos/net/ax25.c **** 	ASSERT(path);
 1141               		.loc 1 240 0 is_stmt 0 discriminator 1
 1142 0040 80E0      		ldi r24,lo8(__c.1775)	 ;  22	*movhi/4	[length = 2]
 1143 0042 90E0      		ldi r25,hi8(__c.1775)
 1144 0044 60E0      		ldi r22,lo8(__c.1777)	 ;  23	*movhi/4	[length = 2]
 1145 0046 70E0      		ldi r23,hi8(__c.1777)
 1146 0048 40EF      		ldi r20,lo8(240)	 ;  24	*movhi/4	[length = 2]
 1147 004a 50E0      		ldi r21,hi8(240)
 1148 004c 0E94 0000 		call __bassert_P	 ;  25	call_value_insn/3	[length = 2]
 1149               	.LVL67:
 1150               	.L38:
 241:bertos/net/ax25.c **** 	ASSERT(path_len >= 2);
 1151               		.loc 1 241 0 is_stmt 1
 1152 0050 22E0      		ldi r18,lo8(2)	 ;  28	*cmphi/6	[length = 3]
 1153 0052 2216      		cp r2,r18
 1154 0054 3104      		cpc r3,__zero_reg__
 1155 0056 00F4      		brsh .L39	 ;  29	branch	[length = 1]
 241:bertos/net/ax25.c **** 	ASSERT(path_len >= 2);
 1156               		.loc 1 241 0 is_stmt 0 discriminator 1
 1157 0058 80E0      		ldi r24,lo8(__c.1779)	 ;  34	*movhi/4	[length = 2]
 1158 005a 90E0      		ldi r25,hi8(__c.1779)
 1159 005c 60E0      		ldi r22,lo8(__c.1781)	 ;  35	*movhi/4	[length = 2]
 1160 005e 70E0      		ldi r23,hi8(__c.1781)
 1161 0060 41EF      		ldi r20,lo8(241)	 ;  36	*movhi/4	[length = 2]
 1162 0062 50E0      		ldi r21,hi8(241)
 1163 0064 0E94 0000 		call __bassert_P	 ;  37	call_value_insn/3	[length = 2]
 1164               	.L39:
 243:bertos/net/ax25.c **** 	ctx->crc_out = CRC_CCITT_INIT_VAL;
 1165               		.loc 1 243 0 is_stmt 1
 1166 0068 F601      		movw r30,r12	 ;  305	*movhi/1	[length = 1]
 1167 006a E05B      		subi r30,lo8(-(336))	 ;  40	*addhi3/4	[length = 2]
 1168 006c FE4F      		sbci r31,hi8(-(336))
 1169 006e 8FEF      		ldi r24,lo8(-1)	 ;  41	*movhi/4	[length = 2]
 1170 0070 9FEF      		ldi r25,hi8(-1)
 1171 0072 9183      		std Z+1,r25	 ;  42	*movhi/3	[length = 2]
 1172 0074 8083      		st Z,r24
 244:bertos/net/ax25.c **** 	kfile_putc(HDLC_FLAG, ctx->ch);
 1173               		.loc 1 244 0
 1174 0076 F601      		movw r30,r12	 ;  306	*movhi/1	[length = 1]
 1175 0078 E65B      		subi r30,lo8(-(330))	 ;  44	*addhi3/4	[length = 2]
 1176 007a FE4F      		sbci r31,hi8(-(330))
 1177 007c 6081      		ld r22,Z	 ;  45	*movhi/2	[length = 2]
 1178 007e 7181      		ldd r23,Z+1
 1179 0080 8EE7      		ldi r24,lo8(126)	 ;  46	*movhi/4	[length = 2]
 1180 0082 90E0      		ldi r25,hi8(126)
 1181 0084 0E94 0000 		call kfile_putc	 ;  48	call_value_insn/3	[length = 2]
 1182               	.LVL68:
 1183               	.LBB106:
 248:bertos/net/ax25.c **** 	for (size_t i = 0; i < path_len; i++)
 1184               		.loc 1 248 0
 1185 0088 8824      		clr r8	 ;  11	*movhi/5	[length = 2]
 1186 008a 9924      		clr r9
 249:bertos/net/ax25.c **** 		ax25_sendCall(ctx, &path[i], (i == path_len - 1));
 1187               		.loc 1 249 0
 1188 008c 9101      		movw r18,r2	 ;  307	*movhi/1	[length = 1]
 1189 008e 2150      		subi r18,lo8(-(-1))	 ;  55	*addhi3/4	[length = 2]
 1190 0090 3040      		sbci r19,hi8(-(-1))
 1191 0092 3C83      		std Y+4,r19	 ;  308	*movhi/3	[length = 2]
 1192 0094 2B83      		std Y+3,r18
 248:bertos/net/ax25.c **** 	for (size_t i = 0; i < path_len; i++)
 1193               		.loc 1 248 0
 1194 0096 00C0      		rjmp .L40	 ;  379	jump	[length = 1]
 1195               	.LVL69:
 1196               	.L49:
 1197               	.LBB107:
 1198               	.LBB108:
 1199               	.LBB109:
 208:bertos/net/ax25.c **** 	unsigned len = MIN(sizeof(addr->call), strlen(addr->call));
 1200               		.loc 1 208 0 discriminator 2
 1201 0098 D501      		movw r26,r10	 ;  309	*movhi/1	[length = 1]
 1202 009a 0D90      		ld __tmp_reg__,X+	 ;  61	*strlenhi	[length = 3]
 1203 009c 0020      		tst __tmp_reg__
 1204 009e 01F4      		brne .-6
 1205 00a0 8D01      		movw r16,r26	 ;  310	*movhi/1	[length = 1]
 1206 00a2 0150      		subi r16,lo8(-(-1))	 ;  62	*addhi3/4	[length = 2]
 1207 00a4 1040      		sbci r17,hi8(-(-1))
 1208 00a6 0A19      		sub r16,r10	 ;  63	subhi3/1	[length = 2]
 1209 00a8 1B09      		sbc r17,r11
 1210 00aa 0730      		cpi r16,7	 ;  67	*cmphi/4	[length = 2]
 1211 00ac 1105      		cpc r17,__zero_reg__
 1212 00ae 00F0      		brlo .L41	 ;  68	branch	[length = 1]
 1213 00b0 06E0      		ldi r16,lo8(6)	 ;  281	*movhi/4	[length = 2]
 1214 00b2 10E0      		ldi r17,hi8(6)
 1215               	.L41:
 1216               	.LVL70:
 1217 00b4 3501      		movw r6,r10	 ;  8	*movhi/1	[length = 1]
 210:bertos/net/ax25.c **** 	for (unsigned i = 0; i < len; i++)
 1218               		.loc 1 210 0 discriminator 2
 1219 00b6 EE24      		clr r14	 ;  282	*movhi/5	[length = 2]
 1220 00b8 FF24      		clr r15
 1221 00ba 00C0      		rjmp .L42	 ;  381	jump	[length = 1]
 1222               	.LVL71:
 1223               	.L44:
 1224               	.LBE109:
 1225               	.LBB110:
 1226               	.LBB111:
 212:bertos/net/ax25.c **** 		uint8_t c = addr->call[i];
 1227               		.loc 1 212 0
 1228 00bc F301      		movw r30,r6	 ;  311	*movhi/1	[length = 1]
 1229 00be 2191      		ld r18,Z+	 ;  76	*movqi/4	[length = 1]
 1230 00c0 3F01      		movw r6,r30	 ;  312	*movhi/1	[length = 1]
 1231               	.LVL72:
 213:bertos/net/ax25.c **** 		ASSERT(isalnum(c) || c == ' ');
 1232               		.loc 1 213 0
 1233 00c2 822F      		mov r24,r18	 ;  263	*movqi/1	[length = 1]
 1234 00c4 90E0      		ldi r25,lo8(0)	 ;  264	*movqi/2	[length = 1]
 1235 00c6 2D83      		std Y+5,r18	 ;  301	*movqi/3	[length = 1]
 1236 00c8 0E94 0000 		call isalnum	 ;  83	call_value_insn/3	[length = 2]
 1237               	.LVL73:
 1238 00cc 2D81      		ldd r18,Y+5	 ;  302	*movqi/4	[length = 1]
 1239               	.LVL74:
 1240 00ce 0097      		sbiw r24,0	 ;  85	*cmphi/1	[length = 1]
 1241 00d0 01F4      		brne .L43	 ;  86	branch	[length = 1]
 1242 00d2 2032      		cpi r18,lo8(32)	 ;  88	*cmpqi/3	[length = 1]
 1243 00d4 01F0      		breq .L43	 ;  89	branch	[length = 1]
 1244 00d6 80E0      		ldi r24,lo8(__c.1755)	 ;  278	*movhi/4	[length = 2]
 1245 00d8 90E0      		ldi r25,hi8(__c.1755)
 1246 00da 60E0      		ldi r22,lo8(__c.1757)	 ;  279	*movhi/4	[length = 2]
 1247 00dc 70E0      		ldi r23,hi8(__c.1757)
 1248 00de 45ED      		ldi r20,lo8(213)	 ;  96	*movhi/4	[length = 2]
 1249 00e0 50E0      		ldi r21,hi8(213)
 1250 00e2 0E94 0000 		call __bassert_P	 ;  97	call_value_insn/3	[length = 2]
 1251               	.LVL75:
 1252 00e6 2D81      		ldd r18,Y+5	 ;  304	*movqi/4	[length = 1]
 1253               	.L43:
 214:bertos/net/ax25.c **** 		c = toupper(c);
 1254               		.loc 1 214 0
 1255 00e8 822F      		mov r24,r18	 ;  265	*movqi/1	[length = 1]
 1256 00ea 90E0      		ldi r25,lo8(0)	 ;  266	*movqi/2	[length = 1]
 1257 00ec 0E94 0000 		call toupper	 ;  102	call_value_insn/3	[length = 2]
 1258               	.LVL76:
 215:bertos/net/ax25.c **** 		ax25_putchar(ctx, c << 1);
 1259               		.loc 1 215 0
 1260 00f0 682F      		mov r22,r24	 ;  313	*movqi/1	[length = 1]
 1261 00f2 660F      		lsl r22	 ;  106	*ashlqi3/3	[length = 1]
 1262 00f4 C601      		movw r24,r12	 ;  107	*movhi/1	[length = 1]
 1263               	.LVL77:
 1264 00f6 0E94 0000 		call ax25_putchar	 ;  109	call_insn/3	[length = 2]
 1265               	.LBE111:
 210:bertos/net/ax25.c **** 	for (unsigned i = 0; i < len; i++)
 1266               		.loc 1 210 0
 1267 00fa 0894      		sec	 ;  110	*addhi3/5	[length = 3]
 1268 00fc E11C      		adc r14,__zero_reg__
 1269 00fe F11C      		adc r15,__zero_reg__
 1270               	.LVL78:
 1271               	.L42:
 1272 0100 E016      		cp r14,r16	 ;  116	*cmphi/3	[length = 2]
 1273 0102 F106      		cpc r15,r17
 1274 0104 01F4      		brne .L44	 ;  117	branch	[length = 1]
 1275               	.LBE110:
 219:bertos/net/ax25.c **** 	if (len < sizeof(addr->call))
 1276               		.loc 1 219 0
 1277 0106 F6E0      		ldi r31,lo8(6)	 ;  119	*cmphi/6	[length = 3]
 1278 0108 EF16      		cp r14,r31
 1279 010a F104      		cpc r15,__zero_reg__
 1280 010c 00F0      		brlo .L53	 ;  120	branch	[length = 1]
 1281 010e 00C0      		rjmp .L46	 ;  384	jump	[length = 1]
 1282               	.LVL79:
 1283               	.L47:
 1284               	.LBB112:
 221:bertos/net/ax25.c **** 			ax25_putchar(ctx, ' ' << 1);
 1285               		.loc 1 221 0
 1286 0110 C601      		movw r24,r12	 ;  126	*movhi/1	[length = 1]
 1287 0112 60E4      		ldi r22,lo8(64)	 ;  127	*movqi/2	[length = 1]
 1288 0114 0E94 0000 		call ax25_putchar	 ;  128	call_insn/3	[length = 2]
 220:bertos/net/ax25.c **** 		for (unsigned i = 0; i < sizeof(addr->call) - len; i++)
 1289               		.loc 1 220 0
 1290 0118 0F5F      		subi r16,lo8(-(1))	 ;  129	*addhi3/4	[length = 2]
 1291 011a 1F4F      		sbci r17,hi8(-(1))
 1292               	.LVL80:
 1293 011c 00C0      		rjmp .L45	 ;  386	jump	[length = 1]
 1294               	.LVL81:
 1295               	.L53:
 1296               	.LBE112:
 219:bertos/net/ax25.c **** 	if (len < sizeof(addr->call))
 1297               		.loc 1 219 0
 1298 011e 00E0      		ldi r16,lo8(0)	 ;  285	*movhi/4	[length = 2]
 1299 0120 10E0      		ldi r17,hi8(0)
 1300               	.LVL82:
 1301               	.LBB113:
 220:bertos/net/ax25.c **** 		for (unsigned i = 0; i < sizeof(addr->call) - len; i++)
 1302               		.loc 1 220 0
 1303 0122 26E0      		ldi r18,lo8(6)	 ;  314	*movhi/4	[length = 2]
 1304 0124 30E0      		ldi r19,hi8(6)
 1305 0126 2E19      		sub r18,r14	 ;  136	subhi3/1	[length = 2]
 1306 0128 3F09      		sbc r19,r15
 1307 012a 7901      		movw r14,r18	 ;  315	*movhi/1	[length = 1]
 1308               	.LVL83:
 1309               	.L45:
 1310 012c 0E15      		cp r16,r14	 ;  137	*cmphi/3	[length = 2]
 1311 012e 1F05      		cpc r17,r15
 1312 0130 00F0      		brlo .L47	 ;  138	branch	[length = 1]
 1313               	.LVL84:
 1314               	.L46:
 1315               	.LBE113:
 224:bertos/net/ax25.c **** 	uint8_t ssid = addr->ssid << 1 | (last ? 0x01 : 0);
 1316               		.loc 1 224 0
 1317 0132 D501      		movw r26,r10	 ;  316	*movhi/1	[length = 1]
 1318 0134 1696      		adiw r26,6	 ;  143	*movqi/4	[length = 3]
 1319 0136 6C91      		ld r22,X
 1320 0138 1697      		sbiw r26,6
 1321 013a 70E0      		ldi r23,lo8(0)	 ;  327	*movqi/2	[length = 1]
 1322 013c 660F      		lsl r22	 ;  377	*ashlhi3_const/2	[length = 2]
 1323 013e 771F      		rol r23
 1324 0140 81E0      		ldi r24,lo8(1)	 ;  288	*movqi/2	[length = 1]
 1325 0142 2B81      		ldd r18,Y+3	 ;  317	*movhi/2	[length = 2]
 1326 0144 3C81      		ldd r19,Y+4
 1327 0146 8216      		cp r8,r18	 ;  147	*cmphi/3	[length = 2]
 1328 0148 9306      		cpc r9,r19
 1329 014a 01F0      		breq .L48	 ;  148	branch	[length = 1]
 1330 014c 80E0      		ldi r24,lo8(0)	 ;  149	*movqi/2	[length = 1]
 1331               	.L48:
 1332 014e 682B      		or r22,r24	 ;  151	iorqi3/1	[length = 1]
 225:bertos/net/ax25.c **** 	ax25_putchar(ctx, ssid);
 1333               		.loc 1 225 0
 1334 0150 C601      		movw r24,r12	 ;  152	*movhi/1	[length = 1]
 1335 0152 0E94 0000 		call ax25_putchar	 ;  154	call_insn/3	[length = 2]
 1336               	.LBE108:
 1337               	.LBE107:
 248:bertos/net/ax25.c **** 	for (size_t i = 0; i < path_len; i++)
 1338               		.loc 1 248 0
 1339 0156 0894      		sec	 ;  155	*addhi3/5	[length = 3]
 1340 0158 811C      		adc r8,__zero_reg__
 1341 015a 911C      		adc r9,__zero_reg__
 1342               	.LVL85:
 1343 015c 87E0      		ldi r24,lo8(7)	 ;  318	*movhi/4	[length = 2]
 1344 015e 90E0      		ldi r25,hi8(7)
 1345 0160 A80E      		add r10,r24	 ;  157	*addhi3/1	[length = 2]
 1346 0162 B91E      		adc r11,r25
 1347               	.LVL86:
 1348               	.L40:
 248:bertos/net/ax25.c **** 	for (size_t i = 0; i < path_len; i++)
 1349               		.loc 1 248 0 is_stmt 0 discriminator 1
 1350 0164 8214      		cp r8,r2	 ;  162	*cmphi/3	[length = 2]
 1351 0166 9304      		cpc r9,r3
 1352 0168 01F0      		breq .+2	 ;  163	branch	[length = 2]
 1353 016a 00C0      		rjmp .L49
 1354               	.LBE106:
 251:bertos/net/ax25.c **** 	ax25_putchar(ctx, AX25_CTRL_UI);
 1355               		.loc 1 251 0 is_stmt 1
 1356 016c C601      		movw r24,r12	 ;  166	*movhi/1	[length = 1]
 1357 016e 63E0      		ldi r22,lo8(3)	 ;  167	*movqi/2	[length = 1]
 1358 0170 0E94 0000 		call ax25_putchar	 ;  168	call_insn/3	[length = 2]
 252:bertos/net/ax25.c **** 	ax25_putchar(ctx, AX25_PID_NOLAYER3);
 1359               		.loc 1 252 0
 1360 0174 C601      		movw r24,r12	 ;  170	*movhi/1	[length = 1]
 1361 0176 60EF      		ldi r22,lo8(-16)	 ;  171	*movqi/2	[length = 1]
 1362 0178 0E94 0000 		call ax25_putchar	 ;  172	call_insn/3	[length = 2]
 239:bertos/net/ax25.c **** 	const uint8_t *buf = (const uint8_t *)_buf;
 1363               		.loc 1 239 0
 1364 017c 0981      		ldd r16,Y+1	 ;  270	*movqi/4	[length = 1]
 1365 017e 1A81      		ldd r17,Y+2	 ;  271	*movqi/4	[length = 1]
 254:bertos/net/ax25.c **** 	while (len--)
 1366               		.loc 1 254 0
 1367 0180 00C0      		rjmp .L50	 ;  388	jump	[length = 1]
 1368               	.LVL87:
 1369               	.L51:
 255:bertos/net/ax25.c **** 		ax25_putchar(ctx, *buf++);
 1370               		.loc 1 255 0
 1371 0182 D801      		movw r26,r16	 ;  319	*movhi/1	[length = 1]
 1372 0184 6D91      		ld r22,X+	 ;  176	*movqi/4	[length = 1]
 1373 0186 8D01      		movw r16,r26	 ;  320	*movhi/1	[length = 1]
 1374               	.LVL88:
 1375 0188 C601      		movw r24,r12	 ;  180	*movhi/1	[length = 1]
 1376 018a 0E94 0000 		call ax25_putchar	 ;  182	call_insn/3	[length = 2]
 1377               	.LVL89:
 1378 018e 0894      		sec	 ;  183	*addhi3/6	[length = 3]
 1379 0190 4108      		sbc r4,__zero_reg__
 1380 0192 5108      		sbc r5,__zero_reg__
 1381               	.LVL90:
 1382               	.L50:
 254:bertos/net/ax25.c **** 	while (len--)
 1383               		.loc 1 254 0 discriminator 1
 1384 0194 4114      		cp r4,__zero_reg__	 ;  190	*cmphi/2	[length = 2]
 1385 0196 5104      		cpc r5,__zero_reg__
 1386 0198 01F4      		brne .L51	 ;  191	branch	[length = 1]
 261:bertos/net/ax25.c **** 	uint8_t crcl = (ctx->crc_out & 0xff) ^ 0xff;
 1387               		.loc 1 261 0
 1388 019a 60E5      		ldi r22,lo8(336)	 ;  376	*reload_inhi	[length = 4]
 1389 019c E62E      		mov r14,r22
 1390 019e 61E0      		ldi r22,hi8(336)
 1391 01a0 F62E      		mov r15,r22
 1392 01a2 EC0C      		add r14,r12	 ;  193	*addhi3/1	[length = 2]
 1393 01a4 FD1C      		adc r15,r13
 1394 01a6 F701      		movw r30,r14	 ;  322	*movhi/1	[length = 1]
 1395 01a8 6081      		ld r22,Z	 ;  272	*movqi/4	[length = 1]
 1396 01aa 0181      		ldd r16,Z+1	 ;  273	*movqi/4	[length = 1]
 1397               	.LVL91:
 1398 01ac 6095      		com r22	 ;  198	one_cmplqi2	[length = 1]
 263:bertos/net/ax25.c **** 	ax25_putchar(ctx, crcl);
 1399               		.loc 1 263 0
 1400 01ae C601      		movw r24,r12	 ;  199	*movhi/1	[length = 1]
 1401 01b0 0E94 0000 		call ax25_putchar	 ;  201	call_insn/3	[length = 2]
 1402               	.LVL92:
 262:bertos/net/ax25.c **** 	uint8_t crch = (ctx->crc_out >> 8) ^ 0xff;
 1403               		.loc 1 262 0
 1404 01b4 602F      		mov r22,r16	 ;  323	*movqi/1	[length = 1]
 1405 01b6 6095      		com r22	 ;  204	one_cmplqi2	[length = 1]
 264:bertos/net/ax25.c **** 	ax25_putchar(ctx, crch);
 1406               		.loc 1 264 0
 1407 01b8 C601      		movw r24,r12	 ;  205	*movhi/1	[length = 1]
 1408 01ba 0E94 0000 		call ax25_putchar	 ;  207	call_insn/3	[length = 2]
 266:bertos/net/ax25.c **** 	ASSERT(ctx->crc_out == AX25_CRC_CORRECT);
 1409               		.loc 1 266 0
 1410 01be D701      		movw r26,r14	 ;  324	*movhi/1	[length = 1]
 1411 01c0 8D91      		ld r24,X+	 ;  209	*movhi/2	[length = 3]
 1412 01c2 9C91      		ld r25,X
 1413 01c4 1197      		sbiw r26,1
 1414 01c6 B0EF      		ldi r27,hi8(-3912)	 ;  210	*cmphi/5	[length = 3]
 1415 01c8 883B      		cpi r24,lo8(-3912)
 1416 01ca 9B07      		cpc r25,r27
 1417 01cc 01F0      		breq .L52	 ;  211	branch	[length = 1]
 266:bertos/net/ax25.c **** 	ASSERT(ctx->crc_out == AX25_CRC_CORRECT);
 1418               		.loc 1 266 0 is_stmt 0 discriminator 1
 1419 01ce 80E0      		ldi r24,lo8(__c.1792)	 ;  216	*movhi/4	[length = 2]
 1420 01d0 90E0      		ldi r25,hi8(__c.1792)
 1421 01d2 60E0      		ldi r22,lo8(__c.1794)	 ;  217	*movhi/4	[length = 2]
 1422 01d4 70E0      		ldi r23,hi8(__c.1794)
 1423 01d6 4AE0      		ldi r20,lo8(266)	 ;  218	*movhi/4	[length = 2]
 1424 01d8 51E0      		ldi r21,hi8(266)
 1425 01da 0E94 0000 		call __bassert_P	 ;  219	call_value_insn/3	[length = 2]
 1426               	.L52:
 268:bertos/net/ax25.c **** 	kfile_putc(HDLC_FLAG, ctx->ch);
 1427               		.loc 1 268 0 is_stmt 1
 1428 01de F601      		movw r30,r12	 ;  325	*movhi/1	[length = 1]
 1429 01e0 E65B      		subi r30,lo8(-(330))	 ;  223	*addhi3/4	[length = 2]
 1430 01e2 FE4F      		sbci r31,hi8(-(330))
 1431 01e4 6081      		ld r22,Z	 ;  224	*movhi/2	[length = 2]
 1432 01e6 7181      		ldd r23,Z+1
 1433 01e8 8EE7      		ldi r24,lo8(126)	 ;  225	*movhi/4	[length = 2]
 1434 01ea 90E0      		ldi r25,hi8(126)
 1435 01ec 0E94 0000 		call kfile_putc	 ;  227	call_value_insn/3	[length = 2]
 1436               	/* epilogue start */
 269:bertos/net/ax25.c **** }
 1437               		.loc 1 269 0
 1438 01f0 0F90      		pop __tmp_reg__	 ;  355	*addhi3_sp_R_pc2	[length = 5]
 1439 01f2 0F90      		pop __tmp_reg__
 1440 01f4 0F90      		pop __tmp_reg__
 1441 01f6 0F90      		pop __tmp_reg__
 1442 01f8 0F90      		pop __tmp_reg__
 1443 01fa DF91      		pop r29	 ;  356	popqi	[length = 1]
 1444 01fc CF91      		pop r28	 ;  357	popqi	[length = 1]
 1445 01fe 1F91      		pop r17	 ;  358	popqi	[length = 1]
 1446 0200 0F91      		pop r16	 ;  359	popqi	[length = 1]
 1447               	.LVL93:
 1448 0202 FF90      		pop r15	 ;  360	popqi	[length = 1]
 1449 0204 EF90      		pop r14	 ;  361	popqi	[length = 1]
 1450 0206 DF90      		pop r13	 ;  362	popqi	[length = 1]
 1451 0208 CF90      		pop r12	 ;  363	popqi	[length = 1]
 1452               	.LVL94:
 1453 020a BF90      		pop r11	 ;  364	popqi	[length = 1]
 1454 020c AF90      		pop r10	 ;  365	popqi	[length = 1]
 1455 020e 9F90      		pop r9	 ;  366	popqi	[length = 1]
 1456 0210 8F90      		pop r8	 ;  367	popqi	[length = 1]
 1457               	.LVL95:
 1458 0212 7F90      		pop r7	 ;  368	popqi	[length = 1]
 1459 0214 6F90      		pop r6	 ;  369	popqi	[length = 1]
 1460 0216 5F90      		pop r5	 ;  370	popqi	[length = 1]
 1461 0218 4F90      		pop r4	 ;  371	popqi	[length = 1]
 1462 021a 3F90      		pop r3	 ;  372	popqi	[length = 1]
 1463 021c 2F90      		pop r2	 ;  373	popqi	[length = 1]
 1464               	.LVL96:
 1465 021e 0895      		ret	 ;  374	return_from_epilogue	[length = 1]
 1466               		.cfi_endproc
 1467               	.LFE14:
 1469               		.data
 1470               	.LC4:
 1471 0012 3A25 2E2A 		.string	":%.*s\n"
 1471      730A 00
 1472               		.section	.text.ax25_print,"ax",@progbits
 1473               	.global	ax25_print
 1475               	ax25_print:
 1476               	.LFB16:
 277:bertos/net/ax25.c **** 
 278:bertos/net/ax25.c **** /**
 279:bertos/net/ax25.c ****  * Print a AX25 message in TNC-2 packet monitor format.
 280:bertos/net/ax25.c ****  * \param ch a kfile channel where the message will be printed.
 281:bertos/net/ax25.c ****  * \param msg the message to be printed.
 282:bertos/net/ax25.c ****  */
 283:bertos/net/ax25.c **** void ax25_print(KFile *ch, const AX25Msg *msg)
 284:bertos/net/ax25.c **** {
 1477               		.loc 1 284 0
 1478               		.cfi_startproc
 1479               	.LVL97:
 1480 0000 CF92      		push r12	 ;  90	*pushqi/1	[length = 1]
 1481               	.LCFI50:
 1482               		.cfi_def_cfa_offset 3
 1483               		.cfi_offset 12, -2
 1484 0002 DF92      		push r13	 ;  91	*pushqi/1	[length = 1]
 1485               	.LCFI51:
 1486               		.cfi_def_cfa_offset 4
 1487               		.cfi_offset 13, -3
 1488 0004 EF92      		push r14	 ;  92	*pushqi/1	[length = 1]
 1489               	.LCFI52:
 1490               		.cfi_def_cfa_offset 5
 1491               		.cfi_offset 14, -4
 1492 0006 FF92      		push r15	 ;  93	*pushqi/1	[length = 1]
 1493               	.LCFI53:
 1494               		.cfi_def_cfa_offset 6
 1495               		.cfi_offset 15, -5
 1496 0008 0F93      		push r16	 ;  94	*pushqi/1	[length = 1]
 1497               	.LCFI54:
 1498               		.cfi_def_cfa_offset 7
 1499               		.cfi_offset 16, -6
 1500 000a 1F93      		push r17	 ;  95	*pushqi/1	[length = 1]
 1501               	.LCFI55:
 1502               		.cfi_def_cfa_offset 8
 1503               		.cfi_offset 17, -7
 1504 000c CF93      		push r28	 ;  96	*pushqi/1	[length = 1]
 1505               	.LCFI56:
 1506               		.cfi_def_cfa_offset 9
 1507               		.cfi_offset 28, -8
 1508 000e DF93      		push r29	 ;  97	*pushqi/1	[length = 1]
 1509               	.LCFI57:
 1510               		.cfi_def_cfa_offset 10
 1511               		.cfi_offset 29, -9
 1512               	/* prologue: function */
 1513               	/* frame size = 0 */
 1514               	/* stack size = 8 */
 1515               	.L__stack_usage = 8
 1516 0010 8C01      		movw r16,r24	 ;  2	*movhi/1	[length = 1]
 1517 0012 7B01      		movw r14,r22	 ;  3	*movhi/1	[length = 1]
 285:bertos/net/ax25.c **** 	print_call(ch, &msg->src);
 1518               		.loc 1 285 0
 1519 0014 0E94 0000 		call print_call	 ;  11	call_insn/3	[length = 2]
 1520               	.LVL98:
 286:bertos/net/ax25.c **** 	kfile_putc('>', ch);
 1521               		.loc 1 286 0
 1522 0018 8EE3      		ldi r24,lo8(62)	 ;  13	*movhi/4	[length = 2]
 1523 001a 90E0      		ldi r25,hi8(62)
 1524 001c B801      		movw r22,r16	 ;  14	*movhi/1	[length = 1]
 1525 001e 0E94 0000 		call kfile_putc	 ;  15	call_value_insn/3	[length = 2]
 287:bertos/net/ax25.c **** 	print_call(ch, &msg->dst);
 1526               		.loc 1 287 0
 1527 0022 B701      		movw r22,r14	 ;  76	*movhi/1	[length = 1]
 1528 0024 695F      		subi r22,lo8(-(7))	 ;  17	*addhi3/4	[length = 2]
 1529 0026 7F4F      		sbci r23,hi8(-(7))
 1530 0028 C801      		movw r24,r16	 ;  18	*movhi/1	[length = 1]
 1531 002a 0E94 0000 		call print_call	 ;  20	call_insn/3	[length = 2]
 1532               	.LVL99:
 1533               	.LBB114:
 288:bertos/net/ax25.c **** 
 289:bertos/net/ax25.c **** 	#if CONFIG_AX25_RPT_LST
 290:bertos/net/ax25.c **** 	for (int i = 0; i < msg->rpt_cnt; i++)
 1534               		.loc 1 290 0
 1535 002e C0E0      		ldi r28,lo8(0)	 ;  5	*movhi/4	[length = 2]
 1536 0030 D0E0      		ldi r29,hi8(0)
 1537 0032 AEE4      		ldi r26,lo8(78)	 ;  111	*reload_inhi	[length = 3]
 1538 0034 CA2E      		mov r12,r26
 1539 0036 D12C      		mov r13,__zero_reg__
 1540 0038 CE0C      		add r12,r14	 ;  45	*addhi3/1	[length = 2]
 1541 003a DF1C      		adc r13,r15
 1542 003c 00C0      		rjmp .L55	 ;  112	jump	[length = 1]
 1543               	.LVL100:
 1544               	.L56:
 291:bertos/net/ax25.c **** 	{
 292:bertos/net/ax25.c **** 		kfile_putc(',', ch);
 1545               		.loc 1 292 0 discriminator 2
 1546 003e 8CE2      		ldi r24,lo8(44)	 ;  26	*movhi/4	[length = 2]
 1547 0040 90E0      		ldi r25,hi8(44)
 1548 0042 B801      		movw r22,r16	 ;  27	*movhi/1	[length = 1]
 1549 0044 0E94 0000 		call kfile_putc	 ;  28	call_value_insn/3	[length = 2]
 293:bertos/net/ax25.c **** 		print_call(ch, &msg->rpt_lst[i]);
 1550               		.loc 1 293 0 discriminator 2
 1551 0048 BE01      		movw r22,r28	 ;  78	*movhi/1	[length = 1]
 1552 004a F3E0      		ldi r31,3	 ;  110	*ashlhi3_const/5	[length = 5]
 1553 004c 660F      	1:	lsl r22
 1554 004e 771F      		rol r23
 1555 0050 FA95      		dec r31
 1556 0052 01F4      		brne 1b
 1557 0054 6C1B      		sub r22,r28	 ;  33	subhi3/1	[length = 2]
 1558 0056 7D0B      		sbc r23,r29
 1559 0058 625F      		subi r22,lo8(-(14))	 ;  34	*addhi3/4	[length = 2]
 1560 005a 7F4F      		sbci r23,hi8(-(14))
 1561 005c 6E0D      		add r22,r14	 ;  35	*addhi3/1	[length = 2]
 1562 005e 7F1D      		adc r23,r15
 1563 0060 C801      		movw r24,r16	 ;  36	*movhi/1	[length = 1]
 1564 0062 0E94 0000 		call print_call	 ;  38	call_insn/3	[length = 2]
 290:bertos/net/ax25.c **** 	for (int i = 0; i < msg->rpt_cnt; i++)
 1565               		.loc 1 290 0 discriminator 2
 1566 0066 2196      		adiw r28,1	 ;  39	*addhi3/2	[length = 1]
 1567               	.LVL101:
 1568               	.L55:
 290:bertos/net/ax25.c **** 	for (int i = 0; i < msg->rpt_cnt; i++)
 1569               		.loc 1 290 0 is_stmt 0 discriminator 1
 1570 0068 D601      		movw r26,r12	 ;  79	*movhi/1	[length = 1]
 1571 006a 8C91      		ld r24,X	 ;  46	*movqi/4	[length = 1]
 1572 006c 90E0      		ldi r25,lo8(0)	 ;  89	*movqi/2	[length = 1]
 1573 006e C817      		cp r28,r24	 ;  48	*cmphi/3	[length = 2]
 1574 0070 D907      		cpc r29,r25
 1575 0072 04F0      		brlt .L56	 ;  49	branch	[length = 1]
 1576               	.LBE114:
 294:bertos/net/ax25.c **** 		// TODO: add * to the trasmitting digi
 295:bertos/net/ax25.c **** 	}
 296:bertos/net/ax25.c **** 	#endif
 297:bertos/net/ax25.c **** 
 298:bertos/net/ax25.c **** 	kfile_printf(ch, ":%.*s\n", msg->len, msg->info);
 1577               		.loc 1 298 0 is_stmt 1
 1578 0074 EDB7      		in r30,__SP_L__	 ;  80	*movhi_sp/2	[length = 2]
 1579 0076 FEB7      		in r31,__SP_H__
 1580 0078 3897      		sbiw r30,8	 ;  51	*addhi3/3	[length = 1]
 1581 007a 0FB6      		in __tmp_reg__,__SREG__	 ;  81	*movhi_sp/1	[length = 5]
 1582 007c F894      		cli
 1583 007e FEBF      		out __SP_H__,r31
 1584 0080 0FBE      		out __SREG__,__tmp_reg__
 1585 0082 EDBF      		out __SP_L__,r30
 1586 0084 3196      		adiw r30,1	 ;  71	*addhi3/2	[length = 1]
 1587 0086 ADB7      		in r26,__SP_L__	 ;  83	*movhi_sp/2	[length = 2]
 1588 0088 BEB7      		in r27,__SP_H__
 1589 008a 1296      		adiw r26,1+1	 ;  53	*movhi/3	[length = 4]
 1590 008c 1C93      		st X,r17
 1591 008e 0E93      		st -X,r16
 1592 0090 1197      		sbiw r26,1
 1593 0092 80E0      		ldi r24,lo8(.LC4)	 ;  54	*movhi/4	[length = 2]
 1594 0094 90E0      		ldi r25,hi8(.LC4)
 1595 0096 9383      		std Z+3,r25	 ;  55	*movhi/3	[length = 2]
 1596 0098 8283      		std Z+2,r24
 1597 009a D701      		movw r26,r14	 ;  84	*movhi/1	[length = 1]
 1598 009c AC5A      		subi r26,lo8(-(84))	 ;  56	*addhi3/4	[length = 2]
 1599 009e BF4F      		sbci r27,hi8(-(84))
 1600 00a0 8D91      		ld r24,X+	 ;  57	*movhi/2	[length = 2]
 1601 00a2 9C91      		ld r25,X
 1602 00a4 9583      		std Z+5,r25	 ;  58	*movhi/3	[length = 2]
 1603 00a6 8483      		std Z+4,r24
 1604 00a8 D701      		movw r26,r14	 ;  85	*movhi/1	[length = 1]
 1605 00aa AE5A      		subi r26,lo8(-(82))	 ;  59	*addhi3/4	[length = 2]
 1606 00ac BF4F      		sbci r27,hi8(-(82))
 1607 00ae 8D91      		ld r24,X+	 ;  60	*movhi/2	[length = 2]
 1608 00b0 9C91      		ld r25,X
 1609 00b2 9783      		std Z+7,r25	 ;  61	*movhi/3	[length = 2]
 1610 00b4 8683      		std Z+6,r24
 1611 00b6 0E94 0000 		call kfile_printf	 ;  62	call_value_insn/3	[length = 2]
 1612 00ba EDB7      		in r30,__SP_L__	 ;  86	*movhi_sp/2	[length = 2]
 1613 00bc FEB7      		in r31,__SP_H__
 1614 00be 3896      		adiw r30,8	 ;  63	*addhi3/2	[length = 1]
 1615 00c0 0FB6      		in __tmp_reg__,__SREG__	 ;  87	*movhi_sp/1	[length = 5]
 1616 00c2 F894      		cli
 1617 00c4 FEBF      		out __SP_H__,r31
 1618 00c6 0FBE      		out __SREG__,__tmp_reg__
 1619 00c8 EDBF      		out __SP_L__,r30
 1620               	/* epilogue start */
 299:bertos/net/ax25.c **** }
 1621               		.loc 1 299 0
 1622 00ca DF91      		pop r29	 ;  100	popqi	[length = 1]
 1623 00cc CF91      		pop r28	 ;  101	popqi	[length = 1]
 1624               	.LVL102:
 1625 00ce 1F91      		pop r17	 ;  102	popqi	[length = 1]
 1626 00d0 0F91      		pop r16	 ;  103	popqi	[length = 1]
 1627               	.LVL103:
 1628 00d2 FF90      		pop r15	 ;  104	popqi	[length = 1]
 1629 00d4 EF90      		pop r14	 ;  105	popqi	[length = 1]
 1630               	.LVL104:
 1631 00d6 DF90      		pop r13	 ;  106	popqi	[length = 1]
 1632 00d8 CF90      		pop r12	 ;  107	popqi	[length = 1]
 1633 00da 0895      		ret	 ;  108	return_from_epilogue	[length = 1]
 1634               		.cfi_endproc
 1635               	.LFE16:
 1637               		.section	.text.ax25_init,"ax",@progbits
 1638               	.global	ax25_init
 1640               	ax25_init:
 1641               	.LFB17:
 300:bertos/net/ax25.c **** 
 301:bertos/net/ax25.c **** 
 302:bertos/net/ax25.c **** /**
 303:bertos/net/ax25.c ****  * Init the AX25 protocol decoder.
 304:bertos/net/ax25.c ****  *
 305:bertos/net/ax25.c ****  * \param ctx AX25 context to init.
 306:bertos/net/ax25.c ****  * \param channel Used to gain access to the physical medium
 307:bertos/net/ax25.c ****  * \param hook Callback function called when a message is received
 308:bertos/net/ax25.c ****  */
 309:bertos/net/ax25.c **** void ax25_init(AX25Ctx *ctx, KFile *channel, ax25_callback_t hook)
 310:bertos/net/ax25.c **** {
 1642               		.loc 1 310 0
 1643               		.cfi_startproc
 1644               	.LVL105:
 1645 0000 EF92      		push r14	 ;  55	*pushqi/1	[length = 1]
 1646               	.LCFI58:
 1647               		.cfi_def_cfa_offset 3
 1648               		.cfi_offset 14, -2
 1649 0002 FF92      		push r15	 ;  56	*pushqi/1	[length = 1]
 1650               	.LCFI59:
 1651               		.cfi_def_cfa_offset 4
 1652               		.cfi_offset 15, -3
 1653 0004 0F93      		push r16	 ;  57	*pushqi/1	[length = 1]
 1654               	.LCFI60:
 1655               		.cfi_def_cfa_offset 5
 1656               		.cfi_offset 16, -4
 1657 0006 1F93      		push r17	 ;  58	*pushqi/1	[length = 1]
 1658               	.LCFI61:
 1659               		.cfi_def_cfa_offset 6
 1660               		.cfi_offset 17, -5
 1661 0008 CF93      		push r28	 ;  59	*pushqi/1	[length = 1]
 1662               	.LCFI62:
 1663               		.cfi_def_cfa_offset 7
 1664               		.cfi_offset 28, -6
 1665 000a DF93      		push r29	 ;  60	*pushqi/1	[length = 1]
 1666               	.LCFI63:
 1667               		.cfi_def_cfa_offset 8
 1668               		.cfi_offset 29, -7
 1669               	/* prologue: function */
 1670               	/* frame size = 0 */
 1671               	/* stack size = 6 */
 1672               	.L__stack_usage = 6
 1673 000c EC01      		movw r28,r24	 ;  2	*movhi/1	[length = 1]
 1674 000e 8B01      		movw r16,r22	 ;  3	*movhi/1	[length = 1]
 1675 0010 7A01      		movw r14,r20	 ;  4	*movhi/1	[length = 1]
 311:bertos/net/ax25.c **** 	ASSERT(ctx);
 1676               		.loc 1 311 0
 1677 0012 0097      		sbiw r24,0	 ;  8	*cmphi/1	[length = 1]
 1678 0014 01F4      		brne .L58	 ;  9	branch	[length = 1]
 1679               	.LVL106:
 1680               		.loc 1 311 0 is_stmt 0 discriminator 1
 1681 0016 80E0      		ldi r24,lo8(__c.1813)	 ;  14	*movhi/4	[length = 2]
 1682 0018 90E0      		ldi r25,hi8(__c.1813)
 1683               	.LVL107:
 1684 001a 60E0      		ldi r22,lo8(__c.1815)	 ;  15	*movhi/4	[length = 2]
 1685 001c 70E0      		ldi r23,hi8(__c.1815)
 1686 001e 47E3      		ldi r20,lo8(311)	 ;  16	*movhi/4	[length = 2]
 1687 0020 51E0      		ldi r21,hi8(311)
 1688 0022 0E94 0000 		call __bassert_P	 ;  17	call_value_insn/3	[length = 2]
 1689               	.L58:
 312:bertos/net/ax25.c **** 	ASSERT(channel);
 1690               		.loc 1 312 0 is_stmt 1
 1691 0026 0115      		cp r16,__zero_reg__	 ;  20	*cmphi/2	[length = 2]
 1692 0028 1105      		cpc r17,__zero_reg__
 1693 002a 01F4      		brne .L59	 ;  21	branch	[length = 1]
 1694               		.loc 1 312 0 is_stmt 0 discriminator 1
 1695 002c 80E0      		ldi r24,lo8(__c.1817)	 ;  26	*movhi/4	[length = 2]
 1696 002e 90E0      		ldi r25,hi8(__c.1817)
 1697 0030 60E0      		ldi r22,lo8(__c.1819)	 ;  27	*movhi/4	[length = 2]
 1698 0032 70E0      		ldi r23,hi8(__c.1819)
 1699 0034 48E3      		ldi r20,lo8(312)	 ;  28	*movhi/4	[length = 2]
 1700 0036 51E0      		ldi r21,hi8(312)
 1701 0038 0E94 0000 		call __bassert_P	 ;  29	call_value_insn/3	[length = 2]
 1702               	.L59:
 313:bertos/net/ax25.c **** 
 314:bertos/net/ax25.c **** 	memset(ctx, 0, sizeof(*ctx));
 1703               		.loc 1 314 0 is_stmt 1
 1704 003c 86E5      		ldi r24,lo8(342)	 ;  32	*movhi/4	[length = 2]
 1705 003e 91E0      		ldi r25,hi8(342)
 1706 0040 FE01      		movw r30,r28	 ;  50	*movhi/1	[length = 1]
 1707 0042 9C01      		movw r18,r24	 ;  51	*movhi/1	[length = 1]
 1708 0044 1192      		st Z+,__zero_reg__	 ;  34	*clrmemhi/2	[length = 4]
 1709 0046 2150      		subi r18,1
 1710 0048 3040      		sbci r19,0
 1711 004a 01F4      		brne .-8
 315:bertos/net/ax25.c **** 	ctx->ch = channel;
 1712               		.loc 1 315 0
 1713 004c FE01      		movw r30,r28	 ;  52	*movhi/1	[length = 1]
 1714 004e E65B      		subi r30,lo8(-(330))	 ;  35	*addhi3/4	[length = 2]
 1715 0050 FE4F      		sbci r31,hi8(-(330))
 1716 0052 1183      		std Z+1,r17	 ;  36	*movhi/3	[length = 2]
 1717 0054 0083      		st Z,r16
 316:bertos/net/ax25.c **** 	ctx->hook = hook;
 1718               		.loc 1 316 0
 1719 0056 FE01      		movw r30,r28	 ;  53	*movhi/1	[length = 1]
 1720 0058 EE5A      		subi r30,lo8(-(338))	 ;  37	*addhi3/4	[length = 2]
 1721 005a FE4F      		sbci r31,hi8(-(338))
 1722 005c F182      		std Z+1,r15	 ;  38	*movhi/3	[length = 2]
 1723 005e E082      		st Z,r14
 317:bertos/net/ax25.c **** 	ctx->crc_in = ctx->crc_out = CRC_CCITT_INIT_VAL;
 1724               		.loc 1 317 0
 1725 0060 FE01      		movw r30,r28	 ;  54	*movhi/1	[length = 1]
 1726 0062 E05B      		subi r30,lo8(-(336))	 ;  39	*addhi3/4	[length = 2]
 1727 0064 FE4F      		sbci r31,hi8(-(336))
 1728 0066 8FEF      		ldi r24,lo8(-1)	 ;  40	*movhi/4	[length = 2]
 1729 0068 9FEF      		ldi r25,hi8(-1)
 1730 006a 9183      		std Z+1,r25	 ;  41	*movhi/3	[length = 2]
 1731 006c 8083      		st Z,r24
 1732 006e C25B      		subi r28,lo8(-(334))	 ;  42	*addhi3/4	[length = 2]
 1733 0070 DE4F      		sbci r29,hi8(-(334))
 1734               	.LVL108:
 1735 0072 9983      		std Y+1,r25	 ;  44	*movhi/3	[length = 2]
 1736 0074 8883      		st Y,r24
 1737               	/* epilogue start */
 318:bertos/net/ax25.c **** }
 1738               		.loc 1 318 0
 1739 0076 DF91      		pop r29	 ;  63	popqi	[length = 1]
 1740 0078 CF91      		pop r28	 ;  64	popqi	[length = 1]
 1741 007a 1F91      		pop r17	 ;  65	popqi	[length = 1]
 1742 007c 0F91      		pop r16	 ;  66	popqi	[length = 1]
 1743               	.LVL109:
 1744 007e FF90      		pop r15	 ;  67	popqi	[length = 1]
 1745 0080 EF90      		pop r14	 ;  68	popqi	[length = 1]
 1746               	.LVL110:
 1747 0082 0895      		ret	 ;  69	return_from_epilogue	[length = 1]
 1748               		.cfi_endproc
 1749               	.LFE17:
 1751               		.section	.progmem.data,"a",@progbits
 1754               	__c.1462:
 1755 0000 6664 2D3E 		.string	"fd->error"
 1755      6572 726F 
 1755      7200 
 1758               	__c.1464:
 1759 000a 6265 7274 		.string	"bertos/kern/kfile.h"
 1759      6F73 2F6B 
 1759      6572 6E2F 
 1759      6B66 696C 
 1759      652E 6800 
 1762               	__c.1736:
 1763 001e 2573 3A20 		.string	"%s: Channel error [%04x]\n"
 1763      4368 616E 
 1763      6E65 6C20 
 1763      6572 726F 
 1763      7220 5B25 
 1766               	__c.1469:
 1767 0038 6664 2D3E 		.string	"fd->clearerr"
 1767      636C 6561 
 1767      7265 7272 
 1767      00
 1770               	__c.1471:
 1771 0045 6265 7274 		.string	"bertos/kern/kfile.h"
 1771      6F73 2F6B 
 1771      6572 6E2F 
 1771      6B66 696C 
 1771      652E 6800 
 1774               	__c.1725:
 1775 0059 2573 3A20 		.string	"%s: Only UI frames are handled, got [%02X]\n"
 1775      4F6E 6C79 
 1775      2055 4920 
 1775      6672 616D 
 1775      6573 2061 
 1778               	__c.1727:
 1779 0085 2573 3A20 		.string	"%s: Only frames without layer3 protocol are handled, got [%02X]\n"
 1779      4F6E 6C79 
 1779      2066 7261 
 1779      6D65 7320 
 1779      7769 7468 
 1782               	__c.1775:
 1783 00c6 7061 7468 		.string	"path"
 1783      00
 1786               	__c.1777:
 1787 00cb 6265 7274 		.string	"bertos/net/ax25.c"
 1787      6F73 2F6E 
 1787      6574 2F61 
 1787      7832 352E 
 1787      6300 
 1790               	__c.1779:
 1791 00dd 7061 7468 		.string	"path_len >= 2"
 1791      5F6C 656E 
 1791      203E 3D20 
 1791      3200 
 1794               	__c.1781:
 1795 00eb 6265 7274 		.string	"bertos/net/ax25.c"
 1795      6F73 2F6E 
 1795      6574 2F61 
 1795      7832 352E 
 1795      6300 
 1798               	__c.1792:
 1799 00fd 6374 782D 		.string	"ctx->crc_out == AX25_CRC_CORRECT"
 1799      3E63 7263 
 1799      5F6F 7574 
 1799      203D 3D20 
 1799      4158 3235 
 1802               	__c.1794:
 1803 011e 6265 7274 		.string	"bertos/net/ax25.c"
 1803      6F73 2F6E 
 1803      6574 2F61 
 1803      7832 352E 
 1803      6300 
 1806               	__c.1755:
 1807 0130 6973 616C 		.string	"isalnum(c) || c == ' '"
 1807      6E75 6D28 
 1807      6329 207C 
 1807      7C20 6320 
 1807      3D3D 2027 
 1810               	__c.1757:
 1811 0147 6265 7274 		.string	"bertos/net/ax25.c"
 1811      6F73 2F6E 
 1811      6574 2F61 
 1811      7832 352E 
 1811      6300 
 1814               	__c.1813:
 1815 0159 6374 7800 		.string	"ctx"
 1818               	__c.1815:
 1819 015d 6265 7274 		.string	"bertos/net/ax25.c"
 1819      6F73 2F6E 
 1819      6574 2F61 
 1819      7832 352E 
 1819      6300 
 1822               	__c.1817:
 1823 016f 6368 616E 		.string	"channel"
 1823      6E65 6C00 
 1826               	__c.1819:
 1827 0177 6265 7274 		.string	"bertos/net/ax25.c"
 1827      6F73 2F6E 
 1827      6574 2F61 
 1827      7832 352E 
 1827      6300 
 1828               		.text
 1829               	.Letext0:
 1830               		.file 4 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/include/stddef.h"
 1831               		.file 5 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h"
 1832               		.file 6 "bertos/cfg/macros.h"
 1833               		.file 7 "bertos/net/ax25.h"
 1834               		.file 8 "bertos/cfg/log.h"
 1835               		.file 9 "bertos/cpu/types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ax25.c
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:2      *ABS*:0000003f __SREG__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:3      *ABS*:0000003e __SP_H__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:4      *ABS*:0000003d __SP_L__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:5      *ABS*:00000034 __CCP__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:7      *ABS*:00000001 __zero_reg__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:15     .text.ax25_putchar:00000000 ax25_putchar
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:130    .text.print_call:00000000 print_call
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:248    .text.ax25_poll:00000000 ax25_poll
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1774   .progmem.data:00000059 __c.1725
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1778   .progmem.data:00000085 __c.1727
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1754   .progmem.data:00000000 __c.1462
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1758   .progmem.data:0000000a __c.1464
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1762   .progmem.data:0000001e __c.1736
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1766   .progmem.data:00000038 __c.1469
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1770   .progmem.data:00000045 __c.1471
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1039   .text.ax25_sendVia:00000000 ax25_sendVia
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1782   .progmem.data:000000c6 __c.1775
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1786   .progmem.data:000000cb __c.1777
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1790   .progmem.data:000000dd __c.1779
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1794   .progmem.data:000000eb __c.1781
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1806   .progmem.data:00000130 __c.1755
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1810   .progmem.data:00000147 __c.1757
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1798   .progmem.data:000000fd __c.1792
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1802   .progmem.data:0000011e __c.1794
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1475   .text.ax25_print:00000000 ax25_print
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1640   .text.ax25_init:00000000 ax25_init
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1814   .progmem.data:00000159 __c.1813
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1818   .progmem.data:0000015d __c.1815
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1822   .progmem.data:0000016f __c.1817
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//ccPNMbb6.s:1826   .progmem.data:00000177 __c.1819

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
kfile_putc
crc_ccitt_tab
kfile_printf
kprintf_P
kfile_getc
__bassert_P
isalnum
toupper
