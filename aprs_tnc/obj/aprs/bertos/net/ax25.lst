   1               		.file	"ax25.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text.ax25_putchar,"ax",@progbits
  15               	ax25_putchar:
  16               	.LFB12:
  17               		.file 1 "bertos/net/ax25.c"
   1:bertos/net/ax25.c **** /**
   2:bertos/net/ax25.c ****  * \file
   3:bertos/net/ax25.c ****  * <!--
   4:bertos/net/ax25.c ****  * This file is part of BeRTOS.
   5:bertos/net/ax25.c ****  *
   6:bertos/net/ax25.c ****  * Bertos is free software; you can redistribute it and/or modify
   7:bertos/net/ax25.c ****  * it under the terms of the GNU General Public License as published by
   8:bertos/net/ax25.c ****  * the Free Software Foundation; either version 2 of the License, or
   9:bertos/net/ax25.c ****  * (at your option) any later version.
  10:bertos/net/ax25.c ****  *
  11:bertos/net/ax25.c ****  * This program is distributed in the hope that it will be useful,
  12:bertos/net/ax25.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bertos/net/ax25.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bertos/net/ax25.c ****  * GNU General Public License for more details.
  15:bertos/net/ax25.c ****  *
  16:bertos/net/ax25.c ****  * You should have received a copy of the GNU General Public License
  17:bertos/net/ax25.c ****  * along with this program; if not, write to the Free Software
  18:bertos/net/ax25.c ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:bertos/net/ax25.c ****  *
  20:bertos/net/ax25.c ****  * As a special exception, you may use this file as part of a free software
  21:bertos/net/ax25.c ****  * library without restriction.  Specifically, if other files instantiate
  22:bertos/net/ax25.c ****  * templates or use macros or inline functions from this file, or you compile
  23:bertos/net/ax25.c ****  * this file and link it with other files to produce an executable, this
  24:bertos/net/ax25.c ****  * file does not by itself cause the resulting executable to be covered by
  25:bertos/net/ax25.c ****  * the GNU General Public License.  This exception does not however
  26:bertos/net/ax25.c ****  * invalidate any other reasons why the executable file might be covered by
  27:bertos/net/ax25.c ****  * the GNU General Public License.
  28:bertos/net/ax25.c ****  *
  29:bertos/net/ax25.c ****  * Copyright 2009 Develer S.r.l. (http://www.develer.com/)
  30:bertos/net/ax25.c ****  *
  31:bertos/net/ax25.c ****  * -->
  32:bertos/net/ax25.c ****  * \brief Simple AX25 data link layer implementation.
  33:bertos/net/ax25.c ****  *
  34:bertos/net/ax25.c ****  * For now, only UI frames without any Layer 3 protocol are handled.
  35:bertos/net/ax25.c ****  * This however is enough to send/receive APRS packets.
  36:bertos/net/ax25.c ****  *
  37:bertos/net/ax25.c ****  * \author Francesco Sacchi <batt@develer.com>
  38:bertos/net/ax25.c ****  *
  39:bertos/net/ax25.c ****  */
  40:bertos/net/ax25.c **** 
  41:bertos/net/ax25.c **** #include "ax25.h"
  42:bertos/net/ax25.c **** #include "cfg/cfg_ax25.h"
  43:bertos/net/ax25.c **** 
  44:bertos/net/ax25.c **** #include <algo/crc_ccitt.h>
  45:bertos/net/ax25.c **** 
  46:bertos/net/ax25.c **** #define LOG_LEVEL  AX25_LOG_LEVEL
  47:bertos/net/ax25.c **** #define LOG_FORMAT AX25_LOG_FORMAT
  48:bertos/net/ax25.c **** #include <cfg/log.h>
  49:bertos/net/ax25.c **** 
  50:bertos/net/ax25.c **** #include <string.h> //memset, memcmp
  51:bertos/net/ax25.c **** #include <ctype.h>  //isalnum, toupper
  52:bertos/net/ax25.c **** 
  53:bertos/net/ax25.c **** #define DECODE_CALL(buf, addr) \
  54:bertos/net/ax25.c **** 	for (unsigned i = 0; i < sizeof((addr)); i++) \
  55:bertos/net/ax25.c **** 	{ \
  56:bertos/net/ax25.c **** 		char c = (*(buf)++ >> 1); \
  57:bertos/net/ax25.c **** 		(addr)[i] = (c == ' ') ? '\x0' : c; \
  58:bertos/net/ax25.c **** 	}
  59:bertos/net/ax25.c **** 
  60:bertos/net/ax25.c **** static void ax25_decode(AX25Ctx *ctx)
  61:bertos/net/ax25.c **** {
  62:bertos/net/ax25.c **** 	AX25Msg msg;
  63:bertos/net/ax25.c **** 	uint8_t *buf = ctx->buf;
  64:bertos/net/ax25.c **** 
  65:bertos/net/ax25.c **** 	DECODE_CALL(buf, msg.dst.call);
  66:bertos/net/ax25.c **** 	msg.dst.ssid = (*buf++ >> 1) & 0x0F;
  67:bertos/net/ax25.c **** 
  68:bertos/net/ax25.c **** 	DECODE_CALL(buf, msg.src.call);
  69:bertos/net/ax25.c **** 	msg.src.ssid = (*buf >> 1) & 0x0F;
  70:bertos/net/ax25.c **** 
  71:bertos/net/ax25.c **** 	LOG_INFO("SRC[%.6s-%d], DST[%.6s-%d]\n", msg.src.call, msg.src.ssid, msg.dst.call, msg.dst.ssid);
  72:bertos/net/ax25.c **** 
  73:bertos/net/ax25.c **** 	/* Repeater addresses */
  74:bertos/net/ax25.c **** 	#if CONFIG_AX25_RPT_LST
  75:bertos/net/ax25.c **** 		for (msg.rpt_cnt = 0; !(*buf++ & 0x01) && (msg.rpt_cnt < countof(msg.rpt_lst)); msg.rpt_cnt++)
  76:bertos/net/ax25.c **** 		{
  77:bertos/net/ax25.c **** 			DECODE_CALL(buf, msg.rpt_lst[msg.rpt_cnt].call);
  78:bertos/net/ax25.c **** 			msg.rpt_lst[msg.rpt_cnt].ssid = (*buf >> 1) & 0x0F;
  79:bertos/net/ax25.c **** 			LOG_INFO("RPT%d[%.6s-%d]\n", msg.rpt_cnt, msg.rpt_lst[msg.rpt_cnt].call, msg.rpt_lst[msg.rpt_cnt
  80:bertos/net/ax25.c **** 		}
  81:bertos/net/ax25.c **** 	#else
  82:bertos/net/ax25.c **** 		while (!(*buf++ & 0x01))
  83:bertos/net/ax25.c **** 		{
  84:bertos/net/ax25.c **** 			char rpt[6];
  85:bertos/net/ax25.c **** 			uint8_t ssid;
  86:bertos/net/ax25.c **** 			DECODE_CALL(buf, rpt);
  87:bertos/net/ax25.c **** 			ssid = (*buf >> 1) & 0x0F;
  88:bertos/net/ax25.c **** 			LOG_INFO("RPT[%.6s-%d]\n", rpt, ssid);
  89:bertos/net/ax25.c **** 		}
  90:bertos/net/ax25.c **** 	#endif
  91:bertos/net/ax25.c **** 
  92:bertos/net/ax25.c **** 	msg.ctrl = *buf++;
  93:bertos/net/ax25.c **** 	if (msg.ctrl != AX25_CTRL_UI)
  94:bertos/net/ax25.c **** 	{
  95:bertos/net/ax25.c **** 		LOG_WARN("Only UI frames are handled, got [%02X]\n", msg.ctrl);
  96:bertos/net/ax25.c **** 		return;
  97:bertos/net/ax25.c **** 	}
  98:bertos/net/ax25.c **** 
  99:bertos/net/ax25.c **** 	msg.pid = *buf++;
 100:bertos/net/ax25.c **** 	if (msg.pid != AX25_PID_NOLAYER3)
 101:bertos/net/ax25.c **** 	{
 102:bertos/net/ax25.c **** 		LOG_WARN("Only frames without layer3 protocol are handled, got [%02X]\n", msg.pid);
 103:bertos/net/ax25.c **** 		return;
 104:bertos/net/ax25.c **** 	}
 105:bertos/net/ax25.c **** 
 106:bertos/net/ax25.c **** 	msg.len = ctx->frm_len - 2 - (buf - ctx->buf);
 107:bertos/net/ax25.c **** 	msg.info = buf;
 108:bertos/net/ax25.c **** 	LOG_INFO("DATA: %.*s\n", msg.len, msg.info);
 109:bertos/net/ax25.c **** 
 110:bertos/net/ax25.c **** 	if (ctx->hook)
 111:bertos/net/ax25.c **** 		ctx->hook(&msg);
 112:bertos/net/ax25.c **** }
 113:bertos/net/ax25.c **** 
 114:bertos/net/ax25.c **** 
 115:bertos/net/ax25.c **** /**
 116:bertos/net/ax25.c ****  * Check if there are any AX25 messages to be processed.
 117:bertos/net/ax25.c ****  * This function read available characters from the medium and search for
 118:bertos/net/ax25.c ****  * any AX25 messages.
 119:bertos/net/ax25.c ****  * If a message is found it is decoded and the linked callback executed.
 120:bertos/net/ax25.c ****  * This function may be blocking if there are no available chars and the KFile
 121:bertos/net/ax25.c ****  * used in \a ctx to access the medium is configured in blocking mode.
 122:bertos/net/ax25.c ****  *
 123:bertos/net/ax25.c ****  * \param ctx AX25 context to operate on.
 124:bertos/net/ax25.c ****  */
 125:bertos/net/ax25.c **** void ax25_poll(AX25Ctx *ctx)
 126:bertos/net/ax25.c **** {
 127:bertos/net/ax25.c **** 	int c;
 128:bertos/net/ax25.c **** 
 129:bertos/net/ax25.c **** 	while ((c = kfile_getc(ctx->ch)) != EOF)
 130:bertos/net/ax25.c **** 	{
 131:bertos/net/ax25.c **** 		if (!ctx->escape && c == HDLC_FLAG)
 132:bertos/net/ax25.c **** 		{
 133:bertos/net/ax25.c **** 			if (ctx->frm_len >= AX25_MIN_FRAME_LEN)
 134:bertos/net/ax25.c **** 			{
 135:bertos/net/ax25.c **** 				if (ctx->crc_in == AX25_CRC_CORRECT)
 136:bertos/net/ax25.c **** 				{
 137:bertos/net/ax25.c **** 					LOG_INFO("Frame found!\n");
 138:bertos/net/ax25.c **** 					ax25_decode(ctx);
 139:bertos/net/ax25.c **** 				}
 140:bertos/net/ax25.c **** 				else
 141:bertos/net/ax25.c **** 				{
 142:bertos/net/ax25.c **** 					LOG_INFO("CRC error, computed [%04X]\n", ctx->crc_in);
 143:bertos/net/ax25.c **** 				}
 144:bertos/net/ax25.c **** 			}
 145:bertos/net/ax25.c **** 			ctx->sync = true;
 146:bertos/net/ax25.c **** 			ctx->crc_in = CRC_CCITT_INIT_VAL;
 147:bertos/net/ax25.c **** 			ctx->frm_len = 0;
 148:bertos/net/ax25.c **** 			continue;
 149:bertos/net/ax25.c **** 		}
 150:bertos/net/ax25.c **** 
 151:bertos/net/ax25.c **** 		if (!ctx->escape && c == HDLC_RESET)
 152:bertos/net/ax25.c **** 		{
 153:bertos/net/ax25.c **** 			LOG_INFO("HDLC reset\n");
 154:bertos/net/ax25.c **** 			ctx->sync = false;
 155:bertos/net/ax25.c **** 			continue;
 156:bertos/net/ax25.c **** 		}
 157:bertos/net/ax25.c **** 
 158:bertos/net/ax25.c **** 		if (!ctx->escape && c == AX25_ESC)
 159:bertos/net/ax25.c **** 		{
 160:bertos/net/ax25.c **** 			ctx->escape = true;
 161:bertos/net/ax25.c **** 			continue;
 162:bertos/net/ax25.c **** 		}
 163:bertos/net/ax25.c **** 
 164:bertos/net/ax25.c **** 		if (ctx->sync)
 165:bertos/net/ax25.c **** 		{
 166:bertos/net/ax25.c **** 			if (ctx->frm_len < CONFIG_AX25_FRAME_BUF_LEN)
 167:bertos/net/ax25.c **** 			{
 168:bertos/net/ax25.c **** 				ctx->buf[ctx->frm_len++] = c;
 169:bertos/net/ax25.c **** 				ctx->crc_in = updcrc_ccitt(c, ctx->crc_in);
 170:bertos/net/ax25.c **** 			}
 171:bertos/net/ax25.c **** 			else
 172:bertos/net/ax25.c **** 			{
 173:bertos/net/ax25.c **** 				LOG_INFO("Buffer overrun");
 174:bertos/net/ax25.c **** 				ctx->sync = false;
 175:bertos/net/ax25.c **** 			}
 176:bertos/net/ax25.c **** 		}
 177:bertos/net/ax25.c **** 		ctx->escape = false;
 178:bertos/net/ax25.c **** 	}
 179:bertos/net/ax25.c **** 
 180:bertos/net/ax25.c **** 	if (kfile_error(ctx->ch))
 181:bertos/net/ax25.c **** 	{
 182:bertos/net/ax25.c **** 		LOG_ERR("Channel error [%04x]\n", kfile_error(ctx->ch));
 183:bertos/net/ax25.c **** 		kfile_clearerr(ctx->ch);
 184:bertos/net/ax25.c **** 	}
 185:bertos/net/ax25.c **** }
 186:bertos/net/ax25.c **** 
 187:bertos/net/ax25.c **** static void ax25_putchar(AX25Ctx *ctx, uint8_t c)
 188:bertos/net/ax25.c **** {
  18               		.loc 1 188 0
  19               		.cfi_startproc
  20               	.LVL0:
  21 0000 0F93      		push r16	 ;  68	*pushqi/1	[length = 1]
  22               	.LCFI0:
  23               		.cfi_def_cfa_offset 3
  24               		.cfi_offset 16, -2
  25 0002 1F93      		push r17	 ;  69	*pushqi/1	[length = 1]
  26               	.LCFI1:
  27               		.cfi_def_cfa_offset 4
  28               		.cfi_offset 17, -3
  29 0004 CF93      		push r28	 ;  70	*pushqi/1	[length = 1]
  30               	.LCFI2:
  31               		.cfi_def_cfa_offset 5
  32               		.cfi_offset 28, -4
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 3 */
  36               	.L__stack_usage = 3
  37 0006 8C01      		movw r16,r24	 ;  2	*movhi/1	[length = 1]
  38 0008 C62F      		mov r28,r22	 ;  3	*movqi/1	[length = 1]
 189:bertos/net/ax25.c **** 	if (c == HDLC_FLAG || c == HDLC_RESET
  39               		.loc 1 189 0
  40 000a 862F      		mov r24,r22	 ;  62	*movqi/1	[length = 1]
  41               	.LVL1:
  42 000c 8E57      		subi r24,lo8(-(-126))	 ;  7	addqi3/2	[length = 1]
  43 000e 8230      		cpi r24,lo8(2)	 ;  8	*cmpqi/3	[length = 1]
  44 0010 00F0      		brlo .L2	 ;  9	branch	[length = 1]
 190:bertos/net/ax25.c **** 		|| c == AX25_ESC)
  45               		.loc 1 190 0
  46 0012 6B31      		cpi r22,lo8(27)	 ;  11	*cmpqi/3	[length = 1]
  47 0014 01F4      		brne .L3	 ;  12	branch	[length = 1]
  48               	.L2:
 191:bertos/net/ax25.c **** 		kfile_putc(AX25_ESC, ctx->ch);
  49               		.loc 1 191 0
  50 0016 F801      		movw r30,r16	 ;  63	*movhi/1	[length = 1]
  51 0018 E65B      		subi r30,lo8(-(330))	 ;  16	*addhi3/4	[length = 2]
  52 001a FE4F      		sbci r31,hi8(-(330))
  53 001c 6081      		ld r22,Z	 ;  17	*movhi/2	[length = 2]
  54 001e 7181      		ldd r23,Z+1
  55               	.LVL2:
  56 0020 8BE1      		ldi r24,lo8(27)	 ;  18	*movhi/4	[length = 2]
  57 0022 90E0      		ldi r25,hi8(27)
  58 0024 0E94 0000 		call kfile_putc	 ;  20	call_value_insn/3	[length = 2]
  59               	.L3:
 192:bertos/net/ax25.c **** 	ctx->crc_out = updcrc_ccitt(c, ctx->crc_out);
  60               		.loc 1 192 0
  61 0028 D801      		movw r26,r16	 ;  64	*movhi/1	[length = 1]
  62 002a A05B      		subi r26,lo8(-(336))	 ;  23	*addhi3/4	[length = 2]
  63 002c BE4F      		sbci r27,hi8(-(336))
  64 002e 2D91      		ld r18,X+	 ;  24	*movhi/2	[length = 3]
  65 0030 3C91      		ld r19,X
  66 0032 1197      		sbiw r26,1
  67               	.LVL3:
  68               	.LBB43:
  69               	.LBB44:
  70               	.LBB45:
  71               		.file 2 "bertos/algo/crc_ccitt.h"
   1:bertos/algo/crc_ccitt.h **** /**
   2:bertos/algo/crc_ccitt.h ****  * \file
   3:bertos/algo/crc_ccitt.h ****  * <!--
   4:bertos/algo/crc_ccitt.h ****  * This file is part of BeRTOS.
   5:bertos/algo/crc_ccitt.h ****  *
   6:bertos/algo/crc_ccitt.h ****  * Bertos is free software; you can redistribute it and/or modify
   7:bertos/algo/crc_ccitt.h ****  * it under the terms of the GNU General Public License as published by
   8:bertos/algo/crc_ccitt.h ****  * the Free Software Foundation; either version 2 of the License, or
   9:bertos/algo/crc_ccitt.h ****  * (at your option) any later version.
  10:bertos/algo/crc_ccitt.h ****  *
  11:bertos/algo/crc_ccitt.h ****  * This program is distributed in the hope that it will be useful,
  12:bertos/algo/crc_ccitt.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bertos/algo/crc_ccitt.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bertos/algo/crc_ccitt.h ****  * GNU General Public License for more details.
  15:bertos/algo/crc_ccitt.h ****  *
  16:bertos/algo/crc_ccitt.h ****  * You should have received a copy of the GNU General Public License
  17:bertos/algo/crc_ccitt.h ****  * along with this program; if not, write to the Free Software
  18:bertos/algo/crc_ccitt.h ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:bertos/algo/crc_ccitt.h ****  *
  20:bertos/algo/crc_ccitt.h ****  * As a special exception, you may use this file as part of a free software
  21:bertos/algo/crc_ccitt.h ****  * library without restriction.  Specifically, if other files instantiate
  22:bertos/algo/crc_ccitt.h ****  * templates or use macros or inline functions from this file, or you compile
  23:bertos/algo/crc_ccitt.h ****  * this file and link it with other files to produce an executable, this
  24:bertos/algo/crc_ccitt.h ****  * file does not by itself cause the resulting executable to be covered by
  25:bertos/algo/crc_ccitt.h ****  * the GNU General Public License.  This exception does not however
  26:bertos/algo/crc_ccitt.h ****  * invalidate any other reasons why the executable file might be covered by
  27:bertos/algo/crc_ccitt.h ****  * the GNU General Public License.
  28:bertos/algo/crc_ccitt.h ****  *
  29:bertos/algo/crc_ccitt.h ****  * Copyright 2009 Develer S.r.l. (http://www.develer.com/)
  30:bertos/algo/crc_ccitt.h ****  *
  31:bertos/algo/crc_ccitt.h ****  * -->
  32:bertos/algo/crc_ccitt.h ****  *
  33:bertos/algo/crc_ccitt.h ****  * \brief CCITT Cyclic Redundancy Check (CRC-CCITT).
  34:bertos/algo/crc_ccitt.h ****  *
  35:bertos/algo/crc_ccitt.h ****  * \note This algorithm is incompatible with the CRC16.
  36:bertos/algo/crc_ccitt.h ****  *
  37:bertos/algo/crc_ccitt.h ****  * \version $Id: crc.h 2771 2009-08-06 07:01:06Z lottaviano $
  38:bertos/algo/crc_ccitt.h ****  * \author Francesco Sacchi <batt@develer.com>
  39:bertos/algo/crc_ccitt.h ****  *
  40:bertos/algo/crc_ccitt.h ****  * $WIZ$ module_name = "crc-ccitt"
  41:bertos/algo/crc_ccitt.h ****  */
  42:bertos/algo/crc_ccitt.h **** 
  43:bertos/algo/crc_ccitt.h **** #ifndef ALGO_CRC_CCITT_H
  44:bertos/algo/crc_ccitt.h **** #define ALGO_CRC_CCITT_H
  45:bertos/algo/crc_ccitt.h **** 
  46:bertos/algo/crc_ccitt.h **** #include <cfg/compiler.h>
  47:bertos/algo/crc_ccitt.h **** #include <cpu/pgm.h>
  48:bertos/algo/crc_ccitt.h **** 
  49:bertos/algo/crc_ccitt.h **** EXTERN_C_BEGIN
  50:bertos/algo/crc_ccitt.h **** 
  51:bertos/algo/crc_ccitt.h **** /* CRC table */
  52:bertos/algo/crc_ccitt.h **** extern const uint16_t crc_ccitt_tab[256];
  53:bertos/algo/crc_ccitt.h **** 
  54:bertos/algo/crc_ccitt.h **** /**
  55:bertos/algo/crc_ccitt.h ****  * \brief Compute the updated CRC-CCITT value for one octet (inline version)
  56:bertos/algo/crc_ccitt.h ****  */
  57:bertos/algo/crc_ccitt.h **** INLINE uint16_t updcrc_ccitt(uint8_t c, uint16_t oldcrc)
  58:bertos/algo/crc_ccitt.h **** {
  59:bertos/algo/crc_ccitt.h **** #if CPU_HARVARD
  60:bertos/algo/crc_ccitt.h **** 	return (oldcrc >> 8) ^ pgm_read_uint16_t(&crc_ccitt_tab[(oldcrc ^ c) & 0xff]);
  72               		.loc 2 60 0
  73 0034 EC2F      		mov r30,r28	 ;  66	*movqi/1	[length = 1]
  74 0036 F0E0      		ldi r31,lo8(0)	 ;  67	*movqi/2	[length = 1]
  75 0038 E227      		eor r30,r18	 ;  28	xorhi3	[length = 2]
  76 003a F327      		eor r31,r19
  77 003c F070      		andi r31,hi8(255)	 ;  29	andhi3/2	[length = 2]
  78 003e EE0F      		lsl r30	 ;  78	*ashlhi3_const/2	[length = 2]
  79 0040 FF1F      		rol r31
  80 0042 E050      		subi r30,lo8(-(crc_ccitt_tab))	 ;  31	*addhi3/4	[length = 2]
  81 0044 F040      		sbci r31,hi8(-(crc_ccitt_tab))
  82               	.LVL4:
  83               	/* #APP */
  84               	 ;  60 "bertos/algo/crc_ccitt.h" 1
  85 0046 8591      		lpm r24, Z+
  86 0048 9491      		lpm r25, Z
  87               		
  88               	 ;  0 "" 2
  89               	.LVL5:
  90               	/* #NOAPP */
  91               	.LBE45:
  92 004a 232F      		mov r18,r19	 ;  79	*lshrhi3_const/3	[length = 2]
  93 004c 3327      		clr r19
  94 004e 8227      		eor r24,r18	 ;  40	xorhi3	[length = 2]
  95 0050 9327      		eor r25,r19
  96               	.LVL6:
  97               	.LBE44:
  98               	.LBE43:
  99               		.loc 1 192 0
 100 0052 8D93      		st X+,r24	 ;  41	*movhi/3	[length = 2]
 101 0054 9C93      		st X,r25
 193:bertos/net/ax25.c **** 	kfile_putc(c, ctx->ch);
 102               		.loc 1 193 0
 103 0056 F801      		movw r30,r16	 ;  65	*movhi/1	[length = 1]
 104 0058 E65B      		subi r30,lo8(-(330))	 ;  44	*addhi3/4	[length = 2]
 105 005a FE4F      		sbci r31,hi8(-(330))
 106 005c 6081      		ld r22,Z	 ;  45	*movhi/2	[length = 2]
 107 005e 7181      		ldd r23,Z+1
 108 0060 8C2F      		mov r24,r28	 ;  55	*movqi/1	[length = 1]
 109 0062 90E0      		ldi r25,lo8(0)	 ;  56	*movqi/2	[length = 1]
 110 0064 0E94 0000 		call kfile_putc	 ;  48	call_value_insn/3	[length = 2]
 111               	.LVL7:
 112               	/* epilogue start */
 194:bertos/net/ax25.c **** }
 113               		.loc 1 194 0
 114 0068 CF91      		pop r28	 ;  73	popqi	[length = 1]
 115               	.LVL8:
 116 006a 1F91      		pop r17	 ;  74	popqi	[length = 1]
 117 006c 0F91      		pop r16	 ;  75	popqi	[length = 1]
 118               	.LVL9:
 119 006e 0895      		ret	 ;  76	return_from_epilogue	[length = 1]
 120               		.cfi_endproc
 121               	.LFE12:
 123               		.data
 124               	.LC0:
 125 0000 252E 3673 		.string	"%.6s"
 125      00
 126               	.LC1:
 127 0005 2D25 6400 		.string	"-%d"
 128               		.section	.text.print_call,"ax",@progbits
 130               	print_call:
 131               	.LFB15:
 195:bertos/net/ax25.c **** 
 196:bertos/net/ax25.c **** static void ax25_sendCall(AX25Ctx *ctx, const AX25Call *addr, bool last)
 197:bertos/net/ax25.c **** {
 198:bertos/net/ax25.c **** 	unsigned len = MIN(sizeof(addr->call), strlen(addr->call));
 199:bertos/net/ax25.c **** 
 200:bertos/net/ax25.c **** 	for (unsigned i = 0; i < len; i++)
 201:bertos/net/ax25.c **** 	{
 202:bertos/net/ax25.c **** 		uint8_t c = addr->call[i];
 203:bertos/net/ax25.c **** 		ASSERT(isalnum(c) || c == ' ');
 204:bertos/net/ax25.c **** 		c = toupper(c);
 205:bertos/net/ax25.c **** 		ax25_putchar(ctx, c << 1);
 206:bertos/net/ax25.c **** 	}
 207:bertos/net/ax25.c **** 
 208:bertos/net/ax25.c **** 	/* Fill with spaces the rest of the CALL if it's shorter */
 209:bertos/net/ax25.c **** 	if (len < sizeof(addr->call))
 210:bertos/net/ax25.c **** 		for (unsigned i = 0; i < sizeof(addr->call) - len; i++)
 211:bertos/net/ax25.c **** 			ax25_putchar(ctx, ' ' << 1);
 212:bertos/net/ax25.c **** 
 213:bertos/net/ax25.c **** 	/* The bit0 of last call SSID should be set to 1 */
 214:bertos/net/ax25.c **** 	uint8_t ssid = addr->ssid << 1 | (last ? 0x01 : 0);
 215:bertos/net/ax25.c **** 	ax25_putchar(ctx, ssid);
 216:bertos/net/ax25.c **** }
 217:bertos/net/ax25.c **** 
 218:bertos/net/ax25.c **** /**
 219:bertos/net/ax25.c ****  * Send an AX25 frame on the channel through a specific path.
 220:bertos/net/ax25.c ****  * \param ctx AX25 context to operate on.
 221:bertos/net/ax25.c ****  * \param path An array of callsigns used as path, \see AX25_PATH for
 222:bertos/net/ax25.c ****  *        an handy way to create a path.
 223:bertos/net/ax25.c ****  * \param path_len callsigns path lenght.
 224:bertos/net/ax25.c ****  * \param _buf payload buffer.
 225:bertos/net/ax25.c ****  * \param len length of the payload.
 226:bertos/net/ax25.c ****  */
 227:bertos/net/ax25.c **** void ax25_sendVia(AX25Ctx *ctx, const AX25Call *path, size_t path_len, const void *_buf, size_t len
 228:bertos/net/ax25.c **** {
 229:bertos/net/ax25.c **** 	const uint8_t *buf = (const uint8_t *)_buf;
 230:bertos/net/ax25.c **** 	ASSERT(path);
 231:bertos/net/ax25.c **** 	ASSERT(path_len >= 2);
 232:bertos/net/ax25.c **** 
 233:bertos/net/ax25.c **** 	ctx->crc_out = CRC_CCITT_INIT_VAL;
 234:bertos/net/ax25.c **** 	kfile_putc(HDLC_FLAG, ctx->ch);
 235:bertos/net/ax25.c **** 
 236:bertos/net/ax25.c **** 
 237:bertos/net/ax25.c **** 	/* Send call */
 238:bertos/net/ax25.c **** 	for (size_t i = 0; i < path_len; i++)
 239:bertos/net/ax25.c **** 		ax25_sendCall(ctx, &path[i], (i == path_len - 1));
 240:bertos/net/ax25.c **** 
 241:bertos/net/ax25.c **** 	ax25_putchar(ctx, AX25_CTRL_UI);
 242:bertos/net/ax25.c **** 	ax25_putchar(ctx, AX25_PID_NOLAYER3);
 243:bertos/net/ax25.c **** 
 244:bertos/net/ax25.c **** 	while (len--)
 245:bertos/net/ax25.c **** 		ax25_putchar(ctx, *buf++);
 246:bertos/net/ax25.c **** 
 247:bertos/net/ax25.c **** 	/*
 248:bertos/net/ax25.c **** 	 * According to AX25 protocol,
 249:bertos/net/ax25.c **** 	 * CRC is sent in reverse order!
 250:bertos/net/ax25.c **** 	 */
 251:bertos/net/ax25.c **** 	uint8_t crcl = (ctx->crc_out & 0xff) ^ 0xff;
 252:bertos/net/ax25.c **** 	uint8_t crch = (ctx->crc_out >> 8) ^ 0xff;
 253:bertos/net/ax25.c **** 	ax25_putchar(ctx, crcl);
 254:bertos/net/ax25.c **** 	ax25_putchar(ctx, crch);
 255:bertos/net/ax25.c **** 
 256:bertos/net/ax25.c **** 	ASSERT(ctx->crc_out == AX25_CRC_CORRECT);
 257:bertos/net/ax25.c **** 
 258:bertos/net/ax25.c **** 	kfile_putc(HDLC_FLAG, ctx->ch);
 259:bertos/net/ax25.c **** }
 260:bertos/net/ax25.c **** 
 261:bertos/net/ax25.c **** static void print_call(KFile *ch, const AX25Call *call)
 262:bertos/net/ax25.c **** {
 132               		.loc 1 262 0
 133               		.cfi_startproc
 134 0000 0F93      		push r16	 ;  49	*pushqi/1	[length = 1]
 135               	.LCFI3:
 136               		.cfi_def_cfa_offset 3
 137               		.cfi_offset 16, -2
 138 0002 1F93      		push r17	 ;  50	*pushqi/1	[length = 1]
 139               	.LCFI4:
 140               		.cfi_def_cfa_offset 4
 141               		.cfi_offset 17, -3
 142 0004 CF93      		push r28	 ;  51	*pushqi/1	[length = 1]
 143               	.LCFI5:
 144               		.cfi_def_cfa_offset 5
 145               		.cfi_offset 28, -4
 146 0006 DF93      		push r29	 ;  52	*pushqi/1	[length = 1]
 147               	.LCFI6:
 148               		.cfi_def_cfa_offset 6
 149               		.cfi_offset 29, -5
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 4 */
 153               	.L__stack_usage = 4
 154 0008 8C01      		movw r16,r24	 ;  2	*movhi/1	[length = 1]
 155 000a EB01      		movw r28,r22	 ;  3	*movhi/1	[length = 1]
 263:bertos/net/ax25.c **** 	kfile_printf(ch, "%.6s", call->call);
 156               		.loc 1 263 0
 157 000c 00D0      		rcall .	 ;  7	*addhi3_sp_R_pc2	[length = 3]
 158 000e 00D0      		rcall .
 159 0010 00D0      		rcall .
 160               	.LCFI7:
 161               		.cfi_def_cfa_offset 12
 162 0012 EDB7      		in r30,__SP_L__	 ;  41	*movhi_sp/2	[length = 2]
 163 0014 FEB7      		in r31,__SP_H__
 164 0016 3196      		adiw r30,1	 ;  34	*addhi3/2	[length = 1]
 165 0018 ADB7      		in r26,__SP_L__	 ;  42	*movhi_sp/2	[length = 2]
 166 001a BEB7      		in r27,__SP_H__
 167 001c 1296      		adiw r26,1+1	 ;  9	*movhi/3	[length = 4]
 168 001e 9C93      		st X,r25
 169 0020 8E93      		st -X,r24
 170 0022 1197      		sbiw r26,1
 171 0024 80E0      		ldi r24,lo8(.LC0)	 ;  10	*movhi/4	[length = 2]
 172 0026 90E0      		ldi r25,hi8(.LC0)
 173 0028 9383      		std Z+3,r25	 ;  11	*movhi/3	[length = 2]
 174 002a 8283      		std Z+2,r24
 175 002c 7583      		std Z+5,r23	 ;  12	*movhi/3	[length = 2]
 176 002e 6483      		std Z+4,r22
 177               		.cfi_escape 0x2e,0x6
 178 0030 0E94 0000 		call kfile_printf	 ;  13	call_value_insn/3	[length = 2]
 264:bertos/net/ax25.c **** 	if (call->ssid)
 179               		.loc 1 264 0
 180 0034 2E81      		ldd r18,Y+6	 ;  14	*movqi/4	[length = 1]
 181 0036 8DB7      		in r24,__SP_L__	 ;  43	*movhi_sp/2	[length = 2]
 182 0038 9EB7      		in r25,__SP_H__
 183 003a 0696      		adiw r24,6	 ;  15	*addhi3/2	[length = 1]
 184 003c 0FB6      		in __tmp_reg__,__SREG__	 ;  44	*movhi_sp/1	[length = 5]
 185 003e F894      		cli
 186 0040 9EBF      		out __SP_H__,r25
 187 0042 0FBE      		out __SREG__,__tmp_reg__
 188 0044 8DBF      		out __SP_L__,r24
 189               	.LCFI8:
 190               		.cfi_def_cfa_offset 6
 191 0046 2223      		tst r18	 ;  16	*cmpqi/1	[length = 1]
 192 0048 01F0      		breq .L4	 ;  17	branch	[length = 1]
 193               	.LBB48:
 194               	.LBB49:
 265:bertos/net/ax25.c **** 		kfile_printf(ch, "-%d", call->ssid);
 195               		.loc 1 265 0
 196 004a 00D0      		rcall .	 ;  21	*addhi3_sp_R_pc2	[length = 3]
 197 004c 00D0      		rcall .
 198 004e 00D0      		rcall .
 199               	.LCFI9:
 200               		.cfi_def_cfa_offset 12
 201 0050 EDB7      		in r30,__SP_L__	 ;  45	*movhi_sp/2	[length = 2]
 202 0052 FEB7      		in r31,__SP_H__
 203 0054 3196      		adiw r30,1	 ;  35	*addhi3/2	[length = 1]
 204 0056 ADB7      		in r26,__SP_L__	 ;  46	*movhi_sp/2	[length = 2]
 205 0058 BEB7      		in r27,__SP_H__
 206 005a 1296      		adiw r26,1+1	 ;  23	*movhi/3	[length = 4]
 207 005c 1C93      		st X,r17
 208 005e 0E93      		st -X,r16
 209 0060 1197      		sbiw r26,1
 210 0062 80E0      		ldi r24,lo8(.LC1)	 ;  24	*movhi/4	[length = 2]
 211 0064 90E0      		ldi r25,hi8(.LC1)
 212 0066 9383      		std Z+3,r25	 ;  25	*movhi/3	[length = 2]
 213 0068 8283      		std Z+2,r24
 214 006a 2483      		std Z+4,r18	 ;  38	*movqi/3	[length = 1]
 215 006c 1582      		std Z+5,__zero_reg__	 ;  39	*movqi/3	[length = 1]
 216 006e 0E94 0000 		call kfile_printf	 ;  28	call_value_insn/3	[length = 2]
 217 0072 8DB7      		in r24,__SP_L__	 ;  47	*movhi_sp/2	[length = 2]
 218 0074 9EB7      		in r25,__SP_H__
 219 0076 0696      		adiw r24,6	 ;  29	*addhi3/2	[length = 1]
 220 0078 0FB6      		in __tmp_reg__,__SREG__	 ;  48	*movhi_sp/1	[length = 5]
 221 007a F894      		cli
 222 007c 9EBF      		out __SP_H__,r25
 223 007e 0FBE      		out __SREG__,__tmp_reg__
 224 0080 8DBF      		out __SP_L__,r24
 225               	.LCFI10:
 226               		.cfi_def_cfa_offset 6
 227               	.L4:
 228               	/* epilogue start */
 229               	.LBE49:
 230               	.LBE48:
 266:bertos/net/ax25.c **** }
 231               		.loc 1 266 0
 232 0082 DF91      		pop r29	 ;  55	popqi	[length = 1]
 233 0084 CF91      		pop r28	 ;  56	popqi	[length = 1]
 234 0086 1F91      		pop r17	 ;  57	popqi	[length = 1]
 235 0088 0F91      		pop r16	 ;  58	popqi	[length = 1]
 236 008a 0895      		ret	 ;  59	return_from_epilogue	[length = 1]
 237               		.cfi_endproc
 238               	.LFE15:
 240               		.data
 241               	.LC2:
 242 0009 5741 524E 		.string	"WARN"
 242      00
 243               	.LC3:
 244 000e 4552 5200 		.string	"ERR"
 245               		.section	.text.ax25_poll,"ax",@progbits
 246               	.global	ax25_poll
 248               	ax25_poll:
 249               	.LFB11:
 126:bertos/net/ax25.c **** {
 250               		.loc 1 126 0
 251               		.cfi_startproc
 252               	.LVL10:
 253 0000 2F92      		push r2	 ;  602	*pushqi/1	[length = 1]
 254               	.LCFI11:
 255               		.cfi_def_cfa_offset 3
 256               		.cfi_offset 2, -2
 257 0002 3F92      		push r3	 ;  603	*pushqi/1	[length = 1]
 258               	.LCFI12:
 259               		.cfi_def_cfa_offset 4
 260               		.cfi_offset 3, -3
 261 0004 4F92      		push r4	 ;  604	*pushqi/1	[length = 1]
 262               	.LCFI13:
 263               		.cfi_def_cfa_offset 5
 264               		.cfi_offset 4, -4
 265 0006 5F92      		push r5	 ;  605	*pushqi/1	[length = 1]
 266               	.LCFI14:
 267               		.cfi_def_cfa_offset 6
 268               		.cfi_offset 5, -5
 269 0008 6F92      		push r6	 ;  606	*pushqi/1	[length = 1]
 270               	.LCFI15:
 271               		.cfi_def_cfa_offset 7
 272               		.cfi_offset 6, -6
 273 000a 7F92      		push r7	 ;  607	*pushqi/1	[length = 1]
 274               	.LCFI16:
 275               		.cfi_def_cfa_offset 8
 276               		.cfi_offset 7, -7
 277 000c 8F92      		push r8	 ;  608	*pushqi/1	[length = 1]
 278               	.LCFI17:
 279               		.cfi_def_cfa_offset 9
 280               		.cfi_offset 8, -8
 281 000e 9F92      		push r9	 ;  609	*pushqi/1	[length = 1]
 282               	.LCFI18:
 283               		.cfi_def_cfa_offset 10
 284               		.cfi_offset 9, -9
 285 0010 AF92      		push r10	 ;  610	*pushqi/1	[length = 1]
 286               	.LCFI19:
 287               		.cfi_def_cfa_offset 11
 288               		.cfi_offset 10, -10
 289 0012 BF92      		push r11	 ;  611	*pushqi/1	[length = 1]
 290               	.LCFI20:
 291               		.cfi_def_cfa_offset 12
 292               		.cfi_offset 11, -11
 293 0014 CF92      		push r12	 ;  612	*pushqi/1	[length = 1]
 294               	.LCFI21:
 295               		.cfi_def_cfa_offset 13
 296               		.cfi_offset 12, -12
 297 0016 DF92      		push r13	 ;  613	*pushqi/1	[length = 1]
 298               	.LCFI22:
 299               		.cfi_def_cfa_offset 14
 300               		.cfi_offset 13, -13
 301 0018 EF92      		push r14	 ;  614	*pushqi/1	[length = 1]
 302               	.LCFI23:
 303               		.cfi_def_cfa_offset 15
 304               		.cfi_offset 14, -14
 305 001a FF92      		push r15	 ;  615	*pushqi/1	[length = 1]
 306               	.LCFI24:
 307               		.cfi_def_cfa_offset 16
 308               		.cfi_offset 15, -15
 309 001c 0F93      		push r16	 ;  616	*pushqi/1	[length = 1]
 310               	.LCFI25:
 311               		.cfi_def_cfa_offset 17
 312               		.cfi_offset 16, -16
 313 001e 1F93      		push r17	 ;  617	*pushqi/1	[length = 1]
 314               	.LCFI26:
 315               		.cfi_def_cfa_offset 18
 316               		.cfi_offset 17, -17
 317 0020 CF93      		push r28	 ;  618	*pushqi/1	[length = 1]
 318               	.LCFI27:
 319               		.cfi_def_cfa_offset 19
 320               		.cfi_offset 28, -18
 321 0022 DF93      		push r29	 ;  619	*pushqi/1	[length = 1]
 322               	.LCFI28:
 323               		.cfi_def_cfa_offset 20
 324               		.cfi_offset 29, -19
 325 0024 CDB7      		in r28,__SP_L__	 ;  620	*movhi_sp/2	[length = 2]
 326 0026 DEB7      		in r29,__SP_H__
 327 0028 CE54      		subi r28,lo8(-(-78))	 ;  621	*addhi3/4	[length = 2]
 328 002a D040      		sbci r29,hi8(-(-78))
 329               	.LCFI29:
 330               		.cfi_def_cfa 28, 98
 331 002c 0FB6      		in __tmp_reg__,__SREG__	 ;  622	*movhi_sp/1	[length = 5]
 332 002e F894      		cli
 333 0030 DEBF      		out __SP_H__,r29
 334 0032 0FBE      		out __SREG__,__tmp_reg__
 335 0034 CDBF      		out __SP_L__,r28
 336               	/* prologue: function */
 337               	/* frame size = 78 */
 338               	/* stack size = 96 */
 339               	.L__stack_usage = 96
 340 0036 7C01      		movw r14,r24	 ;  30	*movhi/1	[length = 1]
 129:bertos/net/ax25.c **** 	while ((c = kfile_getc(ctx->ch)) != EOF)
 341               		.loc 1 129 0
 342 0038 0AE4      		ldi r16,lo8(330)	 ;  659	*reload_inhi	[length = 4]
 343 003a 202E      		mov r2,r16
 344 003c 01E0      		ldi r16,hi8(330)
 345 003e 302E      		mov r3,r16
 346 0040 280E      		add r2,r24	 ;  350	*addhi3/1	[length = 2]
 347 0042 391E      		adc r3,r25
 131:bertos/net/ax25.c **** 		if (!ctx->escape && c == HDLC_FLAG)
 348               		.loc 1 131 0
 349 0044 25E5      		ldi r18,lo8(341)	 ;  660	*reload_inhi	[length = 4]
 350 0046 422E      		mov r4,r18
 351 0048 21E0      		ldi r18,hi8(341)
 352 004a 522E      		mov r5,r18
 353 004c 480E      		add r4,r24	 ;  45	*addhi3/1	[length = 2]
 354 004e 591E      		adc r5,r25
 164:bertos/net/ax25.c **** 		if (ctx->sync)
 355               		.loc 1 164 0
 356 0050 34E5      		ldi r19,lo8(340)	 ;  661	*reload_inhi	[length = 4]
 357 0052 A32E      		mov r10,r19
 358 0054 31E0      		ldi r19,hi8(340)
 359 0056 B32E      		mov r11,r19
 360 0058 A80E      		add r10,r24	 ;  299	*addhi3/1	[length = 2]
 361 005a B91E      		adc r11,r25
 166:bertos/net/ax25.c **** 			if (ctx->frm_len < CONFIG_AX25_FRAME_BUF_LEN)
 362               		.loc 1 166 0
 363 005c 4CE4      		ldi r20,lo8(332)	 ;  662	*reload_inhi	[length = 4]
 364 005e 842E      		mov r8,r20
 365 0060 41E0      		ldi r20,hi8(332)
 366 0062 942E      		mov r9,r20
 367 0064 880E      		add r8,r24	 ;  304	*addhi3/1	[length = 2]
 368 0066 991E      		adc r9,r25
 169:bertos/net/ax25.c **** 				ctx->crc_in = updcrc_ccitt(c, ctx->crc_in);
 369               		.loc 1 169 0
 370 0068 5EE4      		ldi r21,lo8(334)	 ;  663	*reload_inhi	[length = 4]
 371 006a 652E      		mov r6,r21
 372 006c 51E0      		ldi r21,hi8(334)
 373 006e 752E      		mov r7,r21
 374 0070 680E      		add r6,r24	 ;  315	*addhi3/1	[length = 2]
 375 0072 791E      		adc r7,r25
 129:bertos/net/ax25.c **** 	while ((c = kfile_getc(ctx->ch)) != EOF)
 376               		.loc 1 129 0
 377 0074 00C0      		rjmp .L35	 ;  664	jump	[length = 1]
 378               	.LVL11:
 379               	.L27:
 131:bertos/net/ax25.c **** 		if (!ctx->escape && c == HDLC_FLAG)
 380               		.loc 1 131 0
 381 0076 D201      		movw r26,r4	 ;  537	*movhi/1	[length = 1]
 382 0078 8C91      		ld r24,X	 ;  46	*movqi/4	[length = 1]
 383 007a 8823      		tst r24	 ;  47	*cmpqi/1	[length = 1]
 384 007c 01F0      		breq .+2	 ;  48	branch	[length = 2]
 385 007e 00C0      		rjmp .L8
 131:bertos/net/ax25.c **** 		if (!ctx->escape && c == HDLC_FLAG)
 386               		.loc 1 131 0 is_stmt 0 discriminator 1
 387 0080 2E37      		cpi r18,126	 ;  50	*cmphi/4	[length = 2]
 388 0082 3105      		cpc r19,__zero_reg__
 389 0084 01F0      		breq .+2	 ;  51	branch	[length = 2]
 390 0086 00C0      		rjmp .L9
 133:bertos/net/ax25.c **** 			if (ctx->frm_len >= AX25_MIN_FRAME_LEN)
 391               		.loc 1 133 0 is_stmt 1
 392 0088 F401      		movw r30,r8	 ;  538	*movhi/1	[length = 1]
 393 008a C080      		ld r12,Z	 ;  54	*movhi/2	[length = 2]
 394 008c D180      		ldd r13,Z+1
 395 008e F2E1      		ldi r31,lo8(18)	 ;  55	*cmphi/6	[length = 3]
 396 0090 CF16      		cp r12,r31
 397 0092 D104      		cpc r13,__zero_reg__
 398 0094 00F4      		brsh .+2	 ;  56	branch	[length = 2]
 399 0096 00C0      		rjmp .L10
 135:bertos/net/ax25.c **** 				if (ctx->crc_in == AX25_CRC_CORRECT)
 400               		.loc 1 135 0
 401 0098 D301      		movw r26,r6	 ;  539	*movhi/1	[length = 1]
 402 009a 8D91      		ld r24,X+	 ;  59	*movhi/2	[length = 3]
 403 009c 9C91      		ld r25,X
 404 009e 1197      		sbiw r26,1
 405 00a0 B0EF      		ldi r27,hi8(-3912)	 ;  60	*cmphi/5	[length = 3]
 406 00a2 883B      		cpi r24,lo8(-3912)
 407 00a4 9B07      		cpc r25,r27
 408 00a6 01F0      		breq .+2	 ;  61	branch	[length = 2]
 409 00a8 00C0      		rjmp .L10
 410               	.LVL12:
 411               	.LBB70:
 412               	.LBB71:
  63:bertos/net/ax25.c **** 	uint8_t *buf = ctx->buf;
 413               		.loc 1 63 0
 414 00aa FE01      		movw r30,r28	 ;  540	*movhi/1	[length = 1]
 415 00ac 3896      		adiw r30,8	 ;  70	*addhi3/2	[length = 1]
 416 00ae D701      		movw r26,r14	 ;  32	*movhi/1	[length = 1]
  65:bertos/net/ax25.c **** 	DECODE_CALL(buf, msg.dst.call);
 417               		.loc 1 65 0
 418 00b0 80E0      		ldi r24,lo8(0)	 ;  33	*movhi/4	[length = 2]
 419 00b2 90E0      		ldi r25,hi8(0)
 420               	.LVL13:
 421               	.L12:
 422               	.LBB72:
 423               	.LBB73:
 424 00b4 2D91      		ld r18,X+	 ;  72	*movqi/4	[length = 1]
 425               	.LVL14:
 426 00b6 2695      		lsr r18	 ;  73	*lshrqi3/3	[length = 1]
 427               	.LVL15:
 428 00b8 2032      		cpi r18,lo8(32)	 ;  77	*cmpqi/3	[length = 1]
 429 00ba 01F4      		brne .L11	 ;  78	branch	[length = 1]
 430 00bc 20E0      		ldi r18,lo8(0)	 ;  481	*movqi/2	[length = 1]
 431               	.LVL16:
 432               	.L11:
 433 00be 2193      		st Z+,r18	 ;  82	*movqi/3	[length = 1]
 434               	.LBE73:
 435 00c0 0196      		adiw r24,1	 ;  84	*addhi3/2	[length = 1]
 436               	.LVL17:
 437 00c2 8630      		cpi r24,6	 ;  89	*cmphi/4	[length = 2]
 438 00c4 9105      		cpc r25,__zero_reg__
 439 00c6 01F4      		brne .L12	 ;  90	branch	[length = 1]
 440               	.LBE72:
  66:bertos/net/ax25.c **** 	msg.dst.ssid = (*buf++ >> 1) & 0x0F;
 441               		.loc 1 66 0
 442 00c8 F701      		movw r30,r14	 ;  541	*movhi/1	[length = 1]
 443 00ca 8681      		ldd r24,Z+6	 ;  92	*movqi/4	[length = 1]
 444               	.LVL18:
 445 00cc 8695      		lsr r24	 ;  93	*lshrqi3/3	[length = 1]
 446 00ce 8F70      		andi r24,lo8(15)	 ;  94	andqi3/2	[length = 1]
 447 00d0 8E87      		std Y+14,r24	 ;  95	*movqi/3	[length = 1]
 448 00d2 3796      		adiw r30,7	 ;  96	*addhi3/2	[length = 1]
 449               	.LVL19:
 450 00d4 DE01      		movw r26,r28	 ;  543	*movhi/1	[length = 1]
 451 00d6 1196      		adiw r26,1	 ;  494	*addhi3/2	[length = 1]
  68:bertos/net/ax25.c **** 	DECODE_CALL(buf, msg.src.call);
 452               		.loc 1 68 0
 453 00d8 80E0      		ldi r24,lo8(0)	 ;  35	*movhi/4	[length = 2]
 454 00da 90E0      		ldi r25,hi8(0)
 455               	.LVL20:
 456               	.L14:
 457               	.LBB74:
 458               	.LBB75:
 459 00dc 2191      		ld r18,Z+	 ;  103	*movqi/4	[length = 1]
 460               	.LVL21:
 461 00de 2695      		lsr r18	 ;  104	*lshrqi3/3	[length = 1]
 462               	.LVL22:
 463 00e0 2032      		cpi r18,lo8(32)	 ;  108	*cmpqi/3	[length = 1]
 464 00e2 01F4      		brne .L13	 ;  109	branch	[length = 1]
 465 00e4 20E0      		ldi r18,lo8(0)	 ;  480	*movqi/2	[length = 1]
 466               	.LVL23:
 467               	.L13:
 468 00e6 2D93      		st X+,r18	 ;  113	*movqi/3	[length = 1]
 469               	.LBE75:
 470 00e8 0196      		adiw r24,1	 ;  115	*addhi3/2	[length = 1]
 471               	.LVL24:
 472 00ea 8630      		cpi r24,6	 ;  120	*cmphi/4	[length = 2]
 473 00ec 9105      		cpc r25,__zero_reg__
 474 00ee 01F4      		brne .L14	 ;  121	branch	[length = 1]
 475 00f0 D701      		movw r26,r14	 ;  544	*movhi/1	[length = 1]
 476 00f2 1D96      		adiw r26,13	 ;  123	*addhi3/2	[length = 1]
 477               	.LBE74:
  69:bertos/net/ax25.c **** 	msg.src.ssid = (*buf >> 1) & 0x0F;
 478               		.loc 1 69 0
 479 00f4 F701      		movw r30,r14	 ;  545	*movhi/1	[length = 1]
 480               	.LVL25:
 481 00f6 8585      		ldd r24,Z+13	 ;  124	*movqi/4	[length = 1]
 482               	.LVL26:
 483 00f8 8695      		lsr r24	 ;  125	*lshrqi3/3	[length = 1]
 484 00fa 8F70      		andi r24,lo8(15)	 ;  126	andqi3/2	[length = 1]
 485 00fc 8F83      		std Y+7,r24	 ;  127	*movqi/3	[length = 1]
 486               	.LVL27:
  75:bertos/net/ax25.c **** 		for (msg.rpt_cnt = 0; !(*buf++ & 0x01) && (msg.rpt_cnt < countof(msg.rpt_lst)); msg.rpt_cnt++)
 487               		.loc 1 75 0
 488 00fe 2896      		adiw r28,71-63	 ;  130	*movqi/3	[length = 3]
 489 0100 1FAE      		std Y+63,__zero_reg__
 490 0102 2897      		sbiw r28,71-63
 491 0104 90E0      		ldi r25,lo8(0)	 ;  39	*movqi/2	[length = 1]
 492 0106 00C0      		rjmp .L15	 ;  666	jump	[length = 1]
 493               	.L17:
 494               	.LBB77:
 495               	.LBB78:
  77:bertos/net/ax25.c **** 			DECODE_CALL(buf, msg.rpt_lst[msg.rpt_cnt].call);
 496               		.loc 1 77 0
 497 0108 F801      		movw r30,r16	 ;  546	*movhi/1	[length = 1]
 498 010a 8191      		ld r24,Z+	 ;  134	*movqi/4	[length = 1]
 499 010c 8F01      		movw r16,r30	 ;  547	*movhi/1	[length = 1]
 500 010e 8695      		lsr r24	 ;  135	*lshrqi3/3	[length = 1]
 501               	.LVL28:
 502 0110 8032      		cpi r24,lo8(32)	 ;  140	*cmpqi/3	[length = 1]
 503 0112 01F4      		brne .L16	 ;  141	branch	[length = 1]
 504 0114 80E0      		ldi r24,lo8(0)	 ;  478	*movqi/2	[length = 1]
 505               	.LVL29:
 506               	.L16:
 125:bertos/net/ax25.c **** void ax25_poll(AX25Ctx *ctx)
 507               		.loc 1 125 0
 508 0116 F901      		movw r30,r18	 ;  548	*movhi/1	[length = 1]
 509               	.LVL30:
 510 0118 E40F      		add r30,r20	 ;  152	*addhi3/1	[length = 2]
 511 011a F51F      		adc r31,r21
  77:bertos/net/ax25.c **** 			DECODE_CALL(buf, msg.rpt_lst[msg.rpt_cnt].call);
 512               		.loc 1 77 0
 513 011c 8687      		std Z+14,r24	 ;  153	*movqi/3	[length = 1]
 514               	.LBE78:
 515 011e 4F5F      		subi r20,lo8(-(1))	 ;  154	*addhi3/4	[length = 2]
 516 0120 5F4F      		sbci r21,hi8(-(1))
 517               	.LVL31:
 518 0122 4630      		cpi r20,6	 ;  159	*cmphi/4	[length = 2]
 519 0124 5105      		cpc r21,__zero_reg__
 520 0126 01F4      		brne .L17	 ;  160	branch	[length = 1]
 125:bertos/net/ax25.c **** void ax25_poll(AX25Ctx *ctx)
 521               		.loc 1 125 0
 522 0128 1796      		adiw r26,7	 ;  162	*addhi3/2	[length = 1]
 523               	.LBE77:
  78:bertos/net/ax25.c **** 			msg.rpt_lst[msg.rpt_cnt].ssid = (*buf >> 1) & 0x0F;
 524               		.loc 1 78 0
 525 012a FB01      		movw r30,r22	 ;  549	*movhi/1	[length = 1]
 526 012c 13E0      		ldi r17,3	 ;  658	*ashlhi3_const/5	[length = 5]
 527 012e EE0F      	1:	lsl r30
 528 0130 FF1F      		rol r31
 529 0132 1A95      		dec r17
 530 0134 01F4      		brne 1b
 531 0136 E61B      		sub r30,r22	 ;  166	subhi3/1	[length = 2]
 532 0138 F70B      		sbc r31,r23
 533 013a 21E0      		ldi r18,lo8(1)	 ;  551	*movhi/4	[length = 2]
 534 013c 30E0      		ldi r19,hi8(1)
 535 013e 2C0F      		add r18,r28	 ;  552	*addhi3/1	[length = 2]
 536 0140 3D1F      		adc r19,r29
 537 0142 E20F      		add r30,r18	 ;  167	*addhi3/1	[length = 2]
 538 0144 F31F      		adc r31,r19
 539 0146 8C91      		ld r24,X	 ;  169	*movqi/4	[length = 1]
 540 0148 8695      		lsr r24	 ;  170	*lshrqi3/3	[length = 1]
 541 014a 8F70      		andi r24,lo8(15)	 ;  171	andqi3/2	[length = 1]
 542 014c 848B      		std Z+20,r24	 ;  172	*movqi/3	[length = 1]
 543               	.LVL32:
 544 014e 9F5F      		subi r25,lo8(-(1))	 ;  174	addqi3/2	[length = 1]
 545               	.LVL33:
 546               	.L15:
  75:bertos/net/ax25.c **** 		for (msg.rpt_cnt = 0; !(*buf++ & 0x01) && (msg.rpt_cnt < countof(msg.rpt_lst)); msg.rpt_cnt++)
 547               		.loc 1 75 0
 548 0150 8C91      		ld r24,X	 ;  180	*movqi/4	[length = 1]
 549 0152 80FD      		sbrc r24,0	 ;  184	*sbrx_branchhi	[length = 2]
 550 0154 00C0      		rjmp .L20
 551               	.L18:
 552 0156 9830      		cpi r25,lo8(8)	 ;  192	*cmpqi/3	[length = 1]
 553 0158 00F4      		brsh .L20	 ;  193	branch	[length = 1]
 125:bertos/net/ax25.c **** void ax25_poll(AX25Ctx *ctx)
 554               		.loc 1 125 0
 555 015a 8D01      		movw r16,r26	 ;  553	*movhi/1	[length = 1]
 556 015c 0F5F      		subi r16,lo8(-(1))	 ;  196	*addhi3/4	[length = 2]
 557 015e 1F4F      		sbci r17,hi8(-(1))
 558               	.LBB80:
 559               	.LBB76:
 560 0160 40E0      		ldi r20,lo8(0)	 ;  475	*movhi/4	[length = 2]
 561 0162 50E0      		ldi r21,hi8(0)
 562               	.LBE76:
 563               	.LBE80:
 564               	.LBB81:
 565               	.LBB79:
  77:bertos/net/ax25.c **** 			DECODE_CALL(buf, msg.rpt_lst[msg.rpt_cnt].call);
 566               		.loc 1 77 0
 567 0164 692F      		mov r22,r25	 ;  600	*movqi/1	[length = 1]
 568 0166 70E0      		ldi r23,lo8(0)	 ;  601	*movqi/2	[length = 1]
 125:bertos/net/ax25.c **** void ax25_poll(AX25Ctx *ctx)
 569               		.loc 1 125 0
 570 0168 9B01      		movw r18,r22	 ;  554	*movhi/1	[length = 1]
 571 016a E3E0      		ldi r30,3	 ;  657	*ashlhi3_const/5	[length = 5]
 572 016c 220F      	1:	lsl r18
 573 016e 331F      		rol r19
 574 0170 EA95      		dec r30
 575 0172 01F4      		brne 1b
 576 0174 261B      		sub r18,r22	 ;  150	subhi3/1	[length = 2]
 577 0176 370B      		sbc r19,r23
 578 0178 E1E0      		ldi r30,lo8(1)	 ;  556	*movhi/4	[length = 2]
 579 017a F0E0      		ldi r31,hi8(1)
 580 017c EC0F      		add r30,r28	 ;  557	*addhi3/1	[length = 2]
 581 017e FD1F      		adc r31,r29
 582 0180 2E0F      		add r18,r30	 ;  151	*addhi3/1	[length = 2]
 583 0182 3F1F      		adc r19,r31
 584 0184 00C0      		rjmp .L17	 ;  668	jump	[length = 1]
 585               	.L20:
 586               	.LBE79:
 587               	.LBE81:
 588 0186 2896      		adiw r28,71-63	 ;  202	*movqi/3	[length = 3]
 589 0188 9FAF      		std Y+63,r25
 590 018a 2897      		sbiw r28,71-63
  92:bertos/net/ax25.c **** 	msg.ctrl = *buf++;
 591               		.loc 1 92 0
 592 018c 1196      		adiw r26,1	 ;  205	*movqi/4	[length = 3]
 593 018e 8C91      		ld r24,X
 594 0190 1197      		sbiw r26,1
 595 0192 90E0      		ldi r25,lo8(0)	 ;  599	*movqi/2	[length = 1]
 596 0194 2A96      		adiw r28,72-62	 ;  208	*movhi/3	[length = 4]
 597 0196 9FAF      		std Y+63,r25
 598 0198 8EAF      		std Y+62,r24
 599 019a 2A97      		sbiw r28,72-62
 600               	.LVL34:
  93:bertos/net/ax25.c **** 	if (msg.ctrl != AX25_CTRL_UI)
 601               		.loc 1 93 0
 602 019c 8330      		cpi r24,3	 ;  210	*cmphi/4	[length = 2]
 603 019e 9105      		cpc r25,__zero_reg__
 604 01a0 01F0      		breq .L21	 ;  211	branch	[length = 1]
  95:bertos/net/ax25.c **** 		LOG_WARN("Only UI frames are handled, got [%02X]\n", msg.ctrl);
 605               		.loc 1 95 0
 606 01a2 00D0      		rcall .	 ;  213	*addhi3_sp_R_pc2	[length = 3]
 607 01a4 00D0      		rcall .
 608 01a6 00D0      		rcall .
 609 01a8 EDB7      		in r30,__SP_L__	 ;  558	*movhi_sp/2	[length = 2]
 610 01aa FEB7      		in r31,__SP_H__
 611 01ac 3196      		adiw r30,1	 ;  441	*addhi3/2	[length = 1]
 612 01ae 20E0      		ldi r18,lo8(__c.1724)	 ;  215	*movhi/4	[length = 2]
 613 01b0 30E0      		ldi r19,hi8(__c.1724)
 614 01b2 ADB7      		in r26,__SP_L__	 ;  559	*movhi_sp/2	[length = 2]
 615 01b4 BEB7      		in r27,__SP_H__
 616               	.LVL35:
 617 01b6 1296      		adiw r26,1+1	 ;  216	*movhi/3	[length = 4]
 618 01b8 3C93      		st X,r19
 619 01ba 2E93      		st -X,r18
 620 01bc 1197      		sbiw r26,1
 621 01be 20E0      		ldi r18,lo8(.LC2)	 ;  217	*movhi/4	[length = 2]
 622 01c0 30E0      		ldi r19,hi8(.LC2)
 623 01c2 3383      		std Z+3,r19	 ;  218	*movhi/3	[length = 2]
 624 01c4 2283      		std Z+2,r18
 625 01c6 9583      		std Z+5,r25	 ;  219	*movhi/3	[length = 2]
 626 01c8 8483      		std Z+4,r24
 627 01ca 00C0      		rjmp .L36	 ;  670	jump	[length = 1]
 628               	.LVL36:
 629               	.L21:
  99:bertos/net/ax25.c **** 	msg.pid = *buf++;
 630               		.loc 1 99 0
 631 01cc 1296      		adiw r26,2	 ;  226	*movqi/4	[length = 3]
 632 01ce 8C91      		ld r24,X
 633 01d0 1297      		sbiw r26,2
 634 01d2 2B96      		adiw r28,74-63	 ;  228	*movqi/3	[length = 3]
 635 01d4 8FAF      		std Y+63,r24
 636 01d6 2B97      		sbiw r28,74-63
 637               	.LVL37:
 100:bertos/net/ax25.c **** 	if (msg.pid != AX25_PID_NOLAYER3)
 638               		.loc 1 100 0
 639 01d8 803F      		cpi r24,lo8(-16)	 ;  231	*cmpqi/3	[length = 1]
 640 01da 01F0      		breq .L22	 ;  232	branch	[length = 1]
 102:bertos/net/ax25.c **** 		LOG_WARN("Only frames without layer3 protocol are handled, got [%02X]\n", msg.pid);
 641               		.loc 1 102 0
 642 01dc 00D0      		rcall .	 ;  234	*addhi3_sp_R_pc2	[length = 3]
 643 01de 00D0      		rcall .
 644 01e0 00D0      		rcall .
 645 01e2 EDB7      		in r30,__SP_L__	 ;  562	*movhi_sp/2	[length = 2]
 646 01e4 FEB7      		in r31,__SP_H__
 647 01e6 3196      		adiw r30,1	 ;  442	*addhi3/2	[length = 1]
 648 01e8 20E0      		ldi r18,lo8(__c.1726)	 ;  236	*movhi/4	[length = 2]
 649 01ea 30E0      		ldi r19,hi8(__c.1726)
 650 01ec ADB7      		in r26,__SP_L__	 ;  563	*movhi_sp/2	[length = 2]
 651 01ee BEB7      		in r27,__SP_H__
 652               	.LVL38:
 653 01f0 1296      		adiw r26,1+1	 ;  237	*movhi/3	[length = 4]
 654 01f2 3C93      		st X,r19
 655 01f4 2E93      		st -X,r18
 656 01f6 1197      		sbiw r26,1
 657 01f8 20E0      		ldi r18,lo8(.LC2)	 ;  238	*movhi/4	[length = 2]
 658 01fa 30E0      		ldi r19,hi8(.LC2)
 659 01fc 3383      		std Z+3,r19	 ;  239	*movhi/3	[length = 2]
 660 01fe 2283      		std Z+2,r18
 661 0200 8483      		std Z+4,r24	 ;  455	*movqi/3	[length = 1]
 662 0202 1582      		std Z+5,__zero_reg__	 ;  456	*movqi/3	[length = 1]
 663               	.L36:
 664               		.cfi_escape 0x2e,0x6
 665 0204 0E94 0000 		call kprintf_P	 ;  242	call_insn/3	[length = 2]
 666 0208 EDB7      		in r30,__SP_L__	 ;  564	*movhi_sp/2	[length = 2]
 667 020a FEB7      		in r31,__SP_H__
 668 020c 3696      		adiw r30,6	 ;  243	*addhi3/2	[length = 1]
 669 020e 0FB6      		in __tmp_reg__,__SREG__	 ;  565	*movhi_sp/1	[length = 5]
 670 0210 F894      		cli
 671 0212 FEBF      		out __SP_H__,r31
 672 0214 0FBE      		out __SREG__,__tmp_reg__
 673 0216 EDBF      		out __SP_L__,r30
 674 0218 00C0      		rjmp .L10	 ;  672	jump	[length = 1]
 675               	.LVL39:
 676               	.L22:
  99:bertos/net/ax25.c **** 	msg.pid = *buf++;
 677               		.loc 1 99 0
 678 021a 1396      		adiw r26,3	 ;  248	*addhi3/2	[length = 1]
 679               	.LVL40:
 106:bertos/net/ax25.c **** 	msg.len = ctx->frm_len - 2 - (buf - ctx->buf);
 680               		.loc 1 106 0
 681 021c C601      		movw r24,r12	 ;  566	*movhi/1	[length = 1]
 682 021e 0297      		sbiw r24,2	 ;  250	*addhi3/3	[length = 1]
 683 0220 9701      		movw r18,r14	 ;  567	*movhi/1	[length = 1]
 684 0222 2A1B      		sub r18,r26	 ;  251	subhi3/1	[length = 2]
 685 0224 3B0B      		sbc r19,r27
 686 0226 820F      		add r24,r18	 ;  252	*addhi3/1	[length = 2]
 687 0228 931F      		adc r25,r19
 688 022a 2F96      		adiw r28,77-62	 ;  253	*movhi/3	[length = 4]
 689 022c 9FAF      		std Y+63,r25
 690 022e 8EAF      		std Y+62,r24
 691 0230 2F97      		sbiw r28,77-62
 107:bertos/net/ax25.c **** 	msg.info = buf;
 692               		.loc 1 107 0
 693 0232 2D96      		adiw r28,75-62	 ;  255	*movhi/3	[length = 4]
 694 0234 BFAF      		std Y+63,r27
 695 0236 AEAF      		std Y+62,r26
 696 0238 2D97      		sbiw r28,75-62
 697               	.LVL41:
 110:bertos/net/ax25.c **** 	if (ctx->hook)
 698               		.loc 1 110 0
 699 023a F701      		movw r30,r14	 ;  568	*movhi/1	[length = 1]
 700 023c EE5A      		subi r30,lo8(-(338))	 ;  257	*addhi3/4	[length = 2]
 701 023e FE4F      		sbci r31,hi8(-(338))
 702 0240 0190      		ld __tmp_reg__,Z+	 ;  258	*movhi/2	[length = 3]
 703 0242 F081      		ld r31,Z
 704 0244 E02D      		mov r30,__tmp_reg__
 705 0246 3097      		sbiw r30,0	 ;  259	*cmphi/1	[length = 1]
 706 0248 01F0      		breq .L10	 ;  260	branch	[length = 1]
 111:bertos/net/ax25.c **** 		ctx->hook(&msg);
 707               		.loc 1 111 0
 708 024a CE01      		movw r24,r28	 ;  569	*movhi/1	[length = 1]
 709 024c 0196      		adiw r24,1	 ;  503	*addhi3/2	[length = 1]
 710               		.cfi_escape 0x2e,0
 711 024e 0995      		icall	 ;  264	call_insn/1	[length = 1]
 712               	.LVL42:
 713               	.L10:
 714               	.LBE71:
 715               	.LBE70:
 145:bertos/net/ax25.c **** 			ctx->sync = true;
 716               		.loc 1 145 0
 717 0250 81E0      		ldi r24,lo8(1)	 ;  268	*movqi/2	[length = 1]
 718 0252 D501      		movw r26,r10	 ;  570	*movhi/1	[length = 1]
 719 0254 8C93      		st X,r24	 ;  269	*movqi/3	[length = 1]
 146:bertos/net/ax25.c **** 			ctx->crc_in = CRC_CCITT_INIT_VAL;
 720               		.loc 1 146 0
 721 0256 8FEF      		ldi r24,lo8(-1)	 ;  271	*movhi/4	[length = 2]
 722 0258 9FEF      		ldi r25,hi8(-1)
 723 025a F301      		movw r30,r6	 ;  571	*movhi/1	[length = 1]
 724 025c 9183      		std Z+1,r25	 ;  272	*movhi/3	[length = 2]
 725 025e 8083      		st Z,r24
 147:bertos/net/ax25.c **** 			ctx->frm_len = 0;
 726               		.loc 1 147 0
 727 0260 D401      		movw r26,r8	 ;  572	*movhi/1	[length = 1]
 728 0262 1196      		adiw r26,1	 ;  274	*movhi/3	[length = 3]
 729 0264 1C92      		st X,__zero_reg__
 730 0266 1E92      		st -X,__zero_reg__
 148:bertos/net/ax25.c **** 			continue;
 731               		.loc 1 148 0
 732 0268 00C0      		rjmp .L35	 ;  674	jump	[length = 1]
 733               	.LVL43:
 734               	.L9:
 151:bertos/net/ax25.c **** 		if (!ctx->escape && c == HDLC_RESET)
 735               		.loc 1 151 0 discriminator 1
 736 026a 2F37      		cpi r18,127	 ;  279	*cmphi/4	[length = 2]
 737 026c 3105      		cpc r19,__zero_reg__
 738 026e 01F4      		brne .L24	 ;  280	branch	[length = 1]
 739               	.LVL44:
 154:bertos/net/ax25.c **** 			ctx->sync = false;
 740               		.loc 1 154 0
 741 0270 F501      		movw r30,r10	 ;  573	*movhi/1	[length = 1]
 742 0272 1082      		st Z,__zero_reg__	 ;  284	*movqi/3	[length = 1]
 155:bertos/net/ax25.c **** 			continue;
 743               		.loc 1 155 0
 744 0274 00C0      		rjmp .L35	 ;  676	jump	[length = 1]
 745               	.LVL45:
 746               	.L24:
 158:bertos/net/ax25.c **** 		if (!ctx->escape && c == AX25_ESC)
 747               		.loc 1 158 0 discriminator 1
 748 0276 2B31      		cpi r18,27	 ;  289	*cmphi/4	[length = 2]
 749 0278 3105      		cpc r19,__zero_reg__
 750 027a 01F4      		brne .L8	 ;  290	branch	[length = 1]
 160:bertos/net/ax25.c **** 			ctx->escape = true;
 751               		.loc 1 160 0
 752 027c 81E0      		ldi r24,lo8(1)	 ;  293	*movqi/2	[length = 1]
 753 027e D201      		movw r26,r4	 ;  574	*movhi/1	[length = 1]
 754 0280 8C93      		st X,r24	 ;  294	*movqi/3	[length = 1]
 161:bertos/net/ax25.c **** 			continue;
 755               		.loc 1 161 0
 756 0282 00C0      		rjmp .L35	 ;  678	jump	[length = 1]
 757               	.L8:
 164:bertos/net/ax25.c **** 		if (ctx->sync)
 758               		.loc 1 164 0
 759 0284 F501      		movw r30,r10	 ;  575	*movhi/1	[length = 1]
 760 0286 8081      		ld r24,Z	 ;  300	*movqi/4	[length = 1]
 761 0288 8823      		tst r24	 ;  301	*cmpqi/1	[length = 1]
 762 028a 01F0      		breq .L25	 ;  302	branch	[length = 1]
 166:bertos/net/ax25.c **** 			if (ctx->frm_len < CONFIG_AX25_FRAME_BUF_LEN)
 763               		.loc 1 166 0
 764 028c D401      		movw r26,r8	 ;  576	*movhi/1	[length = 1]
 765 028e 8D91      		ld r24,X+	 ;  305	*movhi/2	[length = 3]
 766 0290 9C91      		ld r25,X
 767 0292 1197      		sbiw r26,1
 768 0294 B1E0      		ldi r27,hi8(330)	 ;  306	*cmphi/5	[length = 3]
 769 0296 8A34      		cpi r24,lo8(330)
 770 0298 9B07      		cpc r25,r27
 771 029a 00F4      		brsh .L26	 ;  307	branch	[length = 1]
 168:bertos/net/ax25.c **** 				ctx->buf[ctx->frm_len++] = c;
 772               		.loc 1 168 0
 773 029c F701      		movw r30,r14	 ;  577	*movhi/1	[length = 1]
 774 029e E80F      		add r30,r24	 ;  310	*addhi3/1	[length = 2]
 775 02a0 F91F      		adc r31,r25
 776 02a2 2083      		st Z,r18	 ;  311	*movqi/3	[length = 1]
 777 02a4 0196      		adiw r24,1	 ;  313	*addhi3/2	[length = 1]
 778 02a6 F401      		movw r30,r8	 ;  578	*movhi/1	[length = 1]
 779 02a8 9183      		std Z+1,r25	 ;  314	*movhi/3	[length = 2]
 780 02aa 8083      		st Z,r24
 169:bertos/net/ax25.c **** 				ctx->crc_in = updcrc_ccitt(c, ctx->crc_in);
 781               		.loc 1 169 0
 782 02ac D301      		movw r26,r6	 ;  579	*movhi/1	[length = 1]
 783 02ae 4D91      		ld r20,X+	 ;  316	*movhi/2	[length = 3]
 784 02b0 5C91      		ld r21,X
 785 02b2 1197      		sbiw r26,1
 786               	.LVL46:
 787               	.LBB82:
 788               	.LBB83:
 789               	.LBB84:
 790               		.loc 2 60 0
 791 02b4 822F      		mov r24,r18	 ;  596	*movqi/1	[length = 1]
 792 02b6 90E0      		ldi r25,lo8(0)	 ;  597	*movqi/2	[length = 1]
 793 02b8 8427      		eor r24,r20	 ;  320	xorhi3	[length = 2]
 794 02ba 9527      		eor r25,r21
 795 02bc 9070      		andi r25,hi8(255)	 ;  321	andhi3/2	[length = 2]
 796 02be 880F      		lsl r24	 ;  655	*ashlhi3_const/2	[length = 2]
 797 02c0 991F      		rol r25
 798 02c2 8050      		subi r24,lo8(-(crc_ccitt_tab))	 ;  323	*addhi3/4	[length = 2]
 799 02c4 9040      		sbci r25,hi8(-(crc_ccitt_tab))
 800               	.LVL47:
 801 02c6 FC01      		movw r30,r24	 ;  530	*movhi/1	[length = 1]
 802               	/* #APP */
 803               	 ;  60 "bertos/algo/crc_ccitt.h" 1
 804 02c8 2591      		lpm r18, Z+
 805 02ca 3491      		lpm r19, Z
 806               		
 807               	 ;  0 "" 2
 808               	.LVL48:
 809               	/* #NOAPP */
 810               	.LBE84:
 811 02cc 852F      		mov r24,r21	 ;  656	*lshrhi3_const/3	[length = 2]
 812 02ce 9927      		clr r25
 813               	.LVL49:
 814 02d0 2827      		eor r18,r24	 ;  332	xorhi3	[length = 2]
 815 02d2 3927      		eor r19,r25
 816               	.LVL50:
 817               	.LBE83:
 818               	.LBE82:
 169:bertos/net/ax25.c **** 				ctx->crc_in = updcrc_ccitt(c, ctx->crc_in);
 819               		.loc 1 169 0
 820 02d4 1196      		adiw r26,1	 ;  333	*movhi/3	[length = 3]
 821 02d6 3C93      		st X,r19
 822 02d8 2E93      		st -X,r18
 823 02da 00C0      		rjmp .L25	 ;  680	jump	[length = 1]
 824               	.LVL51:
 825               	.L26:
 174:bertos/net/ax25.c **** 				ctx->sync = false;
 826               		.loc 1 174 0
 827 02dc F501      		movw r30,r10	 ;  580	*movhi/1	[length = 1]
 828 02de 1082      		st Z,__zero_reg__	 ;  340	*movqi/3	[length = 1]
 829               	.LVL52:
 830               	.L25:
 177:bertos/net/ax25.c **** 		ctx->escape = false;
 831               		.loc 1 177 0
 832 02e0 D201      		movw r26,r4	 ;  581	*movhi/1	[length = 1]
 833 02e2 1C92      		st X,__zero_reg__	 ;  344	*movqi/3	[length = 1]
 834               	.L35:
 129:bertos/net/ax25.c **** 	while ((c = kfile_getc(ctx->ch)) != EOF)
 835               		.loc 1 129 0 discriminator 1
 836 02e4 F101      		movw r30,r2	 ;  582	*movhi/1	[length = 1]
 837 02e6 8081      		ld r24,Z	 ;  352	*movhi/2	[length = 2]
 838 02e8 9181      		ldd r25,Z+1
 839 02ea 0E94 0000 		call kfile_getc	 ;  353	call_value_insn/3	[length = 2]
 840 02ee 9C01      		movw r18,r24	 ;  354	*movhi/1	[length = 1]
 841               	.LVL53:
 842 02f0 FFEF      		ldi r31,hi8(-1)	 ;  357	*cmphi/5	[length = 3]
 843 02f2 8F3F      		cpi r24,lo8(-1)
 844 02f4 9F07      		cpc r25,r31
 845 02f6 01F0      		breq .+2	 ;  358	branch	[length = 2]
 846 02f8 00C0      		rjmp .L27
 180:bertos/net/ax25.c **** 	if (kfile_error(ctx->ch))
 847               		.loc 1 180 0
 848 02fa D101      		movw r26,r2	 ;  583	*movhi/1	[length = 1]
 849 02fc 0D91      		ld r16,X+	 ;  361	*movhi/2	[length = 3]
 850 02fe 1C91      		ld r17,X
 851 0300 1197      		sbiw r26,1
 852               	.LVL54:
 853               	.LBB85:
 854               	.LBB86:
 855               		.file 3 "bertos/kern/kfile.h"
   1:bertos/kern/kfile.h **** /**
   2:bertos/kern/kfile.h ****  * \file
   3:bertos/kern/kfile.h ****  * <!--
   4:bertos/kern/kfile.h ****  * This file is part of BeRTOS.
   5:bertos/kern/kfile.h ****  *
   6:bertos/kern/kfile.h ****  * Bertos is free software; you can redistribute it and/or modify
   7:bertos/kern/kfile.h ****  * it under the terms of the GNU General Public License as published by
   8:bertos/kern/kfile.h ****  * the Free Software Foundation; either version 2 of the License, or
   9:bertos/kern/kfile.h ****  * (at your option) any later version.
  10:bertos/kern/kfile.h ****  *
  11:bertos/kern/kfile.h ****  * This program is distributed in the hope that it will be useful,
  12:bertos/kern/kfile.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bertos/kern/kfile.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bertos/kern/kfile.h ****  * GNU General Public License for more details.
  15:bertos/kern/kfile.h ****  *
  16:bertos/kern/kfile.h ****  * You should have received a copy of the GNU General Public License
  17:bertos/kern/kfile.h ****  * along with this program; if not, write to the Free Software
  18:bertos/kern/kfile.h ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:bertos/kern/kfile.h ****  *
  20:bertos/kern/kfile.h ****  * As a special exception, you may use this file as part of a free software
  21:bertos/kern/kfile.h ****  * library without restriction.  Specifically, if other files instantiate
  22:bertos/kern/kfile.h ****  * templates or use macros or inline functions from this file, or you compile
  23:bertos/kern/kfile.h ****  * this file and link it with other files to produce an executable, this
  24:bertos/kern/kfile.h ****  * file does not by itself cause the resulting executable to be covered by
  25:bertos/kern/kfile.h ****  * the GNU General Public License.  This exception does not however
  26:bertos/kern/kfile.h ****  * invalidate any other reasons why the executable file might be covered by
  27:bertos/kern/kfile.h ****  * the GNU General Public License.
  28:bertos/kern/kfile.h ****  *
  29:bertos/kern/kfile.h ****  * Copyright 2004 Develer S.r.l. (http://www.develer.com/)
  30:bertos/kern/kfile.h ****  * Copyright 1999, 2000, 2001, 2003 Bernie Innocenti <bernie@codewiz.org>
  31:bertos/kern/kfile.h ****  *
  32:bertos/kern/kfile.h ****  * -->
  33:bertos/kern/kfile.h ****  *
  34:bertos/kern/kfile.h ****  * \brief Virtual KFile I/O interface.
  35:bertos/kern/kfile.h ****  *
  36:bertos/kern/kfile.h ****  * KFile is a simple, generic interface for file I/O.  It uses an
  37:bertos/kern/kfile.h ****  * object-oriented model to supply a device-neutral interface to
  38:bertos/kern/kfile.h ****  * communicate with drivers.
  39:bertos/kern/kfile.h ****  *
  40:bertos/kern/kfile.h ****  * This module contains only definitions, the instance structure
  41:bertos/kern/kfile.h ****  * and the common API.
  42:bertos/kern/kfile.h ****  * Each KFile subclass can override one or more methods of the interface,
  43:bertos/kern/kfile.h ****  * and can extend the base KFile structure with its own private data.
  44:bertos/kern/kfile.h ****  * For instance, a serial driver might implement the KFile interface by
  45:bertos/kern/kfile.h ****  * declaring a context structure like this:
  46:bertos/kern/kfile.h ****  *
  47:bertos/kern/kfile.h ****  * \code
  48:bertos/kern/kfile.h ****  * typedef struct Serial
  49:bertos/kern/kfile.h ****  * {
  50:bertos/kern/kfile.h ****  *      // base class instance
  51:bertos/kern/kfile.h ****  *      KFile fd;
  52:bertos/kern/kfile.h ****  *
  53:bertos/kern/kfile.h ****  *      // private instance data
  54:bertos/kern/kfile.h ****  *      FIFOBuffer txfifo, rxfifo;
  55:bertos/kern/kfile.h ****  * } Serial;
  56:bertos/kern/kfile.h ****  * \endcode
  57:bertos/kern/kfile.h ****  *
  58:bertos/kern/kfile.h ****  * You should also supply a macro for casting KFile to Serial:
  59:bertos/kern/kfile.h ****  *
  60:bertos/kern/kfile.h ****  * \code
  61:bertos/kern/kfile.h ****  * INLINE Serial * SERIAL_CAST(KFile *fd)
  62:bertos/kern/kfile.h ****  * {
  63:bertos/kern/kfile.h ****  *		ASSERT(fd->_type == KFT_SERIAL);
  64:bertos/kern/kfile.h ****  *		return (Serial *)fd;
  65:bertos/kern/kfile.h ****  * }
  66:bertos/kern/kfile.h ****  * \endcode
  67:bertos/kern/kfile.h ****  *
  68:bertos/kern/kfile.h ****  * Then you can implement as many interface functions as needed
  69:bertos/kern/kfile.h ****  * and leave the rest to NULL.
  70:bertos/kern/kfile.h ****  *
  71:bertos/kern/kfile.h ****  * Example implementation of the close KFile method for Serial:
  72:bertos/kern/kfile.h ****  *
  73:bertos/kern/kfile.h ****  * \code
  74:bertos/kern/kfile.h ****  * static int ser_kfile_close(struct KFile *fd)
  75:bertos/kern/kfile.h ****  * {
  76:bertos/kern/kfile.h ****  *		Serial *fds = SERIAL_CAST(fd);
  77:bertos/kern/kfile.h ****  *      // [driver specific code here]
  78:bertos/kern/kfile.h ****  *		return 0;
  79:bertos/kern/kfile.h ****  * }
  80:bertos/kern/kfile.h ****  * \endcode
  81:bertos/kern/kfile.h ****  *
  82:bertos/kern/kfile.h ****  * The SERIAL_CAST() macro helps ensure that the passed object is
  83:bertos/kern/kfile.h ****  * really of type Serial.
  84:bertos/kern/kfile.h ****  *
  85:bertos/kern/kfile.h ****  * The KFile interface does not supply an open function: this is deliberate,
  86:bertos/kern/kfile.h ****  * because in embedded systems each device has its own init parameters.
  87:bertos/kern/kfile.h ****  * For the same reason, specific device settings like, for example,
  88:bertos/kern/kfile.h ****  * the baudrate, are not part of interface and should be handled by the
  89:bertos/kern/kfile.h ****  * driver-specific API.
  90:bertos/kern/kfile.h ****  *
  91:bertos/kern/kfile.h ****  * \version $Id: kfile.h 2975 2009-09-27 13:21:27Z batt $
  92:bertos/kern/kfile.h ****  * \author Bernie Innocenti <bernie@codewiz.org>
  93:bertos/kern/kfile.h ****  * \author Francesco Sacchi <batt@develer.com>
  94:bertos/kern/kfile.h ****  * \author Daniele Basile <asterix@develer.com>
  95:bertos/kern/kfile.h ****  *
  96:bertos/kern/kfile.h ****  * $WIZ$ module_name = "kfile"
  97:bertos/kern/kfile.h ****  * $WIZ$ module_configuration = "bertos/cfg/cfg_kfile.h"
  98:bertos/kern/kfile.h ****  * $WIZ$ module_depends = "timer", "formatwr"
  99:bertos/kern/kfile.h ****  */
 100:bertos/kern/kfile.h **** 
 101:bertos/kern/kfile.h **** #ifndef KERN_KFILE_H
 102:bertos/kern/kfile.h **** #define KERN_KFILE_H
 103:bertos/kern/kfile.h **** 
 104:bertos/kern/kfile.h **** #include <cfg/compiler.h>
 105:bertos/kern/kfile.h **** #include <cfg/debug.h>
 106:bertos/kern/kfile.h **** #include <cfg/macros.h>
 107:bertos/kern/kfile.h **** 
 108:bertos/kern/kfile.h **** /* fwd decl */
 109:bertos/kern/kfile.h **** struct KFile;
 110:bertos/kern/kfile.h **** 
 111:bertos/kern/kfile.h **** typedef int32_t kfile_off_t;     ///< KFile offset type, used by kfile_seek().
 112:bertos/kern/kfile.h **** 
 113:bertos/kern/kfile.h **** /**
 114:bertos/kern/kfile.h ****  * Costants for repositioning read/write file offset.
 115:bertos/kern/kfile.h ****  * These are needed because on some embedded platforms
 116:bertos/kern/kfile.h ****  * ANSI I/O library may not be present.
 117:bertos/kern/kfile.h ****  */
 118:bertos/kern/kfile.h **** typedef enum KSeekMode
 119:bertos/kern/kfile.h **** {
 120:bertos/kern/kfile.h **** 	KSM_SEEK_SET, ///< Seek from file beginning.
 121:bertos/kern/kfile.h **** 	KSM_SEEK_CUR, ///< Seek from file current position.
 122:bertos/kern/kfile.h **** 	KSM_SEEK_END, ///< Seek from file end.
 123:bertos/kern/kfile.h **** } KSeekMode;
 124:bertos/kern/kfile.h **** 
 125:bertos/kern/kfile.h **** /**
 126:bertos/kern/kfile.h ****  * Prototypes for KFile access functions.
 127:bertos/kern/kfile.h ****  * I/O file functions must be ANSI compliant.
 128:bertos/kern/kfile.h ****  * \note A KFile user can choose which function subset to implement,
 129:bertos/kern/kfile.h ****  *       but has to set to NULL unimplemented features.
 130:bertos/kern/kfile.h ****  * \{
 131:bertos/kern/kfile.h ****  */
 132:bertos/kern/kfile.h **** 
 133:bertos/kern/kfile.h **** /**
 134:bertos/kern/kfile.h ****  * Read from file.
 135:bertos/kern/kfile.h ****  * \return the number of bytes read.
 136:bertos/kern/kfile.h ****  */
 137:bertos/kern/kfile.h **** typedef size_t (*ReadFunc_t) (struct KFile *fd, void *buf, size_t size);
 138:bertos/kern/kfile.h **** 
 139:bertos/kern/kfile.h **** /**
 140:bertos/kern/kfile.h ****  * Write to file.
 141:bertos/kern/kfile.h ****  * \return the number of bytes written.
 142:bertos/kern/kfile.h ****  */
 143:bertos/kern/kfile.h **** typedef size_t (*WriteFunc_t) (struct KFile *fd, const void *buf, size_t size);
 144:bertos/kern/kfile.h **** 
 145:bertos/kern/kfile.h **** /**
 146:bertos/kern/kfile.h ****  * Seek into file (if seekable).
 147:bertos/kern/kfile.h ****  * \return the new file offset or EOF on errors.
 148:bertos/kern/kfile.h ****  */
 149:bertos/kern/kfile.h **** typedef kfile_off_t (*SeekFunc_t) (struct KFile *fd, kfile_off_t offset, KSeekMode whence);
 150:bertos/kern/kfile.h **** 
 151:bertos/kern/kfile.h **** /**
 152:bertos/kern/kfile.h ****  * Close and reopen file \a fd.
 153:bertos/kern/kfile.h ****  * The reopening is done with the former file parameters and access modes.
 154:bertos/kern/kfile.h ****  */
 155:bertos/kern/kfile.h **** typedef struct KFile * (*ReOpenFunc_t) (struct KFile *fd);
 156:bertos/kern/kfile.h **** 
 157:bertos/kern/kfile.h **** /**
 158:bertos/kern/kfile.h ****  * Close file.
 159:bertos/kern/kfile.h ****  * \return 0 on success, EOF on errors.
 160:bertos/kern/kfile.h ****  */
 161:bertos/kern/kfile.h **** typedef int (*CloseFunc_t) (struct KFile *fd);
 162:bertos/kern/kfile.h **** 
 163:bertos/kern/kfile.h **** /**
 164:bertos/kern/kfile.h ****  * Flush file I/O.
 165:bertos/kern/kfile.h ****  * \return 0 on success, EOF on errors.
 166:bertos/kern/kfile.h ****  */
 167:bertos/kern/kfile.h **** typedef int (*FlushFunc_t) (struct KFile *fd);
 168:bertos/kern/kfile.h **** 
 169:bertos/kern/kfile.h **** /**
 170:bertos/kern/kfile.h ****  * Get file error mask.
 171:bertos/kern/kfile.h ****  * \return 0 on success or file error code, device specific.
 172:bertos/kern/kfile.h ****  */
 173:bertos/kern/kfile.h **** typedef int (*ErrorFunc_t) (struct KFile *fd);
 174:bertos/kern/kfile.h **** 
 175:bertos/kern/kfile.h **** /**
 176:bertos/kern/kfile.h ****  * Clear errors.
 177:bertos/kern/kfile.h ****  */
 178:bertos/kern/kfile.h **** typedef void (*ClearErrFunc_t) (struct KFile *fd);
 179:bertos/kern/kfile.h **** /* \} */
 180:bertos/kern/kfile.h **** 
 181:bertos/kern/kfile.h **** /**
 182:bertos/kern/kfile.h ****  * Context data for callback functions which operate on
 183:bertos/kern/kfile.h ****  * pseudo files.
 184:bertos/kern/kfile.h ****  *
 185:bertos/kern/kfile.h ****  * \note Remember to add the corresponding accessor functions
 186:bertos/kern/kfile.h ****  *       when extending this interface.
 187:bertos/kern/kfile.h ****  */
 188:bertos/kern/kfile.h **** typedef struct KFile
 189:bertos/kern/kfile.h **** {
 190:bertos/kern/kfile.h **** 	ReadFunc_t     read;
 191:bertos/kern/kfile.h **** 	WriteFunc_t    write;
 192:bertos/kern/kfile.h **** 	ReOpenFunc_t   reopen;
 193:bertos/kern/kfile.h **** 	CloseFunc_t    close;
 194:bertos/kern/kfile.h **** 	SeekFunc_t     seek;
 195:bertos/kern/kfile.h **** 	FlushFunc_t    flush;
 196:bertos/kern/kfile.h **** 	ErrorFunc_t    error;
 197:bertos/kern/kfile.h **** 	ClearErrFunc_t clearerr;
 198:bertos/kern/kfile.h **** 	DB(id_t _type); ///< Used to keep track, at runtime, of the class type.
 199:bertos/kern/kfile.h **** 
 200:bertos/kern/kfile.h **** 	/* NOTE: these must _NOT_ be size_t on 16bit CPUs! */
 201:bertos/kern/kfile.h **** 	kfile_off_t    seek_pos;
 202:bertos/kern/kfile.h **** 	kfile_off_t    size;
 203:bertos/kern/kfile.h **** } KFile;
 204:bertos/kern/kfile.h **** 
 205:bertos/kern/kfile.h **** /**
 206:bertos/kern/kfile.h ****  * Generic implementation of kfile_seek.
 207:bertos/kern/kfile.h ****  */
 208:bertos/kern/kfile.h **** kfile_off_t kfile_genericSeek(struct KFile *fd, kfile_off_t offset, KSeekMode whence);
 209:bertos/kern/kfile.h **** 
 210:bertos/kern/kfile.h **** /**
 211:bertos/kern/kfile.h ****  * Generic implementation of kfile_reopen.
 212:bertos/kern/kfile.h ****  */
 213:bertos/kern/kfile.h **** struct KFile * kfile_genericReopen(struct KFile *fd);
 214:bertos/kern/kfile.h **** 
 215:bertos/kern/kfile.h **** int kfile_genericClose(struct KFile *fd);
 216:bertos/kern/kfile.h **** 
 217:bertos/kern/kfile.h **** int kfile_putc(int c, struct KFile *fd); ///< Generic putc implementation using kfile_write.
 218:bertos/kern/kfile.h **** int kfile_getc(struct KFile *fd);  ///< Generic getc implementation using kfile_read.
 219:bertos/kern/kfile.h **** int kfile_printf(struct KFile *fd, const char *format, ...);
 220:bertos/kern/kfile.h **** int kfile_print(struct KFile *fd, const char *s);
 221:bertos/kern/kfile.h **** int kfile_gets(struct KFile *fd, char *buf, int size);
 222:bertos/kern/kfile.h **** int kfile_gets_echo(struct KFile *fd, char *buf, int size, bool echo);
 223:bertos/kern/kfile.h **** void kfile_resync(KFile *fd, mtime_t delay);
 224:bertos/kern/kfile.h **** void kfile_init(struct KFile *fd);
 225:bertos/kern/kfile.h **** 
 226:bertos/kern/kfile.h **** /**
 227:bertos/kern/kfile.h ****  * Interface functions for KFile access.
 228:bertos/kern/kfile.h ****  * \note Remember to change following functions if KFile interface changes.
 229:bertos/kern/kfile.h ****  * \{
 230:bertos/kern/kfile.h ****  */
 231:bertos/kern/kfile.h **** INLINE size_t kfile_read(struct KFile *fd, void *buf, size_t size)
 232:bertos/kern/kfile.h **** {
 233:bertos/kern/kfile.h **** 	ASSERT(fd->read);
 234:bertos/kern/kfile.h **** 	return fd->read(fd, buf, size);
 235:bertos/kern/kfile.h **** }
 236:bertos/kern/kfile.h **** 
 237:bertos/kern/kfile.h **** INLINE size_t kfile_write(struct KFile *fd, const void *buf, size_t size)
 238:bertos/kern/kfile.h **** {
 239:bertos/kern/kfile.h **** 	ASSERT(fd->write);
 240:bertos/kern/kfile.h **** 	return fd->write(fd, buf, size);
 241:bertos/kern/kfile.h **** }
 242:bertos/kern/kfile.h **** 
 243:bertos/kern/kfile.h **** INLINE KFile * kfile_reopen(struct KFile *fd)
 244:bertos/kern/kfile.h **** {
 245:bertos/kern/kfile.h **** 	ASSERT(fd->reopen);
 246:bertos/kern/kfile.h **** 	return fd->reopen(fd);
 247:bertos/kern/kfile.h **** }
 248:bertos/kern/kfile.h **** 
 249:bertos/kern/kfile.h **** INLINE int kfile_close(struct KFile *fd)
 250:bertos/kern/kfile.h **** {
 251:bertos/kern/kfile.h **** 	ASSERT(fd->close);
 252:bertos/kern/kfile.h **** 	return fd->close(fd);
 253:bertos/kern/kfile.h **** }
 254:bertos/kern/kfile.h **** 
 255:bertos/kern/kfile.h **** INLINE kfile_off_t kfile_seek(struct KFile *fd, kfile_off_t offset, KSeekMode whence)
 256:bertos/kern/kfile.h **** {
 257:bertos/kern/kfile.h **** 	ASSERT(fd->seek);
 258:bertos/kern/kfile.h **** 	return fd->seek(fd, offset, whence);
 259:bertos/kern/kfile.h **** }
 260:bertos/kern/kfile.h **** 
 261:bertos/kern/kfile.h **** INLINE int kfile_flush(struct KFile *fd)
 262:bertos/kern/kfile.h **** {
 263:bertos/kern/kfile.h **** 	ASSERT(fd->flush);
 264:bertos/kern/kfile.h **** 	return fd->flush(fd);
 265:bertos/kern/kfile.h **** }
 266:bertos/kern/kfile.h **** 
 267:bertos/kern/kfile.h **** INLINE int kfile_error(struct KFile *fd)
 268:bertos/kern/kfile.h **** {
 269:bertos/kern/kfile.h **** 	ASSERT(fd->error);
 856               		.loc 3 269 0
 857 0302 F801      		movw r30,r16	 ;  584	*movhi/1	[length = 1]
 858 0304 8485      		ldd r24,Z+12	 ;  363	*movhi/2	[length = 2]
 859 0306 9585      		ldd r25,Z+13
 860               	.LVL55:
 861 0308 0097      		sbiw r24,0	 ;  364	*cmphi/1	[length = 1]
 862 030a 01F4      		brne .L28	 ;  365	branch	[length = 1]
 863 030c 80E0      		ldi r24,lo8(__c.1462)	 ;  370	*movhi/4	[length = 2]
 864 030e 90E0      		ldi r25,hi8(__c.1462)
 865 0310 60E0      		ldi r22,lo8(__c.1464)	 ;  371	*movhi/4	[length = 2]
 866 0312 70E0      		ldi r23,hi8(__c.1464)
 867 0314 4DE0      		ldi r20,lo8(269)	 ;  372	*movhi/4	[length = 2]
 868 0316 51E0      		ldi r21,hi8(269)
 869 0318 0E94 0000 		call __bassert_P	 ;  373	call_value_insn/3	[length = 2]
 870               	.LVL56:
 871               	.L28:
 270:bertos/kern/kfile.h **** 	return fd->error(fd);
 872               		.loc 3 270 0
 873 031c D801      		movw r26,r16	 ;  585	*movhi/1	[length = 1]
 874 031e 1C96      		adiw r26,12	 ;  377	*movhi/2	[length = 4]
 875 0320 ED91      		ld r30,X+
 876 0322 FC91      		ld r31,X
 877 0324 1D97      		sbiw r26,12+1
 878 0326 C801      		movw r24,r16	 ;  378	*movhi/1	[length = 1]
 879 0328 0995      		icall	 ;  379	call_value_insn/1	[length = 1]
 880               	.LBE86:
 881               	.LBE85:
 180:bertos/net/ax25.c **** 	if (kfile_error(ctx->ch))
 882               		.loc 1 180 0
 883 032a 0097      		sbiw r24,0	 ;  381	*cmphi/1	[length = 1]
 884 032c 01F4      		brne .+2	 ;  382	branch	[length = 2]
 885 032e 00C0      		rjmp .L6
 182:bertos/net/ax25.c **** 		LOG_ERR("Channel error [%04x]\n", kfile_error(ctx->ch));
 886               		.loc 1 182 0
 887 0330 F701      		movw r30,r14	 ;  586	*movhi/1	[length = 1]
 888 0332 E65B      		subi r30,lo8(-(330))	 ;  384	*addhi3/4	[length = 2]
 889 0334 FE4F      		sbci r31,hi8(-(330))
 890 0336 0081      		ld r16,Z	 ;  385	*movhi/2	[length = 2]
 891 0338 1181      		ldd r17,Z+1
 892               	.LVL57:
 893               	.LBB87:
 894               	.LBB88:
 269:bertos/kern/kfile.h **** 	ASSERT(fd->error);
 895               		.loc 3 269 0
 896 033a F801      		movw r30,r16	 ;  587	*movhi/1	[length = 1]
 897               	.LVL58:
 898 033c 8485      		ldd r24,Z+12	 ;  387	*movhi/2	[length = 2]
 899 033e 9585      		ldd r25,Z+13
 900 0340 0097      		sbiw r24,0	 ;  388	*cmphi/1	[length = 1]
 901 0342 01F4      		brne .L30	 ;  389	branch	[length = 1]
 902 0344 80E0      		ldi r24,lo8(__c.1462)	 ;  394	*movhi/4	[length = 2]
 903 0346 90E0      		ldi r25,hi8(__c.1462)
 904 0348 60E0      		ldi r22,lo8(__c.1464)	 ;  395	*movhi/4	[length = 2]
 905 034a 70E0      		ldi r23,hi8(__c.1464)
 906 034c 4DE0      		ldi r20,lo8(269)	 ;  396	*movhi/4	[length = 2]
 907 034e 51E0      		ldi r21,hi8(269)
 908 0350 0E94 0000 		call __bassert_P	 ;  397	call_value_insn/3	[length = 2]
 909               	.L30:
 910               		.loc 3 270 0
 911 0354 D801      		movw r26,r16	 ;  588	*movhi/1	[length = 1]
 912 0356 1C96      		adiw r26,12	 ;  401	*movhi/2	[length = 4]
 913 0358 ED91      		ld r30,X+
 914 035a FC91      		ld r31,X
 915 035c 1D97      		sbiw r26,12+1
 916 035e C801      		movw r24,r16	 ;  402	*movhi/1	[length = 1]
 917 0360 0995      		icall	 ;  403	call_value_insn/1	[length = 1]
 918               	.LBE88:
 919               	.LBE87:
 182:bertos/net/ax25.c **** 		LOG_ERR("Channel error [%04x]\n", kfile_error(ctx->ch));
 920               		.loc 1 182 0
 921 0362 00D0      		rcall .	 ;  405	*addhi3_sp_R_pc2	[length = 3]
 922 0364 00D0      		rcall .
 923 0366 00D0      		rcall .
 924 0368 EDB7      		in r30,__SP_L__	 ;  589	*movhi_sp/2	[length = 2]
 925 036a FEB7      		in r31,__SP_H__
 926 036c 3196      		adiw r30,1	 ;  450	*addhi3/2	[length = 1]
 927 036e 20E0      		ldi r18,lo8(__c.1735)	 ;  407	*movhi/4	[length = 2]
 928 0370 30E0      		ldi r19,hi8(__c.1735)
 929 0372 ADB7      		in r26,__SP_L__	 ;  590	*movhi_sp/2	[length = 2]
 930 0374 BEB7      		in r27,__SP_H__
 931 0376 1296      		adiw r26,1+1	 ;  408	*movhi/3	[length = 4]
 932 0378 3C93      		st X,r19
 933 037a 2E93      		st -X,r18
 934 037c 1197      		sbiw r26,1
 935 037e 20E0      		ldi r18,lo8(.LC3)	 ;  409	*movhi/4	[length = 2]
 936 0380 30E0      		ldi r19,hi8(.LC3)
 937 0382 3383      		std Z+3,r19	 ;  410	*movhi/3	[length = 2]
 938 0384 2283      		std Z+2,r18
 939 0386 9583      		std Z+5,r25	 ;  411	*movhi/3	[length = 2]
 940 0388 8483      		std Z+4,r24
 941               		.cfi_escape 0x2e,0x6
 942 038a 0E94 0000 		call kprintf_P	 ;  412	call_insn/3	[length = 2]
 183:bertos/net/ax25.c **** 		kfile_clearerr(ctx->ch);
 943               		.loc 1 183 0
 944 038e F701      		movw r30,r14	 ;  591	*movhi/1	[length = 1]
 945 0390 E65B      		subi r30,lo8(-(330))	 ;  413	*addhi3/4	[length = 2]
 946 0392 FE4F      		sbci r31,hi8(-(330))
 947 0394 0081      		ld r16,Z	 ;  414	*movhi/2	[length = 2]
 948 0396 1181      		ldd r17,Z+1
 949               	.LVL59:
 950               	.LBB89:
 951               	.LBB90:
 271:bertos/kern/kfile.h **** }
 272:bertos/kern/kfile.h **** 
 273:bertos/kern/kfile.h **** INLINE void kfile_clearerr(struct KFile *fd)
 274:bertos/kern/kfile.h **** {
 275:bertos/kern/kfile.h **** 	ASSERT(fd->clearerr);
 952               		.loc 3 275 0
 953 0398 EDB7      		in r30,__SP_L__	 ;  592	*movhi_sp/2	[length = 2]
 954 039a FEB7      		in r31,__SP_H__
 955               	.LVL60:
 956 039c 3696      		adiw r30,6	 ;  416	*addhi3/2	[length = 1]
 957 039e 0FB6      		in __tmp_reg__,__SREG__	 ;  593	*movhi_sp/1	[length = 5]
 958 03a0 F894      		cli
 959 03a2 FEBF      		out __SP_H__,r31
 960 03a4 0FBE      		out __SREG__,__tmp_reg__
 961 03a6 EDBF      		out __SP_L__,r30
 962 03a8 D801      		movw r26,r16	 ;  594	*movhi/1	[length = 1]
 963 03aa 1E96      		adiw r26,14	 ;  417	*movhi/2	[length = 4]
 964 03ac 8D91      		ld r24,X+
 965 03ae 9C91      		ld r25,X
 966 03b0 1F97      		sbiw r26,14+1
 967 03b2 0097      		sbiw r24,0	 ;  418	*cmphi/1	[length = 1]
 968 03b4 01F4      		brne .L31	 ;  419	branch	[length = 1]
 969 03b6 80E0      		ldi r24,lo8(__c.1469)	 ;  424	*movhi/4	[length = 2]
 970 03b8 90E0      		ldi r25,hi8(__c.1469)
 971 03ba 60E0      		ldi r22,lo8(__c.1471)	 ;  425	*movhi/4	[length = 2]
 972 03bc 70E0      		ldi r23,hi8(__c.1471)
 973 03be 43E1      		ldi r20,lo8(275)	 ;  426	*movhi/4	[length = 2]
 974 03c0 51E0      		ldi r21,hi8(275)
 975               		.cfi_escape 0x2e,0
 976 03c2 0E94 0000 		call __bassert_P	 ;  427	call_value_insn/3	[length = 2]
 977               	.L31:
 276:bertos/kern/kfile.h **** 	fd->clearerr(fd);
 978               		.loc 3 276 0
 979 03c6 D801      		movw r26,r16	 ;  595	*movhi/1	[length = 1]
 980 03c8 1E96      		adiw r26,14	 ;  431	*movhi/2	[length = 4]
 981 03ca ED91      		ld r30,X+
 982 03cc FC91      		ld r31,X
 983 03ce 1F97      		sbiw r26,14+1
 984 03d0 C801      		movw r24,r16	 ;  432	*movhi/1	[length = 1]
 985 03d2 0995      		icall	 ;  433	call_insn/1	[length = 1]
 986               	.LVL61:
 987               	.L6:
 988               	/* epilogue start */
 989               	.LBE90:
 990               	.LBE89:
 185:bertos/net/ax25.c **** }
 991               		.loc 1 185 0
 992 03d4 C25B      		subi r28,lo8(-(78))	 ;  625	*addhi3/4	[length = 2]
 993 03d6 DF4F      		sbci r29,hi8(-(78))
 994 03d8 0FB6      		in __tmp_reg__,__SREG__	 ;  626	*movhi_sp/1	[length = 5]
 995 03da F894      		cli
 996 03dc DEBF      		out __SP_H__,r29
 997 03de 0FBE      		out __SREG__,__tmp_reg__
 998 03e0 CDBF      		out __SP_L__,r28
 999 03e2 DF91      		pop r29	 ;  627	popqi	[length = 1]
 1000 03e4 CF91      		pop r28	 ;  628	popqi	[length = 1]
 1001 03e6 1F91      		pop r17	 ;  629	popqi	[length = 1]
 1002 03e8 0F91      		pop r16	 ;  630	popqi	[length = 1]
 1003 03ea FF90      		pop r15	 ;  631	popqi	[length = 1]
 1004 03ec EF90      		pop r14	 ;  632	popqi	[length = 1]
 1005               	.LVL62:
 1006 03ee DF90      		pop r13	 ;  633	popqi	[length = 1]
 1007 03f0 CF90      		pop r12	 ;  634	popqi	[length = 1]
 1008 03f2 BF90      		pop r11	 ;  635	popqi	[length = 1]
 1009 03f4 AF90      		pop r10	 ;  636	popqi	[length = 1]
 1010 03f6 9F90      		pop r9	 ;  637	popqi	[length = 1]
 1011 03f8 8F90      		pop r8	 ;  638	popqi	[length = 1]
 1012 03fa 7F90      		pop r7	 ;  639	popqi	[length = 1]
 1013 03fc 6F90      		pop r6	 ;  640	popqi	[length = 1]
 1014 03fe 5F90      		pop r5	 ;  641	popqi	[length = 1]
 1015 0400 4F90      		pop r4	 ;  642	popqi	[length = 1]
 1016 0402 3F90      		pop r3	 ;  643	popqi	[length = 1]
 1017 0404 2F90      		pop r2	 ;  644	popqi	[length = 1]
 1018 0406 0895      		ret	 ;  645	return_from_epilogue	[length = 1]
 1019               		.cfi_endproc
 1020               	.LFE11:
 1022               		.section	.text.ax25_sendVia,"ax",@progbits
 1023               	.global	ax25_sendVia
 1025               	ax25_sendVia:
 1026               	.LFB14:
 228:bertos/net/ax25.c **** {
 1027               		.loc 1 228 0
 1028               		.cfi_startproc
 1029               	.LVL63:
 1030 0000 2F92      		push r2	 ;  328	*pushqi/1	[length = 1]
 1031               	.LCFI30:
 1032               		.cfi_def_cfa_offset 3
 1033               		.cfi_offset 2, -2
 1034 0002 3F92      		push r3	 ;  329	*pushqi/1	[length = 1]
 1035               	.LCFI31:
 1036               		.cfi_def_cfa_offset 4
 1037               		.cfi_offset 3, -3
 1038 0004 4F92      		push r4	 ;  330	*pushqi/1	[length = 1]
 1039               	.LCFI32:
 1040               		.cfi_def_cfa_offset 5
 1041               		.cfi_offset 4, -4
 1042 0006 5F92      		push r5	 ;  331	*pushqi/1	[length = 1]
 1043               	.LCFI33:
 1044               		.cfi_def_cfa_offset 6
 1045               		.cfi_offset 5, -5
 1046 0008 6F92      		push r6	 ;  332	*pushqi/1	[length = 1]
 1047               	.LCFI34:
 1048               		.cfi_def_cfa_offset 7
 1049               		.cfi_offset 6, -6
 1050 000a 7F92      		push r7	 ;  333	*pushqi/1	[length = 1]
 1051               	.LCFI35:
 1052               		.cfi_def_cfa_offset 8
 1053               		.cfi_offset 7, -7
 1054 000c 8F92      		push r8	 ;  334	*pushqi/1	[length = 1]
 1055               	.LCFI36:
 1056               		.cfi_def_cfa_offset 9
 1057               		.cfi_offset 8, -8
 1058 000e 9F92      		push r9	 ;  335	*pushqi/1	[length = 1]
 1059               	.LCFI37:
 1060               		.cfi_def_cfa_offset 10
 1061               		.cfi_offset 9, -9
 1062 0010 AF92      		push r10	 ;  336	*pushqi/1	[length = 1]
 1063               	.LCFI38:
 1064               		.cfi_def_cfa_offset 11
 1065               		.cfi_offset 10, -10
 1066 0012 BF92      		push r11	 ;  337	*pushqi/1	[length = 1]
 1067               	.LCFI39:
 1068               		.cfi_def_cfa_offset 12
 1069               		.cfi_offset 11, -11
 1070 0014 CF92      		push r12	 ;  338	*pushqi/1	[length = 1]
 1071               	.LCFI40:
 1072               		.cfi_def_cfa_offset 13
 1073               		.cfi_offset 12, -12
 1074 0016 DF92      		push r13	 ;  339	*pushqi/1	[length = 1]
 1075               	.LCFI41:
 1076               		.cfi_def_cfa_offset 14
 1077               		.cfi_offset 13, -13
 1078 0018 EF92      		push r14	 ;  340	*pushqi/1	[length = 1]
 1079               	.LCFI42:
 1080               		.cfi_def_cfa_offset 15
 1081               		.cfi_offset 14, -14
 1082 001a FF92      		push r15	 ;  341	*pushqi/1	[length = 1]
 1083               	.LCFI43:
 1084               		.cfi_def_cfa_offset 16
 1085               		.cfi_offset 15, -15
 1086 001c 0F93      		push r16	 ;  342	*pushqi/1	[length = 1]
 1087               	.LCFI44:
 1088               		.cfi_def_cfa_offset 17
 1089               		.cfi_offset 16, -16
 1090 001e 1F93      		push r17	 ;  343	*pushqi/1	[length = 1]
 1091               	.LCFI45:
 1092               		.cfi_def_cfa_offset 18
 1093               		.cfi_offset 17, -17
 1094 0020 CF93      		push r28	 ;  344	*pushqi/1	[length = 1]
 1095               	.LCFI46:
 1096               		.cfi_def_cfa_offset 19
 1097               		.cfi_offset 28, -18
 1098 0022 DF93      		push r29	 ;  345	*pushqi/1	[length = 1]
 1099               	.LCFI47:
 1100               		.cfi_def_cfa_offset 20
 1101               		.cfi_offset 29, -19
 1102 0024 00D0      		rcall .	 ;  349	*addhi3_sp_R_pc2	[length = 3]
 1103 0026 00D0      		rcall .
 1104 0028 0F92      		push __tmp_reg__
 1105               	.LCFI48:
 1106               		.cfi_def_cfa_offset 25
 1107 002a CDB7      		in r28,__SP_L__	 ;  350	*movhi_sp/2	[length = 2]
 1108 002c DEB7      		in r29,__SP_H__
 1109               	.LCFI49:
 1110               		.cfi_def_cfa_register 28
 1111               	/* prologue: function */
 1112               	/* frame size = 5 */
 1113               	/* stack size = 23 */
 1114               	.L__stack_usage = 23
 1115 002e 6C01      		movw r12,r24	 ;  2	*movhi/1	[length = 1]
 1116 0030 5B01      		movw r10,r22	 ;  3	*movhi/1	[length = 1]
 1117 0032 1A01      		movw r2,r20	 ;  4	*movhi/1	[length = 1]
 1118 0034 2983      		std Y+1,r18	 ;  254	*movqi/3	[length = 1]
 1119 0036 3A83      		std Y+2,r19	 ;  255	*movqi/3	[length = 1]
 1120 0038 2801      		movw r4,r16	 ;  6	*movhi/1	[length = 1]
 1121               	.LVL64:
 230:bertos/net/ax25.c **** 	ASSERT(path);
 1122               		.loc 1 230 0
 1123 003a 6115      		cp r22,__zero_reg__	 ;  16	*cmphi/2	[length = 2]
 1124 003c 7105      		cpc r23,__zero_reg__
 1125 003e 01F4      		brne .L38	 ;  17	branch	[length = 1]
 1126               	.LVL65:
 230:bertos/net/ax25.c **** 	ASSERT(path);
 1127               		.loc 1 230 0 is_stmt 0 discriminator 1
 1128 0040 80E0      		ldi r24,lo8(__c.1774)	 ;  22	*movhi/4	[length = 2]
 1129 0042 90E0      		ldi r25,hi8(__c.1774)
 1130 0044 60E0      		ldi r22,lo8(__c.1776)	 ;  23	*movhi/4	[length = 2]
 1131 0046 70E0      		ldi r23,hi8(__c.1776)
 1132 0048 46EE      		ldi r20,lo8(230)	 ;  24	*movhi/4	[length = 2]
 1133 004a 50E0      		ldi r21,hi8(230)
 1134 004c 0E94 0000 		call __bassert_P	 ;  25	call_value_insn/3	[length = 2]
 1135               	.LVL66:
 1136               	.L38:
 231:bertos/net/ax25.c **** 	ASSERT(path_len >= 2);
 1137               		.loc 1 231 0 is_stmt 1
 1138 0050 22E0      		ldi r18,lo8(2)	 ;  28	*cmphi/6	[length = 3]
 1139 0052 2216      		cp r2,r18
 1140 0054 3104      		cpc r3,__zero_reg__
 1141 0056 00F4      		brsh .L39	 ;  29	branch	[length = 1]
 231:bertos/net/ax25.c **** 	ASSERT(path_len >= 2);
 1142               		.loc 1 231 0 is_stmt 0 discriminator 1
 1143 0058 80E0      		ldi r24,lo8(__c.1778)	 ;  34	*movhi/4	[length = 2]
 1144 005a 90E0      		ldi r25,hi8(__c.1778)
 1145 005c 60E0      		ldi r22,lo8(__c.1780)	 ;  35	*movhi/4	[length = 2]
 1146 005e 70E0      		ldi r23,hi8(__c.1780)
 1147 0060 47EE      		ldi r20,lo8(231)	 ;  36	*movhi/4	[length = 2]
 1148 0062 50E0      		ldi r21,hi8(231)
 1149 0064 0E94 0000 		call __bassert_P	 ;  37	call_value_insn/3	[length = 2]
 1150               	.L39:
 233:bertos/net/ax25.c **** 	ctx->crc_out = CRC_CCITT_INIT_VAL;
 1151               		.loc 1 233 0 is_stmt 1
 1152 0068 F601      		movw r30,r12	 ;  305	*movhi/1	[length = 1]
 1153 006a E05B      		subi r30,lo8(-(336))	 ;  40	*addhi3/4	[length = 2]
 1154 006c FE4F      		sbci r31,hi8(-(336))
 1155 006e 8FEF      		ldi r24,lo8(-1)	 ;  41	*movhi/4	[length = 2]
 1156 0070 9FEF      		ldi r25,hi8(-1)
 1157 0072 9183      		std Z+1,r25	 ;  42	*movhi/3	[length = 2]
 1158 0074 8083      		st Z,r24
 234:bertos/net/ax25.c **** 	kfile_putc(HDLC_FLAG, ctx->ch);
 1159               		.loc 1 234 0
 1160 0076 F601      		movw r30,r12	 ;  306	*movhi/1	[length = 1]
 1161 0078 E65B      		subi r30,lo8(-(330))	 ;  44	*addhi3/4	[length = 2]
 1162 007a FE4F      		sbci r31,hi8(-(330))
 1163 007c 6081      		ld r22,Z	 ;  45	*movhi/2	[length = 2]
 1164 007e 7181      		ldd r23,Z+1
 1165 0080 8EE7      		ldi r24,lo8(126)	 ;  46	*movhi/4	[length = 2]
 1166 0082 90E0      		ldi r25,hi8(126)
 1167 0084 0E94 0000 		call kfile_putc	 ;  48	call_value_insn/3	[length = 2]
 1168               	.LVL67:
 1169               	.LBB106:
 238:bertos/net/ax25.c **** 	for (size_t i = 0; i < path_len; i++)
 1170               		.loc 1 238 0
 1171 0088 8824      		clr r8	 ;  11	*movhi/5	[length = 2]
 1172 008a 9924      		clr r9
 239:bertos/net/ax25.c **** 		ax25_sendCall(ctx, &path[i], (i == path_len - 1));
 1173               		.loc 1 239 0
 1174 008c 9101      		movw r18,r2	 ;  307	*movhi/1	[length = 1]
 1175 008e 2150      		subi r18,lo8(-(-1))	 ;  55	*addhi3/4	[length = 2]
 1176 0090 3040      		sbci r19,hi8(-(-1))
 1177 0092 3C83      		std Y+4,r19	 ;  308	*movhi/3	[length = 2]
 1178 0094 2B83      		std Y+3,r18
 238:bertos/net/ax25.c **** 	for (size_t i = 0; i < path_len; i++)
 1179               		.loc 1 238 0
 1180 0096 00C0      		rjmp .L40	 ;  379	jump	[length = 1]
 1181               	.LVL68:
 1182               	.L49:
 1183               	.LBB107:
 1184               	.LBB108:
 1185               	.LBB109:
 198:bertos/net/ax25.c **** 	unsigned len = MIN(sizeof(addr->call), strlen(addr->call));
 1186               		.loc 1 198 0 discriminator 2
 1187 0098 D501      		movw r26,r10	 ;  309	*movhi/1	[length = 1]
 1188 009a 0D90      		ld __tmp_reg__,X+	 ;  61	*strlenhi	[length = 3]
 1189 009c 0020      		tst __tmp_reg__
 1190 009e 01F4      		brne .-6
 1191 00a0 8D01      		movw r16,r26	 ;  310	*movhi/1	[length = 1]
 1192 00a2 0150      		subi r16,lo8(-(-1))	 ;  62	*addhi3/4	[length = 2]
 1193 00a4 1040      		sbci r17,hi8(-(-1))
 1194 00a6 0A19      		sub r16,r10	 ;  63	subhi3/1	[length = 2]
 1195 00a8 1B09      		sbc r17,r11
 1196 00aa 0730      		cpi r16,7	 ;  67	*cmphi/4	[length = 2]
 1197 00ac 1105      		cpc r17,__zero_reg__
 1198 00ae 00F0      		brlo .L41	 ;  68	branch	[length = 1]
 1199 00b0 06E0      		ldi r16,lo8(6)	 ;  281	*movhi/4	[length = 2]
 1200 00b2 10E0      		ldi r17,hi8(6)
 1201               	.L41:
 1202               	.LVL69:
 1203 00b4 3501      		movw r6,r10	 ;  8	*movhi/1	[length = 1]
 200:bertos/net/ax25.c **** 	for (unsigned i = 0; i < len; i++)
 1204               		.loc 1 200 0 discriminator 2
 1205 00b6 EE24      		clr r14	 ;  282	*movhi/5	[length = 2]
 1206 00b8 FF24      		clr r15
 1207 00ba 00C0      		rjmp .L42	 ;  381	jump	[length = 1]
 1208               	.LVL70:
 1209               	.L44:
 1210               	.LBE109:
 1211               	.LBB110:
 1212               	.LBB111:
 202:bertos/net/ax25.c **** 		uint8_t c = addr->call[i];
 1213               		.loc 1 202 0
 1214 00bc F301      		movw r30,r6	 ;  311	*movhi/1	[length = 1]
 1215 00be 2191      		ld r18,Z+	 ;  76	*movqi/4	[length = 1]
 1216 00c0 3F01      		movw r6,r30	 ;  312	*movhi/1	[length = 1]
 1217               	.LVL71:
 203:bertos/net/ax25.c **** 		ASSERT(isalnum(c) || c == ' ');
 1218               		.loc 1 203 0
 1219 00c2 822F      		mov r24,r18	 ;  263	*movqi/1	[length = 1]
 1220 00c4 90E0      		ldi r25,lo8(0)	 ;  264	*movqi/2	[length = 1]
 1221 00c6 2D83      		std Y+5,r18	 ;  301	*movqi/3	[length = 1]
 1222 00c8 0E94 0000 		call isalnum	 ;  83	call_value_insn/3	[length = 2]
 1223               	.LVL72:
 1224 00cc 2D81      		ldd r18,Y+5	 ;  302	*movqi/4	[length = 1]
 1225               	.LVL73:
 1226 00ce 0097      		sbiw r24,0	 ;  85	*cmphi/1	[length = 1]
 1227 00d0 01F4      		brne .L43	 ;  86	branch	[length = 1]
 1228 00d2 2032      		cpi r18,lo8(32)	 ;  88	*cmpqi/3	[length = 1]
 1229 00d4 01F0      		breq .L43	 ;  89	branch	[length = 1]
 1230 00d6 80E0      		ldi r24,lo8(__c.1754)	 ;  278	*movhi/4	[length = 2]
 1231 00d8 90E0      		ldi r25,hi8(__c.1754)
 1232 00da 60E0      		ldi r22,lo8(__c.1756)	 ;  279	*movhi/4	[length = 2]
 1233 00dc 70E0      		ldi r23,hi8(__c.1756)
 1234 00de 4BEC      		ldi r20,lo8(203)	 ;  96	*movhi/4	[length = 2]
 1235 00e0 50E0      		ldi r21,hi8(203)
 1236 00e2 0E94 0000 		call __bassert_P	 ;  97	call_value_insn/3	[length = 2]
 1237               	.LVL74:
 1238 00e6 2D81      		ldd r18,Y+5	 ;  304	*movqi/4	[length = 1]
 1239               	.L43:
 204:bertos/net/ax25.c **** 		c = toupper(c);
 1240               		.loc 1 204 0
 1241 00e8 822F      		mov r24,r18	 ;  265	*movqi/1	[length = 1]
 1242 00ea 90E0      		ldi r25,lo8(0)	 ;  266	*movqi/2	[length = 1]
 1243 00ec 0E94 0000 		call toupper	 ;  102	call_value_insn/3	[length = 2]
 1244               	.LVL75:
 205:bertos/net/ax25.c **** 		ax25_putchar(ctx, c << 1);
 1245               		.loc 1 205 0
 1246 00f0 682F      		mov r22,r24	 ;  313	*movqi/1	[length = 1]
 1247 00f2 660F      		lsl r22	 ;  106	*ashlqi3/3	[length = 1]
 1248 00f4 C601      		movw r24,r12	 ;  107	*movhi/1	[length = 1]
 1249               	.LVL76:
 1250 00f6 0E94 0000 		call ax25_putchar	 ;  109	call_insn/3	[length = 2]
 1251               	.LBE111:
 200:bertos/net/ax25.c **** 	for (unsigned i = 0; i < len; i++)
 1252               		.loc 1 200 0
 1253 00fa 0894      		sec	 ;  110	*addhi3/5	[length = 3]
 1254 00fc E11C      		adc r14,__zero_reg__
 1255 00fe F11C      		adc r15,__zero_reg__
 1256               	.LVL77:
 1257               	.L42:
 1258 0100 E016      		cp r14,r16	 ;  116	*cmphi/3	[length = 2]
 1259 0102 F106      		cpc r15,r17
 1260 0104 01F4      		brne .L44	 ;  117	branch	[length = 1]
 1261               	.LBE110:
 209:bertos/net/ax25.c **** 	if (len < sizeof(addr->call))
 1262               		.loc 1 209 0
 1263 0106 F6E0      		ldi r31,lo8(6)	 ;  119	*cmphi/6	[length = 3]
 1264 0108 EF16      		cp r14,r31
 1265 010a F104      		cpc r15,__zero_reg__
 1266 010c 00F0      		brlo .L53	 ;  120	branch	[length = 1]
 1267 010e 00C0      		rjmp .L46	 ;  384	jump	[length = 1]
 1268               	.LVL78:
 1269               	.L47:
 1270               	.LBB112:
 211:bertos/net/ax25.c **** 			ax25_putchar(ctx, ' ' << 1);
 1271               		.loc 1 211 0
 1272 0110 C601      		movw r24,r12	 ;  126	*movhi/1	[length = 1]
 1273 0112 60E4      		ldi r22,lo8(64)	 ;  127	*movqi/2	[length = 1]
 1274 0114 0E94 0000 		call ax25_putchar	 ;  128	call_insn/3	[length = 2]
 210:bertos/net/ax25.c **** 		for (unsigned i = 0; i < sizeof(addr->call) - len; i++)
 1275               		.loc 1 210 0
 1276 0118 0F5F      		subi r16,lo8(-(1))	 ;  129	*addhi3/4	[length = 2]
 1277 011a 1F4F      		sbci r17,hi8(-(1))
 1278               	.LVL79:
 1279 011c 00C0      		rjmp .L45	 ;  386	jump	[length = 1]
 1280               	.LVL80:
 1281               	.L53:
 1282               	.LBE112:
 209:bertos/net/ax25.c **** 	if (len < sizeof(addr->call))
 1283               		.loc 1 209 0
 1284 011e 00E0      		ldi r16,lo8(0)	 ;  285	*movhi/4	[length = 2]
 1285 0120 10E0      		ldi r17,hi8(0)
 1286               	.LVL81:
 1287               	.LBB113:
 210:bertos/net/ax25.c **** 		for (unsigned i = 0; i < sizeof(addr->call) - len; i++)
 1288               		.loc 1 210 0
 1289 0122 26E0      		ldi r18,lo8(6)	 ;  314	*movhi/4	[length = 2]
 1290 0124 30E0      		ldi r19,hi8(6)
 1291 0126 2E19      		sub r18,r14	 ;  136	subhi3/1	[length = 2]
 1292 0128 3F09      		sbc r19,r15
 1293 012a 7901      		movw r14,r18	 ;  315	*movhi/1	[length = 1]
 1294               	.LVL82:
 1295               	.L45:
 1296 012c 0E15      		cp r16,r14	 ;  137	*cmphi/3	[length = 2]
 1297 012e 1F05      		cpc r17,r15
 1298 0130 00F0      		brlo .L47	 ;  138	branch	[length = 1]
 1299               	.LVL83:
 1300               	.L46:
 1301               	.LBE113:
 214:bertos/net/ax25.c **** 	uint8_t ssid = addr->ssid << 1 | (last ? 0x01 : 0);
 1302               		.loc 1 214 0
 1303 0132 D501      		movw r26,r10	 ;  316	*movhi/1	[length = 1]
 1304 0134 1696      		adiw r26,6	 ;  143	*movqi/4	[length = 3]
 1305 0136 6C91      		ld r22,X
 1306 0138 1697      		sbiw r26,6
 1307 013a 70E0      		ldi r23,lo8(0)	 ;  327	*movqi/2	[length = 1]
 1308 013c 660F      		lsl r22	 ;  377	*ashlhi3_const/2	[length = 2]
 1309 013e 771F      		rol r23
 1310 0140 81E0      		ldi r24,lo8(1)	 ;  288	*movqi/2	[length = 1]
 1311 0142 2B81      		ldd r18,Y+3	 ;  317	*movhi/2	[length = 2]
 1312 0144 3C81      		ldd r19,Y+4
 1313 0146 8216      		cp r8,r18	 ;  147	*cmphi/3	[length = 2]
 1314 0148 9306      		cpc r9,r19
 1315 014a 01F0      		breq .L48	 ;  148	branch	[length = 1]
 1316 014c 80E0      		ldi r24,lo8(0)	 ;  149	*movqi/2	[length = 1]
 1317               	.L48:
 1318 014e 682B      		or r22,r24	 ;  151	iorqi3/1	[length = 1]
 215:bertos/net/ax25.c **** 	ax25_putchar(ctx, ssid);
 1319               		.loc 1 215 0
 1320 0150 C601      		movw r24,r12	 ;  152	*movhi/1	[length = 1]
 1321 0152 0E94 0000 		call ax25_putchar	 ;  154	call_insn/3	[length = 2]
 1322               	.LBE108:
 1323               	.LBE107:
 238:bertos/net/ax25.c **** 	for (size_t i = 0; i < path_len; i++)
 1324               		.loc 1 238 0
 1325 0156 0894      		sec	 ;  155	*addhi3/5	[length = 3]
 1326 0158 811C      		adc r8,__zero_reg__
 1327 015a 911C      		adc r9,__zero_reg__
 1328               	.LVL84:
 1329 015c 87E0      		ldi r24,lo8(7)	 ;  318	*movhi/4	[length = 2]
 1330 015e 90E0      		ldi r25,hi8(7)
 1331 0160 A80E      		add r10,r24	 ;  157	*addhi3/1	[length = 2]
 1332 0162 B91E      		adc r11,r25
 1333               	.LVL85:
 1334               	.L40:
 238:bertos/net/ax25.c **** 	for (size_t i = 0; i < path_len; i++)
 1335               		.loc 1 238 0 is_stmt 0 discriminator 1
 1336 0164 8214      		cp r8,r2	 ;  162	*cmphi/3	[length = 2]
 1337 0166 9304      		cpc r9,r3
 1338 0168 01F0      		breq .+2	 ;  163	branch	[length = 2]
 1339 016a 00C0      		rjmp .L49
 1340               	.LBE106:
 241:bertos/net/ax25.c **** 	ax25_putchar(ctx, AX25_CTRL_UI);
 1341               		.loc 1 241 0 is_stmt 1
 1342 016c C601      		movw r24,r12	 ;  166	*movhi/1	[length = 1]
 1343 016e 63E0      		ldi r22,lo8(3)	 ;  167	*movqi/2	[length = 1]
 1344 0170 0E94 0000 		call ax25_putchar	 ;  168	call_insn/3	[length = 2]
 242:bertos/net/ax25.c **** 	ax25_putchar(ctx, AX25_PID_NOLAYER3);
 1345               		.loc 1 242 0
 1346 0174 C601      		movw r24,r12	 ;  170	*movhi/1	[length = 1]
 1347 0176 60EF      		ldi r22,lo8(-16)	 ;  171	*movqi/2	[length = 1]
 1348 0178 0E94 0000 		call ax25_putchar	 ;  172	call_insn/3	[length = 2]
 229:bertos/net/ax25.c **** 	const uint8_t *buf = (const uint8_t *)_buf;
 1349               		.loc 1 229 0
 1350 017c 0981      		ldd r16,Y+1	 ;  270	*movqi/4	[length = 1]
 1351 017e 1A81      		ldd r17,Y+2	 ;  271	*movqi/4	[length = 1]
 244:bertos/net/ax25.c **** 	while (len--)
 1352               		.loc 1 244 0
 1353 0180 00C0      		rjmp .L50	 ;  388	jump	[length = 1]
 1354               	.LVL86:
 1355               	.L51:
 245:bertos/net/ax25.c **** 		ax25_putchar(ctx, *buf++);
 1356               		.loc 1 245 0
 1357 0182 D801      		movw r26,r16	 ;  319	*movhi/1	[length = 1]
 1358 0184 6D91      		ld r22,X+	 ;  176	*movqi/4	[length = 1]
 1359 0186 8D01      		movw r16,r26	 ;  320	*movhi/1	[length = 1]
 1360               	.LVL87:
 1361 0188 C601      		movw r24,r12	 ;  180	*movhi/1	[length = 1]
 1362 018a 0E94 0000 		call ax25_putchar	 ;  182	call_insn/3	[length = 2]
 1363               	.LVL88:
 1364 018e 0894      		sec	 ;  183	*addhi3/6	[length = 3]
 1365 0190 4108      		sbc r4,__zero_reg__
 1366 0192 5108      		sbc r5,__zero_reg__
 1367               	.LVL89:
 1368               	.L50:
 244:bertos/net/ax25.c **** 	while (len--)
 1369               		.loc 1 244 0 discriminator 1
 1370 0194 4114      		cp r4,__zero_reg__	 ;  190	*cmphi/2	[length = 2]
 1371 0196 5104      		cpc r5,__zero_reg__
 1372 0198 01F4      		brne .L51	 ;  191	branch	[length = 1]
 251:bertos/net/ax25.c **** 	uint8_t crcl = (ctx->crc_out & 0xff) ^ 0xff;
 1373               		.loc 1 251 0
 1374 019a 60E5      		ldi r22,lo8(336)	 ;  376	*reload_inhi	[length = 4]
 1375 019c E62E      		mov r14,r22
 1376 019e 61E0      		ldi r22,hi8(336)
 1377 01a0 F62E      		mov r15,r22
 1378 01a2 EC0C      		add r14,r12	 ;  193	*addhi3/1	[length = 2]
 1379 01a4 FD1C      		adc r15,r13
 1380 01a6 F701      		movw r30,r14	 ;  322	*movhi/1	[length = 1]
 1381 01a8 6081      		ld r22,Z	 ;  272	*movqi/4	[length = 1]
 1382 01aa 0181      		ldd r16,Z+1	 ;  273	*movqi/4	[length = 1]
 1383               	.LVL90:
 1384 01ac 6095      		com r22	 ;  198	one_cmplqi2	[length = 1]
 253:bertos/net/ax25.c **** 	ax25_putchar(ctx, crcl);
 1385               		.loc 1 253 0
 1386 01ae C601      		movw r24,r12	 ;  199	*movhi/1	[length = 1]
 1387 01b0 0E94 0000 		call ax25_putchar	 ;  201	call_insn/3	[length = 2]
 1388               	.LVL91:
 252:bertos/net/ax25.c **** 	uint8_t crch = (ctx->crc_out >> 8) ^ 0xff;
 1389               		.loc 1 252 0
 1390 01b4 602F      		mov r22,r16	 ;  323	*movqi/1	[length = 1]
 1391 01b6 6095      		com r22	 ;  204	one_cmplqi2	[length = 1]
 254:bertos/net/ax25.c **** 	ax25_putchar(ctx, crch);
 1392               		.loc 1 254 0
 1393 01b8 C601      		movw r24,r12	 ;  205	*movhi/1	[length = 1]
 1394 01ba 0E94 0000 		call ax25_putchar	 ;  207	call_insn/3	[length = 2]
 256:bertos/net/ax25.c **** 	ASSERT(ctx->crc_out == AX25_CRC_CORRECT);
 1395               		.loc 1 256 0
 1396 01be D701      		movw r26,r14	 ;  324	*movhi/1	[length = 1]
 1397 01c0 8D91      		ld r24,X+	 ;  209	*movhi/2	[length = 3]
 1398 01c2 9C91      		ld r25,X
 1399 01c4 1197      		sbiw r26,1
 1400 01c6 B0EF      		ldi r27,hi8(-3912)	 ;  210	*cmphi/5	[length = 3]
 1401 01c8 883B      		cpi r24,lo8(-3912)
 1402 01ca 9B07      		cpc r25,r27
 1403 01cc 01F0      		breq .L52	 ;  211	branch	[length = 1]
 256:bertos/net/ax25.c **** 	ASSERT(ctx->crc_out == AX25_CRC_CORRECT);
 1404               		.loc 1 256 0 is_stmt 0 discriminator 1
 1405 01ce 80E0      		ldi r24,lo8(__c.1791)	 ;  216	*movhi/4	[length = 2]
 1406 01d0 90E0      		ldi r25,hi8(__c.1791)
 1407 01d2 60E0      		ldi r22,lo8(__c.1793)	 ;  217	*movhi/4	[length = 2]
 1408 01d4 70E0      		ldi r23,hi8(__c.1793)
 1409 01d6 40E0      		ldi r20,lo8(256)	 ;  218	*movhi/4	[length = 2]
 1410 01d8 51E0      		ldi r21,hi8(256)
 1411 01da 0E94 0000 		call __bassert_P	 ;  219	call_value_insn/3	[length = 2]
 1412               	.L52:
 258:bertos/net/ax25.c **** 	kfile_putc(HDLC_FLAG, ctx->ch);
 1413               		.loc 1 258 0 is_stmt 1
 1414 01de F601      		movw r30,r12	 ;  325	*movhi/1	[length = 1]
 1415 01e0 E65B      		subi r30,lo8(-(330))	 ;  223	*addhi3/4	[length = 2]
 1416 01e2 FE4F      		sbci r31,hi8(-(330))
 1417 01e4 6081      		ld r22,Z	 ;  224	*movhi/2	[length = 2]
 1418 01e6 7181      		ldd r23,Z+1
 1419 01e8 8EE7      		ldi r24,lo8(126)	 ;  225	*movhi/4	[length = 2]
 1420 01ea 90E0      		ldi r25,hi8(126)
 1421 01ec 0E94 0000 		call kfile_putc	 ;  227	call_value_insn/3	[length = 2]
 1422               	/* epilogue start */
 259:bertos/net/ax25.c **** }
 1423               		.loc 1 259 0
 1424 01f0 0F90      		pop __tmp_reg__	 ;  355	*addhi3_sp_R_pc2	[length = 5]
 1425 01f2 0F90      		pop __tmp_reg__
 1426 01f4 0F90      		pop __tmp_reg__
 1427 01f6 0F90      		pop __tmp_reg__
 1428 01f8 0F90      		pop __tmp_reg__
 1429 01fa DF91      		pop r29	 ;  356	popqi	[length = 1]
 1430 01fc CF91      		pop r28	 ;  357	popqi	[length = 1]
 1431 01fe 1F91      		pop r17	 ;  358	popqi	[length = 1]
 1432 0200 0F91      		pop r16	 ;  359	popqi	[length = 1]
 1433               	.LVL92:
 1434 0202 FF90      		pop r15	 ;  360	popqi	[length = 1]
 1435 0204 EF90      		pop r14	 ;  361	popqi	[length = 1]
 1436 0206 DF90      		pop r13	 ;  362	popqi	[length = 1]
 1437 0208 CF90      		pop r12	 ;  363	popqi	[length = 1]
 1438               	.LVL93:
 1439 020a BF90      		pop r11	 ;  364	popqi	[length = 1]
 1440 020c AF90      		pop r10	 ;  365	popqi	[length = 1]
 1441 020e 9F90      		pop r9	 ;  366	popqi	[length = 1]
 1442 0210 8F90      		pop r8	 ;  367	popqi	[length = 1]
 1443               	.LVL94:
 1444 0212 7F90      		pop r7	 ;  368	popqi	[length = 1]
 1445 0214 6F90      		pop r6	 ;  369	popqi	[length = 1]
 1446 0216 5F90      		pop r5	 ;  370	popqi	[length = 1]
 1447 0218 4F90      		pop r4	 ;  371	popqi	[length = 1]
 1448 021a 3F90      		pop r3	 ;  372	popqi	[length = 1]
 1449 021c 2F90      		pop r2	 ;  373	popqi	[length = 1]
 1450               	.LVL95:
 1451 021e 0895      		ret	 ;  374	return_from_epilogue	[length = 1]
 1452               		.cfi_endproc
 1453               	.LFE14:
 1455               		.data
 1456               	.LC4:
 1457 0012 3A25 2E2A 		.string	":%.*s\n"
 1457      730A 00
 1458               		.section	.text.ax25_print,"ax",@progbits
 1459               	.global	ax25_print
 1461               	ax25_print:
 1462               	.LFB16:
 267:bertos/net/ax25.c **** 
 268:bertos/net/ax25.c **** /**
 269:bertos/net/ax25.c ****  * Print a AX25 message in TNC-2 packet monitor format.
 270:bertos/net/ax25.c ****  * \param ch a kfile channel where the message will be printed.
 271:bertos/net/ax25.c ****  * \param msg the message to be printed.
 272:bertos/net/ax25.c ****  */
 273:bertos/net/ax25.c **** void ax25_print(KFile *ch, const AX25Msg *msg)
 274:bertos/net/ax25.c **** {
 1463               		.loc 1 274 0
 1464               		.cfi_startproc
 1465               	.LVL96:
 1466 0000 CF92      		push r12	 ;  90	*pushqi/1	[length = 1]
 1467               	.LCFI50:
 1468               		.cfi_def_cfa_offset 3
 1469               		.cfi_offset 12, -2
 1470 0002 DF92      		push r13	 ;  91	*pushqi/1	[length = 1]
 1471               	.LCFI51:
 1472               		.cfi_def_cfa_offset 4
 1473               		.cfi_offset 13, -3
 1474 0004 EF92      		push r14	 ;  92	*pushqi/1	[length = 1]
 1475               	.LCFI52:
 1476               		.cfi_def_cfa_offset 5
 1477               		.cfi_offset 14, -4
 1478 0006 FF92      		push r15	 ;  93	*pushqi/1	[length = 1]
 1479               	.LCFI53:
 1480               		.cfi_def_cfa_offset 6
 1481               		.cfi_offset 15, -5
 1482 0008 0F93      		push r16	 ;  94	*pushqi/1	[length = 1]
 1483               	.LCFI54:
 1484               		.cfi_def_cfa_offset 7
 1485               		.cfi_offset 16, -6
 1486 000a 1F93      		push r17	 ;  95	*pushqi/1	[length = 1]
 1487               	.LCFI55:
 1488               		.cfi_def_cfa_offset 8
 1489               		.cfi_offset 17, -7
 1490 000c CF93      		push r28	 ;  96	*pushqi/1	[length = 1]
 1491               	.LCFI56:
 1492               		.cfi_def_cfa_offset 9
 1493               		.cfi_offset 28, -8
 1494 000e DF93      		push r29	 ;  97	*pushqi/1	[length = 1]
 1495               	.LCFI57:
 1496               		.cfi_def_cfa_offset 10
 1497               		.cfi_offset 29, -9
 1498               	/* prologue: function */
 1499               	/* frame size = 0 */
 1500               	/* stack size = 8 */
 1501               	.L__stack_usage = 8
 1502 0010 8C01      		movw r16,r24	 ;  2	*movhi/1	[length = 1]
 1503 0012 7B01      		movw r14,r22	 ;  3	*movhi/1	[length = 1]
 275:bertos/net/ax25.c **** 	print_call(ch, &msg->src);
 1504               		.loc 1 275 0
 1505 0014 0E94 0000 		call print_call	 ;  11	call_insn/3	[length = 2]
 1506               	.LVL97:
 276:bertos/net/ax25.c **** 	kfile_putc('>', ch);
 1507               		.loc 1 276 0
 1508 0018 8EE3      		ldi r24,lo8(62)	 ;  13	*movhi/4	[length = 2]
 1509 001a 90E0      		ldi r25,hi8(62)
 1510 001c B801      		movw r22,r16	 ;  14	*movhi/1	[length = 1]
 1511 001e 0E94 0000 		call kfile_putc	 ;  15	call_value_insn/3	[length = 2]
 277:bertos/net/ax25.c **** 	print_call(ch, &msg->dst);
 1512               		.loc 1 277 0
 1513 0022 B701      		movw r22,r14	 ;  76	*movhi/1	[length = 1]
 1514 0024 695F      		subi r22,lo8(-(7))	 ;  17	*addhi3/4	[length = 2]
 1515 0026 7F4F      		sbci r23,hi8(-(7))
 1516 0028 C801      		movw r24,r16	 ;  18	*movhi/1	[length = 1]
 1517 002a 0E94 0000 		call print_call	 ;  20	call_insn/3	[length = 2]
 1518               	.LVL98:
 1519               	.LBB114:
 278:bertos/net/ax25.c **** 
 279:bertos/net/ax25.c **** 	#if CONFIG_AX25_RPT_LST
 280:bertos/net/ax25.c **** 	for (int i = 0; i < msg->rpt_cnt; i++)
 1520               		.loc 1 280 0
 1521 002e C0E0      		ldi r28,lo8(0)	 ;  5	*movhi/4	[length = 2]
 1522 0030 D0E0      		ldi r29,hi8(0)
 1523 0032 A6E4      		ldi r26,lo8(70)	 ;  111	*reload_inhi	[length = 3]
 1524 0034 CA2E      		mov r12,r26
 1525 0036 D12C      		mov r13,__zero_reg__
 1526 0038 CE0C      		add r12,r14	 ;  45	*addhi3/1	[length = 2]
 1527 003a DF1C      		adc r13,r15
 1528 003c 00C0      		rjmp .L55	 ;  112	jump	[length = 1]
 1529               	.LVL99:
 1530               	.L56:
 281:bertos/net/ax25.c **** 	{
 282:bertos/net/ax25.c **** 		kfile_putc(',', ch);
 1531               		.loc 1 282 0 discriminator 2
 1532 003e 8CE2      		ldi r24,lo8(44)	 ;  26	*movhi/4	[length = 2]
 1533 0040 90E0      		ldi r25,hi8(44)
 1534 0042 B801      		movw r22,r16	 ;  27	*movhi/1	[length = 1]
 1535 0044 0E94 0000 		call kfile_putc	 ;  28	call_value_insn/3	[length = 2]
 283:bertos/net/ax25.c **** 		print_call(ch, &msg->rpt_lst[i]);
 1536               		.loc 1 283 0 discriminator 2
 1537 0048 BE01      		movw r22,r28	 ;  78	*movhi/1	[length = 1]
 1538 004a F3E0      		ldi r31,3	 ;  110	*ashlhi3_const/5	[length = 5]
 1539 004c 660F      	1:	lsl r22
 1540 004e 771F      		rol r23
 1541 0050 FA95      		dec r31
 1542 0052 01F4      		brne 1b
 1543 0054 6C1B      		sub r22,r28	 ;  33	subhi3/1	[length = 2]
 1544 0056 7D0B      		sbc r23,r29
 1545 0058 625F      		subi r22,lo8(-(14))	 ;  34	*addhi3/4	[length = 2]
 1546 005a 7F4F      		sbci r23,hi8(-(14))
 1547 005c 6E0D      		add r22,r14	 ;  35	*addhi3/1	[length = 2]
 1548 005e 7F1D      		adc r23,r15
 1549 0060 C801      		movw r24,r16	 ;  36	*movhi/1	[length = 1]
 1550 0062 0E94 0000 		call print_call	 ;  38	call_insn/3	[length = 2]
 280:bertos/net/ax25.c **** 	for (int i = 0; i < msg->rpt_cnt; i++)
 1551               		.loc 1 280 0 discriminator 2
 1552 0066 2196      		adiw r28,1	 ;  39	*addhi3/2	[length = 1]
 1553               	.LVL100:
 1554               	.L55:
 280:bertos/net/ax25.c **** 	for (int i = 0; i < msg->rpt_cnt; i++)
 1555               		.loc 1 280 0 is_stmt 0 discriminator 1
 1556 0068 D601      		movw r26,r12	 ;  79	*movhi/1	[length = 1]
 1557 006a 8C91      		ld r24,X	 ;  46	*movqi/4	[length = 1]
 1558 006c 90E0      		ldi r25,lo8(0)	 ;  89	*movqi/2	[length = 1]
 1559 006e C817      		cp r28,r24	 ;  48	*cmphi/3	[length = 2]
 1560 0070 D907      		cpc r29,r25
 1561 0072 04F0      		brlt .L56	 ;  49	branch	[length = 1]
 1562               	.LBE114:
 284:bertos/net/ax25.c **** 		// TODO: add * to the trasmitting digi
 285:bertos/net/ax25.c **** 	}
 286:bertos/net/ax25.c **** 	#endif
 287:bertos/net/ax25.c **** 
 288:bertos/net/ax25.c **** 	kfile_printf(ch, ":%.*s\n", msg->len, msg->info);
 1563               		.loc 1 288 0 is_stmt 1
 1564 0074 EDB7      		in r30,__SP_L__	 ;  80	*movhi_sp/2	[length = 2]
 1565 0076 FEB7      		in r31,__SP_H__
 1566 0078 3897      		sbiw r30,8	 ;  51	*addhi3/3	[length = 1]
 1567 007a 0FB6      		in __tmp_reg__,__SREG__	 ;  81	*movhi_sp/1	[length = 5]
 1568 007c F894      		cli
 1569 007e FEBF      		out __SP_H__,r31
 1570 0080 0FBE      		out __SREG__,__tmp_reg__
 1571 0082 EDBF      		out __SP_L__,r30
 1572 0084 3196      		adiw r30,1	 ;  71	*addhi3/2	[length = 1]
 1573 0086 ADB7      		in r26,__SP_L__	 ;  83	*movhi_sp/2	[length = 2]
 1574 0088 BEB7      		in r27,__SP_H__
 1575 008a 1296      		adiw r26,1+1	 ;  53	*movhi/3	[length = 4]
 1576 008c 1C93      		st X,r17
 1577 008e 0E93      		st -X,r16
 1578 0090 1197      		sbiw r26,1
 1579 0092 80E0      		ldi r24,lo8(.LC4)	 ;  54	*movhi/4	[length = 2]
 1580 0094 90E0      		ldi r25,hi8(.LC4)
 1581 0096 9383      		std Z+3,r25	 ;  55	*movhi/3	[length = 2]
 1582 0098 8283      		std Z+2,r24
 1583 009a D701      		movw r26,r14	 ;  84	*movhi/1	[length = 1]
 1584 009c A45B      		subi r26,lo8(-(76))	 ;  56	*addhi3/4	[length = 2]
 1585 009e BF4F      		sbci r27,hi8(-(76))
 1586 00a0 8D91      		ld r24,X+	 ;  57	*movhi/2	[length = 2]
 1587 00a2 9C91      		ld r25,X
 1588 00a4 9583      		std Z+5,r25	 ;  58	*movhi/3	[length = 2]
 1589 00a6 8483      		std Z+4,r24
 1590 00a8 D701      		movw r26,r14	 ;  85	*movhi/1	[length = 1]
 1591 00aa A65B      		subi r26,lo8(-(74))	 ;  59	*addhi3/4	[length = 2]
 1592 00ac BF4F      		sbci r27,hi8(-(74))
 1593 00ae 8D91      		ld r24,X+	 ;  60	*movhi/2	[length = 2]
 1594 00b0 9C91      		ld r25,X
 1595 00b2 9783      		std Z+7,r25	 ;  61	*movhi/3	[length = 2]
 1596 00b4 8683      		std Z+6,r24
 1597 00b6 0E94 0000 		call kfile_printf	 ;  62	call_value_insn/3	[length = 2]
 1598 00ba EDB7      		in r30,__SP_L__	 ;  86	*movhi_sp/2	[length = 2]
 1599 00bc FEB7      		in r31,__SP_H__
 1600 00be 3896      		adiw r30,8	 ;  63	*addhi3/2	[length = 1]
 1601 00c0 0FB6      		in __tmp_reg__,__SREG__	 ;  87	*movhi_sp/1	[length = 5]
 1602 00c2 F894      		cli
 1603 00c4 FEBF      		out __SP_H__,r31
 1604 00c6 0FBE      		out __SREG__,__tmp_reg__
 1605 00c8 EDBF      		out __SP_L__,r30
 1606               	/* epilogue start */
 289:bertos/net/ax25.c **** }
 1607               		.loc 1 289 0
 1608 00ca DF91      		pop r29	 ;  100	popqi	[length = 1]
 1609 00cc CF91      		pop r28	 ;  101	popqi	[length = 1]
 1610               	.LVL101:
 1611 00ce 1F91      		pop r17	 ;  102	popqi	[length = 1]
 1612 00d0 0F91      		pop r16	 ;  103	popqi	[length = 1]
 1613               	.LVL102:
 1614 00d2 FF90      		pop r15	 ;  104	popqi	[length = 1]
 1615 00d4 EF90      		pop r14	 ;  105	popqi	[length = 1]
 1616               	.LVL103:
 1617 00d6 DF90      		pop r13	 ;  106	popqi	[length = 1]
 1618 00d8 CF90      		pop r12	 ;  107	popqi	[length = 1]
 1619 00da 0895      		ret	 ;  108	return_from_epilogue	[length = 1]
 1620               		.cfi_endproc
 1621               	.LFE16:
 1623               		.section	.text.ax25_init,"ax",@progbits
 1624               	.global	ax25_init
 1626               	ax25_init:
 1627               	.LFB17:
 290:bertos/net/ax25.c **** 
 291:bertos/net/ax25.c **** 
 292:bertos/net/ax25.c **** /**
 293:bertos/net/ax25.c ****  * Init the AX25 protocol decoder.
 294:bertos/net/ax25.c ****  *
 295:bertos/net/ax25.c ****  * \param ctx AX25 context to init.
 296:bertos/net/ax25.c ****  * \param channel Used to gain access to the physical medium
 297:bertos/net/ax25.c ****  * \param hook Callback function called when a message is received
 298:bertos/net/ax25.c ****  */
 299:bertos/net/ax25.c **** void ax25_init(AX25Ctx *ctx, KFile *channel, ax25_callback_t hook)
 300:bertos/net/ax25.c **** {
 1628               		.loc 1 300 0
 1629               		.cfi_startproc
 1630               	.LVL104:
 1631 0000 EF92      		push r14	 ;  55	*pushqi/1	[length = 1]
 1632               	.LCFI58:
 1633               		.cfi_def_cfa_offset 3
 1634               		.cfi_offset 14, -2
 1635 0002 FF92      		push r15	 ;  56	*pushqi/1	[length = 1]
 1636               	.LCFI59:
 1637               		.cfi_def_cfa_offset 4
 1638               		.cfi_offset 15, -3
 1639 0004 0F93      		push r16	 ;  57	*pushqi/1	[length = 1]
 1640               	.LCFI60:
 1641               		.cfi_def_cfa_offset 5
 1642               		.cfi_offset 16, -4
 1643 0006 1F93      		push r17	 ;  58	*pushqi/1	[length = 1]
 1644               	.LCFI61:
 1645               		.cfi_def_cfa_offset 6
 1646               		.cfi_offset 17, -5
 1647 0008 CF93      		push r28	 ;  59	*pushqi/1	[length = 1]
 1648               	.LCFI62:
 1649               		.cfi_def_cfa_offset 7
 1650               		.cfi_offset 28, -6
 1651 000a DF93      		push r29	 ;  60	*pushqi/1	[length = 1]
 1652               	.LCFI63:
 1653               		.cfi_def_cfa_offset 8
 1654               		.cfi_offset 29, -7
 1655               	/* prologue: function */
 1656               	/* frame size = 0 */
 1657               	/* stack size = 6 */
 1658               	.L__stack_usage = 6
 1659 000c EC01      		movw r28,r24	 ;  2	*movhi/1	[length = 1]
 1660 000e 8B01      		movw r16,r22	 ;  3	*movhi/1	[length = 1]
 1661 0010 7A01      		movw r14,r20	 ;  4	*movhi/1	[length = 1]
 301:bertos/net/ax25.c **** 	ASSERT(ctx);
 1662               		.loc 1 301 0
 1663 0012 0097      		sbiw r24,0	 ;  8	*cmphi/1	[length = 1]
 1664 0014 01F4      		brne .L58	 ;  9	branch	[length = 1]
 1665               	.LVL105:
 1666               		.loc 1 301 0 is_stmt 0 discriminator 1
 1667 0016 80E0      		ldi r24,lo8(__c.1812)	 ;  14	*movhi/4	[length = 2]
 1668 0018 90E0      		ldi r25,hi8(__c.1812)
 1669               	.LVL106:
 1670 001a 60E0      		ldi r22,lo8(__c.1814)	 ;  15	*movhi/4	[length = 2]
 1671 001c 70E0      		ldi r23,hi8(__c.1814)
 1672 001e 4DE2      		ldi r20,lo8(301)	 ;  16	*movhi/4	[length = 2]
 1673 0020 51E0      		ldi r21,hi8(301)
 1674 0022 0E94 0000 		call __bassert_P	 ;  17	call_value_insn/3	[length = 2]
 1675               	.L58:
 302:bertos/net/ax25.c **** 	ASSERT(channel);
 1676               		.loc 1 302 0 is_stmt 1
 1677 0026 0115      		cp r16,__zero_reg__	 ;  20	*cmphi/2	[length = 2]
 1678 0028 1105      		cpc r17,__zero_reg__
 1679 002a 01F4      		brne .L59	 ;  21	branch	[length = 1]
 1680               		.loc 1 302 0 is_stmt 0 discriminator 1
 1681 002c 80E0      		ldi r24,lo8(__c.1816)	 ;  26	*movhi/4	[length = 2]
 1682 002e 90E0      		ldi r25,hi8(__c.1816)
 1683 0030 60E0      		ldi r22,lo8(__c.1818)	 ;  27	*movhi/4	[length = 2]
 1684 0032 70E0      		ldi r23,hi8(__c.1818)
 1685 0034 4EE2      		ldi r20,lo8(302)	 ;  28	*movhi/4	[length = 2]
 1686 0036 51E0      		ldi r21,hi8(302)
 1687 0038 0E94 0000 		call __bassert_P	 ;  29	call_value_insn/3	[length = 2]
 1688               	.L59:
 303:bertos/net/ax25.c **** 
 304:bertos/net/ax25.c **** 	memset(ctx, 0, sizeof(*ctx));
 1689               		.loc 1 304 0 is_stmt 1
 1690 003c 86E5      		ldi r24,lo8(342)	 ;  32	*movhi/4	[length = 2]
 1691 003e 91E0      		ldi r25,hi8(342)
 1692 0040 FE01      		movw r30,r28	 ;  50	*movhi/1	[length = 1]
 1693 0042 9C01      		movw r18,r24	 ;  51	*movhi/1	[length = 1]
 1694 0044 1192      		st Z+,__zero_reg__	 ;  34	*clrmemhi/2	[length = 4]
 1695 0046 2150      		subi r18,1
 1696 0048 3040      		sbci r19,0
 1697 004a 01F4      		brne .-8
 305:bertos/net/ax25.c **** 	ctx->ch = channel;
 1698               		.loc 1 305 0
 1699 004c FE01      		movw r30,r28	 ;  52	*movhi/1	[length = 1]
 1700 004e E65B      		subi r30,lo8(-(330))	 ;  35	*addhi3/4	[length = 2]
 1701 0050 FE4F      		sbci r31,hi8(-(330))
 1702 0052 1183      		std Z+1,r17	 ;  36	*movhi/3	[length = 2]
 1703 0054 0083      		st Z,r16
 306:bertos/net/ax25.c **** 	ctx->hook = hook;
 1704               		.loc 1 306 0
 1705 0056 FE01      		movw r30,r28	 ;  53	*movhi/1	[length = 1]
 1706 0058 EE5A      		subi r30,lo8(-(338))	 ;  37	*addhi3/4	[length = 2]
 1707 005a FE4F      		sbci r31,hi8(-(338))
 1708 005c F182      		std Z+1,r15	 ;  38	*movhi/3	[length = 2]
 1709 005e E082      		st Z,r14
 307:bertos/net/ax25.c **** 	ctx->crc_in = ctx->crc_out = CRC_CCITT_INIT_VAL;
 1710               		.loc 1 307 0
 1711 0060 FE01      		movw r30,r28	 ;  54	*movhi/1	[length = 1]
 1712 0062 E05B      		subi r30,lo8(-(336))	 ;  39	*addhi3/4	[length = 2]
 1713 0064 FE4F      		sbci r31,hi8(-(336))
 1714 0066 8FEF      		ldi r24,lo8(-1)	 ;  40	*movhi/4	[length = 2]
 1715 0068 9FEF      		ldi r25,hi8(-1)
 1716 006a 9183      		std Z+1,r25	 ;  41	*movhi/3	[length = 2]
 1717 006c 8083      		st Z,r24
 1718 006e C25B      		subi r28,lo8(-(334))	 ;  42	*addhi3/4	[length = 2]
 1719 0070 DE4F      		sbci r29,hi8(-(334))
 1720               	.LVL107:
 1721 0072 9983      		std Y+1,r25	 ;  44	*movhi/3	[length = 2]
 1722 0074 8883      		st Y,r24
 1723               	/* epilogue start */
 308:bertos/net/ax25.c **** }
 1724               		.loc 1 308 0
 1725 0076 DF91      		pop r29	 ;  63	popqi	[length = 1]
 1726 0078 CF91      		pop r28	 ;  64	popqi	[length = 1]
 1727 007a 1F91      		pop r17	 ;  65	popqi	[length = 1]
 1728 007c 0F91      		pop r16	 ;  66	popqi	[length = 1]
 1729               	.LVL108:
 1730 007e FF90      		pop r15	 ;  67	popqi	[length = 1]
 1731 0080 EF90      		pop r14	 ;  68	popqi	[length = 1]
 1732               	.LVL109:
 1733 0082 0895      		ret	 ;  69	return_from_epilogue	[length = 1]
 1734               		.cfi_endproc
 1735               	.LFE17:
 1737               		.section	.progmem.data,"a",@progbits
 1740               	__c.1462:
 1741 0000 6664 2D3E 		.string	"fd->error"
 1741      6572 726F 
 1741      7200 
 1744               	__c.1464:
 1745 000a 6265 7274 		.string	"bertos/kern/kfile.h"
 1745      6F73 2F6B 
 1745      6572 6E2F 
 1745      6B66 696C 
 1745      652E 6800 
 1748               	__c.1735:
 1749 001e 2573 3A20 		.string	"%s: Channel error [%04x]\n"
 1749      4368 616E 
 1749      6E65 6C20 
 1749      6572 726F 
 1749      7220 5B25 
 1752               	__c.1469:
 1753 0038 6664 2D3E 		.string	"fd->clearerr"
 1753      636C 6561 
 1753      7265 7272 
 1753      00
 1756               	__c.1471:
 1757 0045 6265 7274 		.string	"bertos/kern/kfile.h"
 1757      6F73 2F6B 
 1757      6572 6E2F 
 1757      6B66 696C 
 1757      652E 6800 
 1760               	__c.1724:
 1761 0059 2573 3A20 		.string	"%s: Only UI frames are handled, got [%02X]\n"
 1761      4F6E 6C79 
 1761      2055 4920 
 1761      6672 616D 
 1761      6573 2061 
 1764               	__c.1726:
 1765 0085 2573 3A20 		.string	"%s: Only frames without layer3 protocol are handled, got [%02X]\n"
 1765      4F6E 6C79 
 1765      2066 7261 
 1765      6D65 7320 
 1765      7769 7468 
 1768               	__c.1774:
 1769 00c6 7061 7468 		.string	"path"
 1769      00
 1772               	__c.1776:
 1773 00cb 6265 7274 		.string	"bertos/net/ax25.c"
 1773      6F73 2F6E 
 1773      6574 2F61 
 1773      7832 352E 
 1773      6300 
 1776               	__c.1778:
 1777 00dd 7061 7468 		.string	"path_len >= 2"
 1777      5F6C 656E 
 1777      203E 3D20 
 1777      3200 
 1780               	__c.1780:
 1781 00eb 6265 7274 		.string	"bertos/net/ax25.c"
 1781      6F73 2F6E 
 1781      6574 2F61 
 1781      7832 352E 
 1781      6300 
 1784               	__c.1791:
 1785 00fd 6374 782D 		.string	"ctx->crc_out == AX25_CRC_CORRECT"
 1785      3E63 7263 
 1785      5F6F 7574 
 1785      203D 3D20 
 1785      4158 3235 
 1788               	__c.1793:
 1789 011e 6265 7274 		.string	"bertos/net/ax25.c"
 1789      6F73 2F6E 
 1789      6574 2F61 
 1789      7832 352E 
 1789      6300 
 1792               	__c.1754:
 1793 0130 6973 616C 		.string	"isalnum(c) || c == ' '"
 1793      6E75 6D28 
 1793      6329 207C 
 1793      7C20 6320 
 1793      3D3D 2027 
 1796               	__c.1756:
 1797 0147 6265 7274 		.string	"bertos/net/ax25.c"
 1797      6F73 2F6E 
 1797      6574 2F61 
 1797      7832 352E 
 1797      6300 
 1800               	__c.1812:
 1801 0159 6374 7800 		.string	"ctx"
 1804               	__c.1814:
 1805 015d 6265 7274 		.string	"bertos/net/ax25.c"
 1805      6F73 2F6E 
 1805      6574 2F61 
 1805      7832 352E 
 1805      6300 
 1808               	__c.1816:
 1809 016f 6368 616E 		.string	"channel"
 1809      6E65 6C00 
 1812               	__c.1818:
 1813 0177 6265 7274 		.string	"bertos/net/ax25.c"
 1813      6F73 2F6E 
 1813      6574 2F61 
 1813      7832 352E 
 1813      6300 
 1814               		.text
 1815               	.Letext0:
 1816               		.file 4 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/include/stddef.h"
 1817               		.file 5 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h"
 1818               		.file 6 "bertos/cfg/macros.h"
 1819               		.file 7 "bertos/net/ax25.h"
 1820               		.file 8 "bertos/cfg/log.h"
 1821               		.file 9 "bertos/cpu/types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ax25.c
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:2      *ABS*:0000003f __SREG__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:3      *ABS*:0000003e __SP_H__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:4      *ABS*:0000003d __SP_L__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:5      *ABS*:00000034 __CCP__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:7      *ABS*:00000001 __zero_reg__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:15     .text.ax25_putchar:00000000 ax25_putchar
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:130    .text.print_call:00000000 print_call
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:248    .text.ax25_poll:00000000 ax25_poll
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1760   .progmem.data:00000059 __c.1724
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1764   .progmem.data:00000085 __c.1726
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1740   .progmem.data:00000000 __c.1462
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1744   .progmem.data:0000000a __c.1464
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1748   .progmem.data:0000001e __c.1735
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1752   .progmem.data:00000038 __c.1469
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1756   .progmem.data:00000045 __c.1471
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1025   .text.ax25_sendVia:00000000 ax25_sendVia
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1768   .progmem.data:000000c6 __c.1774
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1772   .progmem.data:000000cb __c.1776
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1776   .progmem.data:000000dd __c.1778
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1780   .progmem.data:000000eb __c.1780
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1792   .progmem.data:00000130 __c.1754
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1796   .progmem.data:00000147 __c.1756
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1784   .progmem.data:000000fd __c.1791
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1788   .progmem.data:0000011e __c.1793
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1461   .text.ax25_print:00000000 ax25_print
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1626   .text.ax25_init:00000000 ax25_init
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1800   .progmem.data:00000159 __c.1812
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1804   .progmem.data:0000015d __c.1814
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1808   .progmem.data:0000016f __c.1816
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cciB2BId.s:1812   .progmem.data:00000177 __c.1818

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
kfile_putc
crc_ccitt_tab
kfile_printf
kprintf_P
kfile_getc
__bassert_P
isalnum
toupper
