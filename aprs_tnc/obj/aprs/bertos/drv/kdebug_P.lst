   1               		.file	"kdebug.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text.__kputchar,"ax",@progbits
  15               	__kputchar:
  16               	.LFB2:
  17               		.file 1 "bertos/drv/kdebug.c"
   1:bertos/drv/kdebug.c **** /**
   2:bertos/drv/kdebug.c ****  * \file
   3:bertos/drv/kdebug.c ****  * <!--
   4:bertos/drv/kdebug.c ****  * This file is part of BeRTOS.
   5:bertos/drv/kdebug.c ****  *
   6:bertos/drv/kdebug.c ****  * Bertos is free software; you can redistribute it and/or modify
   7:bertos/drv/kdebug.c ****  * it under the terms of the GNU General Public License as published by
   8:bertos/drv/kdebug.c ****  * the Free Software Foundation; either version 2 of the License, or
   9:bertos/drv/kdebug.c ****  * (at your option) any later version.
  10:bertos/drv/kdebug.c ****  *
  11:bertos/drv/kdebug.c ****  * This program is distributed in the hope that it will be useful,
  12:bertos/drv/kdebug.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bertos/drv/kdebug.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bertos/drv/kdebug.c ****  * GNU General Public License for more details.
  15:bertos/drv/kdebug.c ****  *
  16:bertos/drv/kdebug.c ****  * You should have received a copy of the GNU General Public License
  17:bertos/drv/kdebug.c ****  * along with this program; if not, write to the Free Software
  18:bertos/drv/kdebug.c ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:bertos/drv/kdebug.c ****  *
  20:bertos/drv/kdebug.c ****  * As a special exception, you may use this file as part of a free software
  21:bertos/drv/kdebug.c ****  * library without restriction.  Specifically, if other files instantiate
  22:bertos/drv/kdebug.c ****  * templates or use macros or inline functions from this file, or you compile
  23:bertos/drv/kdebug.c ****  * this file and link it with other files to produce an executable, this
  24:bertos/drv/kdebug.c ****  * file does not by itself cause the resulting executable to be covered by
  25:bertos/drv/kdebug.c ****  * the GNU General Public License.  This exception does not however
  26:bertos/drv/kdebug.c ****  * invalidate any other reasons why the executable file might be covered by
  27:bertos/drv/kdebug.c ****  * the GNU General Public License.
  28:bertos/drv/kdebug.c ****  *
  29:bertos/drv/kdebug.c ****  * Copyright 2003, 2004, 2005, 2006, 2007 Develer S.r.l. (http://www.develer.com/)
  30:bertos/drv/kdebug.c ****  * Copyright 2000, 2001, 2002 Bernie Innocenti <bernie@codewiz.org>
  31:bertos/drv/kdebug.c ****  * -->
  32:bertos/drv/kdebug.c ****  *
  33:bertos/drv/kdebug.c ****  * \brief General pourpose debug support for embedded systems (implementation).
  34:bertos/drv/kdebug.c ****  *
  35:bertos/drv/kdebug.c ****  * \author Bernie Innocenti <bernie@codewiz.org>
  36:bertos/drv/kdebug.c ****  * \author Stefano Fedrigo <aleph@develer.com>
  37:bertos/drv/kdebug.c ****  */
  38:bertos/drv/kdebug.c **** 
  39:bertos/drv/kdebug.c **** #include "cfg/cfg_debug.h"
  40:bertos/drv/kdebug.c **** #include <cfg/macros.h> /* for BV() */
  41:bertos/drv/kdebug.c **** #include <cfg/debug.h>
  42:bertos/drv/kdebug.c **** #include <cfg/os.h>
  43:bertos/drv/kdebug.c **** 
  44:bertos/drv/kdebug.c **** #include <cpu/attr.h>
  45:bertos/drv/kdebug.c **** #include <cpu/types.h>
  46:bertos/drv/kdebug.c **** 
  47:bertos/drv/kdebug.c **** #include <mware/formatwr.h> /* for _formatted_write() */
  48:bertos/drv/kdebug.c **** #include <cpu/pgm.h>
  49:bertos/drv/kdebug.c **** 
  50:bertos/drv/kdebug.c **** #ifdef _DEBUG
  51:bertos/drv/kdebug.c **** 
  52:bertos/drv/kdebug.c **** #if CPU_HARVARD && !defined(_PROGMEM)
  53:bertos/drv/kdebug.c **** 	#error This module build correctly only in program memory!
  54:bertos/drv/kdebug.c **** #endif
  55:bertos/drv/kdebug.c **** 
  56:bertos/drv/kdebug.c **** 
  57:bertos/drv/kdebug.c **** #if OS_HOSTED
  58:bertos/drv/kdebug.c **** 	#include <unistd.h> // write()
  59:bertos/drv/kdebug.c **** 
  60:bertos/drv/kdebug.c **** 	#define KDBG_WAIT_READY()      do { /*nop*/ } while(0)
  61:bertos/drv/kdebug.c **** 	#define KDBG_WRITE_CHAR(c)     do { char __c = (c); write(STDERR_FILENO, &__c, sizeof(__c)); } whi
  62:bertos/drv/kdebug.c **** 	#define KDBG_MASK_IRQ(old)     do { (void)(old); } while(0)
  63:bertos/drv/kdebug.c **** 	#define KDBG_RESTORE_IRQ(old)  do { /*nop*/ } while(0)
  64:bertos/drv/kdebug.c **** 	typedef char kdbg_irqsave_t; /* unused */
  65:bertos/drv/kdebug.c **** 
  66:bertos/drv/kdebug.c **** 	#define	kdbg_hw_init() do {} while (0) ///< Not needed
  67:bertos/drv/kdebug.c **** 
  68:bertos/drv/kdebug.c **** 	#if CONFIG_KDEBUG_PORT == 666
  69:bertos/drv/kdebug.c **** 		#error BITBANG debug console missing for this platform
  70:bertos/drv/kdebug.c **** 	#endif
  71:bertos/drv/kdebug.c **** #else
  72:bertos/drv/kdebug.c **** 	#include CPU_CSOURCE(kdebug)
  73:bertos/drv/kdebug.c **** #endif
  74:bertos/drv/kdebug.c **** 
  75:bertos/drv/kdebug.c **** 
  76:bertos/drv/kdebug.c **** void kdbg_init(void)
  77:bertos/drv/kdebug.c **** {
  78:bertos/drv/kdebug.c **** 	/* Init debug hw */
  79:bertos/drv/kdebug.c **** 	kdbg_hw_init();
  80:bertos/drv/kdebug.c **** 	kputs("\n\n*** BeRTOS DBG START ***\n");
  81:bertos/drv/kdebug.c **** }
  82:bertos/drv/kdebug.c **** 
  83:bertos/drv/kdebug.c **** 
  84:bertos/drv/kdebug.c **** /**
  85:bertos/drv/kdebug.c ****  * Output one character to the debug console
  86:bertos/drv/kdebug.c ****  */
  87:bertos/drv/kdebug.c **** static void __kputchar(char c, UNUSED_ARG(void *, unused))
  88:bertos/drv/kdebug.c **** {
  18               		.loc 1 88 0
  19               		.cfi_startproc
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  24               	.LVL0:
  25               	.L2:
  89:bertos/drv/kdebug.c **** 	/* Poll while serial buffer is still busy */
  90:bertos/drv/kdebug.c **** 	KDBG_WAIT_READY();
  26               		.loc 1 90 0 discriminator 1
  27 0000 9091 C000 		lds r25,192	 ;  9	*movqi/4	[length = 2]
  28 0004 95FF      		sbrs r25,5	 ;  14	*sbrx_branchhi	[length = 2]
  29 0006 00C0      		rjmp .L2
  91:bertos/drv/kdebug.c **** 
  92:bertos/drv/kdebug.c **** 	/* Send '\n' as '\r\n' for dumb terminals */
  93:bertos/drv/kdebug.c **** 	if (c == '\n')
  30               		.loc 1 93 0
  31 0008 8A30      		cpi r24,lo8(10)	 ;  16	*cmpqi/3	[length = 1]
  32 000a 01F4      		brne .L3	 ;  17	branch	[length = 1]
  94:bertos/drv/kdebug.c **** 	{
  95:bertos/drv/kdebug.c **** 		KDBG_WRITE_CHAR('\r');
  33               		.loc 1 95 0
  34 000c 9091 C000 		lds r25,192	 ;  20	*movqi/4	[length = 2]
  35 0010 9064      		ori r25,lo8(64)	 ;  21	iorqi3/2	[length = 1]
  36 0012 9093 C000 		sts 192,r25	 ;  23	*movqi/3	[length = 2]
  37 0016 9DE0      		ldi r25,lo8(13)	 ;  25	*movqi/2	[length = 1]
  38 0018 9093 C600 		sts 198,r25	 ;  26	*movqi/3	[length = 2]
  39               	.L4:
  96:bertos/drv/kdebug.c **** 		KDBG_WAIT_READY();
  40               		.loc 1 96 0 discriminator 1
  41 001c 9091 C000 		lds r25,192	 ;  29	*movqi/4	[length = 2]
  42 0020 95FF      		sbrs r25,5	 ;  34	*sbrx_branchhi	[length = 2]
  43 0022 00C0      		rjmp .L4
  44               	.L3:
  97:bertos/drv/kdebug.c **** 	}
  98:bertos/drv/kdebug.c **** 
  99:bertos/drv/kdebug.c **** 	KDBG_WRITE_CHAR(c);
  45               		.loc 1 99 0
  46 0024 9091 C000 		lds r25,192	 ;  38	*movqi/4	[length = 2]
  47 0028 9064      		ori r25,lo8(64)	 ;  39	iorqi3/2	[length = 1]
  48 002a 9093 C000 		sts 192,r25	 ;  41	*movqi/3	[length = 2]
  49 002e 8093 C600 		sts 198,r24	 ;  44	*movqi/3	[length = 2]
  50               	/* epilogue start */
 100:bertos/drv/kdebug.c **** }
  51               		.loc 1 100 0
  52 0032 0895      		ret	 ;  56	return	[length = 1]
  53               		.cfi_endproc
  54               	.LFE2:
  56               		.section	.text.kvprintf_P,"ax",@progbits
  58               	kvprintf_P:
  59               	.LFB4:
 101:bertos/drv/kdebug.c **** 
 102:bertos/drv/kdebug.c **** 
 103:bertos/drv/kdebug.c **** void kputchar(char c)
 104:bertos/drv/kdebug.c **** {
 105:bertos/drv/kdebug.c **** 	/* Mask serial TX intr */
 106:bertos/drv/kdebug.c **** 	kdbg_irqsave_t irqsave;
 107:bertos/drv/kdebug.c **** 	KDBG_MASK_IRQ(irqsave);
 108:bertos/drv/kdebug.c **** 
 109:bertos/drv/kdebug.c **** 	__kputchar(c, 0);
 110:bertos/drv/kdebug.c **** 
 111:bertos/drv/kdebug.c **** 	/* Restore serial TX intr */
 112:bertos/drv/kdebug.c **** 	KDBG_RESTORE_IRQ(irqsave);
 113:bertos/drv/kdebug.c **** }
 114:bertos/drv/kdebug.c **** 
 115:bertos/drv/kdebug.c **** 
 116:bertos/drv/kdebug.c **** static void PGM_FUNC(kvprintf)(const char * PGM_ATTR fmt, va_list ap)
 117:bertos/drv/kdebug.c **** {
  60               		.loc 1 117 0
  61               		.cfi_startproc
  62               	.LVL1:
  63 0000 CF93      		push r28	 ;  44	*pushqi/1	[length = 1]
  64               	.LCFI0:
  65               		.cfi_def_cfa_offset 3
  66               		.cfi_offset 28, -2
  67               	/* prologue: function */
  68               	/* frame size = 0 */
  69               	/* stack size = 1 */
  70               	.L__stack_usage = 1
  71 0002 9B01      		movw r18,r22	 ;  3	*movhi/1	[length = 1]
 118:bertos/drv/kdebug.c **** #if CONFIG_PRINTF
 119:bertos/drv/kdebug.c **** 	/* Mask serial TX intr */
 120:bertos/drv/kdebug.c **** 	kdbg_irqsave_t irqsave;
 121:bertos/drv/kdebug.c **** 	KDBG_MASK_IRQ(irqsave);
  72               		.loc 1 121 0
  73 0004 C091 C100 		lds r28,193	 ;  8	*movqi/4	[length = 2]
  74               	.LVL2:
  75 0008 4091 C100 		lds r20,193	 ;  11	*movqi/4	[length = 2]
  76 000c 4860      		ori r20,lo8(8)	 ;  12	iorqi3/2	[length = 1]
  77 000e 4093 C100 		sts 193,r20	 ;  14	*movqi/3	[length = 2]
  78 0012 4091 C100 		lds r20,193	 ;  16	*movqi/4	[length = 2]
  79 0016 4F79      		andi r20,lo8(-97)	 ;  17	andqi3/2	[length = 1]
  80 0018 4093 C100 		sts 193,r20	 ;  19	*movqi/3	[length = 2]
 122:bertos/drv/kdebug.c **** 
 123:bertos/drv/kdebug.c **** 	PGM_FUNC(_formatted_write)(fmt, __kputchar, 0, ap);
  81               		.loc 1 123 0
  82 001c 60E0      		ldi r22,lo8(gs(__kputchar))	 ;  23	*movhi/4	[length = 2]
  83 001e 70E0      		ldi r23,hi8(gs(__kputchar))
  84               	.LVL3:
  85 0020 40E0      		ldi r20,lo8(0)	 ;  24	*movhi/4	[length = 2]
  86 0022 50E0      		ldi r21,hi8(0)
  87 0024 0E94 0000 		call _formatted_write_P	 ;  26	call_value_insn/3	[length = 2]
  88               	.LVL4:
  89               	.L8:
 124:bertos/drv/kdebug.c **** 
 125:bertos/drv/kdebug.c **** 	/* Restore serial TX intr */
 126:bertos/drv/kdebug.c **** 	KDBG_RESTORE_IRQ(irqsave);
  90               		.loc 1 126 0 discriminator 1
  91 0028 8091 C000 		lds r24,192	 ;  29	*movqi/4	[length = 2]
  92 002c 86FF      		sbrs r24,6	 ;  34	*sbrx_branchhi	[length = 2]
  93 002e 00C0      		rjmp .L8
  94               		.loc 1 126 0 is_stmt 0 discriminator 2
  95 0030 C093 C100 		sts 193,r28	 ;  37	*movqi/3	[length = 2]
  96               	/* epilogue start */
 127:bertos/drv/kdebug.c **** #else
 128:bertos/drv/kdebug.c **** 	/* A better than nothing printf() surrogate. */
 129:bertos/drv/kdebug.c **** 	PGM_FUNC(kputs)(fmt);
 130:bertos/drv/kdebug.c **** #endif /* CONFIG_PRINTF */
 131:bertos/drv/kdebug.c **** }
  97               		.loc 1 131 0 is_stmt 1 discriminator 2
  98 0034 CF91      		pop r28	 ;  47	popqi	[length = 1]
  99               	.LVL5:
 100 0036 0895      		ret	 ;  48	return_from_epilogue	[length = 1]
 101               		.cfi_endproc
 102               	.LFE4:
 104               		.section	.text.kputchar,"ax",@progbits
 105               	.global	kputchar
 107               	kputchar:
 108               	.LFB3:
 104:bertos/drv/kdebug.c **** {
 109               		.loc 1 104 0
 110               		.cfi_startproc
 111               	.LVL6:
 112 0000 CF93      		push r28	 ;  40	*pushqi/1	[length = 1]
 113               	.LCFI1:
 114               		.cfi_def_cfa_offset 3
 115               		.cfi_offset 28, -2
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 1 */
 119               	.L__stack_usage = 1
 107:bertos/drv/kdebug.c **** 	KDBG_MASK_IRQ(irqsave);
 120               		.loc 1 107 0
 121 0002 C091 C100 		lds r28,193	 ;  7	*movqi/4	[length = 2]
 122               	.LVL7:
 123 0006 9091 C100 		lds r25,193	 ;  10	*movqi/4	[length = 2]
 124 000a 9860      		ori r25,lo8(8)	 ;  11	iorqi3/2	[length = 1]
 125 000c 9093 C100 		sts 193,r25	 ;  13	*movqi/3	[length = 2]
 126 0010 9091 C100 		lds r25,193	 ;  15	*movqi/4	[length = 2]
 127 0014 9F79      		andi r25,lo8(-97)	 ;  16	andqi3/2	[length = 1]
 128 0016 9093 C100 		sts 193,r25	 ;  18	*movqi/3	[length = 2]
 109:bertos/drv/kdebug.c **** 	__kputchar(c, 0);
 129               		.loc 1 109 0
 130 001a 60E0      		ldi r22,lo8(0)	 ;  21	*movhi/4	[length = 2]
 131 001c 70E0      		ldi r23,hi8(0)
 132 001e 0E94 0000 		call __kputchar	 ;  22	call_insn/3	[length = 2]
 133               	.LVL8:
 134               	.L11:
 112:bertos/drv/kdebug.c **** 	KDBG_RESTORE_IRQ(irqsave);
 135               		.loc 1 112 0 discriminator 1
 136 0022 8091 C000 		lds r24,192	 ;  25	*movqi/4	[length = 2]
 137 0026 86FF      		sbrs r24,6	 ;  30	*sbrx_branchhi	[length = 2]
 138 0028 00C0      		rjmp .L11
 112:bertos/drv/kdebug.c **** 	KDBG_RESTORE_IRQ(irqsave);
 139               		.loc 1 112 0 is_stmt 0 discriminator 2
 140 002a C093 C100 		sts 193,r28	 ;  33	*movqi/3	[length = 2]
 141               	/* epilogue start */
 113:bertos/drv/kdebug.c **** }
 142               		.loc 1 113 0 is_stmt 1 discriminator 2
 143 002e CF91      		pop r28	 ;  43	popqi	[length = 1]
 144               	.LVL9:
 145 0030 0895      		ret	 ;  44	return_from_epilogue	[length = 1]
 146               		.cfi_endproc
 147               	.LFE3:
 149               		.section	.text.kprintf_P,"ax",@progbits
 150               	.global	kprintf_P
 152               	kprintf_P:
 153               	.LFB5:
 132:bertos/drv/kdebug.c **** 
 133:bertos/drv/kdebug.c **** void PGM_FUNC(kprintf)(const char * PGM_ATTR fmt, ...)
 134:bertos/drv/kdebug.c **** {
 154               		.loc 1 134 0
 155               		.cfi_startproc
 156               	.LVL10:
 157 0000 CF93      		push r28	 ;  23	*pushqi/1	[length = 1]
 158               	.LCFI2:
 159               		.cfi_def_cfa_offset 3
 160               		.cfi_offset 28, -2
 161 0002 DF93      		push r29	 ;  24	*pushqi/1	[length = 1]
 162               	.LCFI3:
 163               		.cfi_def_cfa_offset 4
 164               		.cfi_offset 29, -3
 165 0004 CDB7      		in r28,__SP_L__	 ;  25	*movhi_sp/2	[length = 2]
 166 0006 DEB7      		in r29,__SP_H__
 167               	.LCFI4:
 168               		.cfi_def_cfa_register 28
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171               	/* stack size = 2 */
 172               	.L__stack_usage = 2
 173 0008 FE01      		movw r30,r28	 ;  22	*movhi/1	[length = 1]
 174 000a 3596      		adiw r30,5	 ;  20	*addhi3/2	[length = 1]
 135:bertos/drv/kdebug.c **** 	va_list ap;
 136:bertos/drv/kdebug.c **** 
 137:bertos/drv/kdebug.c **** 	va_start(ap, fmt);
 138:bertos/drv/kdebug.c **** 	PGM_FUNC(kvprintf)(fmt, ap);
 175               		.loc 1 138 0
 176 000c 8191      		ld r24,Z+	 ;  10	*movhi/2	[length = 2]
 177 000e 9191      		ld r25,Z+
 178 0010 BF01      		movw r22,r30	 ;  32	*movhi/1	[length = 1]
 179 0012 0E94 0000 		call kvprintf_P	 ;  12	call_insn/3	[length = 2]
 180               	/* epilogue start */
 139:bertos/drv/kdebug.c **** 	va_end(ap);
 140:bertos/drv/kdebug.c **** }
 181               		.loc 1 140 0
 182 0016 DF91      		pop r29	 ;  28	popqi	[length = 1]
 183 0018 CF91      		pop r28	 ;  29	popqi	[length = 1]
 184 001a 0895      		ret	 ;  30	return_from_epilogue	[length = 1]
 185               		.cfi_endproc
 186               	.LFE5:
 188               		.section	.text.kputs_P,"ax",@progbits
 189               	.global	kputs_P
 191               	kputs_P:
 192               	.LFB6:
 141:bertos/drv/kdebug.c **** 
 142:bertos/drv/kdebug.c **** void PGM_FUNC(kputs)(const char * PGM_ATTR str)
 143:bertos/drv/kdebug.c **** {
 193               		.loc 1 143 0
 194               		.cfi_startproc
 195               	.LVL11:
 196 0000 1F93      		push r17	 ;  63	*pushqi/1	[length = 1]
 197               	.LCFI5:
 198               		.cfi_def_cfa_offset 3
 199               		.cfi_offset 17, -2
 200 0002 CF93      		push r28	 ;  64	*pushqi/1	[length = 1]
 201               	.LCFI6:
 202               		.cfi_def_cfa_offset 4
 203               		.cfi_offset 28, -3
 204 0004 DF93      		push r29	 ;  65	*pushqi/1	[length = 1]
 205               	.LCFI7:
 206               		.cfi_def_cfa_offset 5
 207               		.cfi_offset 29, -4
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 3 */
 211               	.L__stack_usage = 3
 212 0006 EC01      		movw r28,r24	 ;  3	*movhi/1	[length = 1]
 144:bertos/drv/kdebug.c **** 	char c;
 145:bertos/drv/kdebug.c **** 
 146:bertos/drv/kdebug.c **** 	/* Mask serial TX intr */
 147:bertos/drv/kdebug.c **** 	kdbg_irqsave_t irqsave;
 148:bertos/drv/kdebug.c **** 	KDBG_MASK_IRQ(irqsave);
 213               		.loc 1 148 0
 214 0008 1091 C100 		lds r17,193	 ;  8	*movqi/4	[length = 2]
 215               	.LVL12:
 216 000c 8091 C100 		lds r24,193	 ;  11	*movqi/4	[length = 2]
 217               	.LVL13:
 218 0010 8860      		ori r24,lo8(8)	 ;  12	iorqi3/2	[length = 1]
 219 0012 8093 C100 		sts 193,r24	 ;  14	*movqi/3	[length = 2]
 220 0016 8091 C100 		lds r24,193	 ;  16	*movqi/4	[length = 2]
 221 001a 8F79      		andi r24,lo8(-97)	 ;  17	andqi3/2	[length = 1]
 222 001c 8093 C100 		sts 193,r24	 ;  19	*movqi/3	[length = 2]
 149:bertos/drv/kdebug.c **** 
 150:bertos/drv/kdebug.c **** 	while ((c = PGM_READ_CHAR(str++)))
 223               		.loc 1 150 0
 224 0020 00C0      		rjmp .L15	 ;  73	jump	[length = 1]
 225               	.LVL14:
 226               	.L16:
 151:bertos/drv/kdebug.c **** 		__kputchar(c, 0);
 227               		.loc 1 151 0
 228 0022 60E0      		ldi r22,lo8(0)	 ;  25	*movhi/4	[length = 2]
 229 0024 70E0      		ldi r23,hi8(0)
 230 0026 0E94 0000 		call __kputchar	 ;  26	call_insn/3	[length = 2]
 231               	.LVL15:
 232               	.L15:
 233               	.LBB5:
 150:bertos/drv/kdebug.c **** 	while ((c = PGM_READ_CHAR(str++)))
 234               		.loc 1 150 0 discriminator 1
 235 002a FE01      		movw r30,r28	 ;  30	*movhi/1	[length = 1]
 236               	.LVL16:
 237 002c 2196      		adiw r28,1	 ;  32	*addhi3/2	[length = 1]
 238               	.LVL17:
 239               	/* #APP */
 240               	 ;  150 "bertos/drv/kdebug.c" 1
 241 002e 8491      		lpm r24, Z
 242               		
 243               	 ;  0 "" 2
 244               	.LVL18:
 245               	/* #NOAPP */
 246               	.LBE5:
 247 0030 8823      		tst r24	 ;  40	*cmpqi/1	[length = 1]
 248 0032 01F4      		brne .L16	 ;  41	branch	[length = 1]
 249               	.LVL19:
 250               	.L18:
 152:bertos/drv/kdebug.c **** 
 153:bertos/drv/kdebug.c **** 	KDBG_RESTORE_IRQ(irqsave);
 251               		.loc 1 153 0 discriminator 1
 252 0034 8091 C000 		lds r24,192	 ;  44	*movqi/4	[length = 2]
 253 0038 86FF      		sbrs r24,6	 ;  49	*sbrx_branchhi	[length = 2]
 254 003a 00C0      		rjmp .L18
 255               		.loc 1 153 0 is_stmt 0 discriminator 2
 256 003c 1093 C100 		sts 193,r17	 ;  52	*movqi/3	[length = 2]
 257               	/* epilogue start */
 154:bertos/drv/kdebug.c **** }
 258               		.loc 1 154 0 is_stmt 1 discriminator 2
 259 0040 DF91      		pop r29	 ;  68	popqi	[length = 1]
 260 0042 CF91      		pop r28	 ;  69	popqi	[length = 1]
 261               	.LVL20:
 262 0044 1F91      		pop r17	 ;  70	popqi	[length = 1]
 263               	.LVL21:
 264 0046 0895      		ret	 ;  71	return_from_epilogue	[length = 1]
 265               		.cfi_endproc
 266               	.LFE6:
 268               		.section	.text.kdbg_init,"ax",@progbits
 269               	.global	kdbg_init
 271               	kdbg_init:
 272               	.LFB1:
  77:bertos/drv/kdebug.c **** {
 273               		.loc 1 77 0
 274               		.cfi_startproc
 275               	/* prologue: function */
 276               	/* frame size = 0 */
 277               	/* stack size = 0 */
 278               	.L__stack_usage = 0
 279               	.LVL22:
 280               	.LBB6:
 281               	.LBB7:
 282               		.file 2 "bertos/cpu/avr/drv/kdebug_avr.c"
   1:bertos/cpu/avr/drv/kdebug_avr.c **** /**
   2:bertos/cpu/avr/drv/kdebug_avr.c ****  * \file
   3:bertos/cpu/avr/drv/kdebug_avr.c ****  * <!--
   4:bertos/cpu/avr/drv/kdebug_avr.c ****  * This file is part of BeRTOS.
   5:bertos/cpu/avr/drv/kdebug_avr.c ****  *
   6:bertos/cpu/avr/drv/kdebug_avr.c ****  * Bertos is free software; you can redistribute it and/or modify
   7:bertos/cpu/avr/drv/kdebug_avr.c ****  * it under the terms of the GNU General Public License as published by
   8:bertos/cpu/avr/drv/kdebug_avr.c ****  * the Free Software Foundation; either version 2 of the License, or
   9:bertos/cpu/avr/drv/kdebug_avr.c ****  * (at your option) any later version.
  10:bertos/cpu/avr/drv/kdebug_avr.c ****  *
  11:bertos/cpu/avr/drv/kdebug_avr.c ****  * This program is distributed in the hope that it will be useful,
  12:bertos/cpu/avr/drv/kdebug_avr.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bertos/cpu/avr/drv/kdebug_avr.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bertos/cpu/avr/drv/kdebug_avr.c ****  * GNU General Public License for more details.
  15:bertos/cpu/avr/drv/kdebug_avr.c ****  *
  16:bertos/cpu/avr/drv/kdebug_avr.c ****  * You should have received a copy of the GNU General Public License
  17:bertos/cpu/avr/drv/kdebug_avr.c ****  * along with this program; if not, write to the Free Software
  18:bertos/cpu/avr/drv/kdebug_avr.c ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  19:bertos/cpu/avr/drv/kdebug_avr.c ****  *
  20:bertos/cpu/avr/drv/kdebug_avr.c ****  * As a special exception, you may use this file as part of a free software
  21:bertos/cpu/avr/drv/kdebug_avr.c ****  * library without restriction.  Specifically, if other files instantiate
  22:bertos/cpu/avr/drv/kdebug_avr.c ****  * templates or use macros or inline functions from this file, or you compile
  23:bertos/cpu/avr/drv/kdebug_avr.c ****  * this file and link it with other files to produce an executable, this
  24:bertos/cpu/avr/drv/kdebug_avr.c ****  * file does not by itself cause the resulting executable to be covered by
  25:bertos/cpu/avr/drv/kdebug_avr.c ****  * the GNU General Public License.  This exception does not however
  26:bertos/cpu/avr/drv/kdebug_avr.c ****  * invalidate any other reasons why the executable file might be covered by
  27:bertos/cpu/avr/drv/kdebug_avr.c ****  * the GNU General Public License.
  28:bertos/cpu/avr/drv/kdebug_avr.c ****  *
  29:bertos/cpu/avr/drv/kdebug_avr.c ****  * Copyright 2003, 2004, 2005, 2006, 2007 Develer S.r.l. (http://www.develer.com/)
  30:bertos/cpu/avr/drv/kdebug_avr.c ****  * Copyright 2000, 2001, 2002 Bernie Innocenti <bernie@codewiz.org>
  31:bertos/cpu/avr/drv/kdebug_avr.c ****  *
  32:bertos/cpu/avr/drv/kdebug_avr.c ****  * -->
  33:bertos/cpu/avr/drv/kdebug_avr.c ****  *
  34:bertos/cpu/avr/drv/kdebug_avr.c ****  * \brief AVR debug support (implementation).
  35:bertos/cpu/avr/drv/kdebug_avr.c ****  *
  36:bertos/cpu/avr/drv/kdebug_avr.c ****  * \author Bernie Innocenti <bernie@codewiz.org>
  37:bertos/cpu/avr/drv/kdebug_avr.c ****  * \author Stefano Fedrigo <aleph@develer.com>
  38:bertos/cpu/avr/drv/kdebug_avr.c ****  * \author Francesco Sacchi <batt@develer.com>
  39:bertos/cpu/avr/drv/kdebug_avr.c ****  */
  40:bertos/cpu/avr/drv/kdebug_avr.c **** 
  41:bertos/cpu/avr/drv/kdebug_avr.c **** #include <hw/hw_cpufreq.h>     /* for CPU_FREQ */
  42:bertos/cpu/avr/drv/kdebug_avr.c **** #include "hw/hw_ser.h"     /* Required for bus macros overrides */
  43:bertos/cpu/avr/drv/kdebug_avr.c **** 
  44:bertos/cpu/avr/drv/kdebug_avr.c **** #include "cfg/cfg_debug.h"
  45:bertos/cpu/avr/drv/kdebug_avr.c **** #include <cfg/macros.h> /* for BV(), DIV_ROUND */
  46:bertos/cpu/avr/drv/kdebug_avr.c **** 
  47:bertos/cpu/avr/drv/kdebug_avr.c **** #include <cpu/types.h>
  48:bertos/cpu/avr/drv/kdebug_avr.c **** #include <cpu/attr.h>
  49:bertos/cpu/avr/drv/kdebug_avr.c **** 
  50:bertos/cpu/avr/drv/kdebug_avr.c **** #include <avr/io.h>
  51:bertos/cpu/avr/drv/kdebug_avr.c **** 
  52:bertos/cpu/avr/drv/kdebug_avr.c **** #if CONFIG_KDEBUG_PORT == 0
  53:bertos/cpu/avr/drv/kdebug_avr.c **** 
  54:bertos/cpu/avr/drv/kdebug_avr.c **** 	/*
  55:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * Support for special bus policies or external transceivers
  56:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * on UART0 (to be overridden in "hw/hw_ser.h").
  57:bertos/cpu/avr/drv/kdebug_avr.c **** 	 *
  58:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * HACK: if we don't set TXEN, kdbg disables the transmitter
  59:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * after each output statement until the serial driver
  60:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * is initialized.  These glitches confuse the debug
  61:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * terminal that ends up printing some trash.
  62:bertos/cpu/avr/drv/kdebug_avr.c **** 	 */
  63:bertos/cpu/avr/drv/kdebug_avr.c **** 	#ifndef KDBG_UART0_BUS_INIT
  64:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_UART0_BUS_INIT  do { \
  65:bertos/cpu/avr/drv/kdebug_avr.c **** 			UCR = BV(TXEN0); \
  66:bertos/cpu/avr/drv/kdebug_avr.c **** 		} while (0)
  67:bertos/cpu/avr/drv/kdebug_avr.c **** 	#endif
  68:bertos/cpu/avr/drv/kdebug_avr.c **** 	#ifndef KDBG_UART0_BUS_RX
  69:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_UART0_BUS_RX    do {} while (0)
  70:bertos/cpu/avr/drv/kdebug_avr.c **** 	#endif
  71:bertos/cpu/avr/drv/kdebug_avr.c **** 	#ifndef KDBG_UART0_BUS_TX
  72:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_UART0_BUS_TX    do {} while (0)
  73:bertos/cpu/avr/drv/kdebug_avr.c **** 	#endif
  74:bertos/cpu/avr/drv/kdebug_avr.c **** 
  75:bertos/cpu/avr/drv/kdebug_avr.c **** 	#if CPU_AVR_ATMEGA64 || CPU_AVR_ATMEGA128 || CPU_AVR_ATMEGA1281 || CPU_AVR_ATMEGA168 || CPU_AVR_AT
  76:bertos/cpu/avr/drv/kdebug_avr.c **** 		#define UCR UCSR0B
  77:bertos/cpu/avr/drv/kdebug_avr.c **** 		#define UDR UDR0
  78:bertos/cpu/avr/drv/kdebug_avr.c **** 		#define USR UCSR0A
  79:bertos/cpu/avr/drv/kdebug_avr.c **** 	#elif CPU_AVR_ATMEGA8 || CPU_AVR_ATMEGA32
  80:bertos/cpu/avr/drv/kdebug_avr.c **** 		#define UCR    UCSRB
  81:bertos/cpu/avr/drv/kdebug_avr.c **** 		#define USR    UCSRA
  82:bertos/cpu/avr/drv/kdebug_avr.c **** 		#define TXEN0  TXEN
  83:bertos/cpu/avr/drv/kdebug_avr.c **** 		#define UDRE0  UDRE
  84:bertos/cpu/avr/drv/kdebug_avr.c **** 		#define TXC0   TXC
  85:bertos/cpu/avr/drv/kdebug_avr.c **** 		#define TXCIE0 TXCIE
  86:bertos/cpu/avr/drv/kdebug_avr.c **** 		#define UDRIE0 UDRIE
  87:bertos/cpu/avr/drv/kdebug_avr.c **** 	#else
  88:bertos/cpu/avr/drv/kdebug_avr.c **** 		#error Unknown CPU
  89:bertos/cpu/avr/drv/kdebug_avr.c **** 	#endif
  90:bertos/cpu/avr/drv/kdebug_avr.c **** 
  91:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_WAIT_READY()     do { loop_until_bit_is_set(USR, UDRE0); } while(0)
  92:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_WAIT_TXDONE()    do { loop_until_bit_is_set(USR, TXC0); } while(0)
  93:bertos/cpu/avr/drv/kdebug_avr.c **** 
  94:bertos/cpu/avr/drv/kdebug_avr.c **** 	/*
  95:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * We must clear the TXC flag before sending a new character to allow
  96:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * KDBG_WAIT_TXDONE() to work properly.
  97:bertos/cpu/avr/drv/kdebug_avr.c **** 	 *
  98:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * BUG: if KDBG_WRITE_CHAR() is called after the TXC flag is set by hardware,
  99:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * a new TXC could be generated after we've cleared it and before the new
 100:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * character is written to UDR.  On a 485 bus, the transceiver will be put
 101:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * in RX mode while still transmitting the last char.
 102:bertos/cpu/avr/drv/kdebug_avr.c **** 	 */
 103:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_WRITE_CHAR(c)    do { USR |= BV(TXC0); UDR = (c); } while(0)
 104:bertos/cpu/avr/drv/kdebug_avr.c **** 
 105:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_MASK_IRQ(old)    do { \
 106:bertos/cpu/avr/drv/kdebug_avr.c **** 		(old) = UCR; \
 107:bertos/cpu/avr/drv/kdebug_avr.c **** 		UCR |= BV(TXEN0); \
 108:bertos/cpu/avr/drv/kdebug_avr.c **** 		UCR &= ~(BV(TXCIE0) | BV(UDRIE0)); \
 109:bertos/cpu/avr/drv/kdebug_avr.c **** 		KDBG_UART0_BUS_TX; \
 110:bertos/cpu/avr/drv/kdebug_avr.c **** 	} while(0)
 111:bertos/cpu/avr/drv/kdebug_avr.c **** 
 112:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_RESTORE_IRQ(old) do { \
 113:bertos/cpu/avr/drv/kdebug_avr.c **** 		KDBG_WAIT_TXDONE(); \
 114:bertos/cpu/avr/drv/kdebug_avr.c **** 		KDBG_UART0_BUS_RX; \
 115:bertos/cpu/avr/drv/kdebug_avr.c **** 		UCR = (old); \
 116:bertos/cpu/avr/drv/kdebug_avr.c **** 	} while(0)
 117:bertos/cpu/avr/drv/kdebug_avr.c **** 
 118:bertos/cpu/avr/drv/kdebug_avr.c **** 	typedef uint8_t kdbg_irqsave_t;
 119:bertos/cpu/avr/drv/kdebug_avr.c **** 
 120:bertos/cpu/avr/drv/kdebug_avr.c **** #elif CONFIG_KDEBUG_PORT == 1
 121:bertos/cpu/avr/drv/kdebug_avr.c **** 
 122:bertos/cpu/avr/drv/kdebug_avr.c **** 	/*
 123:bertos/cpu/avr/drv/kdebug_avr.c **** 		* Support for special bus policies or external transceivers
 124:bertos/cpu/avr/drv/kdebug_avr.c **** 		* on UART1 (to be overridden in "hw/hw_ser.h").
 125:bertos/cpu/avr/drv/kdebug_avr.c **** 		*
 126:bertos/cpu/avr/drv/kdebug_avr.c **** 		* HACK: if we don't set TXEN, kdbg disables the transmitter
 127:bertos/cpu/avr/drv/kdebug_avr.c **** 		* after each output statement until the serial driver
 128:bertos/cpu/avr/drv/kdebug_avr.c **** 		* is initialized.  These glitches confuse the debug
 129:bertos/cpu/avr/drv/kdebug_avr.c **** 		* terminal that ends up printing some trash.
 130:bertos/cpu/avr/drv/kdebug_avr.c **** 		*/
 131:bertos/cpu/avr/drv/kdebug_avr.c **** 	#ifndef KDBG_UART1_BUS_INIT
 132:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_UART1_BUS_INIT  do { \
 133:bertos/cpu/avr/drv/kdebug_avr.c **** 			UCSR1B = BV(TXEN1); \
 134:bertos/cpu/avr/drv/kdebug_avr.c **** 		} while (0)
 135:bertos/cpu/avr/drv/kdebug_avr.c **** 	#endif
 136:bertos/cpu/avr/drv/kdebug_avr.c **** 	#ifndef KDBG_UART1_BUS_RX
 137:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_UART1_BUS_RX    do {} while (0)
 138:bertos/cpu/avr/drv/kdebug_avr.c **** 	#endif
 139:bertos/cpu/avr/drv/kdebug_avr.c **** 	#ifndef KDBG_UART1_BUS_TX
 140:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_UART1_BUS_TX    do {} while (0)
 141:bertos/cpu/avr/drv/kdebug_avr.c **** 	#endif
 142:bertos/cpu/avr/drv/kdebug_avr.c **** 
 143:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_WAIT_READY()     do { loop_until_bit_is_set(UCSR1A, UDRE1); } while(0)
 144:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_WAIT_TXDONE()    do { loop_until_bit_is_set(UCSR1A, TXC1); } while(0)
 145:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_WRITE_CHAR(c)    do { UCSR1A |= BV(TXC1); UDR1 = (c); } while(0)
 146:bertos/cpu/avr/drv/kdebug_avr.c **** 
 147:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_MASK_IRQ(old)    do { \
 148:bertos/cpu/avr/drv/kdebug_avr.c **** 		(old) = UCSR1B; \
 149:bertos/cpu/avr/drv/kdebug_avr.c **** 		UCSR1B |= BV(TXEN1); \
 150:bertos/cpu/avr/drv/kdebug_avr.c **** 		UCSR1B &= ~(BV(TXCIE1) | BV(UDRIE1)); \
 151:bertos/cpu/avr/drv/kdebug_avr.c **** 		KDBG_UART1_BUS_TX; \
 152:bertos/cpu/avr/drv/kdebug_avr.c **** 	} while(0)
 153:bertos/cpu/avr/drv/kdebug_avr.c **** 
 154:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_RESTORE_IRQ(old) do { \
 155:bertos/cpu/avr/drv/kdebug_avr.c **** 		KDBG_WAIT_TXDONE(); \
 156:bertos/cpu/avr/drv/kdebug_avr.c **** 		KDBG_UART1_BUS_RX; \
 157:bertos/cpu/avr/drv/kdebug_avr.c **** 		UCSR1B = (old); \
 158:bertos/cpu/avr/drv/kdebug_avr.c **** 	} while(0)
 159:bertos/cpu/avr/drv/kdebug_avr.c **** 
 160:bertos/cpu/avr/drv/kdebug_avr.c **** 	typedef uint8_t kdbg_irqsave_t;
 161:bertos/cpu/avr/drv/kdebug_avr.c **** 
 162:bertos/cpu/avr/drv/kdebug_avr.c **** /*
 163:bertos/cpu/avr/drv/kdebug_avr.c ****  * Special debug port for BitBanged Serial see below for details...
 164:bertos/cpu/avr/drv/kdebug_avr.c ****  */
 165:bertos/cpu/avr/drv/kdebug_avr.c **** #elif CONFIG_KDEBUG_PORT == 666
 166:bertos/cpu/avr/drv/kdebug_avr.c **** 	#include "hw/hw_ser.h"
 167:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_WAIT_READY()      do { /*nop*/ } while(0)
 168:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_WRITE_CHAR(c)     _kdebug_bitbang_putchar((c))
 169:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_MASK_IRQ(old)     do { IRQ_SAVE_DISABLE((old)); } while(0)
 170:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_RESTORE_IRQ(old)  do { IRQ_RESTORE((old)); } while(0)
 171:bertos/cpu/avr/drv/kdebug_avr.c **** 	typedef cpu_flags_t kdbg_irqsave_t;
 172:bertos/cpu/avr/drv/kdebug_avr.c **** 
 173:bertos/cpu/avr/drv/kdebug_avr.c **** 	#define KDBG_DELAY (((CPU_FREQ + CONFIG_KDEBUG_BAUDRATE / 2) / CONFIG_KDEBUG_BAUDRATE) + 7) / 14
 174:bertos/cpu/avr/drv/kdebug_avr.c **** 
 175:bertos/cpu/avr/drv/kdebug_avr.c **** 	static void _kdebug_bitbang_delay(void)
 176:bertos/cpu/avr/drv/kdebug_avr.c **** 	{
 177:bertos/cpu/avr/drv/kdebug_avr.c **** 		unsigned long i;
 178:bertos/cpu/avr/drv/kdebug_avr.c **** 
 179:bertos/cpu/avr/drv/kdebug_avr.c **** 		for (i = 0; i < KDBG_DELAY; i++)
 180:bertos/cpu/avr/drv/kdebug_avr.c **** 		{
 181:bertos/cpu/avr/drv/kdebug_avr.c **** 			NOP;
 182:bertos/cpu/avr/drv/kdebug_avr.c **** 			NOP;
 183:bertos/cpu/avr/drv/kdebug_avr.c **** 			NOP;
 184:bertos/cpu/avr/drv/kdebug_avr.c **** 			NOP;
 185:bertos/cpu/avr/drv/kdebug_avr.c **** 			NOP;
 186:bertos/cpu/avr/drv/kdebug_avr.c **** 		}
 187:bertos/cpu/avr/drv/kdebug_avr.c **** 	}
 188:bertos/cpu/avr/drv/kdebug_avr.c **** 
 189:bertos/cpu/avr/drv/kdebug_avr.c **** 	/**
 190:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * Putchar for BITBANG serial debug console.
 191:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * Sometimes, we can't permit to use a whole serial for debugging purpose.
 192:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * Since debug console is in output only it is useful to use a single generic I/O pin for debug.
 193:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * This is achieved by this simple function, that shift out the data like a UART, but
 194:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * in software :)
 195:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * The only requirement is that SER_BITBANG_* macros will be defined somewhere (usually hw_ser.h)
 196:bertos/cpu/avr/drv/kdebug_avr.c **** 	 * \note All interrupts are disabled during debug prints!
 197:bertos/cpu/avr/drv/kdebug_avr.c **** 	 */
 198:bertos/cpu/avr/drv/kdebug_avr.c **** 	static void _kdebug_bitbang_putchar(char c)
 199:bertos/cpu/avr/drv/kdebug_avr.c **** 	{
 200:bertos/cpu/avr/drv/kdebug_avr.c **** 		int i;
 201:bertos/cpu/avr/drv/kdebug_avr.c **** 		uint16_t data = c;
 202:bertos/cpu/avr/drv/kdebug_avr.c **** 
 203:bertos/cpu/avr/drv/kdebug_avr.c **** 		/* Add stop bit */
 204:bertos/cpu/avr/drv/kdebug_avr.c **** 		data |= 0x0100;
 205:bertos/cpu/avr/drv/kdebug_avr.c **** 
 206:bertos/cpu/avr/drv/kdebug_avr.c **** 		/* Add start bit*/
 207:bertos/cpu/avr/drv/kdebug_avr.c **** 		data <<= 1;
 208:bertos/cpu/avr/drv/kdebug_avr.c **** 
 209:bertos/cpu/avr/drv/kdebug_avr.c **** 		/* Shift out data */
 210:bertos/cpu/avr/drv/kdebug_avr.c **** 		uint16_t shift = 1;
 211:bertos/cpu/avr/drv/kdebug_avr.c **** 		for (i = 0; i < 10; i++)
 212:bertos/cpu/avr/drv/kdebug_avr.c **** 		{
 213:bertos/cpu/avr/drv/kdebug_avr.c **** 			if (data & shift)
 214:bertos/cpu/avr/drv/kdebug_avr.c **** 				SER_BITBANG_HIGH;
 215:bertos/cpu/avr/drv/kdebug_avr.c **** 			else
 216:bertos/cpu/avr/drv/kdebug_avr.c **** 				SER_BITBANG_LOW;
 217:bertos/cpu/avr/drv/kdebug_avr.c **** 			_kdebug_bitbang_delay();
 218:bertos/cpu/avr/drv/kdebug_avr.c **** 			shift <<= 1;
 219:bertos/cpu/avr/drv/kdebug_avr.c **** 		}
 220:bertos/cpu/avr/drv/kdebug_avr.c **** 	}
 221:bertos/cpu/avr/drv/kdebug_avr.c **** #else
 222:bertos/cpu/avr/drv/kdebug_avr.c **** 	#error CONFIG_KDEBUG_PORT should be either 0, 1 or 666
 223:bertos/cpu/avr/drv/kdebug_avr.c **** #endif
 224:bertos/cpu/avr/drv/kdebug_avr.c **** 
 225:bertos/cpu/avr/drv/kdebug_avr.c **** 
 226:bertos/cpu/avr/drv/kdebug_avr.c **** INLINE void kdbg_hw_init(void)
 227:bertos/cpu/avr/drv/kdebug_avr.c **** {
 228:bertos/cpu/avr/drv/kdebug_avr.c **** 	#if CONFIG_KDEBUG_PORT == 666
 229:bertos/cpu/avr/drv/kdebug_avr.c **** 		SER_BITBANG_INIT;
 230:bertos/cpu/avr/drv/kdebug_avr.c **** 	#else /* CONFIG_KDEBUG_PORT != 666 */
 231:bertos/cpu/avr/drv/kdebug_avr.c **** 		/* Compute the baud rate */
 232:bertos/cpu/avr/drv/kdebug_avr.c **** 		uint16_t period = DIV_ROUND(CPU_FREQ / 16UL, CONFIG_KDEBUG_BAUDRATE) - 1;
 233:bertos/cpu/avr/drv/kdebug_avr.c **** 
 234:bertos/cpu/avr/drv/kdebug_avr.c **** 		#if (CPU_AVR_ATMEGA64 || CPU_AVR_ATMEGA128 || CPU_AVR_ATMEGA1281)
 235:bertos/cpu/avr/drv/kdebug_avr.c **** 			#if CONFIG_KDEBUG_PORT == 0
 236:bertos/cpu/avr/drv/kdebug_avr.c **** 				UBRR0H = (uint8_t)(period>>8);
 237:bertos/cpu/avr/drv/kdebug_avr.c **** 				UBRR0L = (uint8_t)period;
 238:bertos/cpu/avr/drv/kdebug_avr.c **** 				KDBG_UART0_BUS_INIT;
 239:bertos/cpu/avr/drv/kdebug_avr.c **** 			#elif CONFIG_KDEBUG_PORT == 1
 240:bertos/cpu/avr/drv/kdebug_avr.c **** 				UBRR1H = (uint8_t)(period>>8);
 241:bertos/cpu/avr/drv/kdebug_avr.c **** 				UBRR1L = (uint8_t)period;
 242:bertos/cpu/avr/drv/kdebug_avr.c **** 				KDBG_UART1_BUS_INIT;
 243:bertos/cpu/avr/drv/kdebug_avr.c **** 			#else
 244:bertos/cpu/avr/drv/kdebug_avr.c **** 				#error CONFIG_KDEBUG_PORT must be either 0 or 1
 245:bertos/cpu/avr/drv/kdebug_avr.c **** 			#endif
 246:bertos/cpu/avr/drv/kdebug_avr.c **** 
 247:bertos/cpu/avr/drv/kdebug_avr.c **** 		#elif CPU_AVR_ATMEGA168 || CPU_AVR_ATMEGA328P
 248:bertos/cpu/avr/drv/kdebug_avr.c **** 			#if CONFIG_KDEBUG_PORT == 0
 249:bertos/cpu/avr/drv/kdebug_avr.c **** 				UBRR0H = (uint8_t)(period>>8);
 283               		.loc 2 249 0
 284 0000 1092 C500 		sts 197,__zero_reg__	 ;  7	*movqi/3	[length = 2]
 250:bertos/cpu/avr/drv/kdebug_avr.c **** 				UBRR0L = (uint8_t)period;
 285               		.loc 2 250 0
 286 0004 83E0      		ldi r24,lo8(3)	 ;  9	*movqi/2	[length = 1]
 287 0006 8093 C400 		sts 196,r24	 ;  10	*movqi/3	[length = 2]
 251:bertos/cpu/avr/drv/kdebug_avr.c **** 				KDBG_UART0_BUS_INIT;
 288               		.loc 2 251 0
 289 000a 88E0      		ldi r24,lo8(8)	 ;  12	*movqi/2	[length = 1]
 290 000c 8093 C100 		sts 193,r24	 ;  13	*movqi/3	[length = 2]
 291               	.LBE7:
 292               	.LBE6:
  80:bertos/drv/kdebug.c **** 	kputs("\n\n*** BeRTOS DBG START ***\n");
 293               		.loc 1 80 0
 294 0010 80E0      		ldi r24,lo8(__c.1374)	 ;  16	*movhi/4	[length = 2]
 295 0012 90E0      		ldi r25,hi8(__c.1374)
 296 0014 0E94 0000 		call kputs_P	 ;  17	call_insn/3	[length = 2]
 297               	/* epilogue start */
  81:bertos/drv/kdebug.c **** }
 298               		.loc 1 81 0
 299 0018 0895      		ret	 ;  24	return	[length = 1]
 300               		.cfi_endproc
 301               	.LFE1:
 303               		.section	.text.kputnum,"ax",@progbits
 304               	.global	kputnum
 306               	kputnum:
 307               	.LFB7:
 155:bertos/drv/kdebug.c **** 
 156:bertos/drv/kdebug.c **** 
 157:bertos/drv/kdebug.c **** /**
 158:bertos/drv/kdebug.c ****  * Cheap function to print small integers without using printf().
 159:bertos/drv/kdebug.c ****  */
 160:bertos/drv/kdebug.c **** int kputnum(int num)
 161:bertos/drv/kdebug.c **** {
 308               		.loc 1 161 0
 309               		.cfi_startproc
 310               	.LVL23:
 311 0000 AF92      		push r10	 ;  79	*pushqi/1	[length = 1]
 312               	.LCFI8:
 313               		.cfi_def_cfa_offset 3
 314               		.cfi_offset 10, -2
 315 0002 BF92      		push r11	 ;  80	*pushqi/1	[length = 1]
 316               	.LCFI9:
 317               		.cfi_def_cfa_offset 4
 318               		.cfi_offset 11, -3
 319 0004 CF92      		push r12	 ;  81	*pushqi/1	[length = 1]
 320               	.LCFI10:
 321               		.cfi_def_cfa_offset 5
 322               		.cfi_offset 12, -4
 323 0006 DF92      		push r13	 ;  82	*pushqi/1	[length = 1]
 324               	.LCFI11:
 325               		.cfi_def_cfa_offset 6
 326               		.cfi_offset 13, -5
 327 0008 EF92      		push r14	 ;  83	*pushqi/1	[length = 1]
 328               	.LCFI12:
 329               		.cfi_def_cfa_offset 7
 330               		.cfi_offset 14, -6
 331 000a FF92      		push r15	 ;  84	*pushqi/1	[length = 1]
 332               	.LCFI13:
 333               		.cfi_def_cfa_offset 8
 334               		.cfi_offset 15, -7
 335 000c 0F93      		push r16	 ;  85	*pushqi/1	[length = 1]
 336               	.LCFI14:
 337               		.cfi_def_cfa_offset 9
 338               		.cfi_offset 16, -8
 339 000e 1F93      		push r17	 ;  86	*pushqi/1	[length = 1]
 340               	.LCFI15:
 341               		.cfi_def_cfa_offset 10
 342               		.cfi_offset 17, -9
 343 0010 CF93      		push r28	 ;  87	*pushqi/1	[length = 1]
 344               	.LCFI16:
 345               		.cfi_def_cfa_offset 11
 346               		.cfi_offset 28, -10
 347 0012 DF93      		push r29	 ;  88	*pushqi/1	[length = 1]
 348               	.LCFI17:
 349               		.cfi_def_cfa_offset 12
 350               		.cfi_offset 29, -11
 351               	/* prologue: function */
 352               	/* frame size = 0 */
 353               	/* stack size = 10 */
 354               	.L__stack_usage = 10
 355 0014 6C01      		movw r12,r24	 ;  2	*movhi/1	[length = 1]
 356               	.LVL24:
 357               		.loc 1 161 0
 358 0016 25E0      		ldi r18,lo8(5)	 ;  104	*reload_inhi	[length = 3]
 359 0018 E22E      		mov r14,r18
 360 001a F12C      		mov r15,__zero_reg__
 162:bertos/drv/kdebug.c **** 	int output_len = 0;
 163:bertos/drv/kdebug.c **** 	int divisor = 10000;
 361               		.loc 1 163 0
 362 001c C0E1      		ldi r28,lo8(10000)	 ;  5	*movhi/4	[length = 2]
 363 001e D7E2      		ldi r29,hi8(10000)
 162:bertos/drv/kdebug.c **** 	int output_len = 0;
 364               		.loc 1 162 0
 365 0020 00E0      		ldi r16,lo8(0)	 ;  6	*movhi/4	[length = 2]
 366 0022 10E0      		ldi r17,hi8(0)
 164:bertos/drv/kdebug.c **** 	int digit;
 165:bertos/drv/kdebug.c **** 
 166:bertos/drv/kdebug.c **** 	do
 167:bertos/drv/kdebug.c **** 	{
 168:bertos/drv/kdebug.c **** 		digit = num / divisor;
 169:bertos/drv/kdebug.c **** 		num %= divisor;
 170:bertos/drv/kdebug.c **** 
 171:bertos/drv/kdebug.c **** 		if (digit || output_len || divisor == 1)
 172:bertos/drv/kdebug.c **** 		{
 173:bertos/drv/kdebug.c **** 			kputchar(digit + '0');
 174:bertos/drv/kdebug.c **** 			++output_len;
 175:bertos/drv/kdebug.c **** 		}
 176:bertos/drv/kdebug.c **** 	}
 177:bertos/drv/kdebug.c **** 	while (divisor /= 10);
 367               		.loc 1 177 0
 368 0024 3AE0      		ldi r19,lo8(10)	 ;  105	*reload_inhi	[length = 3]
 369 0026 A32E      		mov r10,r19
 370 0028 B12C      		mov r11,__zero_reg__
 371               	.LVL25:
 372               	.L24:
 169:bertos/drv/kdebug.c **** 		num %= divisor;
 373               		.loc 1 169 0
 374 002a C601      		movw r24,r12	 ;  72	*movhi/1	[length = 1]
 375 002c BE01      		movw r22,r28	 ;  73	*movhi/1	[length = 1]
 376 002e 0E94 0000 		call __divmodhi4	 ;  74	*divmodhi4_call	[length = 2]
 377 0032 6C01      		movw r12,r24	 ;  76	*movhi/1	[length = 1]
 378               	.LVL26:
 171:bertos/drv/kdebug.c **** 		if (digit || output_len || divisor == 1)
 379               		.loc 1 171 0
 380 0034 6115      		cp r22,__zero_reg__	 ;  21	*cmphi/2	[length = 2]
 381 0036 7105      		cpc r23,__zero_reg__
 382 0038 01F4      		brne .L22	 ;  22	branch	[length = 1]
 171:bertos/drv/kdebug.c **** 		if (digit || output_len || divisor == 1)
 383               		.loc 1 171 0 is_stmt 0 discriminator 1
 384 003a 0115      		cp r16,__zero_reg__	 ;  24	*cmphi/2	[length = 2]
 385 003c 1105      		cpc r17,__zero_reg__
 386 003e 01F4      		brne .L22	 ;  25	branch	[length = 1]
 387 0040 C130      		cpi r28,1	 ;  27	*cmphi/4	[length = 2]
 388 0042 D105      		cpc r29,__zero_reg__
 389 0044 01F4      		brne .L23	 ;  28	branch	[length = 1]
 390               	.L22:
 173:bertos/drv/kdebug.c **** 			kputchar(digit + '0');
 391               		.loc 1 173 0 is_stmt 1
 392 0046 862F      		mov r24,r22	 ;  78	*movqi/1	[length = 1]
 393               	.LVL27:
 394 0048 805D      		subi r24,lo8(-(48))	 ;  33	addqi3/2	[length = 1]
 395 004a 0E94 0000 		call kputchar	 ;  34	call_insn/3	[length = 2]
 174:bertos/drv/kdebug.c **** 			++output_len;
 396               		.loc 1 174 0
 397 004e 0F5F      		subi r16,lo8(-(1))	 ;  35	*addhi3/4	[length = 2]
 398 0050 1F4F      		sbci r17,hi8(-(1))
 399               	.LVL28:
 400               	.L23:
 401               		.loc 1 177 0
 402 0052 CE01      		movw r24,r28	 ;  67	*movhi/1	[length = 1]
 403 0054 B501      		movw r22,r10	 ;  68	*movhi/1	[length = 1]
 404 0056 0E94 0000 		call __divmodhi4	 ;  69	*divmodhi4_call	[length = 2]
 405 005a EB01      		movw r28,r22	 ;  70	*movhi/1	[length = 1]
 406               	.LVL29:
 407 005c 0894      		sec	 ;  44	*addhi3/6	[length = 3]
 408 005e E108      		sbc r14,__zero_reg__
 409 0060 F108      		sbc r15,__zero_reg__
 410 0062 E114      		cp r14,__zero_reg__	 ;  46	*cmphi/2	[length = 2]
 411 0064 F104      		cpc r15,__zero_reg__
 412 0066 01F4      		brne .L24	 ;  47	branch	[length = 1]
 178:bertos/drv/kdebug.c **** 
 179:bertos/drv/kdebug.c **** 	return output_len;
 180:bertos/drv/kdebug.c **** }
 413               		.loc 1 180 0
 414 0068 C801      		movw r24,r16	 ;  103	*movhi/1	[length = 1]
 415               	/* epilogue start */
 416 006a DF91      		pop r29	 ;  91	popqi	[length = 1]
 417 006c CF91      		pop r28	 ;  92	popqi	[length = 1]
 418 006e 1F91      		pop r17	 ;  93	popqi	[length = 1]
 419 0070 0F91      		pop r16	 ;  94	popqi	[length = 1]
 420               	.LVL30:
 421 0072 FF90      		pop r15	 ;  95	popqi	[length = 1]
 422 0074 EF90      		pop r14	 ;  96	popqi	[length = 1]
 423 0076 DF90      		pop r13	 ;  97	popqi	[length = 1]
 424 0078 CF90      		pop r12	 ;  98	popqi	[length = 1]
 425               	.LVL31:
 426 007a BF90      		pop r11	 ;  99	popqi	[length = 1]
 427 007c AF90      		pop r10	 ;  100	popqi	[length = 1]
 428 007e 0895      		ret	 ;  101	return_from_epilogue	[length = 1]
 429               		.cfi_endproc
 430               	.LFE7:
 432               		.section	.text.klocation,"ax",@progbits
 434               	klocation:
 435               	.LFB8:
 181:bertos/drv/kdebug.c **** 
 182:bertos/drv/kdebug.c **** 
 183:bertos/drv/kdebug.c **** static void klocation(const char * PGM_ATTR file, int line)
 184:bertos/drv/kdebug.c **** {
 436               		.loc 1 184 0
 437               		.cfi_startproc
 438               	.LVL32:
 439 0000 CF93      		push r28	 ;  27	*pushqi/1	[length = 1]
 440               	.LCFI18:
 441               		.cfi_def_cfa_offset 3
 442               		.cfi_offset 28, -2
 443 0002 DF93      		push r29	 ;  28	*pushqi/1	[length = 1]
 444               	.LCFI19:
 445               		.cfi_def_cfa_offset 4
 446               		.cfi_offset 29, -3
 447               	/* prologue: function */
 448               	/* frame size = 0 */
 449               	/* stack size = 2 */
 450               	.L__stack_usage = 2
 451 0004 EB01      		movw r28,r22	 ;  3	*movhi/1	[length = 1]
 185:bertos/drv/kdebug.c **** 	PGM_FUNC(kputs)(file);
 452               		.loc 1 185 0
 453 0006 0E94 0000 		call kputs_P	 ;  9	call_insn/3	[length = 2]
 454               	.LVL33:
 186:bertos/drv/kdebug.c **** 	kputchar(':');
 455               		.loc 1 186 0
 456 000a 8AE3      		ldi r24,lo8(58)	 ;  11	*movqi/2	[length = 1]
 457 000c 0E94 0000 		call kputchar	 ;  12	call_insn/3	[length = 2]
 187:bertos/drv/kdebug.c **** 	kputnum(line);
 458               		.loc 1 187 0
 459 0010 CE01      		movw r24,r28	 ;  14	*movhi/1	[length = 1]
 460 0012 0E94 0000 		call kputnum	 ;  15	call_value_insn/3	[length = 2]
 188:bertos/drv/kdebug.c **** 	PGM_FUNC(kputs)(PGM_STR(": "));
 461               		.loc 1 188 0
 462 0016 80E0      		ldi r24,lo8(__c.1426)	 ;  18	*movhi/4	[length = 2]
 463 0018 90E0      		ldi r25,hi8(__c.1426)
 464 001a 0E94 0000 		call kputs_P	 ;  19	call_insn/3	[length = 2]
 465               	/* epilogue start */
 189:bertos/drv/kdebug.c **** }
 466               		.loc 1 189 0
 467 001e DF91      		pop r29	 ;  31	popqi	[length = 1]
 468 0020 CF91      		pop r28	 ;  32	popqi	[length = 1]
 469               	.LVL34:
 470 0022 0895      		ret	 ;  33	return_from_epilogue	[length = 1]
 471               		.cfi_endproc
 472               	.LFE8:
 474               		.section	.text.__bassert_P,"ax",@progbits
 475               	.global	__bassert_P
 477               	__bassert_P:
 478               	.LFB9:
 190:bertos/drv/kdebug.c **** 
 191:bertos/drv/kdebug.c **** int PGM_FUNC(__bassert)(const char * PGM_ATTR cond, const char * PGM_ATTR file, int line)
 192:bertos/drv/kdebug.c **** {
 479               		.loc 1 192 0
 480               		.cfi_startproc
 481               	.LVL35:
 482 0000 CF93      		push r28	 ;  37	*pushqi/1	[length = 1]
 483               	.LCFI20:
 484               		.cfi_def_cfa_offset 3
 485               		.cfi_offset 28, -2
 486 0002 DF93      		push r29	 ;  38	*pushqi/1	[length = 1]
 487               	.LCFI21:
 488               		.cfi_def_cfa_offset 4
 489               		.cfi_offset 29, -3
 490               	/* prologue: function */
 491               	/* frame size = 0 */
 492               	/* stack size = 2 */
 493               	.L__stack_usage = 2
 494 0004 EC01      		movw r28,r24	 ;  2	*movhi/1	[length = 1]
 495 0006 CB01      		movw r24,r22	 ;  3	*movhi/1	[length = 1]
 496               	.LVL36:
 193:bertos/drv/kdebug.c **** 	klocation(file, line);
 497               		.loc 1 193 0
 498 0008 BA01      		movw r22,r20	 ;  10	*movhi/1	[length = 1]
 499               	.LVL37:
 500 000a 0E94 0000 		call klocation	 ;  11	call_insn/3	[length = 2]
 501               	.LVL38:
 194:bertos/drv/kdebug.c **** 	PGM_FUNC(kputs)(PGM_STR("Assertion failed: "));
 502               		.loc 1 194 0
 503 000e 80E0      		ldi r24,lo8(__c.1433)	 ;  14	*movhi/4	[length = 2]
 504 0010 90E0      		ldi r25,hi8(__c.1433)
 505 0012 0E94 0000 		call kputs_P	 ;  15	call_insn/3	[length = 2]
 195:bertos/drv/kdebug.c **** 	PGM_FUNC(kputs)(cond);
 506               		.loc 1 195 0
 507 0016 CE01      		movw r24,r28	 ;  17	*movhi/1	[length = 1]
 508 0018 0E94 0000 		call kputs_P	 ;  18	call_insn/3	[length = 2]
 196:bertos/drv/kdebug.c **** 	kputchar('\n');
 509               		.loc 1 196 0
 510 001c 8AE0      		ldi r24,lo8(10)	 ;  20	*movqi/2	[length = 1]
 511 001e 0E94 0000 		call kputchar	 ;  21	call_insn/3	[length = 2]
 197:bertos/drv/kdebug.c **** 	BREAKPOINT;
 198:bertos/drv/kdebug.c **** 	return 1;
 199:bertos/drv/kdebug.c **** }
 512               		.loc 1 199 0
 513 0022 81E0      		ldi r24,lo8(1)	 ;  26	*movhi/4	[length = 2]
 514 0024 90E0      		ldi r25,hi8(1)
 515               	/* epilogue start */
 516 0026 DF91      		pop r29	 ;  41	popqi	[length = 1]
 517 0028 CF91      		pop r28	 ;  42	popqi	[length = 1]
 518               	.LVL39:
 519 002a 0895      		ret	 ;  43	return_from_epilogue	[length = 1]
 520               		.cfi_endproc
 521               	.LFE9:
 523               		.section	.text.__trace_P,"ax",@progbits
 524               	.global	__trace_P
 526               	__trace_P:
 527               	.LFB10:
 200:bertos/drv/kdebug.c **** 
 201:bertos/drv/kdebug.c **** /*
 202:bertos/drv/kdebug.c ****  * Unfortunately, there's no way to get __func__ in
 203:bertos/drv/kdebug.c ****  * program memory, so we waste quite a lot of RAM in
 204:bertos/drv/kdebug.c ****  * AVR and other Harvard processors.
 205:bertos/drv/kdebug.c ****  */
 206:bertos/drv/kdebug.c **** void PGM_FUNC(__trace)(const char *name)
 207:bertos/drv/kdebug.c **** {
 528               		.loc 1 207 0
 529               		.cfi_startproc
 530               	.LVL40:
 531               	/* prologue: function */
 532               	/* frame size = 0 */
 533               	/* stack size = 0 */
 534               	.L__stack_usage = 0
 208:bertos/drv/kdebug.c **** 	PGM_FUNC(kprintf)(PGM_STR("%s()\n"), name);
 535               		.loc 1 208 0
 536 0000 00D0      		rcall .	 ;  6	*addhi3_sp_R_pc2	[length = 2]
 537 0002 00D0      		rcall .
 538               	.LCFI22:
 539               		.cfi_def_cfa_offset 6
 540 0004 20E0      		ldi r18,lo8(__c.1438)	 ;  8	*movhi/4	[length = 2]
 541 0006 30E0      		ldi r19,hi8(__c.1438)
 542 0008 EDB7      		in r30,__SP_L__	 ;  17	*movhi_sp/2	[length = 2]
 543 000a FEB7      		in r31,__SP_H__
 544 000c 3283      		std Z+2,r19	 ;  9	*movhi/3	[length = 2]
 545 000e 2183      		std Z+1,r18
 546 0010 9483      		std Z+4,r25	 ;  10	*movhi/3	[length = 2]
 547 0012 8383      		std Z+3,r24
 548               		.cfi_escape 0x2e,0x4
 549 0014 0E94 0000 		call kprintf_P	 ;  11	call_insn/3	[length = 2]
 550               	.LVL41:
 551 0018 0F90      		pop __tmp_reg__	 ;  12	*addhi3_sp_R_pc2	[length = 4]
 552 001a 0F90      		pop __tmp_reg__
 553 001c 0F90      		pop __tmp_reg__
 554 001e 0F90      		pop __tmp_reg__
 555               	.LCFI23:
 556               		.cfi_def_cfa_offset 2
 557               	/* epilogue start */
 209:bertos/drv/kdebug.c **** }
 558               		.loc 1 209 0
 559 0020 0895      		ret	 ;  20	return	[length = 1]
 560               		.cfi_endproc
 561               	.LFE10:
 563               		.section	.text.__tracemsg_P,"ax",@progbits
 564               	.global	__tracemsg_P
 566               	__tracemsg_P:
 567               	.LFB11:
 210:bertos/drv/kdebug.c **** 
 211:bertos/drv/kdebug.c **** void PGM_FUNC(__tracemsg)(const char *name, const char * PGM_ATTR fmt, ...)
 212:bertos/drv/kdebug.c **** {
 568               		.loc 1 212 0
 569               		.cfi_startproc
 570               	.LVL42:
 571 0000 CF93      		push r28	 ;  37	*pushqi/1	[length = 1]
 572               	.LCFI24:
 573               		.cfi_def_cfa_offset 3
 574               		.cfi_offset 28, -2
 575 0002 DF93      		push r29	 ;  38	*pushqi/1	[length = 1]
 576               	.LCFI25:
 577               		.cfi_def_cfa_offset 4
 578               		.cfi_offset 29, -3
 579 0004 CDB7      		in r28,__SP_L__	 ;  39	*movhi_sp/2	[length = 2]
 580 0006 DEB7      		in r29,__SP_H__
 581               	.LCFI26:
 582               		.cfi_def_cfa_register 28
 583               	/* prologue: function */
 584               	/* frame size = 0 */
 585               	/* stack size = 2 */
 586               	.L__stack_usage = 2
 213:bertos/drv/kdebug.c **** 	va_list ap;
 214:bertos/drv/kdebug.c **** 
 215:bertos/drv/kdebug.c **** 	PGM_FUNC(kprintf)(PGM_STR("%s(): "), name);
 587               		.loc 1 215 0
 588 0008 00D0      		rcall .	 ;  7	*addhi3_sp_R_pc2	[length = 2]
 589 000a 00D0      		rcall .
 590 000c 80E0      		ldi r24,lo8(__c.1445)	 ;  9	*movhi/4	[length = 2]
 591 000e 90E0      		ldi r25,hi8(__c.1445)
 592 0010 EDB7      		in r30,__SP_L__	 ;  35	*movhi_sp/2	[length = 2]
 593 0012 FEB7      		in r31,__SP_H__
 594 0014 9283      		std Z+2,r25	 ;  10	*movhi/3	[length = 2]
 595 0016 8183      		std Z+1,r24
 596 0018 8D81      		ldd r24,Y+5	 ;  33	*movhi/2	[length = 2]
 597 001a 9E81      		ldd r25,Y+6
 598 001c 9483      		std Z+4,r25	 ;  11	*movhi/3	[length = 2]
 599 001e 8383      		std Z+3,r24
 600               		.cfi_escape 0x2e,0x4
 601 0020 0E94 0000 		call kprintf_P	 ;  12	call_insn/3	[length = 2]
 216:bertos/drv/kdebug.c **** 	va_start(ap, fmt);
 602               		.loc 1 216 0
 603 0024 BE01      		movw r22,r28	 ;  36	*movhi/1	[length = 1]
 604 0026 675F      		subi r22,lo8(-(9))	 ;  13	*addhi3/4	[length = 2]
 605 0028 7F4F      		sbci r23,hi8(-(9))
 217:bertos/drv/kdebug.c **** 	PGM_FUNC(kvprintf)(fmt, ap);
 606               		.loc 1 217 0
 607 002a 0F90      		pop __tmp_reg__	 ;  16	*addhi3_sp_R_pc2	[length = 4]
 608 002c 0F90      		pop __tmp_reg__
 609 002e 0F90      		pop __tmp_reg__
 610 0030 0F90      		pop __tmp_reg__
 611 0032 8F81      		ldd r24,Y+7	 ;  18	*movhi/2	[length = 2]
 612 0034 9885      		ldd r25,Y+8
 613               		.cfi_escape 0x2e,0
 614 0036 0E94 0000 		call kvprintf_P	 ;  20	call_insn/3	[length = 2]
 218:bertos/drv/kdebug.c **** 	va_end(ap);
 219:bertos/drv/kdebug.c **** 	kputchar('\n');
 615               		.loc 1 219 0
 616 003a 8AE0      		ldi r24,lo8(10)	 ;  22	*movqi/2	[length = 1]
 617 003c 0E94 0000 		call kputchar	 ;  23	call_insn/3	[length = 2]
 618               	/* epilogue start */
 220:bertos/drv/kdebug.c **** }
 619               		.loc 1 220 0
 620 0040 DF91      		pop r29	 ;  42	popqi	[length = 1]
 621 0042 CF91      		pop r28	 ;  43	popqi	[length = 1]
 622 0044 0895      		ret	 ;  44	return_from_epilogue	[length = 1]
 623               		.cfi_endproc
 624               	.LFE11:
 626               		.section	.text.__invalid_ptr_P,"ax",@progbits
 627               	.global	__invalid_ptr_P
 629               	__invalid_ptr_P:
 630               	.LFB12:
 221:bertos/drv/kdebug.c **** 
 222:bertos/drv/kdebug.c **** int PGM_FUNC(__invalid_ptr)(void *value, const char * PGM_ATTR name, const char * PGM_ATTR file, in
 223:bertos/drv/kdebug.c **** {
 631               		.loc 1 223 0
 632               		.cfi_startproc
 633               	.LVL43:
 634 0000 0F93      		push r16	 ;  43	*pushqi/1	[length = 1]
 635               	.LCFI27:
 636               		.cfi_def_cfa_offset 3
 637               		.cfi_offset 16, -2
 638 0002 1F93      		push r17	 ;  44	*pushqi/1	[length = 1]
 639               	.LCFI28:
 640               		.cfi_def_cfa_offset 4
 641               		.cfi_offset 17, -3
 642 0004 CF93      		push r28	 ;  45	*pushqi/1	[length = 1]
 643               	.LCFI29:
 644               		.cfi_def_cfa_offset 5
 645               		.cfi_offset 28, -4
 646 0006 DF93      		push r29	 ;  46	*pushqi/1	[length = 1]
 647               	.LCFI30:
 648               		.cfi_def_cfa_offset 6
 649               		.cfi_offset 29, -5
 650               	/* prologue: function */
 651               	/* frame size = 0 */
 652               	/* stack size = 4 */
 653               	.L__stack_usage = 4
 654 0008 8C01      		movw r16,r24	 ;  2	*movhi/1	[length = 1]
 655 000a EB01      		movw r28,r22	 ;  3	*movhi/1	[length = 1]
 656 000c CA01      		movw r24,r20	 ;  4	*movhi/1	[length = 1]
 657               	.LVL44:
 658 000e B901      		movw r22,r18	 ;  5	*movhi/1	[length = 1]
 659               	.LVL45:
 224:bertos/drv/kdebug.c **** 	klocation(file, line);
 660               		.loc 1 224 0
 661 0010 0E94 0000 		call klocation	 ;  12	call_insn/3	[length = 2]
 662               	.LVL46:
 225:bertos/drv/kdebug.c **** 	PGM_FUNC(kputs)(PGM_STR("Invalid ptr: "));
 663               		.loc 1 225 0
 664 0014 80E0      		ldi r24,lo8(__c.1453)	 ;  15	*movhi/4	[length = 2]
 665 0016 90E0      		ldi r25,hi8(__c.1453)
 666 0018 0E94 0000 		call kputs_P	 ;  16	call_insn/3	[length = 2]
 226:bertos/drv/kdebug.c **** 	PGM_FUNC(kputs)(name);
 667               		.loc 1 226 0
 668 001c CE01      		movw r24,r28	 ;  18	*movhi/1	[length = 1]
 669 001e 0E94 0000 		call kputs_P	 ;  19	call_insn/3	[length = 2]
 227:bertos/drv/kdebug.c **** 	#if CONFIG_PRINTF
 228:bertos/drv/kdebug.c **** 		PGM_FUNC(kprintf)(PGM_STR(" = 0x%p\n"), value);
 670               		.loc 1 228 0
 671 0022 00D0      		rcall .	 ;  20	*addhi3_sp_R_pc2	[length = 2]
 672 0024 00D0      		rcall .
 673               	.LCFI31:
 674               		.cfi_def_cfa_offset 10
 675 0026 80E0      		ldi r24,lo8(__c.1455)	 ;  22	*movhi/4	[length = 2]
 676 0028 90E0      		ldi r25,hi8(__c.1455)
 677 002a EDB7      		in r30,__SP_L__	 ;  42	*movhi_sp/2	[length = 2]
 678 002c FEB7      		in r31,__SP_H__
 679 002e 9283      		std Z+2,r25	 ;  23	*movhi/3	[length = 2]
 680 0030 8183      		std Z+1,r24
 681 0032 1483      		std Z+4,r17	 ;  24	*movhi/3	[length = 2]
 682 0034 0383      		std Z+3,r16
 683               		.cfi_escape 0x2e,0x4
 684 0036 0E94 0000 		call kprintf_P	 ;  25	call_insn/3	[length = 2]
 229:bertos/drv/kdebug.c **** 	#else
 230:bertos/drv/kdebug.c **** 		(void)value;
 231:bertos/drv/kdebug.c **** 		kputchar('\n');
 232:bertos/drv/kdebug.c **** 	#endif
 233:bertos/drv/kdebug.c **** 	return 1;
 685               		.loc 1 233 0
 686 003a 0F90      		pop __tmp_reg__	 ;  27	*addhi3_sp_R_pc2	[length = 4]
 687 003c 0F90      		pop __tmp_reg__
 688 003e 0F90      		pop __tmp_reg__
 689 0040 0F90      		pop __tmp_reg__
 690               	.LCFI32:
 691               		.cfi_def_cfa_offset 6
 234:bertos/drv/kdebug.c **** }
 692               		.loc 1 234 0
 693 0042 81E0      		ldi r24,lo8(1)	 ;  31	*movhi/4	[length = 2]
 694 0044 90E0      		ldi r25,hi8(1)
 695               	/* epilogue start */
 696 0046 DF91      		pop r29	 ;  49	popqi	[length = 1]
 697 0048 CF91      		pop r28	 ;  50	popqi	[length = 1]
 698               	.LVL47:
 699 004a 1F91      		pop r17	 ;  51	popqi	[length = 1]
 700 004c 0F91      		pop r16	 ;  52	popqi	[length = 1]
 701               	.LVL48:
 702 004e 0895      		ret	 ;  53	return_from_epilogue	[length = 1]
 703               		.cfi_endproc
 704               	.LFE12:
 706               		.section	.text.__init_wall,"ax",@progbits
 707               	.global	__init_wall
 709               	__init_wall:
 710               	.LFB13:
 235:bertos/drv/kdebug.c **** 
 236:bertos/drv/kdebug.c **** 
 237:bertos/drv/kdebug.c **** void __init_wall(long *wall, int size)
 238:bertos/drv/kdebug.c **** {
 711               		.loc 1 238 0
 712               		.cfi_startproc
 713               	.LVL49:
 714               	/* prologue: function */
 715               	/* frame size = 0 */
 716               	/* stack size = 0 */
 717               	.L__stack_usage = 0
 718 0000 FC01      		movw r30,r24	 ;  26	*movhi/1	[length = 1]
 719               		.loc 1 238 0
 720 0002 CB01      		movw r24,r22	 ;  65	*movhi/1	[length = 1]
 721               	.LVL50:
 239:bertos/drv/kdebug.c **** 	while(size--)
 240:bertos/drv/kdebug.c **** 		*wall++ = WALL_VALUE;
 722               		.loc 1 240 0
 723 0004 4EEF      		ldi r20,lo8(-1414673666)	 ;  35	*movsi/5	[length = 4]
 724 0006 5AEC      		ldi r21,hi8(-1414673666)
 725 0008 6DEA      		ldi r22,hlo8(-1414673666)
 726 000a 7BEA      		ldi r23,hhi8(-1414673666)
 239:bertos/drv/kdebug.c **** 	while(size--)
 727               		.loc 1 239 0
 728 000c 00C0      		rjmp .L32	 ;  66	jump	[length = 1]
 729               	.LVL51:
 730               	.L33:
 731               		.loc 1 240 0
 732 000e 4193      		st Z+,r20	 ;  36	*movsi/4	[length = 4]
 733 0010 5193      		st Z+,r21
 734 0012 6193      		st Z+,r22
 735 0014 7193      		st Z+,r23
 736               	.LVL52:
 737 0016 0197      		sbiw r24,1	 ;  39	*addhi3/3	[length = 1]
 738               	.L32:
 239:bertos/drv/kdebug.c **** 	while(size--)
 739               		.loc 1 239 0 discriminator 1
 740 0018 0097      		sbiw r24,0	 ;  46	*cmphi/1	[length = 1]
 741 001a 01F4      		brne .L33	 ;  47	branch	[length = 1]
 742               	/* epilogue start */
 241:bertos/drv/kdebug.c **** }
 743               		.loc 1 241 0
 744 001c 0895      		ret	 ;  62	return	[length = 1]
 745               		.cfi_endproc
 746               	.LFE13:
 748               		.section	.text.__check_wall_P,"ax",@progbits
 749               	.global	__check_wall_P
 751               	__check_wall_P:
 752               	.LFB14:
 242:bertos/drv/kdebug.c **** 
 243:bertos/drv/kdebug.c **** 
 244:bertos/drv/kdebug.c **** int PGM_FUNC(__check_wall)(long *wall, int size, const char * PGM_ATTR name, const char * PGM_ATTR 
 245:bertos/drv/kdebug.c **** {
 753               		.loc 1 245 0
 754               		.cfi_startproc
 755               	.LVL53:
 756 0000 6F92      		push r6	 ;  97	*pushqi/1	[length = 1]
 757               	.LCFI33:
 758               		.cfi_def_cfa_offset 3
 759               		.cfi_offset 6, -2
 760 0002 7F92      		push r7	 ;  98	*pushqi/1	[length = 1]
 761               	.LCFI34:
 762               		.cfi_def_cfa_offset 4
 763               		.cfi_offset 7, -3
 764 0004 8F92      		push r8	 ;  99	*pushqi/1	[length = 1]
 765               	.LCFI35:
 766               		.cfi_def_cfa_offset 5
 767               		.cfi_offset 8, -4
 768 0006 9F92      		push r9	 ;  100	*pushqi/1	[length = 1]
 769               	.LCFI36:
 770               		.cfi_def_cfa_offset 6
 771               		.cfi_offset 9, -5
 772 0008 AF92      		push r10	 ;  101	*pushqi/1	[length = 1]
 773               	.LCFI37:
 774               		.cfi_def_cfa_offset 7
 775               		.cfi_offset 10, -6
 776 000a BF92      		push r11	 ;  102	*pushqi/1	[length = 1]
 777               	.LCFI38:
 778               		.cfi_def_cfa_offset 8
 779               		.cfi_offset 11, -7
 780 000c CF92      		push r12	 ;  103	*pushqi/1	[length = 1]
 781               	.LCFI39:
 782               		.cfi_def_cfa_offset 9
 783               		.cfi_offset 12, -8
 784 000e DF92      		push r13	 ;  104	*pushqi/1	[length = 1]
 785               	.LCFI40:
 786               		.cfi_def_cfa_offset 10
 787               		.cfi_offset 13, -9
 788 0010 EF92      		push r14	 ;  105	*pushqi/1	[length = 1]
 789               	.LCFI41:
 790               		.cfi_def_cfa_offset 11
 791               		.cfi_offset 14, -10
 792 0012 FF92      		push r15	 ;  106	*pushqi/1	[length = 1]
 793               	.LCFI42:
 794               		.cfi_def_cfa_offset 12
 795               		.cfi_offset 15, -11
 796 0014 0F93      		push r16	 ;  107	*pushqi/1	[length = 1]
 797               	.LCFI43:
 798               		.cfi_def_cfa_offset 13
 799               		.cfi_offset 16, -12
 800 0016 1F93      		push r17	 ;  108	*pushqi/1	[length = 1]
 801               	.LCFI44:
 802               		.cfi_def_cfa_offset 14
 803               		.cfi_offset 17, -13
 804 0018 CF93      		push r28	 ;  109	*pushqi/1	[length = 1]
 805               	.LCFI45:
 806               		.cfi_def_cfa_offset 15
 807               		.cfi_offset 28, -14
 808 001a DF93      		push r29	 ;  110	*pushqi/1	[length = 1]
 809               	.LCFI46:
 810               		.cfi_def_cfa_offset 16
 811               		.cfi_offset 29, -15
 812               	/* prologue: function */
 813               	/* frame size = 0 */
 814               	/* stack size = 14 */
 815               	.L__stack_usage = 14
 816 001c 3B01      		movw r6,r22	 ;  3	*movhi/1	[length = 1]
 817 001e 4A01      		movw r8,r20	 ;  4	*movhi/1	[length = 1]
 818 0020 5901      		movw r10,r18	 ;  5	*movhi/1	[length = 1]
 819 0022 7801      		movw r14,r16	 ;  6	*movhi/1	[length = 1]
 820               	.LVL54:
 246:bertos/drv/kdebug.c **** 	int i, fail = 0;
 247:bertos/drv/kdebug.c **** 
 248:bertos/drv/kdebug.c **** 	for (i = 0; i < size; i++)
 821               		.loc 1 248 0
 822 0024 EC01      		movw r28,r24	 ;  130	*movhi/1	[length = 1]
 246:bertos/drv/kdebug.c **** 	int i, fail = 0;
 823               		.loc 1 246 0
 824 0026 20E0      		ldi r18,lo8(0)	 ;  9	*movhi/4	[length = 2]
 825 0028 30E0      		ldi r19,hi8(0)
 826               	.LVL55:
 827               		.loc 1 248 0
 828 002a 00E0      		ldi r16,lo8(0)	 ;  10	*movhi/4	[length = 2]
 829 002c 10E0      		ldi r17,hi8(0)
 830               	.LVL56:
 249:bertos/drv/kdebug.c **** 	{
 250:bertos/drv/kdebug.c **** 		if (wall[i] != WALL_VALUE)
 251:bertos/drv/kdebug.c **** 		{
 252:bertos/drv/kdebug.c **** 			klocation(file, line);
 253:bertos/drv/kdebug.c **** 			PGM_FUNC(kputs)(PGM_STR("Wall broken: "));
 254:bertos/drv/kdebug.c **** 			PGM_FUNC(kputs)(name);
 255:bertos/drv/kdebug.c **** 			#if CONFIG_PRINTF
 256:bertos/drv/kdebug.c **** 				PGM_FUNC(kprintf)(PGM_STR("[%d] (0x%p) = 0x%lx\n"), i, wall + i, wall[i]);
 831               		.loc 1 256 0
 832 002e E0E0      		ldi r30,lo8(__c.1475)	 ;  131	*reload_inhi	[length = 4]
 833 0030 CE2E      		mov r12,r30
 834 0032 E0E0      		ldi r30,hi8(__c.1475)
 835 0034 DE2E      		mov r13,r30
 248:bertos/drv/kdebug.c **** 	for (i = 0; i < size; i++)
 836               		.loc 1 248 0
 837 0036 00C0      		rjmp .L35	 ;  132	jump	[length = 1]
 838               	.LVL57:
 839               	.L37:
 250:bertos/drv/kdebug.c **** 		if (wall[i] != WALL_VALUE)
 840               		.loc 1 250 0
 841 0038 8881      		ld r24,Y	 ;  20	*movsi/3	[length = 4]
 842 003a 9981      		ldd r25,Y+1
 843 003c AA81      		ldd r26,Y+2
 844 003e BB81      		ldd r27,Y+3
 845 0040 8E3F      		cpi r24,lo8(-1414673666)	 ;  21	*cmpsi/4	[length = 7]
 846 0042 4AEC      		ldi r20,hi8(-1414673666)
 847 0044 9407      		cpc r25,r20
 848 0046 4DEA      		ldi r20,hlo8(-1414673666)
 849 0048 A407      		cpc r26,r20
 850 004a 4BEA      		ldi r20,hhi8(-1414673666)
 851 004c B407      		cpc r27,r20
 852 004e 01F0      		breq .L36	 ;  22	branch	[length = 1]
 252:bertos/drv/kdebug.c **** 			klocation(file, line);
 853               		.loc 1 252 0
 854 0050 C501      		movw r24,r10	 ;  25	*movhi/1	[length = 1]
 855 0052 B701      		movw r22,r14	 ;  26	*movhi/1	[length = 1]
 856 0054 0E94 0000 		call klocation	 ;  27	call_insn/3	[length = 2]
 857               	.LVL58:
 253:bertos/drv/kdebug.c **** 			PGM_FUNC(kputs)(PGM_STR("Wall broken: "));
 858               		.loc 1 253 0
 859 0058 80E0      		ldi r24,lo8(__c.1473)	 ;  83	*movhi/4	[length = 2]
 860 005a 90E0      		ldi r25,hi8(__c.1473)
 861 005c 0E94 0000 		call kputs_P	 ;  31	call_insn/3	[length = 2]
 254:bertos/drv/kdebug.c **** 			PGM_FUNC(kputs)(name);
 862               		.loc 1 254 0
 863 0060 C401      		movw r24,r8	 ;  33	*movhi/1	[length = 1]
 864 0062 0E94 0000 		call kputs_P	 ;  34	call_insn/3	[length = 2]
 865               		.loc 1 256 0
 866 0066 8DB7      		in r24,__SP_L__	 ;  91	*movhi_sp/2	[length = 2]
 867 0068 9EB7      		in r25,__SP_H__
 868 006a 0A97      		sbiw r24,10	 ;  35	*addhi3/3	[length = 1]
 869 006c 0FB6      		in __tmp_reg__,__SREG__	 ;  92	*movhi_sp/1	[length = 5]
 870 006e F894      		cli
 871 0070 9EBF      		out __SP_H__,r25
 872 0072 0FBE      		out __SREG__,__tmp_reg__
 873 0074 8DBF      		out __SP_L__,r24
 874 0076 EDB7      		in r30,__SP_L__	 ;  93	*movhi_sp/2	[length = 2]
 875 0078 FEB7      		in r31,__SP_H__
 876 007a 3196      		adiw r30,1	 ;  73	*addhi3/2	[length = 1]
 877 007c ADB7      		in r26,__SP_L__	 ;  94	*movhi_sp/2	[length = 2]
 878 007e BEB7      		in r27,__SP_H__
 879 0080 1296      		adiw r26,1+1	 ;  38	*movhi/3	[length = 4]
 880 0082 DC92      		st X,r13
 881 0084 CE92      		st -X,r12
 882 0086 1197      		sbiw r26,1
 883 0088 1383      		std Z+3,r17	 ;  39	*movhi/3	[length = 2]
 884 008a 0283      		std Z+2,r16
 885 008c D583      		std Z+5,r29	 ;  40	*movhi/3	[length = 2]
 886 008e C483      		std Z+4,r28
 887 0090 8881      		ld r24,Y	 ;  41	*movsi/3	[length = 4]
 888 0092 9981      		ldd r25,Y+1
 889 0094 AA81      		ldd r26,Y+2
 890 0096 BB81      		ldd r27,Y+3
 891 0098 8683      		std Z+6,r24	 ;  42	*movsi/4	[length = 4]
 892 009a 9783      		std Z+7,r25
 893 009c A087      		std Z+8,r26
 894 009e B187      		std Z+9,r27
 895 00a0 0E94 0000 		call kprintf_P	 ;  43	call_insn/3	[length = 2]
 896               	.LVL59:
 897 00a4 8DB7      		in r24,__SP_L__	 ;  95	*movhi_sp/2	[length = 2]
 898 00a6 9EB7      		in r25,__SP_H__
 899 00a8 0A96      		adiw r24,10	 ;  45	*addhi3/2	[length = 1]
 900 00aa 0FB6      		in __tmp_reg__,__SREG__	 ;  96	*movhi_sp/1	[length = 5]
 901 00ac F894      		cli
 902 00ae 9EBF      		out __SP_H__,r25
 903 00b0 0FBE      		out __SREG__,__tmp_reg__
 904 00b2 8DBF      		out __SP_L__,r24
 257:bertos/drv/kdebug.c **** 			#else
 258:bertos/drv/kdebug.c **** 				kputchar('\n');
 259:bertos/drv/kdebug.c **** 			#endif
 260:bertos/drv/kdebug.c **** 			fail = 1;
 905               		.loc 1 260 0
 906 00b4 21E0      		ldi r18,lo8(1)	 ;  85	*movhi/4	[length = 2]
 907 00b6 30E0      		ldi r19,hi8(1)
 908               	.LVL60:
 909               	.L36:
 248:bertos/drv/kdebug.c **** 	for (i = 0; i < size; i++)
 910               		.loc 1 248 0
 911 00b8 0F5F      		subi r16,lo8(-(1))	 ;  49	*addhi3/4	[length = 2]
 912 00ba 1F4F      		sbci r17,hi8(-(1))
 913               	.LVL61:
 914 00bc 2496      		adiw r28,4	 ;  51	*addhi3/2	[length = 1]
 915               	.LVL62:
 916               	.L35:
 248:bertos/drv/kdebug.c **** 	for (i = 0; i < size; i++)
 917               		.loc 1 248 0 is_stmt 0 discriminator 1
 918 00be 0615      		cp r16,r6	 ;  57	*cmphi/3	[length = 2]
 919 00c0 1705      		cpc r17,r7
 920 00c2 04F4      		brge .+2	 ;  58	branch	[length = 2]
 921 00c4 00C0      		rjmp .L37
 261:bertos/drv/kdebug.c **** 		}
 262:bertos/drv/kdebug.c **** 	}
 263:bertos/drv/kdebug.c **** 
 264:bertos/drv/kdebug.c **** 	return fail;
 265:bertos/drv/kdebug.c **** }
 922               		.loc 1 265 0 is_stmt 1
 923 00c6 C901      		movw r24,r18	 ;  129	*movhi/1	[length = 1]
 924               	/* epilogue start */
 925 00c8 DF91      		pop r29	 ;  113	popqi	[length = 1]
 926 00ca CF91      		pop r28	 ;  114	popqi	[length = 1]
 927 00cc 1F91      		pop r17	 ;  115	popqi	[length = 1]
 928 00ce 0F91      		pop r16	 ;  116	popqi	[length = 1]
 929               	.LVL63:
 930 00d0 FF90      		pop r15	 ;  117	popqi	[length = 1]
 931 00d2 EF90      		pop r14	 ;  118	popqi	[length = 1]
 932               	.LVL64:
 933 00d4 DF90      		pop r13	 ;  119	popqi	[length = 1]
 934 00d6 CF90      		pop r12	 ;  120	popqi	[length = 1]
 935 00d8 BF90      		pop r11	 ;  121	popqi	[length = 1]
 936 00da AF90      		pop r10	 ;  122	popqi	[length = 1]
 937               	.LVL65:
 938 00dc 9F90      		pop r9	 ;  123	popqi	[length = 1]
 939 00de 8F90      		pop r8	 ;  124	popqi	[length = 1]
 940               	.LVL66:
 941 00e0 7F90      		pop r7	 ;  125	popqi	[length = 1]
 942 00e2 6F90      		pop r6	 ;  126	popqi	[length = 1]
 943               	.LVL67:
 944 00e4 0895      		ret	 ;  127	return_from_epilogue	[length = 1]
 945               		.cfi_endproc
 946               	.LFE14:
 948               		.section	.text.kdump,"ax",@progbits
 949               	.global	kdump
 951               	kdump:
 952               	.LFB15:
 266:bertos/drv/kdebug.c **** 
 267:bertos/drv/kdebug.c **** 
 268:bertos/drv/kdebug.c **** #if CONFIG_PRINTF
 269:bertos/drv/kdebug.c **** 
 270:bertos/drv/kdebug.c **** /**
 271:bertos/drv/kdebug.c ****  * Dump binary data in hex
 272:bertos/drv/kdebug.c ****  */
 273:bertos/drv/kdebug.c **** void kdump(const void *_buf, size_t len)
 274:bertos/drv/kdebug.c **** {
 953               		.loc 1 274 0
 954               		.cfi_startproc
 955               	.LVL68:
 956 0000 EF92      		push r14	 ;  77	*pushqi/1	[length = 1]
 957               	.LCFI47:
 958               		.cfi_def_cfa_offset 3
 959               		.cfi_offset 14, -2
 960 0002 FF92      		push r15	 ;  78	*pushqi/1	[length = 1]
 961               	.LCFI48:
 962               		.cfi_def_cfa_offset 4
 963               		.cfi_offset 15, -3
 964 0004 0F93      		push r16	 ;  79	*pushqi/1	[length = 1]
 965               	.LCFI49:
 966               		.cfi_def_cfa_offset 5
 967               		.cfi_offset 16, -4
 968 0006 1F93      		push r17	 ;  80	*pushqi/1	[length = 1]
 969               	.LCFI50:
 970               		.cfi_def_cfa_offset 6
 971               		.cfi_offset 17, -5
 972 0008 CF93      		push r28	 ;  81	*pushqi/1	[length = 1]
 973               	.LCFI51:
 974               		.cfi_def_cfa_offset 7
 975               		.cfi_offset 28, -6
 976 000a DF93      		push r29	 ;  82	*pushqi/1	[length = 1]
 977               	.LCFI52:
 978               		.cfi_def_cfa_offset 8
 979               		.cfi_offset 29, -7
 980               	/* prologue: function */
 981               	/* frame size = 0 */
 982               	/* stack size = 6 */
 983               	.L__stack_usage = 6
 984 000c EB01      		movw r28,r22	 ;  23	*movhi/1	[length = 1]
 985               	.LVL69:
 275:bertos/drv/kdebug.c **** 	const unsigned char *buf = (const unsigned char *)_buf;
 986               		.loc 1 275 0
 987 000e 8C01      		movw r16,r24	 ;  93	*movhi/1	[length = 1]
 276:bertos/drv/kdebug.c **** 
 277:bertos/drv/kdebug.c **** 	while (len--)
 278:bertos/drv/kdebug.c **** 		kprintf("%02X", *buf++);
 988               		.loc 1 278 0
 989 0010 F0E0      		ldi r31,lo8(__c.1485)	 ;  94	*reload_inhi	[length = 4]
 990 0012 EF2E      		mov r14,r31
 991 0014 F0E0      		ldi r31,hi8(__c.1485)
 992 0016 FF2E      		mov r15,r31
 277:bertos/drv/kdebug.c **** 	while (len--)
 993               		.loc 1 277 0
 994 0018 00C0      		rjmp .L39	 ;  95	jump	[length = 1]
 995               	.LVL70:
 996               	.L40:
 997               		.loc 1 278 0
 998 001a D801      		movw r26,r16	 ;  73	*movhi/1	[length = 1]
 999 001c 8D91      		ld r24,X+	 ;  32	*movqi/4	[length = 1]
 1000 001e 8D01      		movw r16,r26	 ;  74	*movhi/1	[length = 1]
 1001               	.LVL71:
 1002 0020 00D0      		rcall .	 ;  36	*addhi3_sp_R_pc2	[length = 2]
 1003 0022 00D0      		rcall .
 1004               	.LCFI53:
 1005               		.cfi_def_cfa_offset 12
 1006 0024 EDB7      		in r30,__SP_L__	 ;  75	*movhi_sp/2	[length = 2]
 1007 0026 FEB7      		in r31,__SP_H__
 1008 0028 3196      		adiw r30,1	 ;  58	*addhi3/2	[length = 1]
 1009 002a ADB7      		in r26,__SP_L__	 ;  76	*movhi_sp/2	[length = 2]
 1010 002c BEB7      		in r27,__SP_H__
 1011               	.LVL72:
 1012 002e 1296      		adiw r26,1+1	 ;  39	*movhi/3	[length = 4]
 1013 0030 FC92      		st X,r15
 1014 0032 EE92      		st -X,r14
 1015 0034 1197      		sbiw r26,1
 1016 0036 8283      		std Z+2,r24	 ;  67	*movqi/3	[length = 1]
 1017 0038 1382      		std Z+3,__zero_reg__	 ;  68	*movqi/3	[length = 1]
 1018               		.cfi_escape 0x2e,0x4
 1019 003a 0E94 0000 		call kprintf_P	 ;  41	call_insn/3	[length = 2]
 1020 003e 2197      		sbiw r28,1	 ;  42	*addhi3/3	[length = 1]
 1021 0040 0F90      		pop __tmp_reg__	 ;  43	*addhi3_sp_R_pc2	[length = 4]
 1022 0042 0F90      		pop __tmp_reg__
 1023 0044 0F90      		pop __tmp_reg__
 1024 0046 0F90      		pop __tmp_reg__
 1025               	.LCFI54:
 1026               		.cfi_def_cfa_offset 8
 1027               	.LVL73:
 1028               	.L39:
 277:bertos/drv/kdebug.c **** 	while (len--)
 1029               		.loc 1 277 0 discriminator 1
 1030 0048 2097      		sbiw r28,0	 ;  50	*cmphi/1	[length = 1]
 1031 004a 01F4      		brne .L40	 ;  51	branch	[length = 1]
 279:bertos/drv/kdebug.c **** 	kputchar('\n');
 1032               		.loc 1 279 0
 1033 004c 8AE0      		ldi r24,lo8(10)	 ;  54	*movqi/2	[length = 1]
 1034               		.cfi_escape 0x2e,0
 1035 004e 0E94 0000 		call kputchar	 ;  55	call_insn/3	[length = 2]
 1036               	/* epilogue start */
 280:bertos/drv/kdebug.c **** }
 1037               		.loc 1 280 0
 1038 0052 DF91      		pop r29	 ;  85	popqi	[length = 1]
 1039 0054 CF91      		pop r28	 ;  86	popqi	[length = 1]
 1040 0056 1F91      		pop r17	 ;  87	popqi	[length = 1]
 1041 0058 0F91      		pop r16	 ;  88	popqi	[length = 1]
 1042               	.LVL74:
 1043 005a FF90      		pop r15	 ;  89	popqi	[length = 1]
 1044 005c EF90      		pop r14	 ;  90	popqi	[length = 1]
 1045 005e 0895      		ret	 ;  91	return_from_epilogue	[length = 1]
 1046               		.cfi_endproc
 1047               	.LFE15:
 1049               		.section	.progmem.data,"a",@progbits
 1052               	__c.1374:
 1053 0000 0A0A 2A2A 		.string	"\n\n*** BeRTOS DBG START ***\n"
 1053      2A20 4265 
 1053      5254 4F53 
 1053      2044 4247 
 1053      2053 5441 
 1056               	__c.1433:
 1057 001c 4173 7365 		.string	"Assertion failed: "
 1057      7274 696F 
 1057      6E20 6661 
 1057      696C 6564 
 1057      3A20 00
 1060               	__c.1426:
 1061 002f 3A20 00   		.string	": "
 1064               	__c.1438:
 1065 0032 2573 2829 		.string	"%s()\n"
 1065      0A00 
 1068               	__c.1445:
 1069 0038 2573 2829 		.string	"%s(): "
 1069      3A20 00
 1072               	__c.1453:
 1073 003f 496E 7661 		.string	"Invalid ptr: "
 1073      6C69 6420 
 1073      7074 723A 
 1073      2000 
 1076               	__c.1455:
 1077 004d 203D 2030 		.string	" = 0x%p\n"
 1077      7825 700A 
 1077      00
 1080               	__c.1473:
 1081 0056 5761 6C6C 		.string	"Wall broken: "
 1081      2062 726F 
 1081      6B65 6E3A 
 1081      2000 
 1084               	__c.1475:
 1085 0064 5B25 645D 		.string	"[%d] (0x%p) = 0x%lx\n"
 1085      2028 3078 
 1085      2570 2920 
 1085      3D20 3078 
 1085      256C 780A 
 1088               	__c.1485:
 1089 0079 2530 3258 		.string	"%02X"
 1089      00
 1090               		.text
 1091               	.Letext0:
 1092               		.file 3 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/include/stddef.h"
 1093               		.file 4 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h"
 1094               		.file 5 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/include/stdarg.h"
 1095               		.file 6 "bertos/cpu/types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 kdebug.c
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:2      *ABS*:0000003f __SREG__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:3      *ABS*:0000003e __SP_H__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:4      *ABS*:0000003d __SP_L__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:5      *ABS*:00000034 __CCP__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:7      *ABS*:00000001 __zero_reg__
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:15     .text.__kputchar:00000000 __kputchar
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:58     .text.kvprintf_P:00000000 kvprintf_P
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:107    .text.kputchar:00000000 kputchar
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:152    .text.kprintf_P:00000000 kprintf_P
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:191    .text.kputs_P:00000000 kputs_P
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:271    .text.kdbg_init:00000000 kdbg_init
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:1052   .progmem.data:00000000 __c.1374
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:306    .text.kputnum:00000000 kputnum
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:434    .text.klocation:00000000 klocation
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:1060   .progmem.data:0000002f __c.1426
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:477    .text.__bassert_P:00000000 __bassert_P
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:1056   .progmem.data:0000001c __c.1433
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:526    .text.__trace_P:00000000 __trace_P
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:1064   .progmem.data:00000032 __c.1438
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:566    .text.__tracemsg_P:00000000 __tracemsg_P
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:1068   .progmem.data:00000038 __c.1445
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:629    .text.__invalid_ptr_P:00000000 __invalid_ptr_P
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:1072   .progmem.data:0000003f __c.1453
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:1076   .progmem.data:0000004d __c.1455
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:709    .text.__init_wall:00000000 __init_wall
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:751    .text.__check_wall_P:00000000 __check_wall_P
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:1084   .progmem.data:00000064 __c.1475
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:1080   .progmem.data:00000056 __c.1473
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:951    .text.kdump:00000000 kdump
/var/folders/yq/1c5lpctj6dd1dv230ntn69lm0000gn/T//cc36zQ9H.s:1088   .progmem.data:00000079 __c.1485

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
_formatted_write_P
__divmodhi4
